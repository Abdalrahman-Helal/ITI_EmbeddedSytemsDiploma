
ITI_Day13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000327e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000327e  000032f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027f0  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ece  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00006e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00008e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000afb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b415  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bcc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 63 06 	call	0xcc6	; 0xcc6 <main>
      7a:	0c 94 3d 19 	jmp	0x327a	; 0x327a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <main>:


#define F_CPU 8000000UL

void main(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	e8 97       	sbiw	r28, 0x38	; 56
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61

	//	MDIO_vSetPinDir(DIO_PORTC , PIN1 , DIO_OUTPUT);

	//	MDIO_vSetPinDir(DIO_PORTD , PIN0 , DIO_OUTPUT);

	MDIO_vSetPinDir(DIO_PORTB ,PIN0 , DIO_OUTPUT);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	0e 94 8f 08 	call	0x111e	; 0x111e <MDIO_vSetPinDir>
	MDIO_vSetPortDir(DIO_PORTB,0b00001111);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	6f e0       	ldi	r22, 0x0F	; 15
     ce8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>



	while(1)
	{
		MDIO_vSetPinVal(DIO_PORTB,PIN0 ,DIO_LOW);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN1 ,DIO_HIGH);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN2 ,DIO_HIGH);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	62 e0       	ldi	r22, 0x02	; 2
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN3 ,DIO_HIGH);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	63 e0       	ldi	r22, 0x03	; 3
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	aa e7       	ldi	r26, 0x7A	; 122
     d1a:	b4 e4       	ldi	r27, 0x44	; 68
     d1c:	8d ab       	std	Y+53, r24	; 0x35
     d1e:	9e ab       	std	Y+54, r25	; 0x36
     d20:	af ab       	std	Y+55, r26	; 0x37
     d22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d24:	6d a9       	ldd	r22, Y+53	; 0x35
     d26:	7e a9       	ldd	r23, Y+54	; 0x36
     d28:	8f a9       	ldd	r24, Y+55	; 0x37
     d2a:	98 ad       	ldd	r25, Y+56	; 0x38
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a ef       	ldi	r20, 0xFA	; 250
     d32:	54 e4       	ldi	r21, 0x44	; 68
     d34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	89 ab       	std	Y+49, r24	; 0x31
     d3e:	9a ab       	std	Y+50, r25	; 0x32
     d40:	ab ab       	std	Y+51, r26	; 0x33
     d42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d44:	69 a9       	ldd	r22, Y+49	; 0x31
     d46:	7a a9       	ldd	r23, Y+50	; 0x32
     d48:	8b a9       	ldd	r24, Y+51	; 0x33
     d4a:	9c a9       	ldd	r25, Y+52	; 0x34
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d58:	88 23       	and	r24, r24
     d5a:	2c f4       	brge	.+10     	; 0xd66 <main+0xa0>
		__ticks = 1;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	98 ab       	std	Y+48, r25	; 0x30
     d62:	8f a7       	std	Y+47, r24	; 0x2f
     d64:	3f c0       	rjmp	.+126    	; 0xde4 <main+0x11e>
	else if (__tmp > 65535)
     d66:	69 a9       	ldd	r22, Y+49	; 0x31
     d68:	7a a9       	ldd	r23, Y+50	; 0x32
     d6a:	8b a9       	ldd	r24, Y+51	; 0x33
     d6c:	9c a9       	ldd	r25, Y+52	; 0x34
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	4c f5       	brge	.+82     	; 0xdd0 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	6d a9       	ldd	r22, Y+53	; 0x35
     d80:	7e a9       	ldd	r23, Y+54	; 0x36
     d82:	8f a9       	ldd	r24, Y+55	; 0x37
     d84:	98 ad       	ldd	r25, Y+56	; 0x38
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	98 ab       	std	Y+48, r25	; 0x30
     da4:	8f a7       	std	Y+47, r24	; 0x2f
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <main+0x100>
     da8:	88 ec       	ldi	r24, 0xC8	; 200
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9e a7       	std	Y+46, r25	; 0x2e
     dae:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db0:	8d a5       	ldd	r24, Y+45	; 0x2d
     db2:	9e a5       	ldd	r25, Y+46	; 0x2e
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <main+0xee>
     db8:	9e a7       	std	Y+46, r25	; 0x2e
     dba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
     dbe:	98 a9       	ldd	r25, Y+48	; 0x30
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	98 ab       	std	Y+48, r25	; 0x30
     dc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc8:	98 a9       	ldd	r25, Y+48	; 0x30
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	69 f7       	brne	.-38     	; 0xda8 <main+0xe2>
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd0:	69 a9       	ldd	r22, Y+49	; 0x31
     dd2:	7a a9       	ldd	r23, Y+50	; 0x32
     dd4:	8b a9       	ldd	r24, Y+51	; 0x33
     dd6:	9c a9       	ldd	r25, Y+52	; 0x34
     dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	98 ab       	std	Y+48, r25	; 0x30
     de2:	8f a7       	std	Y+47, r24	; 0x2f
     de4:	8f a5       	ldd	r24, Y+47	; 0x2f
     de6:	98 a9       	ldd	r25, Y+48	; 0x30
     de8:	9c a7       	std	Y+44, r25	; 0x2c
     dea:	8b a7       	std	Y+43, r24	; 0x2b
     dec:	8b a5       	ldd	r24, Y+43	; 0x2b
     dee:	9c a5       	ldd	r25, Y+44	; 0x2c
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <main+0x12a>
     df4:	9c a7       	std	Y+44, r25	; 0x2c
     df6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		MDIO_vSetPinVal(DIO_PORTB,PIN0 ,DIO_HIGH);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN1 ,DIO_LOW);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN2 ,DIO_HIGH);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN3 ,DIO_HIGH);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	63 e0       	ldi	r22, 0x03	; 3
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	aa e7       	ldi	r26, 0x7A	; 122
     e26:	b4 e4       	ldi	r27, 0x44	; 68
     e28:	8f a3       	std	Y+39, r24	; 0x27
     e2a:	98 a7       	std	Y+40, r25	; 0x28
     e2c:	a9 a7       	std	Y+41, r26	; 0x29
     e2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e30:	6f a1       	ldd	r22, Y+39	; 0x27
     e32:	78 a5       	ldd	r23, Y+40	; 0x28
     e34:	89 a5       	ldd	r24, Y+41	; 0x29
     e36:	9a a5       	ldd	r25, Y+42	; 0x2a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4a ef       	ldi	r20, 0xFA	; 250
     e3e:	54 e4       	ldi	r21, 0x44	; 68
     e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8b a3       	std	Y+35, r24	; 0x23
     e4a:	9c a3       	std	Y+36, r25	; 0x24
     e4c:	ad a3       	std	Y+37, r26	; 0x25
     e4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e50:	6b a1       	ldd	r22, Y+35	; 0x23
     e52:	7c a1       	ldd	r23, Y+36	; 0x24
     e54:	8d a1       	ldd	r24, Y+37	; 0x25
     e56:	9e a1       	ldd	r25, Y+38	; 0x26
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e64:	88 23       	and	r24, r24
     e66:	2c f4       	brge	.+10     	; 0xe72 <main+0x1ac>
		__ticks = 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9a a3       	std	Y+34, r25	; 0x22
     e6e:	89 a3       	std	Y+33, r24	; 0x21
     e70:	3f c0       	rjmp	.+126    	; 0xef0 <main+0x22a>
	else if (__tmp > 65535)
     e72:	6b a1       	ldd	r22, Y+35	; 0x23
     e74:	7c a1       	ldd	r23, Y+36	; 0x24
     e76:	8d a1       	ldd	r24, Y+37	; 0x25
     e78:	9e a1       	ldd	r25, Y+38	; 0x26
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	4f e7       	ldi	r20, 0x7F	; 127
     e80:	57 e4       	ldi	r21, 0x47	; 71
     e82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e86:	18 16       	cp	r1, r24
     e88:	4c f5       	brge	.+82     	; 0xedc <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8a:	6f a1       	ldd	r22, Y+39	; 0x27
     e8c:	78 a5       	ldd	r23, Y+40	; 0x28
     e8e:	89 a5       	ldd	r24, Y+41	; 0x29
     e90:	9a a5       	ldd	r25, Y+42	; 0x2a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e2       	ldi	r20, 0x20	; 32
     e98:	51 e4       	ldi	r21, 0x41	; 65
     e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9a a3       	std	Y+34, r25	; 0x22
     eb0:	89 a3       	std	Y+33, r24	; 0x21
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <main+0x20c>
     eb4:	88 ec       	ldi	r24, 0xC8	; 200
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	98 a3       	std	Y+32, r25	; 0x20
     eba:	8f 8f       	std	Y+31, r24	; 0x1f
     ebc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ebe:	98 a1       	ldd	r25, Y+32	; 0x20
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <main+0x1fa>
     ec4:	98 a3       	std	Y+32, r25	; 0x20
     ec6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec8:	89 a1       	ldd	r24, Y+33	; 0x21
     eca:	9a a1       	ldd	r25, Y+34	; 0x22
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9a a3       	std	Y+34, r25	; 0x22
     ed0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	89 a1       	ldd	r24, Y+33	; 0x21
     ed4:	9a a1       	ldd	r25, Y+34	; 0x22
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	69 f7       	brne	.-38     	; 0xeb4 <main+0x1ee>
     eda:	14 c0       	rjmp	.+40     	; 0xf04 <main+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	6b a1       	ldd	r22, Y+35	; 0x23
     ede:	7c a1       	ldd	r23, Y+36	; 0x24
     ee0:	8d a1       	ldd	r24, Y+37	; 0x25
     ee2:	9e a1       	ldd	r25, Y+38	; 0x26
     ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9a a3       	std	Y+34, r25	; 0x22
     eee:	89 a3       	std	Y+33, r24	; 0x21
     ef0:	89 a1       	ldd	r24, Y+33	; 0x21
     ef2:	9a a1       	ldd	r25, Y+34	; 0x22
     ef4:	9e 8f       	std	Y+30, r25	; 0x1e
     ef6:	8d 8f       	std	Y+29, r24	; 0x1d
     ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <main+0x236>
     f00:	9e 8f       	std	Y+30, r25	; 0x1e
     f02:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		MDIO_vSetPinVal(DIO_PORTB,PIN0 ,DIO_HIGH);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN1 ,DIO_HIGH);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN2 ,DIO_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN3 ,DIO_HIGH);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	63 e0       	ldi	r22, 0x03	; 3
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	aa e7       	ldi	r26, 0x7A	; 122
     f32:	b4 e4       	ldi	r27, 0x44	; 68
     f34:	89 8f       	std	Y+25, r24	; 0x19
     f36:	9a 8f       	std	Y+26, r25	; 0x1a
     f38:	ab 8f       	std	Y+27, r26	; 0x1b
     f3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3c:	69 8d       	ldd	r22, Y+25	; 0x19
     f3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f42:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	4a ef       	ldi	r20, 0xFA	; 250
     f4a:	54 e4       	ldi	r21, 0x44	; 68
     f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8d 8b       	std	Y+21, r24	; 0x15
     f56:	9e 8b       	std	Y+22, r25	; 0x16
     f58:	af 8b       	std	Y+23, r26	; 0x17
     f5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f5c:	6d 89       	ldd	r22, Y+21	; 0x15
     f5e:	7e 89       	ldd	r23, Y+22	; 0x16
     f60:	8f 89       	ldd	r24, Y+23	; 0x17
     f62:	98 8d       	ldd	r25, Y+24	; 0x18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e8       	ldi	r20, 0x80	; 128
     f6a:	5f e3       	ldi	r21, 0x3F	; 63
     f6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f70:	88 23       	and	r24, r24
     f72:	2c f4       	brge	.+10     	; 0xf7e <main+0x2b8>
		__ticks = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
     f7c:	3f c0       	rjmp	.+126    	; 0xffc <main+0x336>
	else if (__tmp > 65535)
     f7e:	6d 89       	ldd	r22, Y+21	; 0x15
     f80:	7e 89       	ldd	r23, Y+22	; 0x16
     f82:	8f 89       	ldd	r24, Y+23	; 0x17
     f84:	98 8d       	ldd	r25, Y+24	; 0x18
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	3f ef       	ldi	r19, 0xFF	; 255
     f8a:	4f e7       	ldi	r20, 0x7F	; 127
     f8c:	57 e4       	ldi	r21, 0x47	; 71
     f8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f92:	18 16       	cp	r1, r24
     f94:	4c f5       	brge	.+82     	; 0xfe8 <main+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f96:	69 8d       	ldd	r22, Y+25	; 0x19
     f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e2       	ldi	r20, 0x20	; 32
     fa4:	51 e4       	ldi	r21, 0x41	; 65
     fa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	9c 8b       	std	Y+20, r25	; 0x14
     fbc:	8b 8b       	std	Y+19, r24	; 0x13
     fbe:	0f c0       	rjmp	.+30     	; 0xfde <main+0x318>
     fc0:	88 ec       	ldi	r24, 0xC8	; 200
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9a 8b       	std	Y+18, r25	; 0x12
     fc6:	89 8b       	std	Y+17, r24	; 0x11
     fc8:	89 89       	ldd	r24, Y+17	; 0x11
     fca:	9a 89       	ldd	r25, Y+18	; 0x12
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <main+0x306>
     fd0:	9a 8b       	std	Y+18, r25	; 0x12
     fd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd4:	8b 89       	ldd	r24, Y+19	; 0x13
     fd6:	9c 89       	ldd	r25, Y+20	; 0x14
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fde:	8b 89       	ldd	r24, Y+19	; 0x13
     fe0:	9c 89       	ldd	r25, Y+20	; 0x14
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	69 f7       	brne	.-38     	; 0xfc0 <main+0x2fa>
     fe6:	14 c0       	rjmp	.+40     	; 0x1010 <main+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	9c 8b       	std	Y+20, r25	; 0x14
     ffa:	8b 8b       	std	Y+19, r24	; 0x13
     ffc:	8b 89       	ldd	r24, Y+19	; 0x13
     ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    1000:	98 8b       	std	Y+16, r25	; 0x10
    1002:	8f 87       	std	Y+15, r24	; 0x0f
    1004:	8f 85       	ldd	r24, Y+15	; 0x0f
    1006:	98 89       	ldd	r25, Y+16	; 0x10
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x342>
    100c:	98 8b       	std	Y+16, r25	; 0x10
    100e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		MDIO_vSetPinVal(DIO_PORTB,PIN0 ,DIO_HIGH);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN1 ,DIO_HIGH);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN2 ,DIO_HIGH);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTB,PIN3 ,DIO_LOW);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	63 e0       	ldi	r22, 0x03	; 3
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	aa e7       	ldi	r26, 0x7A	; 122
    103e:	b4 e4       	ldi	r27, 0x44	; 68
    1040:	8b 87       	std	Y+11, r24	; 0x0b
    1042:	9c 87       	std	Y+12, r25	; 0x0c
    1044:	ad 87       	std	Y+13, r26	; 0x0d
    1046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1048:	6b 85       	ldd	r22, Y+11	; 0x0b
    104a:	7c 85       	ldd	r23, Y+12	; 0x0c
    104c:	8d 85       	ldd	r24, Y+13	; 0x0d
    104e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4a ef       	ldi	r20, 0xFA	; 250
    1056:	54 e4       	ldi	r21, 0x44	; 68
    1058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8f 83       	std	Y+7, r24	; 0x07
    1062:	98 87       	std	Y+8, r25	; 0x08
    1064:	a9 87       	std	Y+9, r26	; 0x09
    1066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1068:	6f 81       	ldd	r22, Y+7	; 0x07
    106a:	78 85       	ldd	r23, Y+8	; 0x08
    106c:	89 85       	ldd	r24, Y+9	; 0x09
    106e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	2c f4       	brge	.+10     	; 0x108a <main+0x3c4>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	3f c0       	rjmp	.+126    	; 0x1108 <main+0x442>
	else if (__tmp > 65535)
    108a:	6f 81       	ldd	r22, Y+7	; 0x07
    108c:	78 85       	ldd	r23, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	3f ef       	ldi	r19, 0xFF	; 255
    1096:	4f e7       	ldi	r20, 0x7F	; 127
    1098:	57 e4       	ldi	r21, 0x47	; 71
    109a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    109e:	18 16       	cp	r1, r24
    10a0:	4c f5       	brge	.+82     	; 0x10f4 <main+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <main+0x424>
    10cc:	88 ec       	ldi	r24, 0xC8	; 200
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 83       	std	Y+4, r25	; 0x04
    10d2:	8b 83       	std	Y+3, r24	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <main+0x412>
    10dc:	9c 83       	std	Y+4, r25	; 0x04
    10de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f7       	brne	.-38     	; 0x10cc <main+0x406>
    10f2:	fc cd       	rjmp	.-1032   	; 0xcec <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	6f 81       	ldd	r22, Y+7	; 0x07
    10f6:	78 85       	ldd	r23, Y+8	; 0x08
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <main+0x44e>
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	e7 cd       	rjmp	.-1074   	; 0xcec <main+0x26>

0000111e <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	2d 97       	sbiw	r28, 0x0d	; 13
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	6a 83       	std	Y+2, r22	; 0x02
    1136:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <MDIO_vSetPinDir+0x22>
    113e:	09 c1       	rjmp	.+530    	; 0x1352 <MDIO_vSetPinDir+0x234>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <MDIO_vSetPinDir+0x2a>
    1146:	05 c1       	rjmp	.+522    	; 0x1352 <MDIO_vSetPinDir+0x234>
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	08 f0       	brcs	.+2      	; 0x1150 <MDIO_vSetPinDir+0x32>
    114e:	01 c1       	rjmp	.+514    	; 0x1352 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3d 87       	std	Y+13, r19	; 0x0d
    1158:	2c 87       	std	Y+12, r18	; 0x0c
    115a:	8c 85       	ldd	r24, Y+12	; 0x0c
    115c:	9d 85       	ldd	r25, Y+13	; 0x0d
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <MDIO_vSetPinDir+0x48>
    1164:	4f c0       	rjmp	.+158    	; 0x1204 <MDIO_vSetPinDir+0xe6>
    1166:	2c 85       	ldd	r18, Y+12	; 0x0c
    1168:	3d 85       	ldd	r19, Y+13	; 0x0d
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	2c f4       	brge	.+10     	; 0x117a <MDIO_vSetPinDir+0x5c>
    1170:	8c 85       	ldd	r24, Y+12	; 0x0c
    1172:	9d 85       	ldd	r25, Y+13	; 0x0d
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	71 f0       	breq	.+28     	; 0x1194 <MDIO_vSetPinDir+0x76>
    1178:	ec c0       	rjmp	.+472    	; 0x1352 <MDIO_vSetPinDir+0x234>
    117a:	2c 85       	ldd	r18, Y+12	; 0x0c
    117c:	3d 85       	ldd	r19, Y+13	; 0x0d
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <MDIO_vSetPinDir+0x68>
    1184:	77 c0       	rjmp	.+238    	; 0x1274 <MDIO_vSetPinDir+0x156>
    1186:	8c 85       	ldd	r24, Y+12	; 0x0c
    1188:	9d 85       	ldd	r25, Y+13	; 0x0d
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <MDIO_vSetPinDir+0x74>
    1190:	a9 c0       	rjmp	.+338    	; 0x12e4 <MDIO_vSetPinDir+0x1c6>
    1192:	df c0       	rjmp	.+446    	; 0x1352 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3b 87       	std	Y+11, r19	; 0x0b
    119c:	2a 87       	std	Y+10, r18	; 0x0a
    119e:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	31 f0       	breq	.+12     	; 0x11b2 <MDIO_vSetPinDir+0x94>
    11a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11aa:	21 30       	cpi	r18, 0x01	; 1
    11ac:	31 05       	cpc	r19, r1
    11ae:	b1 f0       	breq	.+44     	; 0x11dc <MDIO_vSetPinDir+0xbe>
    11b0:	d0 c0       	rjmp	.+416    	; 0x1352 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    11b2:	aa e3       	ldi	r26, 0x3A	; 58
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <MDIO_vSetPinDir+0xb2>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <MDIO_vSetPinDir+0xae>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	bb c0       	rjmp	.+374    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    11dc:	aa e3       	ldi	r26, 0x3A	; 58
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <MDIO_vSetPinDir+0xdc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <MDIO_vSetPinDir+0xd8>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	a7 c0       	rjmp	.+334    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	39 87       	std	Y+9, r19	; 0x09
    120c:	28 87       	std	Y+8, r18	; 0x08
    120e:	88 85       	ldd	r24, Y+8	; 0x08
    1210:	99 85       	ldd	r25, Y+9	; 0x09
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	31 f0       	breq	.+12     	; 0x1222 <MDIO_vSetPinDir+0x104>
    1216:	28 85       	ldd	r18, Y+8	; 0x08
    1218:	39 85       	ldd	r19, Y+9	; 0x09
    121a:	21 30       	cpi	r18, 0x01	; 1
    121c:	31 05       	cpc	r19, r1
    121e:	b1 f0       	breq	.+44     	; 0x124c <MDIO_vSetPinDir+0x12e>
    1220:	98 c0       	rjmp	.+304    	; 0x1352 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    1222:	a7 e3       	ldi	r26, 0x37	; 55
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <MDIO_vSetPinDir+0x122>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <MDIO_vSetPinDir+0x11e>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	83 c0       	rjmp	.+262    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    124c:	a7 e3       	ldi	r26, 0x37	; 55
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e7 e3       	ldi	r30, 0x37	; 55
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <MDIO_vSetPinDir+0x14c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <MDIO_vSetPinDir+0x148>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	6f c0       	rjmp	.+222    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3f 83       	std	Y+7, r19	; 0x07
    127c:	2e 83       	std	Y+6, r18	; 0x06
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	31 f0       	breq	.+12     	; 0x1292 <MDIO_vSetPinDir+0x174>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	b1 f0       	breq	.+44     	; 0x12bc <MDIO_vSetPinDir+0x19e>
    1290:	60 c0       	rjmp	.+192    	; 0x1352 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    1292:	a4 e3       	ldi	r26, 0x34	; 52
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <MDIO_vSetPinDir+0x192>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <MDIO_vSetPinDir+0x18e>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	4b c0       	rjmp	.+150    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    12bc:	a4 e3       	ldi	r26, 0x34	; 52
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e4 e3       	ldi	r30, 0x34	; 52
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <MDIO_vSetPinDir+0x1bc>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <MDIO_vSetPinDir+0x1b8>
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	37 c0       	rjmp	.+110    	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	31 f0       	breq	.+12     	; 0x1302 <MDIO_vSetPinDir+0x1e4>
    12f6:	2c 81       	ldd	r18, Y+4	; 0x04
    12f8:	3d 81       	ldd	r19, Y+5	; 0x05
    12fa:	21 30       	cpi	r18, 0x01	; 1
    12fc:	31 05       	cpc	r19, r1
    12fe:	b1 f0       	breq	.+44     	; 0x132c <MDIO_vSetPinDir+0x20e>
    1300:	28 c0       	rjmp	.+80     	; 0x1352 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    1302:	a1 e3       	ldi	r26, 0x31	; 49
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e1 e3       	ldi	r30, 0x31	; 49
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <MDIO_vSetPinDir+0x202>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <MDIO_vSetPinDir+0x1fe>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	13 c0       	rjmp	.+38     	; 0x1352 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    132c:	a1 e3       	ldi	r26, 0x31	; 49
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <MDIO_vSetPinDir+0x22c>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <MDIO_vSetPinDir+0x228>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1352:	2d 96       	adiw	r28, 0x0d	; 13
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	2d 97       	sbiw	r28, 0x0d	; 13
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	6a 83       	std	Y+2, r22	; 0x02
    137c:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	84 30       	cpi	r24, 0x04	; 4
    1382:	08 f0       	brcs	.+2      	; 0x1386 <MDIO_vSetPinVal+0x22>
    1384:	09 c1       	rjmp	.+530    	; 0x1598 <MDIO_vSetPinVal+0x234>
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <MDIO_vSetPinVal+0x2a>
    138c:	05 c1       	rjmp	.+522    	; 0x1598 <MDIO_vSetPinVal+0x234>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	08 f0       	brcs	.+2      	; 0x1396 <MDIO_vSetPinVal+0x32>
    1394:	01 c1       	rjmp	.+514    	; 0x1598 <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3d 87       	std	Y+13, r19	; 0x0d
    139e:	2c 87       	std	Y+12, r18	; 0x0c
    13a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <MDIO_vSetPinVal+0x48>
    13aa:	4f c0       	rjmp	.+158    	; 0x144a <MDIO_vSetPinVal+0xe6>
    13ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <MDIO_vSetPinVal+0x5c>
    13b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	71 f0       	breq	.+28     	; 0x13da <MDIO_vSetPinVal+0x76>
    13be:	ec c0       	rjmp	.+472    	; 0x1598 <MDIO_vSetPinVal+0x234>
    13c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <MDIO_vSetPinVal+0x68>
    13ca:	77 c0       	rjmp	.+238    	; 0x14ba <MDIO_vSetPinVal+0x156>
    13cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <MDIO_vSetPinVal+0x74>
    13d6:	a9 c0       	rjmp	.+338    	; 0x152a <MDIO_vSetPinVal+0x1c6>
    13d8:	df c0       	rjmp	.+446    	; 0x1598 <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3b 87       	std	Y+11, r19	; 0x0b
    13e2:	2a 87       	std	Y+10, r18	; 0x0a
    13e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <MDIO_vSetPinVal+0x94>
    13ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    13ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	b1 f0       	breq	.+44     	; 0x1422 <MDIO_vSetPinVal+0xbe>
    13f6:	d0 c0       	rjmp	.+416    	; 0x1598 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <MDIO_vSetPinVal+0xb2>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <MDIO_vSetPinVal+0xae>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	bb c0       	rjmp	.+374    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    1422:	ab e3       	ldi	r26, 0x3B	; 59
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	eb e3       	ldi	r30, 0x3B	; 59
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <MDIO_vSetPinVal+0xdc>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <MDIO_vSetPinVal+0xd8>
    1444:	84 2b       	or	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	a7 c0       	rjmp	.+334    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	39 87       	std	Y+9, r19	; 0x09
    1452:	28 87       	std	Y+8, r18	; 0x08
    1454:	88 85       	ldd	r24, Y+8	; 0x08
    1456:	99 85       	ldd	r25, Y+9	; 0x09
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	31 f0       	breq	.+12     	; 0x1468 <MDIO_vSetPinVal+0x104>
    145c:	28 85       	ldd	r18, Y+8	; 0x08
    145e:	39 85       	ldd	r19, Y+9	; 0x09
    1460:	21 30       	cpi	r18, 0x01	; 1
    1462:	31 05       	cpc	r19, r1
    1464:	b1 f0       	breq	.+44     	; 0x1492 <MDIO_vSetPinVal+0x12e>
    1466:	98 c0       	rjmp	.+304    	; 0x1598 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    1468:	a8 e3       	ldi	r26, 0x38	; 56
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e3       	ldi	r30, 0x38	; 56
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <MDIO_vSetPinVal+0x122>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <MDIO_vSetPinVal+0x11e>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	83 c0       	rjmp	.+262    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <MDIO_vSetPinVal+0x14c>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <MDIO_vSetPinVal+0x148>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	6f c0       	rjmp	.+222    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3f 83       	std	Y+7, r19	; 0x07
    14c2:	2e 83       	std	Y+6, r18	; 0x06
    14c4:	8e 81       	ldd	r24, Y+6	; 0x06
    14c6:	9f 81       	ldd	r25, Y+7	; 0x07
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <MDIO_vSetPinVal+0x174>
    14cc:	2e 81       	ldd	r18, Y+6	; 0x06
    14ce:	3f 81       	ldd	r19, Y+7	; 0x07
    14d0:	21 30       	cpi	r18, 0x01	; 1
    14d2:	31 05       	cpc	r19, r1
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <MDIO_vSetPinVal+0x19e>
    14d6:	60 c0       	rjmp	.+192    	; 0x1598 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    14d8:	a5 e3       	ldi	r26, 0x35	; 53
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <MDIO_vSetPinVal+0x192>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <MDIO_vSetPinVal+0x18e>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	4b c0       	rjmp	.+150    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <MDIO_vSetPinVal+0x1bc>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <MDIO_vSetPinVal+0x1b8>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	37 c0       	rjmp	.+110    	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	31 f0       	breq	.+12     	; 0x1548 <MDIO_vSetPinVal+0x1e4>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	31 05       	cpc	r19, r1
    1544:	b1 f0       	breq	.+44     	; 0x1572 <MDIO_vSetPinVal+0x20e>
    1546:	28 c0       	rjmp	.+80     	; 0x1598 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    1548:	a2 e3       	ldi	r26, 0x32	; 50
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e2 e3       	ldi	r30, 0x32	; 50
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <MDIO_vSetPinVal+0x202>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <MDIO_vSetPinVal+0x1fe>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    1572:	a2 e3       	ldi	r26, 0x32	; 50
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <MDIO_vSetPinVal+0x22c>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <MDIO_vSetPinVal+0x228>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1598:	2d 96       	adiw	r28, 0x0d	; 13
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <MDIO_GetPinVal+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <MDIO_GetPinVal+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <MDIO_GetPinVal+0x1a>
    15c2:	6b c0       	rjmp	.+214    	; 0x169a <MDIO_GetPinVal+0xf0>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <MDIO_GetPinVal+0x22>
    15ca:	67 c0       	rjmp	.+206    	; 0x169a <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	4c 81       	ldd	r20, Y+4	; 0x04
    15d8:	5d 81       	ldd	r21, Y+5	; 0x05
    15da:	41 30       	cpi	r20, 0x01	; 1
    15dc:	51 05       	cpc	r21, r1
    15de:	41 f1       	breq	.+80     	; 0x1630 <MDIO_GetPinVal+0x86>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	91 05       	cpc	r25, r1
    15e8:	34 f4       	brge	.+12     	; 0x15f6 <MDIO_GetPinVal+0x4c>
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	21 15       	cp	r18, r1
    15f0:	31 05       	cpc	r19, r1
    15f2:	61 f0       	breq	.+24     	; 0x160c <MDIO_GetPinVal+0x62>
    15f4:	52 c0       	rjmp	.+164    	; 0x169a <MDIO_GetPinVal+0xf0>
    15f6:	4c 81       	ldd	r20, Y+4	; 0x04
    15f8:	5d 81       	ldd	r21, Y+5	; 0x05
    15fa:	42 30       	cpi	r20, 0x02	; 2
    15fc:	51 05       	cpc	r21, r1
    15fe:	51 f1       	breq	.+84     	; 0x1654 <MDIO_GetPinVal+0xaa>
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	b9 f1       	breq	.+110    	; 0x1678 <MDIO_GetPinVal+0xce>
    160a:	47 c0       	rjmp	.+142    	; 0x169a <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <MDIO_GetPinVal+0x7a>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <MDIO_GetPinVal+0x76>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	35 c0       	rjmp	.+106    	; 0x169a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1630:	e6 e3       	ldi	r30, 0x36	; 54
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a9 01       	movw	r20, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <MDIO_GetPinVal+0x9e>
    1644:	55 95       	asr	r21
    1646:	47 95       	ror	r20
    1648:	8a 95       	dec	r24
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <MDIO_GetPinVal+0x9a>
    164c:	ca 01       	movw	r24, r20
    164e:	81 70       	andi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	23 c0       	rjmp	.+70     	; 0x169a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1654:	e3 e3       	ldi	r30, 0x33	; 51
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <MDIO_GetPinVal+0xc2>
    1668:	55 95       	asr	r21
    166a:	47 95       	ror	r20
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <MDIO_GetPinVal+0xbe>
    1670:	ca 01       	movw	r24, r20
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	11 c0       	rjmp	.+34     	; 0x169a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1678:	e0 e3       	ldi	r30, 0x30	; 48
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <MDIO_GetPinVal+0xe6>
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	8a 95       	dec	r24
    1692:	e2 f7       	brpl	.-8      	; 0x168c <MDIO_GetPinVal+0xe2>
    1694:	ca 01       	movw	r24, r20
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <MDIO_vTogglePinVal+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <MDIO_vTogglePinVal+0x8>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <MDIO_vTogglePinVal+0x18>
    16c2:	72 c0       	rjmp	.+228    	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	88 30       	cpi	r24, 0x08	; 8
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <MDIO_vTogglePinVal+0x20>
    16ca:	6e c0       	rjmp	.+220    	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3c 83       	std	Y+4, r19	; 0x04
    16d4:	2b 83       	std	Y+3, r18	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	49 f1       	breq	.+82     	; 0x1732 <MDIO_vTogglePinVal+0x86>
    16e0:	2b 81       	ldd	r18, Y+3	; 0x03
    16e2:	3c 81       	ldd	r19, Y+4	; 0x04
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <MDIO_vTogglePinVal+0x48>
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	61 f0       	breq	.+24     	; 0x170a <MDIO_vTogglePinVal+0x5e>
    16f2:	5a c0       	rjmp	.+180    	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
    16f4:	2b 81       	ldd	r18, Y+3	; 0x03
    16f6:	3c 81       	ldd	r19, Y+4	; 0x04
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	71 f1       	breq	.+92     	; 0x175a <MDIO_vTogglePinVal+0xae>
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	91 05       	cpc	r25, r1
    1706:	e9 f1       	breq	.+122    	; 0x1782 <MDIO_vTogglePinVal+0xd6>
    1708:	4f c0       	rjmp	.+158    	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    170a:	ab e3       	ldi	r26, 0x3B	; 59
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <MDIO_vTogglePinVal+0x7c>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <MDIO_vTogglePinVal+0x78>
    172c:	84 27       	eor	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	3b c0       	rjmp	.+118    	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <MDIO_vTogglePinVal+0xa4>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <MDIO_vTogglePinVal+0xa0>
    1754:	84 27       	eor	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	27 c0       	rjmp	.+78     	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    175a:	a5 e3       	ldi	r26, 0x35	; 53
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e3       	ldi	r30, 0x35	; 53
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <MDIO_vTogglePinVal+0xcc>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <MDIO_vTogglePinVal+0xc8>
    177c:	84 27       	eor	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	13 c0       	rjmp	.+38     	; 0x17a8 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1782:	a2 e3       	ldi	r26, 0x32	; 50
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e2 e3       	ldi	r30, 0x32	; 50
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MDIO_vTogglePinVal+0xf4>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <MDIO_vTogglePinVal+0xf0>
    17a4:	84 27       	eor	r24, r20
    17a6:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <MDIO_vSetPortDir+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <MDIO_vSetPortDir+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	90 f5       	brcc	.+100    	; 0x1830 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3c 83       	std	Y+4, r19	; 0x04
    17d4:	2b 83       	std	Y+3, r18	; 0x03
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	d1 f0       	breq	.+52     	; 0x1814 <MDIO_vSetPortDir+0x5e>
    17e0:	2b 81       	ldd	r18, Y+3	; 0x03
    17e2:	3c 81       	ldd	r19, Y+4	; 0x04
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <MDIO_vSetPortDir+0x3e>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	61 f0       	breq	.+24     	; 0x180a <MDIO_vSetPortDir+0x54>
    17f2:	1e c0       	rjmp	.+60     	; 0x1830 <MDIO_vSetPortDir+0x7a>
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	81 f0       	breq	.+32     	; 0x181e <MDIO_vSetPortDir+0x68>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	81 f0       	breq	.+32     	; 0x1828 <MDIO_vSetPortDir+0x72>
    1808:	13 c0       	rjmp	.+38     	; 0x1830 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    180a:	ea e3       	ldi	r30, 0x3A	; 58
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	80 83       	st	Z, r24
    1812:	0e c0       	rjmp	.+28     	; 0x1830 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1814:	e7 e3       	ldi	r30, 0x37	; 55
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	80 83       	st	Z, r24
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    181e:	e4 e3       	ldi	r30, 0x34	; 52
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	80 83       	st	Z, r24
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1828:	e1 e3       	ldi	r30, 0x31	; 49
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <MDIO_vSetPortVal+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <MDIO_vSetPortVal+0x8>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	84 30       	cpi	r24, 0x04	; 4
    1852:	90 f5       	brcc	.+100    	; 0x18b8 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	d1 f0       	breq	.+52     	; 0x189c <MDIO_vSetPortVal+0x5e>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <MDIO_vSetPortVal+0x3e>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <MDIO_vSetPortVal+0x54>
    187a:	1e c0       	rjmp	.+60     	; 0x18b8 <MDIO_vSetPortVal+0x7a>
    187c:	2b 81       	ldd	r18, Y+3	; 0x03
    187e:	3c 81       	ldd	r19, Y+4	; 0x04
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	81 f0       	breq	.+32     	; 0x18a6 <MDIO_vSetPortVal+0x68>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <MDIO_vSetPortVal+0x72>
    1890:	13 c0       	rjmp	.+38     	; 0x18b8 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1892:	eb e3       	ldi	r30, 0x3B	; 59
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
    189a:	0e c0       	rjmp	.+28     	; 0x18b8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    18a6:	e5 e3       	ldi	r30, 0x35	; 53
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	80 83       	st	Z, r24
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    18b0:	e2 e3       	ldi	r30, 0x32	; 50
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <MDIO_vInit>:


void MDIO_vInit()
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    18ce:	ea e3       	ldi	r30, 0x3A	; 58
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    18d4:	e7 e3       	ldi	r30, 0x37	; 55
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    18da:	e4 e3       	ldi	r30, 0x34	; 52
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    18f0:	e8 e3       	ldi	r30, 0x38	; 56
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	84 e0       	ldi	r24, 0x04	; 4
    18f6:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <HSSD_vInit+0x6>
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	08 f0       	brcs	.+2      	; 0x1920 <HSSD_vInit+0x16>
    191e:	42 c0       	rjmp	.+132    	; 0x19a4 <HSSD_vInit+0x9a>
	{
		switch(A_PortID)
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3b 83       	std	Y+3, r19	; 0x03
    1928:	2a 83       	std	Y+2, r18	; 0x02
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	f1 f0       	breq	.+60     	; 0x1970 <HSSD_vInit+0x66>
    1934:	2a 81       	ldd	r18, Y+2	; 0x02
    1936:	3b 81       	ldd	r19, Y+3	; 0x03
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	31 05       	cpc	r19, r1
    193c:	2c f4       	brge	.+10     	; 0x1948 <HSSD_vInit+0x3e>
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	61 f0       	breq	.+24     	; 0x195e <HSSD_vInit+0x54>
    1946:	2e c0       	rjmp	.+92     	; 0x19a4 <HSSD_vInit+0x9a>
    1948:	2a 81       	ldd	r18, Y+2	; 0x02
    194a:	3b 81       	ldd	r19, Y+3	; 0x03
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	c1 f0       	breq	.+48     	; 0x1982 <HSSD_vInit+0x78>
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	83 30       	cpi	r24, 0x03	; 3
    1958:	91 05       	cpc	r25, r1
    195a:	e1 f0       	breq	.+56     	; 0x1994 <HSSD_vInit+0x8a>
    195c:	23 c0       	rjmp	.+70     	; 0x19a4 <HSSD_vInit+0x9a>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	6f ef       	ldi	r22, 0xFF	; 255
    1962:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    196e:	1a c0       	rjmp	.+52     	; 0x19a4 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	6f ef       	ldi	r22, 0xFF	; 255
    1974:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	6f ef       	ldi	r22, 0xFF	; 255
    197c:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    1980:	11 c0       	rjmp	.+34     	; 0x19a4 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	6f ef       	ldi	r22, 0xFF	; 255
    198e:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	6f ef       	ldi	r22, 0xFF	; 255
    1998:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
			break;
		}
	}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <HSSD_vDisplayNumber+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <HSSD_vDisplayNumber+0x8>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	90 f5       	brcc	.+100    	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	d1 f0       	breq	.+52     	; 0x1a0e <HSSD_vDisplayNumber+0x5e>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <HSSD_vDisplayNumber+0x3e>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <HSSD_vDisplayNumber+0x54>
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <HSSD_vDisplayNumber+0x68>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <HSSD_vDisplayNumber+0x72>
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	6a 81       	ldd	r22, Y+2	; 0x02
    1a08:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	6a 81       	ldd	r22, Y+2	; 0x02
    1a12:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	6a 81       	ldd	r22, Y+2	; 0x02
    1a26:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
			break;
		}
	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	c0 55       	subi	r28, 0x50	; 80
    1a42:	d0 40       	sbci	r29, 0x00	; 0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e9 5b       	subi	r30, 0xB9	; 185
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 83       	st	Z, r24
    1a56:	fe 01       	movw	r30, r28
    1a58:	e8 5b       	subi	r30, 0xB8	; 184
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	71 83       	std	Z+1, r23	; 0x01
    1a5e:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    1a60:	9e 01       	movw	r18, r28
    1a62:	23 5c       	subi	r18, 0xC3	; 195
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	2e 96       	adiw	r28, 0x0e	; 14
    1a68:	3f af       	std	Y+63, r19	; 0x3f
    1a6a:	2e af       	std	Y+62, r18	; 0x3e
    1a6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a6e:	88 e7       	ldi	r24, 0x78	; 120
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	60 96       	adiw	r28, 0x10	; 16
    1a74:	9f af       	std	Y+63, r25	; 0x3f
    1a76:	8e af       	std	Y+62, r24	; 0x3e
    1a78:	60 97       	sbiw	r28, 0x10	; 16
    1a7a:	9a e0       	ldi	r25, 0x0A	; 10
    1a7c:	61 96       	adiw	r28, 0x11	; 17
    1a7e:	9f af       	std	Y+63, r25	; 0x3f
    1a80:	61 97       	sbiw	r28, 0x11	; 17
    1a82:	60 96       	adiw	r28, 0x10	; 16
    1a84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a88:	60 97       	sbiw	r28, 0x10	; 16
    1a8a:	00 80       	ld	r0, Z
    1a8c:	60 96       	adiw	r28, 0x10	; 16
    1a8e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a92:	60 97       	sbiw	r28, 0x10	; 16
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	60 96       	adiw	r28, 0x10	; 16
    1a9a:	3f af       	std	Y+63, r19	; 0x3f
    1a9c:	2e af       	std	Y+62, r18	; 0x3e
    1a9e:	60 97       	sbiw	r28, 0x10	; 16
    1aa0:	2e 96       	adiw	r28, 0x0e	; 14
    1aa2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa6:	2e 97       	sbiw	r28, 0x0e	; 14
    1aa8:	00 82       	st	Z, r0
    1aaa:	2e 96       	adiw	r28, 0x0e	; 14
    1aac:	2e ad       	ldd	r18, Y+62	; 0x3e
    1aae:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ab0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ab2:	2f 5f       	subi	r18, 0xFF	; 255
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	2e 96       	adiw	r28, 0x0e	; 14
    1ab8:	3f af       	std	Y+63, r19	; 0x3f
    1aba:	2e af       	std	Y+62, r18	; 0x3e
    1abc:	2e 97       	sbiw	r28, 0x0e	; 14
    1abe:	61 96       	adiw	r28, 0x11	; 17
    1ac0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ac2:	61 97       	sbiw	r28, 0x11	; 17
    1ac4:	31 50       	subi	r19, 0x01	; 1
    1ac6:	61 96       	adiw	r28, 0x11	; 17
    1ac8:	3f af       	std	Y+63, r19	; 0x3f
    1aca:	61 97       	sbiw	r28, 0x11	; 17
    1acc:	61 96       	adiw	r28, 0x11	; 17
    1ace:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ad0:	61 97       	sbiw	r28, 0x11	; 17
    1ad2:	88 23       	and	r24, r24
    1ad4:	b1 f6       	brne	.-84     	; 0x1a82 <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	84 30       	cpi	r24, 0x04	; 4
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <HSSD_vDisplayNumberAscending+0xac>
    1ae2:	7c c2       	rjmp	.+1272   	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e9 5b       	subi	r30, 0xB9	; 185
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	e8 2f       	mov	r30, r24
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	2c 96       	adiw	r28, 0x0c	; 12
    1af2:	ff af       	std	Y+63, r31	; 0x3f
    1af4:	ee af       	std	Y+62, r30	; 0x3e
    1af6:	2c 97       	sbiw	r28, 0x0c	; 12
    1af8:	2c 96       	adiw	r28, 0x0c	; 12
    1afa:	2e ad       	ldd	r18, Y+62	; 0x3e
    1afc:	3f ad       	ldd	r19, Y+63	; 0x3f
    1afe:	2c 97       	sbiw	r28, 0x0c	; 12
    1b00:	21 30       	cpi	r18, 0x01	; 1
    1b02:	31 05       	cpc	r19, r1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <HSSD_vDisplayNumberAscending+0xd0>
    1b06:	b2 c0       	rjmp	.+356    	; 0x1c6c <HSSD_vDisplayNumberAscending+0x234>
    1b08:	2c 96       	adiw	r28, 0x0c	; 12
    1b0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b0e:	2c 97       	sbiw	r28, 0x0c	; 12
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	91 05       	cpc	r25, r1
    1b14:	3c f4       	brge	.+14     	; 0x1b24 <HSSD_vDisplayNumberAscending+0xec>
    1b16:	2c 96       	adiw	r28, 0x0c	; 12
    1b18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1b1e:	30 97       	sbiw	r30, 0x00	; 0
    1b20:	91 f0       	breq	.+36     	; 0x1b46 <HSSD_vDisplayNumberAscending+0x10e>
    1b22:	5c c2       	rjmp	.+1208   	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
    1b24:	2c 96       	adiw	r28, 0x0c	; 12
    1b26:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b28:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b2a:	2c 97       	sbiw	r28, 0x0c	; 12
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <HSSD_vDisplayNumberAscending+0xfc>
    1b32:	2f c1       	rjmp	.+606    	; 0x1d92 <HSSD_vDisplayNumberAscending+0x35a>
    1b34:	2c 96       	adiw	r28, 0x0c	; 12
    1b36:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b38:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b3a:	2c 97       	sbiw	r28, 0x0c	; 12
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <HSSD_vDisplayNumberAscending+0x10c>
    1b42:	ba c1       	rjmp	.+884    	; 0x1eb8 <HSSD_vDisplayNumberAscending+0x480>
    1b44:	4b c2       	rjmp	.+1174   	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    1b46:	1c ae       	std	Y+60, r1	; 0x3c
    1b48:	8c c0       	rjmp	.+280    	; 0x1c62 <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    1b4a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	ce 01       	movw	r24, r28
    1b52:	cd 96       	adiw	r24, 0x3d	; 61
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 0f       	add	r30, r18
    1b58:	f3 1f       	adc	r31, r19
    1b5a:	90 81       	ld	r25, Z
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	69 2f       	mov	r22, r25
    1b60:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    1b64:	fe 01       	movw	r30, r28
    1b66:	e8 5b       	subi	r30, 0xB8	; 184
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	cc 01       	movw	r24, r24
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8d ab       	std	Y+53, r24	; 0x35
    1b82:	9e ab       	std	Y+54, r25	; 0x36
    1b84:	af ab       	std	Y+55, r26	; 0x37
    1b86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 ab       	std	Y+49, r24	; 0x31
    1ba2:	9a ab       	std	Y+50, r25	; 0x32
    1ba4:	ab ab       	std	Y+51, r26	; 0x33
    1ba6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    1baa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bac:	8b a9       	ldd	r24, Y+51	; 0x33
    1bae:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	98 ab       	std	Y+48, r25	; 0x30
    1bc6:	8f a7       	std	Y+47, r24	; 0x2f
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    1bca:	69 a9       	ldd	r22, Y+49	; 0x31
    1bcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bce:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6d a9       	ldd	r22, Y+53	; 0x35
    1be4:	7e a9       	ldd	r23, Y+54	; 0x36
    1be6:	8f a9       	ldd	r24, Y+55	; 0x37
    1be8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	98 ab       	std	Y+48, r25	; 0x30
    1c08:	8f a7       	std	Y+47, r24	; 0x2f
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <HSSD_vDisplayNumberAscending+0x1f2>
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9e a7       	std	Y+46, r25	; 0x2e
    1c12:	8d a7       	std	Y+45, r24	; 0x2d
    1c14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <HSSD_vDisplayNumberAscending+0x1e0>
    1c1c:	9e a7       	std	Y+46, r25	; 0x2e
    1c1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c22:	98 a9       	ldd	r25, Y+48	; 0x30
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	98 ab       	std	Y+48, r25	; 0x30
    1c28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <HSSD_vDisplayNumberAscending+0x1d4>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	69 a9       	ldd	r22, Y+49	; 0x31
    1c36:	7a a9       	ldd	r23, Y+50	; 0x32
    1c38:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	98 ab       	std	Y+48, r25	; 0x30
    1c46:	8f a7       	std	Y+47, r24	; 0x2f
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	9c a7       	std	Y+44, r25	; 0x2c
    1c4e:	8b a7       	std	Y+43, r24	; 0x2b
    1c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <HSSD_vDisplayNumberAscending+0x21c>
    1c58:	9c a7       	std	Y+44, r25	; 0x2c
    1c5a:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    1c5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	8c af       	std	Y+60, r24	; 0x3c
    1c62:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c64:	8a 30       	cpi	r24, 0x0A	; 10
    1c66:	08 f4       	brcc	.+2      	; 0x1c6a <HSSD_vDisplayNumberAscending+0x232>
    1c68:	70 cf       	rjmp	.-288    	; 0x1b4a <HSSD_vDisplayNumberAscending+0x112>
    1c6a:	b8 c1       	rjmp	.+880    	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    1c6c:	1b ae       	std	Y+59, r1	; 0x3b
    1c6e:	8c c0       	rjmp	.+280    	; 0x1d88 <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    1c70:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	ce 01       	movw	r24, r28
    1c78:	cd 96       	adiw	r24, 0x3d	; 61
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e2 0f       	add	r30, r18
    1c7e:	f3 1f       	adc	r31, r19
    1c80:	90 81       	ld	r25, Z
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	69 2f       	mov	r22, r25
    1c86:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e8 5b       	subi	r30, 0xB8	; 184
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	cc 01       	movw	r24, r24
    1c96:	a0 e0       	ldi	r26, 0x00	; 0
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8f a3       	std	Y+39, r24	; 0x27
    1ca8:	98 a7       	std	Y+40, r25	; 0x28
    1caa:	a9 a7       	std	Y+41, r26	; 0x29
    1cac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8b a3       	std	Y+35, r24	; 0x23
    1cc8:	9c a3       	std	Y+36, r25	; 0x24
    1cca:	ad a3       	std	Y+37, r26	; 0x25
    1ccc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cce:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9a a3       	std	Y+34, r25	; 0x22
    1cec:	89 a3       	std	Y+33, r24	; 0x21
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    1cf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9a a3       	std	Y+34, r25	; 0x22
    1d2e:	89 a3       	std	Y+33, r24	; 0x21
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <HSSD_vDisplayNumberAscending+0x318>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	98 a3       	std	Y+32, r25	; 0x20
    1d38:	8f 8f       	std	Y+31, r24	; 0x1f
    1d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <HSSD_vDisplayNumberAscending+0x306>
    1d42:	98 a3       	std	Y+32, r25	; 0x20
    1d44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	89 a1       	ldd	r24, Y+33	; 0x21
    1d52:	9a a1       	ldd	r25, Y+34	; 0x22
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <HSSD_vDisplayNumberAscending+0x2fa>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d60:	9e a1       	ldd	r25, Y+38	; 0x26
    1d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9a a3       	std	Y+34, r25	; 0x22
    1d6c:	89 a3       	std	Y+33, r24	; 0x21
    1d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d70:	9a a1       	ldd	r25, Y+34	; 0x22
    1d72:	9e 8f       	std	Y+30, r25	; 0x1e
    1d74:	8d 8f       	std	Y+29, r24	; 0x1d
    1d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <HSSD_vDisplayNumberAscending+0x342>
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    1d82:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	8b af       	std	Y+59, r24	; 0x3b
    1d88:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d8a:	8a 30       	cpi	r24, 0x0A	; 10
    1d8c:	08 f4       	brcc	.+2      	; 0x1d90 <HSSD_vDisplayNumberAscending+0x358>
    1d8e:	70 cf       	rjmp	.-288    	; 0x1c70 <HSSD_vDisplayNumberAscending+0x238>
    1d90:	25 c1       	rjmp	.+586    	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    1d92:	1a ae       	std	Y+58, r1	; 0x3a
    1d94:	8c c0       	rjmp	.+280    	; 0x1eae <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    1d96:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	cd 96       	adiw	r24, 0x3d	; 61
    1da0:	fc 01       	movw	r30, r24
    1da2:	e2 0f       	add	r30, r18
    1da4:	f3 1f       	adc	r31, r19
    1da6:	90 81       	ld	r25, Z
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	69 2f       	mov	r22, r25
    1dac:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    1db0:	fe 01       	movw	r30, r28
    1db2:	e8 5b       	subi	r30, 0xB8	; 184
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	cc 01       	movw	r24, r24
    1dbc:	a0 e0       	ldi	r26, 0x00	; 0
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	89 8f       	std	Y+25, r24	; 0x19
    1dce:	9a 8f       	std	Y+26, r25	; 0x1a
    1dd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1dd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8d 8b       	std	Y+21, r24	; 0x15
    1dee:	9e 8b       	std	Y+22, r25	; 0x16
    1df0:	af 8b       	std	Y+23, r26	; 0x17
    1df2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    1e16:	6d 89       	ldd	r22, Y+21	; 0x15
    1e18:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9c 8b       	std	Y+20, r25	; 0x14
    1e54:	8b 8b       	std	Y+19, r24	; 0x13
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <HSSD_vDisplayNumberAscending+0x43e>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9a 8b       	std	Y+18, r25	; 0x12
    1e5e:	89 8b       	std	Y+17, r24	; 0x11
    1e60:	89 89       	ldd	r24, Y+17	; 0x11
    1e62:	9a 89       	ldd	r25, Y+18	; 0x12
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <HSSD_vDisplayNumberAscending+0x42c>
    1e68:	9a 8b       	std	Y+18, r25	; 0x12
    1e6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <HSSD_vDisplayNumberAscending+0x420>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9c 8b       	std	Y+20, r25	; 0x14
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	98 8b       	std	Y+16, r25	; 0x10
    1e9a:	8f 87       	std	Y+15, r24	; 0x0f
    1e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <HSSD_vDisplayNumberAscending+0x468>
    1ea4:	98 8b       	std	Y+16, r25	; 0x10
    1ea6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    1ea8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	8a af       	std	Y+58, r24	; 0x3a
    1eae:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eb0:	8a 30       	cpi	r24, 0x0A	; 10
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <HSSD_vDisplayNumberAscending+0x47e>
    1eb4:	70 cf       	rjmp	.-288    	; 0x1d96 <HSSD_vDisplayNumberAscending+0x35e>
    1eb6:	92 c0       	rjmp	.+292    	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    1eb8:	19 ae       	std	Y+57, r1	; 0x39
    1eba:	8c c0       	rjmp	.+280    	; 0x1fd4 <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    1ebc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	cd 96       	adiw	r24, 0x3d	; 61
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e2 0f       	add	r30, r18
    1eca:	f3 1f       	adc	r31, r19
    1ecc:	90 81       	ld	r25, Z
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	69 2f       	mov	r22, r25
    1ed2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e8 5b       	subi	r30, 0xB8	; 184
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	cc 01       	movw	r24, r24
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <HSSD_vDisplayNumberAscending+0x564>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <HSSD_vDisplayNumberAscending+0x552>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <HSSD_vDisplayNumberAscending+0x546>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <HSSD_vDisplayNumberAscending+0x58e>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    1fce:	89 ad       	ldd	r24, Y+57	; 0x39
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	89 af       	std	Y+57, r24	; 0x39
    1fd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fd6:	8a 30       	cpi	r24, 0x0A	; 10
    1fd8:	08 f4       	brcc	.+2      	; 0x1fdc <HSSD_vDisplayNumberAscending+0x5a4>
    1fda:	70 cf       	rjmp	.-288    	; 0x1ebc <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    1fdc:	c0 5b       	subi	r28, 0xB0	; 176
    1fde:	df 4f       	sbci	r29, 0xFF	; 255
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,s8 A_u8Time , u16 A_u16TimetoWait)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	c1 55       	subi	r28, 0x51	; 81
    1ffa:	d0 40       	sbci	r29, 0x00	; 0
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	fe 01       	movw	r30, r28
    2008:	e9 5b       	subi	r30, 0xB9	; 185
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 83       	st	Z, r24
    200e:	fe 01       	movw	r30, r28
    2010:	e8 5b       	subi	r30, 0xB8	; 184
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 83       	st	Z, r22
    2016:	fe 01       	movw	r30, r28
    2018:	e7 5b       	subi	r30, 0xB7	; 183
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	51 83       	std	Z+1, r21	; 0x01
    201e:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2020:	9e 01       	movw	r18, r28
    2022:	23 5c       	subi	r18, 0xC3	; 195
    2024:	3f 4f       	sbci	r19, 0xFF	; 255
    2026:	2f 96       	adiw	r28, 0x0f	; 15
    2028:	3f af       	std	Y+63, r19	; 0x3f
    202a:	2e af       	std	Y+62, r18	; 0x3e
    202c:	2f 97       	sbiw	r28, 0x0f	; 15
    202e:	82 e8       	ldi	r24, 0x82	; 130
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	61 96       	adiw	r28, 0x11	; 17
    2034:	9f af       	std	Y+63, r25	; 0x3f
    2036:	8e af       	std	Y+62, r24	; 0x3e
    2038:	61 97       	sbiw	r28, 0x11	; 17
    203a:	9a e0       	ldi	r25, 0x0A	; 10
    203c:	62 96       	adiw	r28, 0x12	; 18
    203e:	9f af       	std	Y+63, r25	; 0x3f
    2040:	62 97       	sbiw	r28, 0x12	; 18
    2042:	61 96       	adiw	r28, 0x11	; 17
    2044:	ee ad       	ldd	r30, Y+62	; 0x3e
    2046:	ff ad       	ldd	r31, Y+63	; 0x3f
    2048:	61 97       	sbiw	r28, 0x11	; 17
    204a:	00 80       	ld	r0, Z
    204c:	61 96       	adiw	r28, 0x11	; 17
    204e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2050:	3f ad       	ldd	r19, Y+63	; 0x3f
    2052:	61 97       	sbiw	r28, 0x11	; 17
    2054:	2f 5f       	subi	r18, 0xFF	; 255
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	61 96       	adiw	r28, 0x11	; 17
    205a:	3f af       	std	Y+63, r19	; 0x3f
    205c:	2e af       	std	Y+62, r18	; 0x3e
    205e:	61 97       	sbiw	r28, 0x11	; 17
    2060:	2f 96       	adiw	r28, 0x0f	; 15
    2062:	ee ad       	ldd	r30, Y+62	; 0x3e
    2064:	ff ad       	ldd	r31, Y+63	; 0x3f
    2066:	2f 97       	sbiw	r28, 0x0f	; 15
    2068:	00 82       	st	Z, r0
    206a:	2f 96       	adiw	r28, 0x0f	; 15
    206c:	2e ad       	ldd	r18, Y+62	; 0x3e
    206e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2070:	2f 97       	sbiw	r28, 0x0f	; 15
    2072:	2f 5f       	subi	r18, 0xFF	; 255
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	2f 96       	adiw	r28, 0x0f	; 15
    2078:	3f af       	std	Y+63, r19	; 0x3f
    207a:	2e af       	std	Y+62, r18	; 0x3e
    207c:	2f 97       	sbiw	r28, 0x0f	; 15
    207e:	62 96       	adiw	r28, 0x12	; 18
    2080:	3f ad       	ldd	r19, Y+63	; 0x3f
    2082:	62 97       	sbiw	r28, 0x12	; 18
    2084:	31 50       	subi	r19, 0x01	; 1
    2086:	62 96       	adiw	r28, 0x12	; 18
    2088:	3f af       	std	Y+63, r19	; 0x3f
    208a:	62 97       	sbiw	r28, 0x12	; 18
    208c:	62 96       	adiw	r28, 0x12	; 18
    208e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2090:	62 97       	sbiw	r28, 0x12	; 18
    2092:	88 23       	and	r24, r24
    2094:	b1 f6       	brne	.-84     	; 0x2042 <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    2096:	fe 01       	movw	r30, r28
    2098:	e9 5b       	subi	r30, 0xB9	; 185
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	84 30       	cpi	r24, 0x04	; 4
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <HSSD_vCountDown+0xb4>
    20a2:	9b c2       	rjmp	.+1334   	; 0x25da <HSSD_vCountDown+0x5ea>
	{
		switch(A_PortID)
    20a4:	fe 01       	movw	r30, r28
    20a6:	e9 5b       	subi	r30, 0xB9	; 185
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	e8 2f       	mov	r30, r24
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	2d 96       	adiw	r28, 0x0d	; 13
    20b2:	ff af       	std	Y+63, r31	; 0x3f
    20b4:	ee af       	std	Y+62, r30	; 0x3e
    20b6:	2d 97       	sbiw	r28, 0x0d	; 13
    20b8:	2d 96       	adiw	r28, 0x0d	; 13
    20ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    20bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    20be:	2d 97       	sbiw	r28, 0x0d	; 13
    20c0:	21 30       	cpi	r18, 0x01	; 1
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <HSSD_vCountDown+0xd8>
    20c6:	b8 c0       	rjmp	.+368    	; 0x2238 <HSSD_vCountDown+0x248>
    20c8:	2d 96       	adiw	r28, 0x0d	; 13
    20ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    20cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ce:	2d 97       	sbiw	r28, 0x0d	; 13
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	91 05       	cpc	r25, r1
    20d4:	3c f4       	brge	.+14     	; 0x20e4 <HSSD_vCountDown+0xf4>
    20d6:	2d 96       	adiw	r28, 0x0d	; 13
    20d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    20da:	ff ad       	ldd	r31, Y+63	; 0x3f
    20dc:	2d 97       	sbiw	r28, 0x0d	; 13
    20de:	30 97       	sbiw	r30, 0x00	; 0
    20e0:	91 f0       	breq	.+36     	; 0x2106 <HSSD_vCountDown+0x116>
    20e2:	74 c2       	rjmp	.+1256   	; 0x25cc <HSSD_vCountDown+0x5dc>
    20e4:	2d 96       	adiw	r28, 0x0d	; 13
    20e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    20e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    20ea:	2d 97       	sbiw	r28, 0x0d	; 13
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <HSSD_vCountDown+0x104>
    20f2:	3b c1       	rjmp	.+630    	; 0x236a <HSSD_vCountDown+0x37a>
    20f4:	2d 96       	adiw	r28, 0x0d	; 13
    20f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20fa:	2d 97       	sbiw	r28, 0x0d	; 13
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	91 05       	cpc	r25, r1
    2100:	09 f4       	brne	.+2      	; 0x2104 <HSSD_vCountDown+0x114>
    2102:	cc c1       	rjmp	.+920    	; 0x249c <HSSD_vCountDown+0x4ac>
    2104:	63 c2       	rjmp	.+1222   	; 0x25cc <HSSD_vCountDown+0x5dc>
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    2106:	fe 01       	movw	r30, r28
    2108:	e8 5b       	subi	r30, 0xB8	; 184
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	8c af       	std	Y+60, r24	; 0x3c
    2110:	8e c0       	rjmp	.+284    	; 0x222e <HSSD_vCountDown+0x23e>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    2112:	8c ad       	ldd	r24, Y+60	; 0x3c
    2114:	28 2f       	mov	r18, r24
    2116:	33 27       	eor	r19, r19
    2118:	27 fd       	sbrc	r18, 7
    211a:	30 95       	com	r19
    211c:	ce 01       	movw	r24, r28
    211e:	cd 96       	adiw	r24, 0x3d	; 61
    2120:	fc 01       	movw	r30, r24
    2122:	e2 0f       	add	r30, r18
    2124:	f3 1f       	adc	r31, r19
    2126:	90 81       	ld	r25, Z
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	69 2f       	mov	r22, r25
    212c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2130:	fe 01       	movw	r30, r28
    2132:	e7 5b       	subi	r30, 0xB7	; 183
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	cc 01       	movw	r24, r24
    213c:	a0 e0       	ldi	r26, 0x00	; 0
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8d ab       	std	Y+53, r24	; 0x35
    214e:	9e ab       	std	Y+54, r25	; 0x36
    2150:	af ab       	std	Y+55, r26	; 0x37
    2152:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6d a9       	ldd	r22, Y+53	; 0x35
    2156:	7e a9       	ldd	r23, Y+54	; 0x36
    2158:	8f a9       	ldd	r24, Y+55	; 0x37
    215a:	98 ad       	ldd	r25, Y+56	; 0x38
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	89 ab       	std	Y+49, r24	; 0x31
    216e:	9a ab       	std	Y+50, r25	; 0x32
    2170:	ab ab       	std	Y+51, r26	; 0x33
    2172:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2174:	69 a9       	ldd	r22, Y+49	; 0x31
    2176:	7a a9       	ldd	r23, Y+50	; 0x32
    2178:	8b a9       	ldd	r24, Y+51	; 0x33
    217a:	9c a9       	ldd	r25, Y+52	; 0x34
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <HSSD_vCountDown+0x1a6>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <HSSD_vCountDown+0x224>
	else if (__tmp > 65535)
    2196:	69 a9       	ldd	r22, Y+49	; 0x31
    2198:	7a a9       	ldd	r23, Y+50	; 0x32
    219a:	8b a9       	ldd	r24, Y+51	; 0x33
    219c:	9c a9       	ldd	r25, Y+52	; 0x34
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <HSSD_vCountDown+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6d a9       	ldd	r22, Y+53	; 0x35
    21b0:	7e a9       	ldd	r23, Y+54	; 0x36
    21b2:	8f a9       	ldd	r24, Y+55	; 0x37
    21b4:	98 ad       	ldd	r25, Y+56	; 0x38
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	98 ab       	std	Y+48, r25	; 0x30
    21d4:	8f a7       	std	Y+47, r24	; 0x2f
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <HSSD_vCountDown+0x206>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9e a7       	std	Y+46, r25	; 0x2e
    21de:	8d a7       	std	Y+45, r24	; 0x2d
    21e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    21e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <HSSD_vCountDown+0x1f4>
    21e8:	9e a7       	std	Y+46, r25	; 0x2e
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ee:	98 a9       	ldd	r25, Y+48	; 0x30
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	98 ab       	std	Y+48, r25	; 0x30
    21f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f8:	98 a9       	ldd	r25, Y+48	; 0x30
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <HSSD_vCountDown+0x1e8>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <HSSD_vCountDown+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	69 a9       	ldd	r22, Y+49	; 0x31
    2202:	7a a9       	ldd	r23, Y+50	; 0x32
    2204:	8b a9       	ldd	r24, Y+51	; 0x33
    2206:	9c a9       	ldd	r25, Y+52	; 0x34
    2208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	98 ab       	std	Y+48, r25	; 0x30
    2212:	8f a7       	std	Y+47, r24	; 0x2f
    2214:	8f a5       	ldd	r24, Y+47	; 0x2f
    2216:	98 a9       	ldd	r25, Y+48	; 0x30
    2218:	9c a7       	std	Y+44, r25	; 0x2c
    221a:	8b a7       	std	Y+43, r24	; 0x2b
    221c:	8b a5       	ldd	r24, Y+43	; 0x2b
    221e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <HSSD_vCountDown+0x230>
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    2228:	8c ad       	ldd	r24, Y+60	; 0x3c
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	8c af       	std	Y+60, r24	; 0x3c
    222e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2230:	88 23       	and	r24, r24
    2232:	0c f0       	brlt	.+2      	; 0x2236 <HSSD_vCountDown+0x246>
    2234:	6e cf       	rjmp	.-292    	; 0x2112 <HSSD_vCountDown+0x122>
    2236:	ca c1       	rjmp	.+916    	; 0x25cc <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2238:	fe 01       	movw	r30, r28
    223a:	e8 5b       	subi	r30, 0xB8	; 184
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	8b af       	std	Y+59, r24	; 0x3b
    2242:	8e c0       	rjmp	.+284    	; 0x2360 <HSSD_vCountDown+0x370>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    2244:	8b ad       	ldd	r24, Y+59	; 0x3b
    2246:	28 2f       	mov	r18, r24
    2248:	33 27       	eor	r19, r19
    224a:	27 fd       	sbrc	r18, 7
    224c:	30 95       	com	r19
    224e:	ce 01       	movw	r24, r28
    2250:	cd 96       	adiw	r24, 0x3d	; 61
    2252:	fc 01       	movw	r30, r24
    2254:	e2 0f       	add	r30, r18
    2256:	f3 1f       	adc	r31, r19
    2258:	90 81       	ld	r25, Z
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	69 2f       	mov	r22, r25
    225e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2262:	fe 01       	movw	r30, r28
    2264:	e7 5b       	subi	r30, 0xB7	; 183
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	cc 01       	movw	r24, r24
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f a3       	std	Y+39, r24	; 0x27
    2280:	98 a7       	std	Y+40, r25	; 0x28
    2282:	a9 a7       	std	Y+41, r26	; 0x29
    2284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	6f a1       	ldd	r22, Y+39	; 0x27
    2288:	78 a5       	ldd	r23, Y+40	; 0x28
    228a:	89 a5       	ldd	r24, Y+41	; 0x29
    228c:	9a a5       	ldd	r25, Y+42	; 0x2a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8b a3       	std	Y+35, r24	; 0x23
    22a0:	9c a3       	std	Y+36, r25	; 0x24
    22a2:	ad a3       	std	Y+37, r26	; 0x25
    22a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a6:	6b a1       	ldd	r22, Y+35	; 0x23
    22a8:	7c a1       	ldd	r23, Y+36	; 0x24
    22aa:	8d a1       	ldd	r24, Y+37	; 0x25
    22ac:	9e a1       	ldd	r25, Y+38	; 0x26
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <HSSD_vCountDown+0x2d8>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <HSSD_vCountDown+0x356>
	else if (__tmp > 65535)
    22c8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ca:	7c a1       	ldd	r23, Y+36	; 0x24
    22cc:	8d a1       	ldd	r24, Y+37	; 0x25
    22ce:	9e a1       	ldd	r25, Y+38	; 0x26
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <HSSD_vCountDown+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	6f a1       	ldd	r22, Y+39	; 0x27
    22e2:	78 a5       	ldd	r23, Y+40	; 0x28
    22e4:	89 a5       	ldd	r24, Y+41	; 0x29
    22e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9a a3       	std	Y+34, r25	; 0x22
    2306:	89 a3       	std	Y+33, r24	; 0x21
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <HSSD_vCountDown+0x338>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	98 a3       	std	Y+32, r25	; 0x20
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
    2312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2314:	98 a1       	ldd	r25, Y+32	; 0x20
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <HSSD_vCountDown+0x326>
    231a:	98 a3       	std	Y+32, r25	; 0x20
    231c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	89 a1       	ldd	r24, Y+33	; 0x21
    2320:	9a a1       	ldd	r25, Y+34	; 0x22
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9a a3       	std	Y+34, r25	; 0x22
    2326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	89 a1       	ldd	r24, Y+33	; 0x21
    232a:	9a a1       	ldd	r25, Y+34	; 0x22
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <HSSD_vCountDown+0x31a>
    2330:	14 c0       	rjmp	.+40     	; 0x235a <HSSD_vCountDown+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6b a1       	ldd	r22, Y+35	; 0x23
    2334:	7c a1       	ldd	r23, Y+36	; 0x24
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	9e a1       	ldd	r25, Y+38	; 0x26
    233a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9a a3       	std	Y+34, r25	; 0x22
    2344:	89 a3       	std	Y+33, r24	; 0x21
    2346:	89 a1       	ldd	r24, Y+33	; 0x21
    2348:	9a a1       	ldd	r25, Y+34	; 0x22
    234a:	9e 8f       	std	Y+30, r25	; 0x1e
    234c:	8d 8f       	std	Y+29, r24	; 0x1d
    234e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <HSSD_vCountDown+0x362>
    2356:	9e 8f       	std	Y+30, r25	; 0x1e
    2358:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    235a:	8b ad       	ldd	r24, Y+59	; 0x3b
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	8b af       	std	Y+59, r24	; 0x3b
    2360:	8b ad       	ldd	r24, Y+59	; 0x3b
    2362:	88 23       	and	r24, r24
    2364:	0c f0       	brlt	.+2      	; 0x2368 <HSSD_vCountDown+0x378>
    2366:	6e cf       	rjmp	.-292    	; 0x2244 <HSSD_vCountDown+0x254>
    2368:	31 c1       	rjmp	.+610    	; 0x25cc <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    236a:	fe 01       	movw	r30, r28
    236c:	e8 5b       	subi	r30, 0xB8	; 184
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	8a af       	std	Y+58, r24	; 0x3a
    2374:	8e c0       	rjmp	.+284    	; 0x2492 <HSSD_vCountDown+0x4a2>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2376:	8a ad       	ldd	r24, Y+58	; 0x3a
    2378:	28 2f       	mov	r18, r24
    237a:	33 27       	eor	r19, r19
    237c:	27 fd       	sbrc	r18, 7
    237e:	30 95       	com	r19
    2380:	ce 01       	movw	r24, r28
    2382:	cd 96       	adiw	r24, 0x3d	; 61
    2384:	fc 01       	movw	r30, r24
    2386:	e2 0f       	add	r30, r18
    2388:	f3 1f       	adc	r31, r19
    238a:	90 81       	ld	r25, Z
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	69 2f       	mov	r22, r25
    2390:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2394:	fe 01       	movw	r30, r28
    2396:	e7 5b       	subi	r30, 0xB7	; 183
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	cc 01       	movw	r24, r24
    23a0:	a0 e0       	ldi	r26, 0x00	; 0
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	89 8f       	std	Y+25, r24	; 0x19
    23b2:	9a 8f       	std	Y+26, r25	; 0x1a
    23b4:	ab 8f       	std	Y+27, r26	; 0x1b
    23b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8d 8b       	std	Y+21, r24	; 0x15
    23d2:	9e 8b       	std	Y+22, r25	; 0x16
    23d4:	af 8b       	std	Y+23, r26	; 0x17
    23d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <HSSD_vCountDown+0x40a>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 8b       	std	Y+20, r25	; 0x14
    23f6:	8b 8b       	std	Y+19, r24	; 0x13
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <HSSD_vCountDown+0x488>
	else if (__tmp > 65535)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <HSSD_vCountDown+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	69 8d       	ldd	r22, Y+25	; 0x19
    2414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
    243a:	0f c0       	rjmp	.+30     	; 0x245a <HSSD_vCountDown+0x46a>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9a 8b       	std	Y+18, r25	; 0x12
    2442:	89 8b       	std	Y+17, r24	; 0x11
    2444:	89 89       	ldd	r24, Y+17	; 0x11
    2446:	9a 89       	ldd	r25, Y+18	; 0x12
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <HSSD_vCountDown+0x458>
    244c:	9a 8b       	std	Y+18, r25	; 0x12
    244e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9c 8b       	std	Y+20, r25	; 0x14
    2458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	9c 89       	ldd	r25, Y+20	; 0x14
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <HSSD_vCountDown+0x44c>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <HSSD_vCountDown+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	98 8b       	std	Y+16, r25	; 0x10
    247e:	8f 87       	std	Y+15, r24	; 0x0f
    2480:	8f 85       	ldd	r24, Y+15	; 0x0f
    2482:	98 89       	ldd	r25, Y+16	; 0x10
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <HSSD_vCountDown+0x494>
    2488:	98 8b       	std	Y+16, r25	; 0x10
    248a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    248c:	8a ad       	ldd	r24, Y+58	; 0x3a
    248e:	81 50       	subi	r24, 0x01	; 1
    2490:	8a af       	std	Y+58, r24	; 0x3a
    2492:	8a ad       	ldd	r24, Y+58	; 0x3a
    2494:	88 23       	and	r24, r24
    2496:	0c f0       	brlt	.+2      	; 0x249a <HSSD_vCountDown+0x4aa>
    2498:	6e cf       	rjmp	.-292    	; 0x2376 <HSSD_vCountDown+0x386>
    249a:	98 c0       	rjmp	.+304    	; 0x25cc <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    249c:	fe 01       	movw	r30, r28
    249e:	e8 5b       	subi	r30, 0xB8	; 184
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	89 af       	std	Y+57, r24	; 0x39
    24a6:	8e c0       	rjmp	.+284    	; 0x25c4 <HSSD_vCountDown+0x5d4>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    24a8:	89 ad       	ldd	r24, Y+57	; 0x39
    24aa:	28 2f       	mov	r18, r24
    24ac:	33 27       	eor	r19, r19
    24ae:	27 fd       	sbrc	r18, 7
    24b0:	30 95       	com	r19
    24b2:	ce 01       	movw	r24, r28
    24b4:	cd 96       	adiw	r24, 0x3d	; 61
    24b6:	fc 01       	movw	r30, r24
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	90 81       	ld	r25, Z
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	69 2f       	mov	r22, r25
    24c2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    24c6:	fe 01       	movw	r30, r28
    24c8:	e7 5b       	subi	r30, 0xB7	; 183
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	cc 01       	movw	r24, r24
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	ad 87       	std	Y+13, r26	; 0x0d
    24e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <HSSD_vCountDown+0x53c>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <HSSD_vCountDown+0x5ba>
	else if (__tmp > 65535)
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <HSSD_vCountDown+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	0f c0       	rjmp	.+30     	; 0x258c <HSSD_vCountDown+0x59c>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <HSSD_vCountDown+0x58a>
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <HSSD_vCountDown+0x57e>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <HSSD_vCountDown+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <HSSD_vCountDown+0x5c6>
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    25be:	89 ad       	ldd	r24, Y+57	; 0x39
    25c0:	81 50       	subi	r24, 0x01	; 1
    25c2:	89 af       	std	Y+57, r24	; 0x39
    25c4:	89 ad       	ldd	r24, Y+57	; 0x39
    25c6:	88 23       	and	r24, r24
    25c8:	0c f0       	brlt	.+2      	; 0x25cc <HSSD_vCountDown+0x5dc>
    25ca:	6e cf       	rjmp	.-292    	; 0x24a8 <HSSD_vCountDown+0x4b8>
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
		MDIO_vSetPortVal(A_PortID , 0xFF);
    25cc:	fe 01       	movw	r30, r28
    25ce:	e9 5b       	subi	r30, 0xB9	; 185
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	6f ef       	ldi	r22, 0xFF	; 255
    25d6:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
	}
}
    25da:	cf 5a       	subi	r28, 0xAF	; 175
    25dc:	df 4f       	sbci	r29, 0xFF	; 255
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <HSSD_vTurnOFF>:

void HSSD_vTurnOFF(DIO_PORT_e A_PortID)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortVal(A_PortID , 0xFF);
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	6f ef       	ldi	r22, 0xFF	; 255
    25fe:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
}
    2602:	0f 90       	pop	r0
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 8f 08 	call	0x111e	; 0x111e <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 8f 08 	call	0x111e	; 0x111e <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 8f 08 	call	0x111e	; 0x111e <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	6f ef       	ldi	r22, 0xFF	; 255
    2634:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	2f 97       	sbiw	r28, 0x0f	; 15
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	6f 85       	ldd	r22, Y+15	; 0x0f
    266c:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e8       	ldi	r26, 0x80	; 128
    2680:	bf e3       	ldi	r27, 0x3F	; 63
    2682:	8b 87       	std	Y+11, r24	; 0x0b
    2684:	9c 87       	std	Y+12, r25	; 0x0c
    2686:	ad 87       	std	Y+13, r26	; 0x0d
    2688:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a ef       	ldi	r20, 0xFA	; 250
    2698:	54 e4       	ldi	r21, 0x44	; 68
    269a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8f 83       	std	Y+7, r24	; 0x07
    26a4:	98 87       	std	Y+8, r25	; 0x08
    26a6:	a9 87       	std	Y+9, r26	; 0x09
    26a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <LCD_SendCommand+0x8e>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	0f c0       	rjmp	.+30     	; 0x272c <LCD_SendCommand+0xee>
    270e:	88 ec       	ldi	r24, 0xC8	; 200
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_SendCommand+0xdc>
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <LCD_SendCommand+0xd0>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_SendCommand+0x118>
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>

}
    2768:	2f 96       	adiw	r28, 0x0f	; 15
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	2f 97       	sbiw	r28, 0x0f	; 15
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    27a8:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	62 e0       	ldi	r22, 0x02	; 2
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a0 e8       	ldi	r26, 0x80	; 128
    27bc:	bf e3       	ldi	r27, 0x3F	; 63
    27be:	8b 87       	std	Y+11, r24	; 0x0b
    27c0:	9c 87       	std	Y+12, r25	; 0x0c
    27c2:	ad 87       	std	Y+13, r26	; 0x0d
    27c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    27cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8f 83       	std	Y+7, r24	; 0x07
    27e0:	98 87       	std	Y+8, r25	; 0x08
    27e2:	a9 87       	std	Y+9, r26	; 0x09
    27e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <LCD_SendData+0x8e>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <LCD_SendData+0xee>
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_SendData+0xdc>
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <LCD_SendData+0xd0>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_SendData+0x118>
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
}
    28a4:	2f 96       	adiw	r28, 0x0f	; 15
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <LCD_Init>:

void LCD_Init(void)
{
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	c6 54       	subi	r28, 0x46	; 70
    28c4:	d0 40       	sbci	r29, 0x00	; 0
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	fe 01       	movw	r30, r28
    28d2:	ed 5b       	subi	r30, 0xBD	; 189
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e2       	ldi	r26, 0x20	; 32
    28dc:	b2 e4       	ldi	r27, 0x42	; 66
    28de:	80 83       	st	Z, r24
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	a2 83       	std	Z+2, r26	; 0x02
    28e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e6:	8e 01       	movw	r16, r28
    28e8:	01 5c       	subi	r16, 0xC1	; 193
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 5b       	subi	r30, 0xBD	; 189
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	80 83       	st	Z, r24
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	a2 83       	std	Z+2, r26	; 0x02
    2912:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2914:	fe 01       	movw	r30, r28
    2916:	ff 96       	adiw	r30, 0x3f	; 63
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <LCD_Init+0x84>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e af       	std	Y+62, r25	; 0x3e
    2936:	8d af       	std	Y+61, r24	; 0x3d
    2938:	46 c0       	rjmp	.+140    	; 0x29c6 <LCD_Init+0x110>
	else if (__tmp > 65535)
    293a:	fe 01       	movw	r30, r28
    293c:	ff 96       	adiw	r30, 0x3f	; 63
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	64 f5       	brge	.+88     	; 0x29ae <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	fe 01       	movw	r30, r28
    2958:	ed 5b       	subi	r30, 0xBD	; 189
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9e af       	std	Y+62, r25	; 0x3e
    2982:	8d af       	std	Y+61, r24	; 0x3d
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <LCD_Init+0xee>
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c af       	std	Y+60, r25	; 0x3c
    298c:	8b af       	std	Y+59, r24	; 0x3b
    298e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2990:	9c ad       	ldd	r25, Y+60	; 0x3c
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_Init+0xdc>
    2996:	9c af       	std	Y+60, r25	; 0x3c
    2998:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8d ad       	ldd	r24, Y+61	; 0x3d
    299c:	9e ad       	ldd	r25, Y+62	; 0x3e
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9e af       	std	Y+62, r25	; 0x3e
    29a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <LCD_Init+0xd0>
    29ac:	16 c0       	rjmp	.+44     	; 0x29da <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	fe 01       	movw	r30, r28
    29b0:	ff 96       	adiw	r30, 0x3f	; 63
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
    29c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ca:	9a af       	std	Y+58, r25	; 0x3a
    29cc:	89 af       	std	Y+57, r24	; 0x39
    29ce:	89 ad       	ldd	r24, Y+57	; 0x39
    29d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_Init+0x11c>
    29d6:	9a af       	std	Y+58, r25	; 0x3a
    29d8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    29da:	88 e3       	ldi	r24, 0x38	; 56
    29dc:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	8d ab       	std	Y+53, r24	; 0x35
    29ea:	9e ab       	std	Y+54, r25	; 0x36
    29ec:	af ab       	std	Y+55, r26	; 0x37
    29ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6d a9       	ldd	r22, Y+53	; 0x35
    29f2:	7e a9       	ldd	r23, Y+54	; 0x36
    29f4:	8f a9       	ldd	r24, Y+55	; 0x37
    29f6:	98 ad       	ldd	r25, Y+56	; 0x38
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a ef       	ldi	r20, 0xFA	; 250
    29fe:	54 e4       	ldi	r21, 0x44	; 68
    2a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	89 ab       	std	Y+49, r24	; 0x31
    2a0a:	9a ab       	std	Y+50, r25	; 0x32
    2a0c:	ab ab       	std	Y+51, r26	; 0x33
    2a0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a10:	69 a9       	ldd	r22, Y+49	; 0x31
    2a12:	7a a9       	ldd	r23, Y+50	; 0x32
    2a14:	8b a9       	ldd	r24, Y+51	; 0x33
    2a16:	9c a9       	ldd	r25, Y+52	; 0x34
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_Init+0x17c>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	98 ab       	std	Y+48, r25	; 0x30
    2a2e:	8f a7       	std	Y+47, r24	; 0x2f
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    2a32:	69 a9       	ldd	r22, Y+49	; 0x31
    2a34:	7a a9       	ldd	r23, Y+50	; 0x32
    2a36:	8b a9       	ldd	r24, Y+51	; 0x33
    2a38:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a50:	98 ad       	ldd	r25, Y+56	; 0x38
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	98 ab       	std	Y+48, r25	; 0x30
    2a70:	8f a7       	std	Y+47, r24	; 0x2f
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_Init+0x1dc>
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9e a7       	std	Y+46, r25	; 0x2e
    2a7a:	8d a7       	std	Y+45, r24	; 0x2d
    2a7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_Init+0x1ca>
    2a84:	9e a7       	std	Y+46, r25	; 0x2e
    2a86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	98 ab       	std	Y+48, r25	; 0x30
    2a90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_Init+0x1be>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	98 ab       	std	Y+48, r25	; 0x30
    2aae:	8f a7       	std	Y+47, r24	; 0x2f
    2ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab4:	9c a7       	std	Y+44, r25	; 0x2c
    2ab6:	8b a7       	std	Y+43, r24	; 0x2b
    2ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_Init+0x206>
    2ac0:	9c a7       	std	Y+44, r25	; 0x2c
    2ac2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    2ac4:	8c e0       	ldi	r24, 0x0C	; 12
    2ac6:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e8       	ldi	r26, 0x80	; 128
    2ad0:	bf e3       	ldi	r27, 0x3F	; 63
    2ad2:	8f a3       	std	Y+39, r24	; 0x27
    2ad4:	98 a7       	std	Y+40, r25	; 0x28
    2ad6:	a9 a7       	std	Y+41, r26	; 0x29
    2ad8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ada:	6f a1       	ldd	r22, Y+39	; 0x27
    2adc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ade:	89 a5       	ldd	r24, Y+41	; 0x29
    2ae0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	4a ef       	ldi	r20, 0xFA	; 250
    2ae8:	54 e4       	ldi	r21, 0x44	; 68
    2aea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8b a3       	std	Y+35, r24	; 0x23
    2af4:	9c a3       	std	Y+36, r25	; 0x24
    2af6:	ad a3       	std	Y+37, r26	; 0x25
    2af8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2afa:	6b a1       	ldd	r22, Y+35	; 0x23
    2afc:	7c a1       	ldd	r23, Y+36	; 0x24
    2afe:	8d a1       	ldd	r24, Y+37	; 0x25
    2b00:	9e a1       	ldd	r25, Y+38	; 0x26
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e8       	ldi	r20, 0x80	; 128
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b0e:	88 23       	and	r24, r24
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <LCD_Init+0x266>
		__ticks = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9a a3       	std	Y+34, r25	; 0x22
    2b18:	89 a3       	std	Y+33, r24	; 0x21
    2b1a:	3f c0       	rjmp	.+126    	; 0x2b9a <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    2b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b20:	8d a1       	ldd	r24, Y+37	; 0x25
    2b22:	9e a1       	ldd	r25, Y+38	; 0x26
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	4c f5       	brge	.+82     	; 0x2b86 <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b34:	6f a1       	ldd	r22, Y+39	; 0x27
    2b36:	78 a5       	ldd	r23, Y+40	; 0x28
    2b38:	89 a5       	ldd	r24, Y+41	; 0x29
    2b3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e2       	ldi	r20, 0x20	; 32
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9a a3       	std	Y+34, r25	; 0x22
    2b5a:	89 a3       	std	Y+33, r24	; 0x21
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_Init+0x2c6>
    2b5e:	88 ec       	ldi	r24, 0xC8	; 200
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	98 a3       	std	Y+32, r25	; 0x20
    2b64:	8f 8f       	std	Y+31, r24	; 0x1f
    2b66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b68:	98 a1       	ldd	r25, Y+32	; 0x20
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_Init+0x2b4>
    2b6e:	98 a3       	std	Y+32, r25	; 0x20
    2b70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	89 a1       	ldd	r24, Y+33	; 0x21
    2b74:	9a a1       	ldd	r25, Y+34	; 0x22
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9a a3       	std	Y+34, r25	; 0x22
    2b7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	69 f7       	brne	.-38     	; 0x2b5e <LCD_Init+0x2a8>
    2b84:	14 c0       	rjmp	.+40     	; 0x2bae <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b86:	6b a1       	ldd	r22, Y+35	; 0x23
    2b88:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
    2b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ba2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_Init+0x2f0>
    2baa:	9e 8f       	std	Y+30, r25	; 0x1e
    2bac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e4       	ldi	r27, 0x40	; 64
    2bbc:	89 8f       	std	Y+25, r24	; 0x19
    2bbe:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc0:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a ef       	ldi	r20, 0xFA	; 250
    2bd2:	54 e4       	ldi	r21, 0x44	; 68
    2bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8d 8b       	std	Y+21, r24	; 0x15
    2bde:	9e 8b       	std	Y+22, r25	; 0x16
    2be0:	af 8b       	std	Y+23, r26	; 0x17
    2be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2be4:	6d 89       	ldd	r22, Y+21	; 0x15
    2be6:	7e 89       	ldd	r23, Y+22	; 0x16
    2be8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bea:	98 8d       	ldd	r25, Y+24	; 0x18
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e8       	ldi	r20, 0x80	; 128
    2bf2:	5f e3       	ldi	r21, 0x3F	; 63
    2bf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	2c f4       	brge	.+10     	; 0x2c06 <LCD_Init+0x350>
		__ticks = 1;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 8b       	std	Y+20, r25	; 0x14
    2c02:	8b 8b       	std	Y+19, r24	; 0x13
    2c04:	3f c0       	rjmp	.+126    	; 0x2c84 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    2c06:	6d 89       	ldd	r22, Y+21	; 0x15
    2c08:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	3f ef       	ldi	r19, 0xFF	; 255
    2c12:	4f e7       	ldi	r20, 0x7F	; 127
    2c14:	57 e4       	ldi	r21, 0x47	; 71
    2c16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	4c f5       	brge	.+82     	; 0x2c70 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e2       	ldi	r20, 0x20	; 32
    2c2c:	51 e4       	ldi	r21, 0x41	; 65
    2c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9c 8b       	std	Y+20, r25	; 0x14
    2c44:	8b 8b       	std	Y+19, r24	; 0x13
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <LCD_Init+0x3b0>
    2c48:	88 ec       	ldi	r24, 0xC8	; 200
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9a 8b       	std	Y+18, r25	; 0x12
    2c4e:	89 8b       	std	Y+17, r24	; 0x11
    2c50:	89 89       	ldd	r24, Y+17	; 0x11
    2c52:	9a 89       	ldd	r25, Y+18	; 0x12
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_Init+0x39e>
    2c58:	9a 8b       	std	Y+18, r25	; 0x12
    2c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	9c 8b       	std	Y+20, r25	; 0x14
    2c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c66:	8b 89       	ldd	r24, Y+19	; 0x13
    2c68:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	69 f7       	brne	.-38     	; 0x2c48 <LCD_Init+0x392>
    2c6e:	14 c0       	rjmp	.+40     	; 0x2c98 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9c 8b       	std	Y+20, r25	; 0x14
    2c82:	8b 8b       	std	Y+19, r24	; 0x13
    2c84:	8b 89       	ldd	r24, Y+19	; 0x13
    2c86:	9c 89       	ldd	r25, Y+20	; 0x14
    2c88:	98 8b       	std	Y+16, r25	; 0x10
    2c8a:	8f 87       	std	Y+15, r24	; 0x0f
    2c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8e:	98 89       	ldd	r25, Y+16	; 0x10
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_Init+0x3da>
    2c94:	98 8b       	std	Y+16, r25	; 0x10
    2c96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    2c98:	86 e0       	ldi	r24, 0x06	; 6
    2c9a:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a0 e8       	ldi	r26, 0x80	; 128
    2ca4:	bf e3       	ldi	r27, 0x3F	; 63
    2ca6:	8b 87       	std	Y+11, r24	; 0x0b
    2ca8:	9c 87       	std	Y+12, r25	; 0x0c
    2caa:	ad 87       	std	Y+13, r26	; 0x0d
    2cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a ef       	ldi	r20, 0xFA	; 250
    2cbc:	54 e4       	ldi	r21, 0x44	; 68
    2cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	8f 83       	std	Y+7, r24	; 0x07
    2cc8:	98 87       	std	Y+8, r25	; 0x08
    2cca:	a9 87       	std	Y+9, r26	; 0x09
    2ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <LCD_Init+0x43a>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9e 83       	std	Y+6, r25	; 0x06
    2cec:	8d 83       	std	Y+5, r24	; 0x05
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9e 83       	std	Y+6, r25	; 0x06
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <LCD_Init+0x49a>
    2d32:	88 ec       	ldi	r24, 0xC8	; 200
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_Init+0x488>
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	9e 83       	std	Y+6, r25	; 0x06
    2d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <LCD_Init+0x47c>
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <LCD_Init+0x4c4>
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2d82:	ca 5b       	subi	r28, 0xBA	; 186
    2d84:	df 4f       	sbci	r29, 0xFF	; 255
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	08 95       	ret

00002d9a <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <LCD_SendString+0x6>
    2da0:	0f 92       	push	r0
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	9b 83       	std	Y+3, r25	; 0x03
    2da8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    2daa:	19 82       	std	Y+1, r1	; 0x01
    2dac:	0e c0       	rjmp	.+28     	; 0x2dca <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	fc 01       	movw	r30, r24
    2dba:	e2 0f       	add	r30, r18
    2dbc:	f3 1f       	adc	r31, r19
    2dbe:	80 81       	ld	r24, Z
    2dc0:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_SendData>
		Counter++;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e2 0f       	add	r30, r18
    2dd8:	f3 1f       	adc	r31, r19
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 23       	and	r24, r24
    2dde:	39 f7       	brne	.-50     	; 0x2dae <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <LCD_GoToXY+0x6>
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <LCD_GoToXY+0x8>
    2df4:	0f 92       	push	r0
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
    2dfc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	88 23       	and	r24, r24
    2e02:	19 f0       	breq	.+6      	; 0x2e0a <LCD_GoToXY+0x1e>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	e1 f4       	brne	.+56     	; 0x2e42 <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	80 31       	cpi	r24, 0x10	; 16
    2e0e:	a8 f4       	brcc	.+42     	; 0x2e3a <LCD_GoToXY+0x4e>
		{
			switch(Row)
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	3d 83       	std	Y+5, r19	; 0x05
    2e18:	2c 83       	std	Y+4, r18	; 0x04
    2e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	31 f0       	breq	.+12     	; 0x2e2e <LCD_GoToXY+0x42>
    2e22:	2c 81       	ldd	r18, Y+4	; 0x04
    2e24:	3d 81       	ldd	r19, Y+5	; 0x05
    2e26:	21 30       	cpi	r18, 0x01	; 1
    2e28:	31 05       	cpc	r19, r1
    2e2a:	21 f0       	breq	.+8      	; 0x2e34 <LCD_GoToXY+0x48>
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	80 5c       	subi	r24, 0xC0	; 192
    2e38:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	80 58       	subi	r24, 0x80	; 128
    2e3e:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
	}
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_SendCommand>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e4       	ldi	r27, 0x40	; 64
    2e74:	8b 87       	std	Y+11, r24	; 0x0b
    2e76:	9c 87       	std	Y+12, r25	; 0x0c
    2e78:	ad 87       	std	Y+13, r26	; 0x0d
    2e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8f 83       	std	Y+7, r24	; 0x07
    2e96:	98 87       	std	Y+8, r25	; 0x08
    2e98:	a9 87       	std	Y+9, r26	; 0x09
    2e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <LCD_ClearDisplay+0xcc>
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_ClearDisplay+0xba>
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <LCD_ClearDisplay+0xae>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2a:	78 85       	ldd	r23, Y+8	; 0x08
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_ClearDisplay+0xf6>
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2f50:	2e 96       	adiw	r28, 0x0e	; 14
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <Keypad_Init>:
						{'C',0,'=','#'}
					  };


u8 Keypad_Init()
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	0f 92       	push	r0
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT , 0xF0);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	60 ef       	ldi	r22, 0xF0	; 240
    2f70:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	6f ef       	ldi	r22, 0xFF	; 255
    2f78:	0e 94 1f 0c 	call	0x183e	; 0x183e <MDIO_vSetPortVal>
}
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <KeypadGetKey>:

u8 KeypadGetKey()
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	6f 97       	sbiw	r28, 0x1f	; 31
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
	for(u8 Col=0; Col <COLs_NO; Col++)
    2f98:	1e 8e       	std	Y+30, r1	; 0x1e
    2f9a:	28 c1       	rjmp	.+592    	; 0x31ec <KeypadGetKey+0x268>
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    2f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f9e:	98 2f       	mov	r25, r24
    2fa0:	9c 5f       	subi	r25, 0xFC	; 252
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	69 2f       	mov	r22, r25
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>

		for(u8 Row=0; Row <ROWs_NO; Row++)
    2fac:	1d 8e       	std	Y+29, r1	; 0x1d
    2fae:	0f c1       	rjmp	.+542    	; 0x31ce <KeypadGetKey+0x24a>
		{
			if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0 )
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2fb4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <MDIO_GetPinVal>
    2fb8:	88 23       	and	r24, r24
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <KeypadGetKey+0x3a>
    2fbc:	05 c1       	rjmp	.+522    	; 0x31c8 <KeypadGetKey+0x244>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a8 e4       	ldi	r26, 0x48	; 72
    2fc4:	b2 e4       	ldi	r27, 0x42	; 66
    2fc6:	89 8f       	std	Y+25, r24	; 0x19
    2fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fca:	ab 8f       	std	Y+27, r26	; 0x1b
    2fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8d 8b       	std	Y+21, r24	; 0x15
    2fe8:	9e 8b       	std	Y+22, r25	; 0x16
    2fea:	af 8b       	std	Y+23, r26	; 0x17
    2fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <KeypadGetKey+0x8c>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	3f c0       	rjmp	.+126    	; 0x308e <KeypadGetKey+0x10a>
	else if (__tmp > 65535)
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <KeypadGetKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	69 8d       	ldd	r22, Y+25	; 0x19
    302a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <KeypadGetKey+0xec>
    3052:	88 ec       	ldi	r24, 0xC8	; 200
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9a 8b       	std	Y+18, r25	; 0x12
    3058:	89 8b       	std	Y+17, r24	; 0x11
    305a:	89 89       	ldd	r24, Y+17	; 0x11
    305c:	9a 89       	ldd	r25, Y+18	; 0x12
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <KeypadGetKey+0xda>
    3062:	9a 8b       	std	Y+18, r25	; 0x12
    3064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8b 89       	ldd	r24, Y+19	; 0x13
    3068:	9c 89       	ldd	r25, Y+20	; 0x14
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9c 8b       	std	Y+20, r25	; 0x14
    306e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8b 89       	ldd	r24, Y+19	; 0x13
    3072:	9c 89       	ldd	r25, Y+20	; 0x14
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <KeypadGetKey+0xce>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <KeypadGetKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6d 89       	ldd	r22, Y+21	; 0x15
    307c:	7e 89       	ldd	r23, Y+22	; 0x16
    307e:	8f 89       	ldd	r24, Y+23	; 0x17
    3080:	98 8d       	ldd	r25, Y+24	; 0x18
    3082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	98 8b       	std	Y+16, r25	; 0x10
    3094:	8f 87       	std	Y+15, r24	; 0x0f
    3096:	8f 85       	ldd	r24, Y+15	; 0x0f
    3098:	98 89       	ldd	r25, Y+16	; 0x10
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <KeypadGetKey+0x116>
    309e:	98 8b       	std	Y+16, r25	; 0x10
    30a0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50);
				if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    30a6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <MDIO_GetPinVal>
    30aa:	88 23       	and	r24, r24
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <KeypadGetKey+0x12c>
    30ae:	8c c0       	rjmp	.+280    	; 0x31c8 <KeypadGetKey+0x244>
				{
					while(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    30b4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <MDIO_GetPinVal>
    30b8:	88 23       	and	r24, r24
    30ba:	09 f0       	breq	.+2      	; 0x30be <KeypadGetKey+0x13a>
    30bc:	85 c0       	rjmp	.+266    	; 0x31c8 <KeypadGetKey+0x244>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a8 e4       	ldi	r26, 0x48	; 72
    30c4:	b2 e4       	ldi	r27, 0x42	; 66
    30c6:	8b 87       	std	Y+11, r24	; 0x0b
    30c8:	9c 87       	std	Y+12, r25	; 0x0c
    30ca:	ad 87       	std	Y+13, r26	; 0x0d
    30cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4a ef       	ldi	r20, 0xFA	; 250
    30dc:	54 e4       	ldi	r21, 0x44	; 68
    30de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8f 83       	std	Y+7, r24	; 0x07
    30e8:	98 87       	std	Y+8, r25	; 0x08
    30ea:	a9 87       	std	Y+9, r26	; 0x09
    30ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ee:	6f 81       	ldd	r22, Y+7	; 0x07
    30f0:	78 85       	ldd	r23, Y+8	; 0x08
    30f2:	89 85       	ldd	r24, Y+9	; 0x09
    30f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3102:	88 23       	and	r24, r24
    3104:	2c f4       	brge	.+10     	; 0x3110 <KeypadGetKey+0x18c>
		__ticks = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	3f c0       	rjmp	.+126    	; 0x318e <KeypadGetKey+0x20a>
	else if (__tmp > 65535)
    3110:	6f 81       	ldd	r22, Y+7	; 0x07
    3112:	78 85       	ldd	r23, Y+8	; 0x08
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	4c f5       	brge	.+82     	; 0x317a <KeypadGetKey+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	6b 85       	ldd	r22, Y+11	; 0x0b
    312a:	7c 85       	ldd	r23, Y+12	; 0x0c
    312c:	8d 85       	ldd	r24, Y+13	; 0x0d
    312e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9e 83       	std	Y+6, r25	; 0x06
    314e:	8d 83       	std	Y+5, r24	; 0x05
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <KeypadGetKey+0x1ec>
    3152:	88 ec       	ldi	r24, 0xC8	; 200
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <KeypadGetKey+0x1da>
    3162:	9c 83       	std	Y+4, r25	; 0x04
    3164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f7       	brne	.-38     	; 0x3152 <KeypadGetKey+0x1ce>
    3178:	14 c0       	rjmp	.+40     	; 0x31a2 <KeypadGetKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317a:	6f 81       	ldd	r22, Y+7	; 0x07
    317c:	78 85       	ldd	r23, Y+8	; 0x08
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9e 83       	std	Y+6, r25	; 0x06
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	8d 81       	ldd	r24, Y+5	; 0x05
    3190:	9e 81       	ldd	r25, Y+6	; 0x06
    3192:	9a 83       	std	Y+2, r25	; 0x02
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <KeypadGetKey+0x216>
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						return KeypadMap[Row][Col];
    31a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31a4:	48 2f       	mov	r20, r24
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	ca 01       	movw	r24, r20
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	fc 01       	movw	r30, r24
    31be:	e8 59       	subi	r30, 0x98	; 152
    31c0:	fe 4f       	sbci	r31, 0xFE	; 254
    31c2:	80 81       	ld	r24, Z
    31c4:	8f 8f       	std	Y+31, r24	; 0x1f
    31c6:	18 c0       	rjmp	.+48     	; 0x31f8 <KeypadGetKey+0x274>
	for(u8 Col=0; Col <COLs_NO; Col++)
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);

		for(u8 Row=0; Row <ROWs_NO; Row++)
    31c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ca:	8f 5f       	subi	r24, 0xFF	; 255
    31cc:	8d 8f       	std	Y+29, r24	; 0x1d
    31ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d0:	84 30       	cpi	r24, 0x04	; 4
    31d2:	08 f4       	brcc	.+2      	; 0x31d6 <KeypadGetKey+0x252>
    31d4:	ed ce       	rjmp	.-550    	; 0x2fb0 <KeypadGetKey+0x2c>
				}
//				return KeypadMap[Row][Col];
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    31d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d8:	98 2f       	mov	r25, r24
    31da:	9c 5f       	subi	r25, 0xFC	; 252
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	69 2f       	mov	r22, r25
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 b2 09 	call	0x1364	; 0x1364 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
}

u8 KeypadGetKey()
{
	for(u8 Col=0; Col <COLs_NO; Col++)
    31e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	8e 8f       	std	Y+30, r24	; 0x1e
    31ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ee:	84 30       	cpi	r24, 0x04	; 4
    31f0:	08 f4       	brcc	.+2      	; 0x31f4 <KeypadGetKey+0x270>
    31f2:	d4 ce       	rjmp	.-600    	; 0x2f9c <KeypadGetKey+0x18>
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return NO_KEY_PRESSED;
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	8f 8f       	std	Y+31, r24	; 0x1f
    31f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    31fa:	6f 96       	adiw	r28, 0x1f	; 31
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <__prologue_saves__>:
    320c:	2f 92       	push	r2
    320e:	3f 92       	push	r3
    3210:	4f 92       	push	r4
    3212:	5f 92       	push	r5
    3214:	6f 92       	push	r6
    3216:	7f 92       	push	r7
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	af 92       	push	r10
    321e:	bf 92       	push	r11
    3220:	cf 92       	push	r12
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	ca 1b       	sub	r28, r26
    3236:	db 0b       	sbc	r29, r27
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	09 94       	ijmp

00003244 <__epilogue_restores__>:
    3244:	2a 88       	ldd	r2, Y+18	; 0x12
    3246:	39 88       	ldd	r3, Y+17	; 0x11
    3248:	48 88       	ldd	r4, Y+16	; 0x10
    324a:	5f 84       	ldd	r5, Y+15	; 0x0f
    324c:	6e 84       	ldd	r6, Y+14	; 0x0e
    324e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3250:	8c 84       	ldd	r8, Y+12	; 0x0c
    3252:	9b 84       	ldd	r9, Y+11	; 0x0b
    3254:	aa 84       	ldd	r10, Y+10	; 0x0a
    3256:	b9 84       	ldd	r11, Y+9	; 0x09
    3258:	c8 84       	ldd	r12, Y+8	; 0x08
    325a:	df 80       	ldd	r13, Y+7	; 0x07
    325c:	ee 80       	ldd	r14, Y+6	; 0x06
    325e:	fd 80       	ldd	r15, Y+5	; 0x05
    3260:	0c 81       	ldd	r16, Y+4	; 0x04
    3262:	1b 81       	ldd	r17, Y+3	; 0x03
    3264:	aa 81       	ldd	r26, Y+2	; 0x02
    3266:	b9 81       	ldd	r27, Y+1	; 0x01
    3268:	ce 0f       	add	r28, r30
    326a:	d1 1d       	adc	r29, r1
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	ed 01       	movw	r28, r26
    3278:	08 95       	ret

0000327a <_exit>:
    327a:	f8 94       	cli

0000327c <__stop_program>:
    327c:	ff cf       	rjmp	.-2      	; 0x327c <__stop_program>

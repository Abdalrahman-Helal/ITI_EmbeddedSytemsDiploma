
ITI_Day15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e96  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000f0a  2**0
                  ALLOC
  2 .stab         0000147c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001068  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


#define F_CPU 8000000UL

void main(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <main+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	u16 Out_Volat = 0;
  88:	1c 82       	std	Y+4, r1	; 0x04
  8a:	1b 82       	std	Y+3, r1	; 0x03
	u16 Temp =0;
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
	MDIO_vSetPinDir(DIO_PORTA ,PIN0 , DIO_INPUT);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	0e 94 3e 02 	call	0x47c	; 0x47c <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTB , PIN0 ,DIO_OUTPUT);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	0e 94 3e 02 	call	0x47c	; 0x47c <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTB , PIN1 ,DIO_OUTPUT);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	0e 94 3e 02 	call	0x47c	; 0x47c <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTB , PIN2 ,DIO_OUTPUT);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	0e 94 3e 02 	call	0x47c	; 0x47c <MDIO_vSetPinDir>

	MDIO_vSetPinVal(DIO_PORTB , PIN0 , DIO_LOW);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DIO_PORTB , PIN1 , DIO_LOW);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DIO_PORTB , PIN2 , DIO_LOW);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>

	ADC_Init();
  d6:	0e 94 34 06 	call	0xc68	; 0xc68 <ADC_Init>

	while(1)
	{
		Out_Volat= ADC_StartConvertPolling(0b0000);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <ADC_StartConvertPolling>
  e0:	9c 83       	std	Y+4, r25	; 0x04
  e2:	8b 83       	std	Y+3, r24	; 0x03
		Out_Volat =  Out_Volat*(5000/1023);   // 1.0 --> 4.9
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	9c 83       	std	Y+4, r25	; 0x04
  f2:	8b 83       	std	Y+3, r24	; 0x03
		Temp = Out_Volat / 10 ;
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	2a e0       	ldi	r18, 0x0A	; 10
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	0e 94 35 07 	call	0xe6a	; 0xe6a <__udivmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	89 83       	std	Y+1, r24	; 0x01

		if(Temp < 20)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	84 31       	cpi	r24, 0x14	; 20
 10e:	91 05       	cpc	r25, r1
 110:	80 f4       	brcc	.+32     	; 0x132 <main+0xb6>
		{
			MDIO_vSetPinVal(DIO_PORTB,PIN0,DIO_HIGH);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN1,DIO_LOW);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN2,DIO_LOW);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
 130:	d4 cf       	rjmp	.-88     	; 0xda <main+0x5e>
		}
		else if(Temp < 40)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	88 32       	cpi	r24, 0x28	; 40
 138:	91 05       	cpc	r25, r1
 13a:	80 f4       	brcc	.+32     	; 0x15c <main+0xe0>
		{
			MDIO_vSetPinVal(DIO_PORTB,PIN0,DIO_LOW);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN1,DIO_HIGH);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN2,DIO_LOW);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
 15a:	bf cf       	rjmp	.-130    	; 0xda <main+0x5e>
		}
		else
		{
			MDIO_vSetPinVal(DIO_PORTB,PIN0,DIO_LOW);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN1,DIO_LOW);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
			MDIO_vSetPinVal(DIO_PORTB,PIN2,DIO_HIGH);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MDIO_vSetPinVal>
 17a:	af cf       	rjmp	.-162    	; 0xda <main+0x5e>

0000017c <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
 184:	af e5       	ldi	r26, 0x5F	; 95
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	ef e5       	ldi	r30, 0x5F	; 95
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8c 93       	st	X, r24
}
 192:	cf 91       	pop	r28
 194:	df 91       	pop	r29
 196:	08 95       	ret

00000198 <GIE_Disable>:
void GIE_Disable(void)
{
 198:	df 93       	push	r29
 19a:	cf 93       	push	r28
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
 1a0:	af e5       	ldi	r26, 0x5F	; 95
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	ef e5       	ldi	r30, 0x5F	; 95
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	8c 93       	st	X, r24
}
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <EXTI_EnableDisable+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <EXTI_EnableDisable+0x8>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	3c 83       	std	Y+4, r19	; 0x04
 1cc:	2b 83       	std	Y+3, r18	; 0x03
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 05       	cpc	r25, r1
 1d6:	01 f1       	breq	.+64     	; 0x218 <EXTI_EnableDisable+0x64>
 1d8:	2b 81       	ldd	r18, Y+3	; 0x03
 1da:	3c 81       	ldd	r19, Y+4	; 0x04
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	89 f1       	breq	.+98     	; 0x244 <EXTI_EnableDisable+0x90>
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	09 f0       	breq	.+2      	; 0x1ec <EXTI_EnableDisable+0x38>
 1ea:	41 c0       	rjmp	.+130    	; 0x26e <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	41 f4       	brne	.+16     	; 0x202 <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
 1f2:	ab e5       	ldi	r26, 0x5B	; 91
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e5       	ldi	r30, 0x5B	; 91
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	8c 93       	st	X, r24
 200:	36 c0       	rjmp	.+108    	; 0x26e <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	88 23       	and	r24, r24
 206:	99 f5       	brne	.+102    	; 0x26e <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
 208:	ab e5       	ldi	r26, 0x5B	; 91
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	eb e5       	ldi	r30, 0x5B	; 91
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8f 7b       	andi	r24, 0xBF	; 191
 214:	8c 93       	st	X, r24
 216:	2b c0       	rjmp	.+86     	; 0x26e <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	41 f4       	brne	.+16     	; 0x22e <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
 21e:	ab e5       	ldi	r26, 0x5B	; 91
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	eb e5       	ldi	r30, 0x5B	; 91
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	8c 93       	st	X, r24
 22c:	20 c0       	rjmp	.+64     	; 0x26e <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	88 23       	and	r24, r24
 232:	e9 f4       	brne	.+58     	; 0x26e <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
 234:	ab e5       	ldi	r26, 0x5B	; 91
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	eb e5       	ldi	r30, 0x5B	; 91
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8f 77       	andi	r24, 0x7F	; 127
 240:	8c 93       	st	X, r24
 242:	15 c0       	rjmp	.+42     	; 0x26e <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	41 f4       	brne	.+16     	; 0x25a <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
 24a:	ab e5       	ldi	r26, 0x5B	; 91
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	eb e5       	ldi	r30, 0x5B	; 91
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 62       	ori	r24, 0x20	; 32
 256:	8c 93       	st	X, r24
 258:	0a c0       	rjmp	.+20     	; 0x26e <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	88 23       	and	r24, r24
 25e:	39 f4       	brne	.+14     	; 0x26e <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
 260:	ab e5       	ldi	r26, 0x5B	; 91
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	eb e5       	ldi	r30, 0x5B	; 91
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8f 7d       	andi	r24, 0xDF	; 223
 26c:	8c 93       	st	X, r24
		}
		break;
	}
}
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2a 97       	sbiw	r28, 0x0a	; 10
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	3a 87       	std	Y+10, r19	; 0x0a
 29c:	29 87       	std	Y+9, r18	; 0x09
 29e:	89 85       	ldd	r24, Y+9	; 0x09
 2a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	91 05       	cpc	r25, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <EXTI_SetSenstivity+0x2e>
 2a8:	66 c0       	rjmp	.+204    	; 0x376 <EXTI_SetSenstivity+0xfa>
 2aa:	29 85       	ldd	r18, Y+9	; 0x09
 2ac:	3a 85       	ldd	r19, Y+10	; 0x0a
 2ae:	22 30       	cpi	r18, 0x02	; 2
 2b0:	31 05       	cpc	r19, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <EXTI_SetSenstivity+0x3a>
 2b4:	bb c0       	rjmp	.+374    	; 0x42c <EXTI_SetSenstivity+0x1b0>
 2b6:	89 85       	ldd	r24, Y+9	; 0x09
 2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <EXTI_SetSenstivity+0x44>
 2be:	d5 c0       	rjmp	.+426    	; 0x46a <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	38 87       	std	Y+8, r19	; 0x08
 2c8:	2f 83       	std	Y+7, r18	; 0x07
 2ca:	8f 81       	ldd	r24, Y+7	; 0x07
 2cc:	98 85       	ldd	r25, Y+8	; 0x08
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	91 05       	cpc	r25, r1
 2d2:	21 f1       	breq	.+72     	; 0x31c <EXTI_SetSenstivity+0xa0>
 2d4:	2f 81       	ldd	r18, Y+7	; 0x07
 2d6:	38 85       	ldd	r19, Y+8	; 0x08
 2d8:	22 30       	cpi	r18, 0x02	; 2
 2da:	31 05       	cpc	r19, r1
 2dc:	2c f4       	brge	.+10     	; 0x2e8 <EXTI_SetSenstivity+0x6c>
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	98 85       	ldd	r25, Y+8	; 0x08
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	61 f0       	breq	.+24     	; 0x2fe <EXTI_SetSenstivity+0x82>
 2e6:	c1 c0       	rjmp	.+386    	; 0x46a <EXTI_SetSenstivity+0x1ee>
 2e8:	2f 81       	ldd	r18, Y+7	; 0x07
 2ea:	38 85       	ldd	r19, Y+8	; 0x08
 2ec:	22 30       	cpi	r18, 0x02	; 2
 2ee:	31 05       	cpc	r19, r1
 2f0:	21 f1       	breq	.+72     	; 0x33a <EXTI_SetSenstivity+0xbe>
 2f2:	8f 81       	ldd	r24, Y+7	; 0x07
 2f4:	98 85       	ldd	r25, Y+8	; 0x08
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	91 05       	cpc	r25, r1
 2fa:	71 f1       	breq	.+92     	; 0x358 <EXTI_SetSenstivity+0xdc>
 2fc:	b6 c0       	rjmp	.+364    	; 0x46a <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
 2fe:	a5 e5       	ldi	r26, 0x55	; 85
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e5 e5       	ldi	r30, 0x55	; 85
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8e 7f       	andi	r24, 0xFE	; 254
 30a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
 30c:	a5 e5       	ldi	r26, 0x55	; 85
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e5 e5       	ldi	r30, 0x55	; 85
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8d 7f       	andi	r24, 0xFD	; 253
 318:	8c 93       	st	X, r24
 31a:	a7 c0       	rjmp	.+334    	; 0x46a <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
 31c:	a5 e5       	ldi	r26, 0x55	; 85
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e5 e5       	ldi	r30, 0x55	; 85
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	81 60       	ori	r24, 0x01	; 1
 328:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
 32a:	a5 e5       	ldi	r26, 0x55	; 85
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e5 e5       	ldi	r30, 0x55	; 85
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8d 7f       	andi	r24, 0xFD	; 253
 336:	8c 93       	st	X, r24
 338:	98 c0       	rjmp	.+304    	; 0x46a <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
 33a:	a5 e5       	ldi	r26, 0x55	; 85
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e5 e5       	ldi	r30, 0x55	; 85
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	8e 7f       	andi	r24, 0xFE	; 254
 346:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
 348:	a5 e5       	ldi	r26, 0x55	; 85
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e5 e5       	ldi	r30, 0x55	; 85
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	82 60       	ori	r24, 0x02	; 2
 354:	8c 93       	st	X, r24
 356:	89 c0       	rjmp	.+274    	; 0x46a <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
 358:	a5 e5       	ldi	r26, 0x55	; 85
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e5 e5       	ldi	r30, 0x55	; 85
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	81 60       	ori	r24, 0x01	; 1
 364:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
 366:	a5 e5       	ldi	r26, 0x55	; 85
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e5 e5       	ldi	r30, 0x55	; 85
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	82 60       	ori	r24, 0x02	; 2
 372:	8c 93       	st	X, r24
 374:	7a c0       	rjmp	.+244    	; 0x46a <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	3e 83       	std	Y+6, r19	; 0x06
 37e:	2d 83       	std	Y+5, r18	; 0x05
 380:	8d 81       	ldd	r24, Y+5	; 0x05
 382:	9e 81       	ldd	r25, Y+6	; 0x06
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	91 05       	cpc	r25, r1
 388:	21 f1       	breq	.+72     	; 0x3d2 <EXTI_SetSenstivity+0x156>
 38a:	2d 81       	ldd	r18, Y+5	; 0x05
 38c:	3e 81       	ldd	r19, Y+6	; 0x06
 38e:	22 30       	cpi	r18, 0x02	; 2
 390:	31 05       	cpc	r19, r1
 392:	2c f4       	brge	.+10     	; 0x39e <EXTI_SetSenstivity+0x122>
 394:	8d 81       	ldd	r24, Y+5	; 0x05
 396:	9e 81       	ldd	r25, Y+6	; 0x06
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	61 f0       	breq	.+24     	; 0x3b4 <EXTI_SetSenstivity+0x138>
 39c:	66 c0       	rjmp	.+204    	; 0x46a <EXTI_SetSenstivity+0x1ee>
 39e:	2d 81       	ldd	r18, Y+5	; 0x05
 3a0:	3e 81       	ldd	r19, Y+6	; 0x06
 3a2:	22 30       	cpi	r18, 0x02	; 2
 3a4:	31 05       	cpc	r19, r1
 3a6:	21 f1       	breq	.+72     	; 0x3f0 <EXTI_SetSenstivity+0x174>
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	9e 81       	ldd	r25, Y+6	; 0x06
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	91 05       	cpc	r25, r1
 3b0:	71 f1       	breq	.+92     	; 0x40e <EXTI_SetSenstivity+0x192>
 3b2:	5b c0       	rjmp	.+182    	; 0x46a <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
 3b4:	a5 e5       	ldi	r26, 0x55	; 85
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e5 e5       	ldi	r30, 0x55	; 85
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
 3c2:	a5 e5       	ldi	r26, 0x55	; 85
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e5 e5       	ldi	r30, 0x55	; 85
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	87 7f       	andi	r24, 0xF7	; 247
 3ce:	8c 93       	st	X, r24
 3d0:	4c c0       	rjmp	.+152    	; 0x46a <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
 3d2:	a5 e5       	ldi	r26, 0x55	; 85
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e5 e5       	ldi	r30, 0x55	; 85
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	84 60       	ori	r24, 0x04	; 4
 3de:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
 3e0:	a5 e5       	ldi	r26, 0x55	; 85
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e5 e5       	ldi	r30, 0x55	; 85
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	8c 93       	st	X, r24
 3ee:	3d c0       	rjmp	.+122    	; 0x46a <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
 3f0:	a5 e5       	ldi	r26, 0x55	; 85
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e5 e5       	ldi	r30, 0x55	; 85
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8b 7f       	andi	r24, 0xFB	; 251
 3fc:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
 3fe:	a5 e5       	ldi	r26, 0x55	; 85
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e5 e5       	ldi	r30, 0x55	; 85
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	8c 93       	st	X, r24
 40c:	2e c0       	rjmp	.+92     	; 0x46a <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
 40e:	a5 e5       	ldi	r26, 0x55	; 85
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e5 e5       	ldi	r30, 0x55	; 85
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	84 60       	ori	r24, 0x04	; 4
 41a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
 41c:	a5 e5       	ldi	r26, 0x55	; 85
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e5 e5       	ldi	r30, 0x55	; 85
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	88 60       	ori	r24, 0x08	; 8
 428:	8c 93       	st	X, r24
 42a:	1f c0       	rjmp	.+62     	; 0x46a <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	3c 83       	std	Y+4, r19	; 0x04
 434:	2b 83       	std	Y+3, r18	; 0x03
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	9c 81       	ldd	r25, Y+4	; 0x04
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	91 05       	cpc	r25, r1
 43e:	31 f0       	breq	.+12     	; 0x44c <EXTI_SetSenstivity+0x1d0>
 440:	2b 81       	ldd	r18, Y+3	; 0x03
 442:	3c 81       	ldd	r19, Y+4	; 0x04
 444:	23 30       	cpi	r18, 0x03	; 3
 446:	31 05       	cpc	r19, r1
 448:	49 f0       	breq	.+18     	; 0x45c <EXTI_SetSenstivity+0x1e0>
 44a:	0f c0       	rjmp	.+30     	; 0x46a <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
 44c:	a4 e5       	ldi	r26, 0x54	; 84
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e4 e5       	ldi	r30, 0x54	; 84
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	80 64       	ori	r24, 0x40	; 64
 458:	8c 93       	st	X, r24
 45a:	07 c0       	rjmp	.+14     	; 0x46a <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
 45c:	a4 e5       	ldi	r26, 0x54	; 84
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e4 e5       	ldi	r30, 0x54	; 84
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	8f 7b       	andi	r24, 0xBF	; 191
 468:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
 46a:	2a 96       	adiw	r28, 0x0a	; 10
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	2d 97       	sbiw	r28, 0x0d	; 13
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	6a 83       	std	Y+2, r22	; 0x02
 494:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	84 30       	cpi	r24, 0x04	; 4
 49a:	08 f0       	brcs	.+2      	; 0x49e <MDIO_vSetPinDir+0x22>
 49c:	09 c1       	rjmp	.+530    	; 0x6b0 <MDIO_vSetPinDir+0x234>
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <MDIO_vSetPinDir+0x2a>
 4a4:	05 c1       	rjmp	.+522    	; 0x6b0 <MDIO_vSetPinDir+0x234>
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <MDIO_vSetPinDir+0x32>
 4ac:	01 c1       	rjmp	.+514    	; 0x6b0 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	3d 87       	std	Y+13, r19	; 0x0d
 4b6:	2c 87       	std	Y+12, r18	; 0x0c
 4b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <MDIO_vSetPinDir+0x48>
 4c2:	4f c0       	rjmp	.+158    	; 0x562 <MDIO_vSetPinDir+0xe6>
 4c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 4c6:	3d 85       	ldd	r19, Y+13	; 0x0d
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	31 05       	cpc	r19, r1
 4cc:	2c f4       	brge	.+10     	; 0x4d8 <MDIO_vSetPinDir+0x5c>
 4ce:	8c 85       	ldd	r24, Y+12	; 0x0c
 4d0:	9d 85       	ldd	r25, Y+13	; 0x0d
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <MDIO_vSetPinDir+0x76>
 4d6:	ec c0       	rjmp	.+472    	; 0x6b0 <MDIO_vSetPinDir+0x234>
 4d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 4da:	3d 85       	ldd	r19, Y+13	; 0x0d
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <MDIO_vSetPinDir+0x68>
 4e2:	77 c0       	rjmp	.+238    	; 0x5d2 <MDIO_vSetPinDir+0x156>
 4e4:	8c 85       	ldd	r24, Y+12	; 0x0c
 4e6:	9d 85       	ldd	r25, Y+13	; 0x0d
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	91 05       	cpc	r25, r1
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <MDIO_vSetPinDir+0x74>
 4ee:	a9 c0       	rjmp	.+338    	; 0x642 <MDIO_vSetPinDir+0x1c6>
 4f0:	df c0       	rjmp	.+446    	; 0x6b0 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	3b 87       	std	Y+11, r19	; 0x0b
 4fa:	2a 87       	std	Y+10, r18	; 0x0a
 4fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 4fe:	9b 85       	ldd	r25, Y+11	; 0x0b
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	31 f0       	breq	.+12     	; 0x510 <MDIO_vSetPinDir+0x94>
 504:	2a 85       	ldd	r18, Y+10	; 0x0a
 506:	3b 85       	ldd	r19, Y+11	; 0x0b
 508:	21 30       	cpi	r18, 0x01	; 1
 50a:	31 05       	cpc	r19, r1
 50c:	b1 f0       	breq	.+44     	; 0x53a <MDIO_vSetPinDir+0xbe>
 50e:	d0 c0       	rjmp	.+416    	; 0x6b0 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
 510:	aa e3       	ldi	r26, 0x3A	; 58
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	ea e3       	ldi	r30, 0x3A	; 58
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 2e       	mov	r0, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <MDIO_vSetPinDir+0xb2>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	0a 94       	dec	r0
 530:	e2 f7       	brpl	.-8      	; 0x52a <MDIO_vSetPinDir+0xae>
 532:	80 95       	com	r24
 534:	84 23       	and	r24, r20
 536:	8c 93       	st	X, r24
 538:	bb c0       	rjmp	.+374    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
 53a:	aa e3       	ldi	r26, 0x3A	; 58
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	ea e3       	ldi	r30, 0x3A	; 58
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	48 2f       	mov	r20, r24
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 2e       	mov	r0, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <MDIO_vSetPinDir+0xdc>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <MDIO_vSetPinDir+0xd8>
 55c:	84 2b       	or	r24, r20
 55e:	8c 93       	st	X, r24
 560:	a7 c0       	rjmp	.+334    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	39 87       	std	Y+9, r19	; 0x09
 56a:	28 87       	std	Y+8, r18	; 0x08
 56c:	88 85       	ldd	r24, Y+8	; 0x08
 56e:	99 85       	ldd	r25, Y+9	; 0x09
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	31 f0       	breq	.+12     	; 0x580 <MDIO_vSetPinDir+0x104>
 574:	28 85       	ldd	r18, Y+8	; 0x08
 576:	39 85       	ldd	r19, Y+9	; 0x09
 578:	21 30       	cpi	r18, 0x01	; 1
 57a:	31 05       	cpc	r19, r1
 57c:	b1 f0       	breq	.+44     	; 0x5aa <MDIO_vSetPinDir+0x12e>
 57e:	98 c0       	rjmp	.+304    	; 0x6b0 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
 580:	a7 e3       	ldi	r26, 0x37	; 55
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	e7 e3       	ldi	r30, 0x37	; 55
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	48 2f       	mov	r20, r24
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 2e       	mov	r0, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <MDIO_vSetPinDir+0x122>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	0a 94       	dec	r0
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <MDIO_vSetPinDir+0x11e>
 5a2:	80 95       	com	r24
 5a4:	84 23       	and	r24, r20
 5a6:	8c 93       	st	X, r24
 5a8:	83 c0       	rjmp	.+262    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
 5aa:	a7 e3       	ldi	r26, 0x37	; 55
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	e7 e3       	ldi	r30, 0x37	; 55
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 2e       	mov	r0, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <MDIO_vSetPinDir+0x14c>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <MDIO_vSetPinDir+0x148>
 5cc:	84 2b       	or	r24, r20
 5ce:	8c 93       	st	X, r24
 5d0:	6f c0       	rjmp	.+222    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	3f 83       	std	Y+7, r19	; 0x07
 5da:	2e 83       	std	Y+6, r18	; 0x06
 5dc:	8e 81       	ldd	r24, Y+6	; 0x06
 5de:	9f 81       	ldd	r25, Y+7	; 0x07
 5e0:	00 97       	sbiw	r24, 0x00	; 0
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <MDIO_vSetPinDir+0x174>
 5e4:	2e 81       	ldd	r18, Y+6	; 0x06
 5e6:	3f 81       	ldd	r19, Y+7	; 0x07
 5e8:	21 30       	cpi	r18, 0x01	; 1
 5ea:	31 05       	cpc	r19, r1
 5ec:	b1 f0       	breq	.+44     	; 0x61a <MDIO_vSetPinDir+0x19e>
 5ee:	60 c0       	rjmp	.+192    	; 0x6b0 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
 5f0:	a4 e3       	ldi	r26, 0x34	; 52
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	e4 e3       	ldi	r30, 0x34	; 52
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	48 2f       	mov	r20, r24
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 2e       	mov	r0, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <MDIO_vSetPinDir+0x192>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	0a 94       	dec	r0
 610:	e2 f7       	brpl	.-8      	; 0x60a <MDIO_vSetPinDir+0x18e>
 612:	80 95       	com	r24
 614:	84 23       	and	r24, r20
 616:	8c 93       	st	X, r24
 618:	4b c0       	rjmp	.+150    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
 61a:	a4 e3       	ldi	r26, 0x34	; 52
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e4 e3       	ldi	r30, 0x34	; 52
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 2e       	mov	r0, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <MDIO_vSetPinDir+0x1bc>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <MDIO_vSetPinDir+0x1b8>
 63c:	84 2b       	or	r24, r20
 63e:	8c 93       	st	X, r24
 640:	37 c0       	rjmp	.+110    	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	3d 83       	std	Y+5, r19	; 0x05
 64a:	2c 83       	std	Y+4, r18	; 0x04
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	9d 81       	ldd	r25, Y+5	; 0x05
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	31 f0       	breq	.+12     	; 0x660 <MDIO_vSetPinDir+0x1e4>
 654:	2c 81       	ldd	r18, Y+4	; 0x04
 656:	3d 81       	ldd	r19, Y+5	; 0x05
 658:	21 30       	cpi	r18, 0x01	; 1
 65a:	31 05       	cpc	r19, r1
 65c:	b1 f0       	breq	.+44     	; 0x68a <MDIO_vSetPinDir+0x20e>
 65e:	28 c0       	rjmp	.+80     	; 0x6b0 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
 660:	a1 e3       	ldi	r26, 0x31	; 49
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	e1 e3       	ldi	r30, 0x31	; 49
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	48 2f       	mov	r20, r24
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 2e       	mov	r0, r18
 678:	02 c0       	rjmp	.+4      	; 0x67e <MDIO_vSetPinDir+0x202>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	0a 94       	dec	r0
 680:	e2 f7       	brpl	.-8      	; 0x67a <MDIO_vSetPinDir+0x1fe>
 682:	80 95       	com	r24
 684:	84 23       	and	r24, r20
 686:	8c 93       	st	X, r24
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
 68a:	a1 e3       	ldi	r26, 0x31	; 49
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	e1 e3       	ldi	r30, 0x31	; 49
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	48 2f       	mov	r20, r24
 696:	8a 81       	ldd	r24, Y+2	; 0x02
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 2e       	mov	r0, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <MDIO_vSetPinDir+0x22c>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	0a 94       	dec	r0
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <MDIO_vSetPinDir+0x228>
 6ac:	84 2b       	or	r24, r20
 6ae:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 6b0:	2d 96       	adiw	r28, 0x0d	; 13
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	cf 91       	pop	r28
 6be:	df 91       	pop	r29
 6c0:	08 95       	ret

000006c2 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
 6c2:	df 93       	push	r29
 6c4:	cf 93       	push	r28
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	2d 97       	sbiw	r28, 0x0d	; 13
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	de bf       	out	0x3e, r29	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	6a 83       	std	Y+2, r22	; 0x02
 6da:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	84 30       	cpi	r24, 0x04	; 4
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <MDIO_vSetPinVal+0x22>
 6e2:	09 c1       	rjmp	.+530    	; 0x8f6 <__stack+0x97>
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	88 30       	cpi	r24, 0x08	; 8
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <MDIO_vSetPinVal+0x2a>
 6ea:	05 c1       	rjmp	.+522    	; 0x8f6 <__stack+0x97>
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	82 30       	cpi	r24, 0x02	; 2
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <MDIO_vSetPinVal+0x32>
 6f2:	01 c1       	rjmp	.+514    	; 0x8f6 <__stack+0x97>
	{
		switch (A_portID)
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	3d 87       	std	Y+13, r19	; 0x0d
 6fc:	2c 87       	std	Y+12, r18	; 0x0c
 6fe:	8c 85       	ldd	r24, Y+12	; 0x0c
 700:	9d 85       	ldd	r25, Y+13	; 0x0d
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	91 05       	cpc	r25, r1
 706:	09 f4       	brne	.+2      	; 0x70a <MDIO_vSetPinVal+0x48>
 708:	4f c0       	rjmp	.+158    	; 0x7a8 <MDIO_vSetPinVal+0xe6>
 70a:	2c 85       	ldd	r18, Y+12	; 0x0c
 70c:	3d 85       	ldd	r19, Y+13	; 0x0d
 70e:	22 30       	cpi	r18, 0x02	; 2
 710:	31 05       	cpc	r19, r1
 712:	2c f4       	brge	.+10     	; 0x71e <MDIO_vSetPinVal+0x5c>
 714:	8c 85       	ldd	r24, Y+12	; 0x0c
 716:	9d 85       	ldd	r25, Y+13	; 0x0d
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	71 f0       	breq	.+28     	; 0x738 <MDIO_vSetPinVal+0x76>
 71c:	ec c0       	rjmp	.+472    	; 0x8f6 <__stack+0x97>
 71e:	2c 85       	ldd	r18, Y+12	; 0x0c
 720:	3d 85       	ldd	r19, Y+13	; 0x0d
 722:	22 30       	cpi	r18, 0x02	; 2
 724:	31 05       	cpc	r19, r1
 726:	09 f4       	brne	.+2      	; 0x72a <MDIO_vSetPinVal+0x68>
 728:	77 c0       	rjmp	.+238    	; 0x818 <MDIO_vSetPinVal+0x156>
 72a:	8c 85       	ldd	r24, Y+12	; 0x0c
 72c:	9d 85       	ldd	r25, Y+13	; 0x0d
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	91 05       	cpc	r25, r1
 732:	09 f4       	brne	.+2      	; 0x736 <MDIO_vSetPinVal+0x74>
 734:	a9 c0       	rjmp	.+338    	; 0x888 <__stack+0x29>
 736:	df c0       	rjmp	.+446    	; 0x8f6 <__stack+0x97>
		{
		case DIO_PORTA:
			switch (A_pinValue)
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	3b 87       	std	Y+11, r19	; 0x0b
 740:	2a 87       	std	Y+10, r18	; 0x0a
 742:	8a 85       	ldd	r24, Y+10	; 0x0a
 744:	9b 85       	ldd	r25, Y+11	; 0x0b
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	31 f0       	breq	.+12     	; 0x756 <MDIO_vSetPinVal+0x94>
 74a:	2a 85       	ldd	r18, Y+10	; 0x0a
 74c:	3b 85       	ldd	r19, Y+11	; 0x0b
 74e:	21 30       	cpi	r18, 0x01	; 1
 750:	31 05       	cpc	r19, r1
 752:	b1 f0       	breq	.+44     	; 0x780 <MDIO_vSetPinVal+0xbe>
 754:	d0 c0       	rjmp	.+416    	; 0x8f6 <__stack+0x97>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
 756:	ab e3       	ldi	r26, 0x3B	; 59
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	eb e3       	ldi	r30, 0x3B	; 59
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	48 2f       	mov	r20, r24
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 2e       	mov	r0, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <MDIO_vSetPinVal+0xb2>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <MDIO_vSetPinVal+0xae>
 778:	80 95       	com	r24
 77a:	84 23       	and	r24, r20
 77c:	8c 93       	st	X, r24
 77e:	bb c0       	rjmp	.+374    	; 0x8f6 <__stack+0x97>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
 780:	ab e3       	ldi	r26, 0x3B	; 59
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	eb e3       	ldi	r30, 0x3B	; 59
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	48 2f       	mov	r20, r24
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 2e       	mov	r0, r18
 798:	02 c0       	rjmp	.+4      	; 0x79e <MDIO_vSetPinVal+0xdc>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	0a 94       	dec	r0
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <MDIO_vSetPinVal+0xd8>
 7a2:	84 2b       	or	r24, r20
 7a4:	8c 93       	st	X, r24
 7a6:	a7 c0       	rjmp	.+334    	; 0x8f6 <__stack+0x97>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	39 87       	std	Y+9, r19	; 0x09
 7b0:	28 87       	std	Y+8, r18	; 0x08
 7b2:	88 85       	ldd	r24, Y+8	; 0x08
 7b4:	99 85       	ldd	r25, Y+9	; 0x09
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <MDIO_vSetPinVal+0x104>
 7ba:	28 85       	ldd	r18, Y+8	; 0x08
 7bc:	39 85       	ldd	r19, Y+9	; 0x09
 7be:	21 30       	cpi	r18, 0x01	; 1
 7c0:	31 05       	cpc	r19, r1
 7c2:	b1 f0       	breq	.+44     	; 0x7f0 <MDIO_vSetPinVal+0x12e>
 7c4:	98 c0       	rjmp	.+304    	; 0x8f6 <__stack+0x97>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
 7c6:	a8 e3       	ldi	r26, 0x38	; 56
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	e8 e3       	ldi	r30, 0x38	; 56
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	48 2f       	mov	r20, r24
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	28 2f       	mov	r18, r24
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 2e       	mov	r0, r18
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <MDIO_vSetPinVal+0x122>
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	0a 94       	dec	r0
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <MDIO_vSetPinVal+0x11e>
 7e8:	80 95       	com	r24
 7ea:	84 23       	and	r24, r20
 7ec:	8c 93       	st	X, r24
 7ee:	83 c0       	rjmp	.+262    	; 0x8f6 <__stack+0x97>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
 7f0:	a8 e3       	ldi	r26, 0x38	; 56
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	e8 e3       	ldi	r30, 0x38	; 56
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	48 2f       	mov	r20, r24
 7fc:	8a 81       	ldd	r24, Y+2	; 0x02
 7fe:	28 2f       	mov	r18, r24
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 2e       	mov	r0, r18
 808:	02 c0       	rjmp	.+4      	; 0x80e <MDIO_vSetPinVal+0x14c>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	0a 94       	dec	r0
 810:	e2 f7       	brpl	.-8      	; 0x80a <MDIO_vSetPinVal+0x148>
 812:	84 2b       	or	r24, r20
 814:	8c 93       	st	X, r24
 816:	6f c0       	rjmp	.+222    	; 0x8f6 <__stack+0x97>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
 818:	8b 81       	ldd	r24, Y+3	; 0x03
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	3f 83       	std	Y+7, r19	; 0x07
 820:	2e 83       	std	Y+6, r18	; 0x06
 822:	8e 81       	ldd	r24, Y+6	; 0x06
 824:	9f 81       	ldd	r25, Y+7	; 0x07
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	31 f0       	breq	.+12     	; 0x836 <MDIO_vSetPinVal+0x174>
 82a:	2e 81       	ldd	r18, Y+6	; 0x06
 82c:	3f 81       	ldd	r19, Y+7	; 0x07
 82e:	21 30       	cpi	r18, 0x01	; 1
 830:	31 05       	cpc	r19, r1
 832:	b1 f0       	breq	.+44     	; 0x860 <__stack+0x1>
 834:	60 c0       	rjmp	.+192    	; 0x8f6 <__stack+0x97>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
 836:	a5 e3       	ldi	r26, 0x35	; 53
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e5 e3       	ldi	r30, 0x35	; 53
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	48 2f       	mov	r20, r24
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	28 2f       	mov	r18, r24
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 2e       	mov	r0, r18
 84e:	02 c0       	rjmp	.+4      	; 0x854 <MDIO_vSetPinVal+0x192>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	0a 94       	dec	r0
 856:	e2 f7       	brpl	.-8      	; 0x850 <MDIO_vSetPinVal+0x18e>
 858:	80 95       	com	r24
 85a:	84 23       	and	r24, r20
 85c:	8c 93       	st	X, r24
 85e:	4b c0       	rjmp	.+150    	; 0x8f6 <__stack+0x97>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
 860:	a5 e3       	ldi	r26, 0x35	; 53
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e5 e3       	ldi	r30, 0x35	; 53
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	84 2b       	or	r24, r20
 884:	8c 93       	st	X, r24
 886:	37 c0       	rjmp	.+110    	; 0x8f6 <__stack+0x97>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	28 2f       	mov	r18, r24
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	3d 83       	std	Y+5, r19	; 0x05
 890:	2c 83       	std	Y+4, r18	; 0x04
 892:	8c 81       	ldd	r24, Y+4	; 0x04
 894:	9d 81       	ldd	r25, Y+5	; 0x05
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	31 f0       	breq	.+12     	; 0x8a6 <__stack+0x47>
 89a:	2c 81       	ldd	r18, Y+4	; 0x04
 89c:	3d 81       	ldd	r19, Y+5	; 0x05
 89e:	21 30       	cpi	r18, 0x01	; 1
 8a0:	31 05       	cpc	r19, r1
 8a2:	b1 f0       	breq	.+44     	; 0x8d0 <__stack+0x71>
 8a4:	28 c0       	rjmp	.+80     	; 0x8f6 <__stack+0x97>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
 8a6:	a2 e3       	ldi	r26, 0x32	; 50
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e2 e3       	ldi	r30, 0x32	; 50
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	48 2f       	mov	r20, r24
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	28 2f       	mov	r18, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 2e       	mov	r0, r18
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	0a 94       	dec	r0
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	80 95       	com	r24
 8ca:	84 23       	and	r24, r20
 8cc:	8c 93       	st	X, r24
 8ce:	13 c0       	rjmp	.+38     	; 0x8f6 <__stack+0x97>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
 8d0:	a2 e3       	ldi	r26, 0x32	; 50
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e2 e3       	ldi	r30, 0x32	; 50
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	48 2f       	mov	r20, r24
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	02 2e       	mov	r0, r18
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	0a 94       	dec	r0
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	84 2b       	or	r24, r20
 8f4:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 8f6:	2d 96       	adiw	r28, 0x0d	; 13
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	de bf       	out	0x3e, r29	; 62
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	cd bf       	out	0x3d, r28	; 61
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	00 d0       	rcall	.+0      	; 0x90e <MDIO_GetPinVal+0x6>
 90e:	00 d0       	rcall	.+0      	; 0x910 <MDIO_GetPinVal+0x8>
 910:	0f 92       	push	r0
 912:	cd b7       	in	r28, 0x3d	; 61
 914:	de b7       	in	r29, 0x3e	; 62
 916:	8a 83       	std	Y+2, r24	; 0x02
 918:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	84 30       	cpi	r24, 0x04	; 4
 91e:	08 f0       	brcs	.+2      	; 0x922 <MDIO_GetPinVal+0x1a>
 920:	6b c0       	rjmp	.+214    	; 0x9f8 <MDIO_GetPinVal+0xf0>
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	88 30       	cpi	r24, 0x08	; 8
 926:	08 f0       	brcs	.+2      	; 0x92a <MDIO_GetPinVal+0x22>
 928:	67 c0       	rjmp	.+206    	; 0x9f8 <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
 92a:	8a 81       	ldd	r24, Y+2	; 0x02
 92c:	28 2f       	mov	r18, r24
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	3d 83       	std	Y+5, r19	; 0x05
 932:	2c 83       	std	Y+4, r18	; 0x04
 934:	4c 81       	ldd	r20, Y+4	; 0x04
 936:	5d 81       	ldd	r21, Y+5	; 0x05
 938:	41 30       	cpi	r20, 0x01	; 1
 93a:	51 05       	cpc	r21, r1
 93c:	41 f1       	breq	.+80     	; 0x98e <MDIO_GetPinVal+0x86>
 93e:	8c 81       	ldd	r24, Y+4	; 0x04
 940:	9d 81       	ldd	r25, Y+5	; 0x05
 942:	82 30       	cpi	r24, 0x02	; 2
 944:	91 05       	cpc	r25, r1
 946:	34 f4       	brge	.+12     	; 0x954 <MDIO_GetPinVal+0x4c>
 948:	2c 81       	ldd	r18, Y+4	; 0x04
 94a:	3d 81       	ldd	r19, Y+5	; 0x05
 94c:	21 15       	cp	r18, r1
 94e:	31 05       	cpc	r19, r1
 950:	61 f0       	breq	.+24     	; 0x96a <MDIO_GetPinVal+0x62>
 952:	52 c0       	rjmp	.+164    	; 0x9f8 <MDIO_GetPinVal+0xf0>
 954:	4c 81       	ldd	r20, Y+4	; 0x04
 956:	5d 81       	ldd	r21, Y+5	; 0x05
 958:	42 30       	cpi	r20, 0x02	; 2
 95a:	51 05       	cpc	r21, r1
 95c:	51 f1       	breq	.+84     	; 0x9b2 <MDIO_GetPinVal+0xaa>
 95e:	8c 81       	ldd	r24, Y+4	; 0x04
 960:	9d 81       	ldd	r25, Y+5	; 0x05
 962:	83 30       	cpi	r24, 0x03	; 3
 964:	91 05       	cpc	r25, r1
 966:	b9 f1       	breq	.+110    	; 0x9d6 <MDIO_GetPinVal+0xce>
 968:	47 c0       	rjmp	.+142    	; 0x9f8 <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
 96a:	e9 e3       	ldi	r30, 0x39	; 57
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	8b 81       	ldd	r24, Y+3	; 0x03
 976:	88 2f       	mov	r24, r24
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	a9 01       	movw	r20, r18
 97c:	02 c0       	rjmp	.+4      	; 0x982 <MDIO_GetPinVal+0x7a>
 97e:	55 95       	asr	r21
 980:	47 95       	ror	r20
 982:	8a 95       	dec	r24
 984:	e2 f7       	brpl	.-8      	; 0x97e <MDIO_GetPinVal+0x76>
 986:	ca 01       	movw	r24, r20
 988:	81 70       	andi	r24, 0x01	; 1
 98a:	89 83       	std	Y+1, r24	; 0x01
 98c:	35 c0       	rjmp	.+106    	; 0x9f8 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
 98e:	e6 e3       	ldi	r30, 0x36	; 54
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	28 2f       	mov	r18, r24
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	88 2f       	mov	r24, r24
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	a9 01       	movw	r20, r18
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <MDIO_GetPinVal+0x9e>
 9a2:	55 95       	asr	r21
 9a4:	47 95       	ror	r20
 9a6:	8a 95       	dec	r24
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <MDIO_GetPinVal+0x9a>
 9aa:	ca 01       	movw	r24, r20
 9ac:	81 70       	andi	r24, 0x01	; 1
 9ae:	89 83       	std	Y+1, r24	; 0x01
 9b0:	23 c0       	rjmp	.+70     	; 0x9f8 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
 9b2:	e3 e3       	ldi	r30, 0x33	; 51
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	28 2f       	mov	r18, r24
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	8b 81       	ldd	r24, Y+3	; 0x03
 9be:	88 2f       	mov	r24, r24
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	a9 01       	movw	r20, r18
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <MDIO_GetPinVal+0xc2>
 9c6:	55 95       	asr	r21
 9c8:	47 95       	ror	r20
 9ca:	8a 95       	dec	r24
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <MDIO_GetPinVal+0xbe>
 9ce:	ca 01       	movw	r24, r20
 9d0:	81 70       	andi	r24, 0x01	; 1
 9d2:	89 83       	std	Y+1, r24	; 0x01
 9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
 9d6:	e0 e3       	ldi	r30, 0x30	; 48
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	28 2f       	mov	r18, r24
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	a9 01       	movw	r20, r18
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <MDIO_GetPinVal+0xe6>
 9ea:	55 95       	asr	r21
 9ec:	47 95       	ror	r20
 9ee:	8a 95       	dec	r24
 9f0:	e2 f7       	brpl	.-8      	; 0x9ea <MDIO_GetPinVal+0xe2>
 9f2:	ca 01       	movw	r24, r20
 9f4:	81 70       	andi	r24, 0x01	; 1
 9f6:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 9fa:	0f 90       	pop	r0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	08 95       	ret

00000a0a <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	00 d0       	rcall	.+0      	; 0xa10 <MDIO_vTogglePinVal+0x6>
 a10:	00 d0       	rcall	.+0      	; 0xa12 <MDIO_vTogglePinVal+0x8>
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
 a16:	89 83       	std	Y+1, r24	; 0x01
 a18:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	84 30       	cpi	r24, 0x04	; 4
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <MDIO_vTogglePinVal+0x18>
 a20:	72 c0       	rjmp	.+228    	; 0xb06 <MDIO_vTogglePinVal+0xfc>
 a22:	8a 81       	ldd	r24, Y+2	; 0x02
 a24:	88 30       	cpi	r24, 0x08	; 8
 a26:	08 f0       	brcs	.+2      	; 0xa2a <MDIO_vTogglePinVal+0x20>
 a28:	6e c0       	rjmp	.+220    	; 0xb06 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	28 2f       	mov	r18, r24
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	3c 83       	std	Y+4, r19	; 0x04
 a32:	2b 83       	std	Y+3, r18	; 0x03
 a34:	8b 81       	ldd	r24, Y+3	; 0x03
 a36:	9c 81       	ldd	r25, Y+4	; 0x04
 a38:	81 30       	cpi	r24, 0x01	; 1
 a3a:	91 05       	cpc	r25, r1
 a3c:	49 f1       	breq	.+82     	; 0xa90 <MDIO_vTogglePinVal+0x86>
 a3e:	2b 81       	ldd	r18, Y+3	; 0x03
 a40:	3c 81       	ldd	r19, Y+4	; 0x04
 a42:	22 30       	cpi	r18, 0x02	; 2
 a44:	31 05       	cpc	r19, r1
 a46:	2c f4       	brge	.+10     	; 0xa52 <MDIO_vTogglePinVal+0x48>
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	9c 81       	ldd	r25, Y+4	; 0x04
 a4c:	00 97       	sbiw	r24, 0x00	; 0
 a4e:	61 f0       	breq	.+24     	; 0xa68 <MDIO_vTogglePinVal+0x5e>
 a50:	5a c0       	rjmp	.+180    	; 0xb06 <MDIO_vTogglePinVal+0xfc>
 a52:	2b 81       	ldd	r18, Y+3	; 0x03
 a54:	3c 81       	ldd	r19, Y+4	; 0x04
 a56:	22 30       	cpi	r18, 0x02	; 2
 a58:	31 05       	cpc	r19, r1
 a5a:	71 f1       	breq	.+92     	; 0xab8 <MDIO_vTogglePinVal+0xae>
 a5c:	8b 81       	ldd	r24, Y+3	; 0x03
 a5e:	9c 81       	ldd	r25, Y+4	; 0x04
 a60:	83 30       	cpi	r24, 0x03	; 3
 a62:	91 05       	cpc	r25, r1
 a64:	e9 f1       	breq	.+122    	; 0xae0 <MDIO_vTogglePinVal+0xd6>
 a66:	4f c0       	rjmp	.+158    	; 0xb06 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
 a68:	ab e3       	ldi	r26, 0x3B	; 59
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	eb e3       	ldi	r30, 0x3B	; 59
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	48 2f       	mov	r20, r24
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	28 2f       	mov	r18, r24
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	02 2e       	mov	r0, r18
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <MDIO_vTogglePinVal+0x7c>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	0a 94       	dec	r0
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <MDIO_vTogglePinVal+0x78>
 a8a:	84 27       	eor	r24, r20
 a8c:	8c 93       	st	X, r24
 a8e:	3b c0       	rjmp	.+118    	; 0xb06 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
 a90:	a8 e3       	ldi	r26, 0x38	; 56
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e8 e3       	ldi	r30, 0x38	; 56
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	48 2f       	mov	r20, r24
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	28 2f       	mov	r18, r24
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 2e       	mov	r0, r18
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <MDIO_vTogglePinVal+0xa4>
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	0a 94       	dec	r0
 ab0:	e2 f7       	brpl	.-8      	; 0xaaa <MDIO_vTogglePinVal+0xa0>
 ab2:	84 27       	eor	r24, r20
 ab4:	8c 93       	st	X, r24
 ab6:	27 c0       	rjmp	.+78     	; 0xb06 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
 ab8:	a5 e3       	ldi	r26, 0x35	; 53
 aba:	b0 e0       	ldi	r27, 0x00	; 0
 abc:	e5 e3       	ldi	r30, 0x35	; 53
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	48 2f       	mov	r20, r24
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	02 2e       	mov	r0, r18
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <MDIO_vTogglePinVal+0xcc>
 ad2:	88 0f       	add	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	0a 94       	dec	r0
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <MDIO_vTogglePinVal+0xc8>
 ada:	84 27       	eor	r24, r20
 adc:	8c 93       	st	X, r24
 ade:	13 c0       	rjmp	.+38     	; 0xb06 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
 ae0:	a2 e3       	ldi	r26, 0x32	; 50
 ae2:	b0 e0       	ldi	r27, 0x00	; 0
 ae4:	e2 e3       	ldi	r30, 0x32	; 50
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	48 2f       	mov	r20, r24
 aec:	8a 81       	ldd	r24, Y+2	; 0x02
 aee:	28 2f       	mov	r18, r24
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 2e       	mov	r0, r18
 af8:	02 c0       	rjmp	.+4      	; 0xafe <MDIO_vTogglePinVal+0xf4>
 afa:	88 0f       	add	r24, r24
 afc:	99 1f       	adc	r25, r25
 afe:	0a 94       	dec	r0
 b00:	e2 f7       	brpl	.-8      	; 0xafa <MDIO_vTogglePinVal+0xf0>
 b02:	84 27       	eor	r24, r20
 b04:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 b06:	0f 90       	pop	r0
 b08:	0f 90       	pop	r0
 b0a:	0f 90       	pop	r0
 b0c:	0f 90       	pop	r0
 b0e:	cf 91       	pop	r28
 b10:	df 91       	pop	r29
 b12:	08 95       	ret

00000b14 <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
 b14:	df 93       	push	r29
 b16:	cf 93       	push	r28
 b18:	00 d0       	rcall	.+0      	; 0xb1a <MDIO_vSetPortDir+0x6>
 b1a:	00 d0       	rcall	.+0      	; 0xb1c <MDIO_vSetPortDir+0x8>
 b1c:	cd b7       	in	r28, 0x3d	; 61
 b1e:	de b7       	in	r29, 0x3e	; 62
 b20:	89 83       	std	Y+1, r24	; 0x01
 b22:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	84 30       	cpi	r24, 0x04	; 4
 b28:	90 f5       	brcc	.+100    	; 0xb8e <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
 b2a:	89 81       	ldd	r24, Y+1	; 0x01
 b2c:	28 2f       	mov	r18, r24
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	3c 83       	std	Y+4, r19	; 0x04
 b32:	2b 83       	std	Y+3, r18	; 0x03
 b34:	8b 81       	ldd	r24, Y+3	; 0x03
 b36:	9c 81       	ldd	r25, Y+4	; 0x04
 b38:	81 30       	cpi	r24, 0x01	; 1
 b3a:	91 05       	cpc	r25, r1
 b3c:	d1 f0       	breq	.+52     	; 0xb72 <MDIO_vSetPortDir+0x5e>
 b3e:	2b 81       	ldd	r18, Y+3	; 0x03
 b40:	3c 81       	ldd	r19, Y+4	; 0x04
 b42:	22 30       	cpi	r18, 0x02	; 2
 b44:	31 05       	cpc	r19, r1
 b46:	2c f4       	brge	.+10     	; 0xb52 <MDIO_vSetPortDir+0x3e>
 b48:	8b 81       	ldd	r24, Y+3	; 0x03
 b4a:	9c 81       	ldd	r25, Y+4	; 0x04
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	61 f0       	breq	.+24     	; 0xb68 <MDIO_vSetPortDir+0x54>
 b50:	1e c0       	rjmp	.+60     	; 0xb8e <MDIO_vSetPortDir+0x7a>
 b52:	2b 81       	ldd	r18, Y+3	; 0x03
 b54:	3c 81       	ldd	r19, Y+4	; 0x04
 b56:	22 30       	cpi	r18, 0x02	; 2
 b58:	31 05       	cpc	r19, r1
 b5a:	81 f0       	breq	.+32     	; 0xb7c <MDIO_vSetPortDir+0x68>
 b5c:	8b 81       	ldd	r24, Y+3	; 0x03
 b5e:	9c 81       	ldd	r25, Y+4	; 0x04
 b60:	83 30       	cpi	r24, 0x03	; 3
 b62:	91 05       	cpc	r25, r1
 b64:	81 f0       	breq	.+32     	; 0xb86 <MDIO_vSetPortDir+0x72>
 b66:	13 c0       	rjmp	.+38     	; 0xb8e <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
 b68:	ea e3       	ldi	r30, 0x3A	; 58
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
 b6c:	8a 81       	ldd	r24, Y+2	; 0x02
 b6e:	80 83       	st	Z, r24
 b70:	0e c0       	rjmp	.+28     	; 0xb8e <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
 b72:	e7 e3       	ldi	r30, 0x37	; 55
 b74:	f0 e0       	ldi	r31, 0x00	; 0
 b76:	8a 81       	ldd	r24, Y+2	; 0x02
 b78:	80 83       	st	Z, r24
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
 b7c:	e4 e3       	ldi	r30, 0x34	; 52
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	8a 81       	ldd	r24, Y+2	; 0x02
 b82:	80 83       	st	Z, r24
 b84:	04 c0       	rjmp	.+8      	; 0xb8e <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
 b86:	e1 e3       	ldi	r30, 0x31	; 49
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	8a 81       	ldd	r24, Y+2	; 0x02
 b8c:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
 b8e:	0f 90       	pop	r0
 b90:	0f 90       	pop	r0
 b92:	0f 90       	pop	r0
 b94:	0f 90       	pop	r0
 b96:	cf 91       	pop	r28
 b98:	df 91       	pop	r29
 b9a:	08 95       	ret

00000b9c <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
 b9c:	df 93       	push	r29
 b9e:	cf 93       	push	r28
 ba0:	00 d0       	rcall	.+0      	; 0xba2 <MDIO_vSetPortVal+0x6>
 ba2:	00 d0       	rcall	.+0      	; 0xba4 <MDIO_vSetPortVal+0x8>
 ba4:	cd b7       	in	r28, 0x3d	; 61
 ba6:	de b7       	in	r29, 0x3e	; 62
 ba8:	89 83       	std	Y+1, r24	; 0x01
 baa:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	84 30       	cpi	r24, 0x04	; 4
 bb0:	90 f5       	brcc	.+100    	; 0xc16 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
 bb2:	89 81       	ldd	r24, Y+1	; 0x01
 bb4:	28 2f       	mov	r18, r24
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	3c 83       	std	Y+4, r19	; 0x04
 bba:	2b 83       	std	Y+3, r18	; 0x03
 bbc:	8b 81       	ldd	r24, Y+3	; 0x03
 bbe:	9c 81       	ldd	r25, Y+4	; 0x04
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	91 05       	cpc	r25, r1
 bc4:	d1 f0       	breq	.+52     	; 0xbfa <MDIO_vSetPortVal+0x5e>
 bc6:	2b 81       	ldd	r18, Y+3	; 0x03
 bc8:	3c 81       	ldd	r19, Y+4	; 0x04
 bca:	22 30       	cpi	r18, 0x02	; 2
 bcc:	31 05       	cpc	r19, r1
 bce:	2c f4       	brge	.+10     	; 0xbda <MDIO_vSetPortVal+0x3e>
 bd0:	8b 81       	ldd	r24, Y+3	; 0x03
 bd2:	9c 81       	ldd	r25, Y+4	; 0x04
 bd4:	00 97       	sbiw	r24, 0x00	; 0
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <MDIO_vSetPortVal+0x54>
 bd8:	1e c0       	rjmp	.+60     	; 0xc16 <MDIO_vSetPortVal+0x7a>
 bda:	2b 81       	ldd	r18, Y+3	; 0x03
 bdc:	3c 81       	ldd	r19, Y+4	; 0x04
 bde:	22 30       	cpi	r18, 0x02	; 2
 be0:	31 05       	cpc	r19, r1
 be2:	81 f0       	breq	.+32     	; 0xc04 <MDIO_vSetPortVal+0x68>
 be4:	8b 81       	ldd	r24, Y+3	; 0x03
 be6:	9c 81       	ldd	r25, Y+4	; 0x04
 be8:	83 30       	cpi	r24, 0x03	; 3
 bea:	91 05       	cpc	r25, r1
 bec:	81 f0       	breq	.+32     	; 0xc0e <MDIO_vSetPortVal+0x72>
 bee:	13 c0       	rjmp	.+38     	; 0xc16 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
 bf0:	eb e3       	ldi	r30, 0x3B	; 59
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	8a 81       	ldd	r24, Y+2	; 0x02
 bf6:	80 83       	st	Z, r24
 bf8:	0e c0       	rjmp	.+28     	; 0xc16 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
 bfa:	e8 e3       	ldi	r30, 0x38	; 56
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
 bfe:	8a 81       	ldd	r24, Y+2	; 0x02
 c00:	80 83       	st	Z, r24
 c02:	09 c0       	rjmp	.+18     	; 0xc16 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
 c04:	e5 e3       	ldi	r30, 0x35	; 53
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	8a 81       	ldd	r24, Y+2	; 0x02
 c0a:	80 83       	st	Z, r24
 c0c:	04 c0       	rjmp	.+8      	; 0xc16 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
 c0e:	e2 e3       	ldi	r30, 0x32	; 50
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	8a 81       	ldd	r24, Y+2	; 0x02
 c14:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
 c16:	0f 90       	pop	r0
 c18:	0f 90       	pop	r0
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	cf 91       	pop	r28
 c20:	df 91       	pop	r29
 c22:	08 95       	ret

00000c24 <MDIO_vInit>:


void MDIO_vInit()
{
 c24:	df 93       	push	r29
 c26:	cf 93       	push	r28
 c28:	cd b7       	in	r28, 0x3d	; 61
 c2a:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
 c2c:	ea e3       	ldi	r30, 0x3A	; 58
 c2e:	f0 e0       	ldi	r31, 0x00	; 0
 c30:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
 c32:	e7 e3       	ldi	r30, 0x37	; 55
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
 c38:	e4 e3       	ldi	r30, 0x34	; 52
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	87 e0       	ldi	r24, 0x07	; 7
 c3e:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
 c40:	e1 e3       	ldi	r30, 0x31	; 49
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
 c48:	eb e3       	ldi	r30, 0x3B	; 59
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
 c4e:	e8 e3       	ldi	r30, 0x38	; 56
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	84 e0       	ldi	r24, 0x04	; 4
 c54:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
 c56:	e5 e3       	ldi	r30, 0x35	; 53
 c58:	f0 e0       	ldi	r31, 0x00	; 0
 c5a:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
 c5c:	e2 e3       	ldi	r30, 0x32	; 50
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
 c62:	cf 91       	pop	r28
 c64:	df 91       	pop	r29
 c66:	08 95       	ret

00000c68 <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
 c68:	df 93       	push	r29
 c6a:	cf 93       	push	r28
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
 c70:	a6 e2       	ldi	r26, 0x26	; 38
 c72:	b0 e0       	ldi	r27, 0x00	; 0
 c74:	e6 e2       	ldi	r30, 0x26	; 38
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	80 81       	ld	r24, Z
 c7a:	87 7f       	andi	r24, 0xF7	; 247
 c7c:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
 c7e:	a7 e2       	ldi	r26, 0x27	; 39
 c80:	b0 e0       	ldi	r27, 0x00	; 0
 c82:	e7 e2       	ldi	r30, 0x27	; 39
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	80 81       	ld	r24, Z
 c88:	80 64       	ori	r24, 0x40	; 64
 c8a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
 c8c:	a7 e2       	ldi	r26, 0x27	; 39
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	e7 e2       	ldi	r30, 0x27	; 39
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	80 81       	ld	r24, Z
 c96:	8f 77       	andi	r24, 0x7F	; 127
 c98:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
 c9a:	a6 e2       	ldi	r26, 0x26	; 38
 c9c:	b0 e0       	ldi	r27, 0x00	; 0
 c9e:	e6 e2       	ldi	r30, 0x26	; 38
 ca0:	f0 e0       	ldi	r31, 0x00	; 0
 ca2:	80 81       	ld	r24, Z
 ca4:	81 60       	ori	r24, 0x01	; 1
 ca6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
 ca8:	a6 e2       	ldi	r26, 0x26	; 38
 caa:	b0 e0       	ldi	r27, 0x00	; 0
 cac:	e6 e2       	ldi	r30, 0x26	; 38
 cae:	f0 e0       	ldi	r31, 0x00	; 0
 cb0:	80 81       	ld	r24, Z
 cb2:	82 60       	ori	r24, 0x02	; 2
 cb4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
 cb6:	a6 e2       	ldi	r26, 0x26	; 38
 cb8:	b0 e0       	ldi	r27, 0x00	; 0
 cba:	e6 e2       	ldi	r30, 0x26	; 38
 cbc:	f0 e0       	ldi	r31, 0x00	; 0
 cbe:	80 81       	ld	r24, Z
 cc0:	84 60       	ori	r24, 0x04	; 4
 cc2:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
 cc4:	a6 e2       	ldi	r26, 0x26	; 38
 cc6:	b0 e0       	ldi	r27, 0x00	; 0
 cc8:	e6 e2       	ldi	r30, 0x26	; 38
 cca:	f0 e0       	ldi	r31, 0x00	; 0
 ccc:	80 81       	ld	r24, Z
 cce:	80 68       	ori	r24, 0x80	; 128
 cd0:	8c 93       	st	X, r24
}
 cd2:	cf 91       	pop	r28
 cd4:	df 91       	pop	r29
 cd6:	08 95       	ret

00000cd8 <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
 cd8:	df 93       	push	r29
 cda:	cf 93       	push	r28
 cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_StartConvertPolling+0x6>
 cde:	0f 92       	push	r0
 ce0:	cd b7       	in	r28, 0x3d	; 61
 ce2:	de b7       	in	r29, 0x3e	; 62
 ce4:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
 ce6:	1a 82       	std	Y+2, r1	; 0x02
 ce8:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
 cea:	a7 e2       	ldi	r26, 0x27	; 39
 cec:	b0 e0       	ldi	r27, 0x00	; 0
 cee:	e7 e2       	ldi	r30, 0x27	; 39
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	80 7e       	andi	r24, 0xE0	; 224
 cf6:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
 cf8:	a7 e2       	ldi	r26, 0x27	; 39
 cfa:	b0 e0       	ldi	r27, 0x00	; 0
 cfc:	e7 e2       	ldi	r30, 0x27	; 39
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	90 81       	ld	r25, Z
 d02:	8b 81       	ldd	r24, Y+3	; 0x03
 d04:	89 2b       	or	r24, r25
 d06:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
 d08:	a6 e2       	ldi	r26, 0x26	; 38
 d0a:	b0 e0       	ldi	r27, 0x00	; 0
 d0c:	e6 e2       	ldi	r30, 0x26	; 38
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	80 64       	ori	r24, 0x40	; 64
 d14:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
 d16:	e6 e2       	ldi	r30, 0x26	; 38
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	80 81       	ld	r24, Z
 d1c:	82 95       	swap	r24
 d1e:	8f 70       	andi	r24, 0x0F	; 15
 d20:	88 2f       	mov	r24, r24
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	81 70       	andi	r24, 0x01	; 1
 d26:	90 70       	andi	r25, 0x00	; 0
 d28:	00 97       	sbiw	r24, 0x00	; 0
 d2a:	a9 f3       	breq	.-22     	; 0xd16 <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
 d2c:	e4 e2       	ldi	r30, 0x24	; 36
 d2e:	f0 e0       	ldi	r31, 0x00	; 0
 d30:	80 81       	ld	r24, Z
 d32:	91 81       	ldd	r25, Z+1	; 0x01
 d34:	9a 83       	std	Y+2, r25	; 0x02
 d36:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
 d38:	a6 e2       	ldi	r26, 0x26	; 38
 d3a:	b0 e0       	ldi	r27, 0x00	; 0
 d3c:	e6 e2       	ldi	r30, 0x26	; 38
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	80 81       	ld	r24, Z
 d42:	80 61       	ori	r24, 0x10	; 16
 d44:	8c 93       	st	X, r24
	return ADC_read;
 d46:	89 81       	ldd	r24, Y+1	; 0x01
 d48:	9a 81       	ldd	r25, Y+2	; 0x02
}
 d4a:	0f 90       	pop	r0
 d4c:	0f 90       	pop	r0
 d4e:	0f 90       	pop	r0
 d50:	cf 91       	pop	r28
 d52:	df 91       	pop	r29
 d54:	08 95       	ret

00000d56 <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
 d56:	df 93       	push	r29
 d58:	cf 93       	push	r28
 d5a:	00 d0       	rcall	.+0      	; 0xd5c <ADC_StartConvertInt+0x6>
 d5c:	00 d0       	rcall	.+0      	; 0xd5e <ADC_StartConvertInt+0x8>
 d5e:	00 d0       	rcall	.+0      	; 0xd60 <ADC_StartConvertInt+0xa>
 d60:	cd b7       	in	r28, 0x3d	; 61
 d62:	de b7       	in	r29, 0x3e	; 62
 d64:	8a 83       	std	Y+2, r24	; 0x02
 d66:	7c 83       	std	Y+4, r23	; 0x04
 d68:	6b 83       	std	Y+3, r22	; 0x03
 d6a:	5e 83       	std	Y+6, r21	; 0x06
 d6c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
 d6e:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
 d70:	80 91 64 00 	lds	r24, 0x0064
 d74:	88 23       	and	r24, r24
 d76:	69 f5       	brne	.+90     	; 0xdd2 <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
 d78:	81 e0       	ldi	r24, 0x01	; 1
 d7a:	80 93 64 00 	sts	0x0064, r24
			Global_ptr=pu16Reading;
 d7e:	8b 81       	ldd	r24, Y+3	; 0x03
 d80:	9c 81       	ldd	r25, Y+4	; 0x04
 d82:	90 93 61 00 	sts	0x0061, r25
 d86:	80 93 60 00 	sts	0x0060, r24
			GlobalPtrFunc = PtrFunc;
 d8a:	8d 81       	ldd	r24, Y+5	; 0x05
 d8c:	9e 81       	ldd	r25, Y+6	; 0x06
 d8e:	90 93 63 00 	sts	0x0063, r25
 d92:	80 93 62 00 	sts	0x0062, r24

			ADMUX &=0b11100000;
 d96:	a7 e2       	ldi	r26, 0x27	; 39
 d98:	b0 e0       	ldi	r27, 0x00	; 0
 d9a:	e7 e2       	ldi	r30, 0x27	; 39
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	80 81       	ld	r24, Z
 da0:	80 7e       	andi	r24, 0xE0	; 224
 da2:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
 da4:	a7 e2       	ldi	r26, 0x27	; 39
 da6:	b0 e0       	ldi	r27, 0x00	; 0
 da8:	e7 e2       	ldi	r30, 0x27	; 39
 daa:	f0 e0       	ldi	r31, 0x00	; 0
 dac:	90 81       	ld	r25, Z
 dae:	8a 81       	ldd	r24, Y+2	; 0x02
 db0:	89 2b       	or	r24, r25
 db2:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
 db4:	a6 e2       	ldi	r26, 0x26	; 38
 db6:	b0 e0       	ldi	r27, 0x00	; 0
 db8:	e6 e2       	ldi	r30, 0x26	; 38
 dba:	f0 e0       	ldi	r31, 0x00	; 0
 dbc:	80 81       	ld	r24, Z
 dbe:	88 60       	ori	r24, 0x08	; 8
 dc0:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
 dc2:	a6 e2       	ldi	r26, 0x26	; 38
 dc4:	b0 e0       	ldi	r27, 0x00	; 0
 dc6:	e6 e2       	ldi	r30, 0x26	; 38
 dc8:	f0 e0       	ldi	r31, 0x00	; 0
 dca:	80 81       	ld	r24, Z
 dcc:	80 64       	ori	r24, 0x40	; 64
 dce:	8c 93       	st	X, r24
 dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
 dd2:	81 e0       	ldi	r24, 0x01	; 1
 dd4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
 dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
 dd8:	26 96       	adiw	r28, 0x06	; 6
 dda:	0f b6       	in	r0, 0x3f	; 63
 ddc:	f8 94       	cli
 dde:	de bf       	out	0x3e, r29	; 62
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	cd bf       	out	0x3d, r28	; 61
 de4:	cf 91       	pop	r28
 de6:	df 91       	pop	r29
 de8:	08 95       	ret

00000dea <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 dea:	1f 92       	push	r1
 dec:	0f 92       	push	r0
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	0f 92       	push	r0
 df2:	11 24       	eor	r1, r1
 df4:	2f 93       	push	r18
 df6:	3f 93       	push	r19
 df8:	4f 93       	push	r20
 dfa:	5f 93       	push	r21
 dfc:	6f 93       	push	r22
 dfe:	7f 93       	push	r23
 e00:	8f 93       	push	r24
 e02:	9f 93       	push	r25
 e04:	af 93       	push	r26
 e06:	bf 93       	push	r27
 e08:	ef 93       	push	r30
 e0a:	ff 93       	push	r31
 e0c:	df 93       	push	r29
 e0e:	cf 93       	push	r28
 e10:	cd b7       	in	r28, 0x3d	; 61
 e12:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
 e14:	a0 91 60 00 	lds	r26, 0x0060
 e18:	b0 91 61 00 	lds	r27, 0x0061
 e1c:	e4 e2       	ldi	r30, 0x24	; 36
 e1e:	f0 e0       	ldi	r31, 0x00	; 0
 e20:	80 81       	ld	r24, Z
 e22:	91 81       	ldd	r25, Z+1	; 0x01
 e24:	8d 93       	st	X+, r24
 e26:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
 e28:	e0 91 62 00 	lds	r30, 0x0062
 e2c:	f0 91 63 00 	lds	r31, 0x0063
 e30:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
 e32:	a6 e2       	ldi	r26, 0x26	; 38
 e34:	b0 e0       	ldi	r27, 0x00	; 0
 e36:	e6 e2       	ldi	r30, 0x26	; 38
 e38:	f0 e0       	ldi	r31, 0x00	; 0
 e3a:	80 81       	ld	r24, Z
 e3c:	87 7f       	andi	r24, 0xF7	; 247
 e3e:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
 e40:	10 92 64 00 	sts	0x0064, r1



}
 e44:	cf 91       	pop	r28
 e46:	df 91       	pop	r29
 e48:	ff 91       	pop	r31
 e4a:	ef 91       	pop	r30
 e4c:	bf 91       	pop	r27
 e4e:	af 91       	pop	r26
 e50:	9f 91       	pop	r25
 e52:	8f 91       	pop	r24
 e54:	7f 91       	pop	r23
 e56:	6f 91       	pop	r22
 e58:	5f 91       	pop	r21
 e5a:	4f 91       	pop	r20
 e5c:	3f 91       	pop	r19
 e5e:	2f 91       	pop	r18
 e60:	0f 90       	pop	r0
 e62:	0f be       	out	0x3f, r0	; 63
 e64:	0f 90       	pop	r0
 e66:	1f 90       	pop	r1
 e68:	18 95       	reti

00000e6a <__udivmodhi4>:
 e6a:	aa 1b       	sub	r26, r26
 e6c:	bb 1b       	sub	r27, r27
 e6e:	51 e1       	ldi	r21, 0x11	; 17
 e70:	07 c0       	rjmp	.+14     	; 0xe80 <__udivmodhi4_ep>

00000e72 <__udivmodhi4_loop>:
 e72:	aa 1f       	adc	r26, r26
 e74:	bb 1f       	adc	r27, r27
 e76:	a6 17       	cp	r26, r22
 e78:	b7 07       	cpc	r27, r23
 e7a:	10 f0       	brcs	.+4      	; 0xe80 <__udivmodhi4_ep>
 e7c:	a6 1b       	sub	r26, r22
 e7e:	b7 0b       	sbc	r27, r23

00000e80 <__udivmodhi4_ep>:
 e80:	88 1f       	adc	r24, r24
 e82:	99 1f       	adc	r25, r25
 e84:	5a 95       	dec	r21
 e86:	a9 f7       	brne	.-22     	; 0xe72 <__udivmodhi4_loop>
 e88:	80 95       	com	r24
 e8a:	90 95       	com	r25
 e8c:	bc 01       	movw	r22, r24
 e8e:	cd 01       	movw	r24, r26
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>

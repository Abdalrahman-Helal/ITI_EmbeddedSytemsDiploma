
ITI_Day18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  000039b4  00003a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080018c  0080018c  00003b74  2**0
                  ALLOC
  3 .stab         000037a4  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001819  00000000  00000000  00007318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ae93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_10>
      2c:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
//}


/* ------------- WDT ------------ */
void main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	aa ef       	ldi	r26, 0xFA	; 250
     cf0:	b3 e4       	ldi	r27, 0x43	; 67
     cf2:	8b 87       	std	Y+11, r24	; 0x0b
     cf4:	9c 87       	std	Y+12, r25	; 0x0c
     cf6:	ad 87       	std	Y+13, r26	; 0x0d
     cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a ef       	ldi	r20, 0xFA	; 250
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8f 83       	std	Y+7, r24	; 0x07
     d14:	98 87       	std	Y+8, r25	; 0x08
     d16:	a9 87       	std	Y+9, r26	; 0x09
     d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <main+0x66>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
     d3a:	3f c0       	rjmp	.+126    	; 0xdba <main+0xe4>
	else if (__tmp > 65535)
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	78 85       	ldd	r23, Y+8	; 0x08
     d40:	89 85       	ldd	r24, Y+9	; 0x09
     d42:	9a 85       	ldd	r25, Y+10	; 0x0a
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	4c f5       	brge	.+82     	; 0xda6 <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <main+0xc6>
     d7e:	88 ec       	ldi	r24, 0xC8	; 200
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0xb4>
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	69 f7       	brne	.-38     	; 0xd7e <main+0xa8>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	6f 81       	ldd	r22, Y+7	; 0x07
     da8:	78 85       	ldd	r23, Y+8	; 0x08
     daa:	89 85       	ldd	r24, Y+9	; 0x09
     dac:	9a 85       	ldd	r25, Y+10	; 0x0a
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0xf0>
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	MDIO_vSetPinDir(DIO_PORTA, PIN0 ,DIO_OUTPUT);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MDIO_vSetPinDir>
	MDIO_vSetPinVal(DIO_PORTA,PIN0 , DIO_HIGH);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
	WDT_vSleep(WDT_NUM_CYCLE_2048k);
     de2:	87 e0       	ldi	r24, 0x07	; 7
     de4:	0e 94 13 07 	call	0xe26	; 0xe26 <WDT_vSleep>
	WDT_vEnable();
     de8:	0e 94 f7 06 	call	0xdee	; 0xdee <WDT_vEnable>
     dec:	ff cf       	rjmp	.-2      	; 0xdec <main+0x116>

00000dee <WDT_vEnable>:
#include "MCAL/WDT/WDT_Interface.h"
#include "MCAL/WDT/WDT_Private.h"
#include "MCAL/WDT/WDT_Cfg.h"

void WDT_vEnable(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR , WDTCR_WDE);
     df6:	a1 e4       	ldi	r26, 0x41	; 65
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e1 e4       	ldi	r30, 0x41	; 65
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	8c 93       	st	X, r24
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <WDT_vDisable>:

void WDT_vDisable(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
     e12:	e1 e4       	ldi	r30, 0x41	; 65
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	88 e1       	ldi	r24, 0x18	; 24
     e18:	80 83       	st	Z, r24
	WDTCR = 0;
     e1a:	e1 e4       	ldi	r30, 0x41	; 65
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	10 82       	st	Z, r1
}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <WDT_vSleep>:

void WDT_vSleep(u8 Copy_u8SleepCycle)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepCycle < 8)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	78 f4       	brcc	.+30     	; 0xe56 <WDT_vSleep+0x30>
	{
		WDTCR &=11111000;
     e38:	a1 e4       	ldi	r26, 0x41	; 65
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e1 e4       	ldi	r30, 0x41	; 65
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	88 75       	andi	r24, 0x58	; 88
     e44:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepCycle;
     e46:	a1 e4       	ldi	r26, 0x41	; 65
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e1 e4       	ldi	r30, 0x41	; 65
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	90 81       	ld	r25, Z
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	89 2b       	or	r24, r25
     e54:	8c 93       	st	X, r24

	}
}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <TIMER0_vInit>:

static void(*Global_pvOVFIntFunc)(void)= NULL;
static void(*Global_pvCTCIntFunc)(void)= NULL;

void TIMER0_vInit(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
	SET_BIT(TCCR0 , TCCR0_WGM01);

#elif TIMER0_MODE == FAST_PWM_MODE
	SET_BIT(TCCR0 , TCCR0_WGM00);
     e66:	a3 e5       	ldi	r26, 0x53	; 83
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e3 e5       	ldi	r30, 0x53	; 83
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
     e74:	a3 e5       	ldi	r26, 0x53	; 83
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e3 e5       	ldi	r30, 0x53	; 83
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	8c 93       	st	X, r24

	// clear on compare set on top
	CLR_BIT(TCCR0 , TCCR0_COM00);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7e       	andi	r24, 0xEF	; 239
     e8e:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 62       	ori	r24, 0x20	; 32
     e9c:	8c 93       	st	X, r24

#error "Select The Timer Mode "

#endif
	// Set Prescaler
	TCCR0 &=0b11111000; //Bit Clearing
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 7f       	andi	r24, 0xF8	; 248
     eaa:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_PRESCALER;
     eac:	a3 e5       	ldi	r26, 0x53	; 83
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e3 e5       	ldi	r30, 0x53	; 83
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8c 93       	st	X, r24

}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <TIMER0_vDeinit>:

void TIMER0_vDeinit(void)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	10 82       	st	Z, r1
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <TIMER0_u8SetOVFCallBack>:

u8 TIMER0_u8SetOVFCallBack(void (*pvCallBackFunc)(void))
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <TIMER0_u8SetOVFCallBack+0x6>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status = OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	39 f0       	breq	.+14     	; 0xefc <TIMER0_u8SetOVFCallBack+0x28>
	{
		Global_pvOVFIntFunc=pvCallBackFunc;
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	9b 81       	ldd	r25, Y+3	; 0x03
     ef2:	90 93 8d 01 	sts	0x018D, r25
     ef6:	80 93 8c 01 	sts	0x018C, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <TIMER0_u8SetOVFCallBack+0x2c>
	}
	else
	{
		Local_Status = NOK;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	Global_pvCTCIntFunc();
     f38:	e0 91 8e 01 	lds	r30, 0x018E
     f3c:	f0 91 8f 01 	lds	r31, 0x018F
     f40:	09 95       	icall
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	Global_pvOVFIntFunc();
     f92:	e0 91 8c 01 	lds	r30, 0x018C
     f96:	f0 91 8d 01 	lds	r31, 0x018D
     f9a:	09 95       	icall
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <TIMER0_vSetTimerValue>:

void TIMER0_vSetTimerValue(u8 Copy_u8Value)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
     fce:	e2 e5       	ldi	r30, 0x52	; 82
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	80 83       	st	Z, r24
}
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TIMER0_vCTCTimerValue>:


void TIMER0_vCTCTimerValue(u8 Copy_u8Value)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Value;
     fea:	ec e5       	ldi	r30, 0x5C	; 92
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	80 83       	st	Z, r24
}
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TIMER0_vOVFIntEnableDisable>:

void TIMER0_vOVFIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	41 f4       	brne	.+16     	; 0x101c <TIMER0_vOVFIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_TOIE0);
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	8c 93       	st	X, r24
    101a:	07 c0       	rjmp	.+14     	; 0x102a <TIMER0_vOVFIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_TOIE0);
    101c:	a9 e5       	ldi	r26, 0x59	; 89
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 e5       	ldi	r30, 0x59	; 89
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8e 7f       	andi	r24, 0xFE	; 254
    1028:	8c 93       	st	X, r24
	}
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TIMER0_vCTCIntEnableDisable>:
void TIMER0_vCTCIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	41 f4       	brne	.+16     	; 0x1054 <TIMER0_vCTCIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_OCIE0);
    1044:	a9 e5       	ldi	r26, 0x59	; 89
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e9 e5       	ldi	r30, 0x59	; 89
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	8c 93       	st	X, r24
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <TIMER0_vCTCIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_OCIE0);
    1054:	a9 e5       	ldi	r26, 0x59	; 89
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e9 e5       	ldi	r30, 0x59	; 89
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	8c 93       	st	X, r24
	}
}
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <TIMER0_u8SetCTCCallBack>:
u8 TIMER0_u8SetCTCCallBack(void (*pvCallBackFunc)(void))
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <TIMER0_u8SetCTCCallBack+0x6>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status=OK;
    107a:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	41 f0       	breq	.+16     	; 0x1094 <TIMER0_u8SetCTCCallBack+0x2a>
	{
		Global_pvCTCIntFunc = pvCallBackFunc;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	90 93 8f 01 	sts	0x018F, r25
    108c:	80 93 8e 01 	sts	0x018E, r24
		Local_Status=OK;
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <TIMER0_u8SetCTCCallBack+0x2e>
	}
	else
	{
		Local_Status =NOK;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <TIMER1_vInit>:

void TIMER1_vInit(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    10ae:	af e4       	ldi	r26, 0x4F	; 79
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e4       	ldi	r30, 0x4F	; 79
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
    10ba:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
    10bc:	af e4       	ldi	r26, 0x4F	; 79
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ef e4       	ldi	r30, 0x4F	; 79
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 60       	ori	r24, 0x08	; 8
    10d6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
    10d8:	ae e4       	ldi	r26, 0x4E	; 78
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ee e4       	ldi	r30, 0x4E	; 78
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 61       	ori	r24, 0x10	; 16
    10e4:	8c 93       	st	X, r24

	// Set on Top , Clear on CTC
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    10e6:	af e4       	ldi	r26, 0x4F	; 79
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ef e4       	ldi	r30, 0x4F	; 79
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 7b       	andi	r24, 0xBF	; 191
    10f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
    10f4:	af e4       	ldi	r26, 0x4F	; 79
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ef e4       	ldi	r30, 0x4F	; 79
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    1102:	ae e4       	ldi	r26, 0x4E	; 78
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ee e4       	ldi	r30, 0x4E	; 78
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    1110:	ae e4       	ldi	r26, 0x4E	; 78
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ee e4       	ldi	r30, 0x4E	; 78
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	8c 93       	st	X, r24

	// Disable INT
	TIMSK &=0b110000011;
    111e:	a9 e5       	ldi	r26, 0x59	; 89
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e9 e5       	ldi	r30, 0x59	; 89
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	83 78       	andi	r24, 0x83	; 131
    112a:	8c 93       	st	X, r24
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <TIMER1_vICUInit>:

void TIMER1_vICUInit(void)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	// Normal Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    113a:	af e4       	ldi	r26, 0x4F	; 79
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e4       	ldi	r30, 0x4F	; 79
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    1148:	af e4       	ldi	r26, 0x4F	; 79
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ef e4       	ldi	r30, 0x4F	; 79
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    1156:	ae e4       	ldi	r26, 0x4E	; 78
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	87 7f       	andi	r24, 0xF7	; 247
    1162:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    1164:	ae e4       	ldi	r26, 0x4E	; 78
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ee e4       	ldi	r30, 0x4E	; 78
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24

	// Noise Cancel;
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    1172:	ae e4       	ldi	r26, 0x4E	; 78
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ee e4       	ldi	r30, 0x4E	; 78
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 68       	ori	r24, 0x80	; 128
    117e:	8c 93       	st	X, r24

	// Select ICU Edge
	SET_BIT(TCCR1B , TCCR1B_ICES1);
    1180:	ae e4       	ldi	r26, 0x4E	; 78
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ee e4       	ldi	r30, 0x4E	; 78
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 64       	ori	r24, 0x40	; 64
    118c:	8c 93       	st	X, r24

	// ICU Interrupt
	SET_BIT(TIMSK, TIMSK_TICIE1);
    118e:	a9 e5       	ldi	r26, 0x59	; 89
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e9 e5       	ldi	r30, 0x59	; 89
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    119c:	ae e4       	ldi	r26, 0x4E	; 78
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ee e4       	ldi	r30, 0x4E	; 78
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    11aa:	ae e4       	ldi	r26, 0x4E	; 78
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ee e4       	ldi	r30, 0x4E	; 78
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TIMER1_u16ICRRead>:

u16 TIMER1_u16ICRRead(void)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    11c6:	e6 e4       	ldi	r30, 0x46	; 70
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TIMER1_vSetTop>:

void TIMER1_vSetTop(u16 Copy_u16TopValue)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <TIMER1_vSetTop+0x6>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    11e2:	e6 e4       	ldi	r30, 0x46	; 70
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <TIMER1_vSetCTC_A_value>:

void TIMER1_vSetCTC_A_value(u16 Copy_u16CTCValue)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <TIMER1_vSetCTC_A_value+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCValue;
    1206:	ea e4       	ldi	r30, 0x4A	; 74
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <TIMER1_vICUSelectingEdge>:

void TIMER1_vICUSelectingEdge(u8 Copy_u8EdgeValue)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8EdgeValue == ICU_RISING_EDGE)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	41 f4       	brne	.+16     	; 0x123e <TIMER1_vICUSelectingEdge+0x22>
	{
		// Select ICU Rising Edge
		SET_BIT(TCCR1B , TCCR1B_ICES1);
    122e:	ae e4       	ldi	r26, 0x4E	; 78
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ee e4       	ldi	r30, 0x4E	; 78
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	8c 93       	st	X, r24
    123c:	07 c0       	rjmp	.+14     	; 0x124c <TIMER1_vICUSelectingEdge+0x30>
	}
	else
	{
		// Select ICU Falling Edge
		CLR_BIT(TCCR1B , TCCR1B_ICES1);
    123e:	ae e4       	ldi	r26, 0x4E	; 78
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ee e4       	ldi	r30, 0x4E	; 78
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 7b       	andi	r24, 0xBF	; 191
    124a:	8c 93       	st	X, r24
	}
}
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <TIMER1_vICUDeinit>:

void TIMER1_vICUDeinit(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    125c:	ef e4       	ldi	r30, 0x4F	; 79
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	10 82       	st	Z, r1
	TCCR1B = 0;
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	10 82       	st	Z, r1
	TIMSK = 0;
    1268:	e9 e5       	ldi	r30, 0x59	; 89
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    127c:	af e5       	ldi	r26, 0x5F	; 95
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ef e5       	ldi	r30, 0x5F	; 95
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 68       	ori	r24, 0x80	; 128
    1288:	8c 93       	st	X, r24
}
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <GIE_Disable>:
void GIE_Disable(void)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    1298:	af e5       	ldi	r26, 0x5F	; 95
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e5       	ldi	r30, 0x5F	; 95
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	8c 93       	st	X, r24
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <EXTI_EnableDisable+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <EXTI_EnableDisable+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	01 f1       	breq	.+64     	; 0x1310 <EXTI_EnableDisable+0x64>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	89 f1       	breq	.+98     	; 0x133c <EXTI_EnableDisable+0x90>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <EXTI_EnableDisable+0x38>
    12e2:	41 c0       	rjmp	.+130    	; 0x1366 <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	41 f4       	brne	.+16     	; 0x12fa <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    12ea:	ab e5       	ldi	r26, 0x5B	; 91
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e5       	ldi	r30, 0x5B	; 91
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 64       	ori	r24, 0x40	; 64
    12f6:	8c 93       	st	X, r24
    12f8:	36 c0       	rjmp	.+108    	; 0x1366 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 23       	and	r24, r24
    12fe:	99 f5       	brne	.+102    	; 0x1366 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    1300:	ab e5       	ldi	r26, 0x5B	; 91
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e5       	ldi	r30, 0x5B	; 91
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7b       	andi	r24, 0xBF	; 191
    130c:	8c 93       	st	X, r24
    130e:	2b c0       	rjmp	.+86     	; 0x1366 <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	41 f4       	brne	.+16     	; 0x1326 <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    1316:	ab e5       	ldi	r26, 0x5B	; 91
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	eb e5       	ldi	r30, 0x5B	; 91
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	8c 93       	st	X, r24
    1324:	20 c0       	rjmp	.+64     	; 0x1366 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 23       	and	r24, r24
    132a:	e9 f4       	brne	.+58     	; 0x1366 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    132c:	ab e5       	ldi	r26, 0x5B	; 91
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e5       	ldi	r30, 0x5B	; 91
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8f 77       	andi	r24, 0x7F	; 127
    1338:	8c 93       	st	X, r24
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	41 f4       	brne	.+16     	; 0x1352 <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    1342:	ab e5       	ldi	r26, 0x5B	; 91
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	eb e5       	ldi	r30, 0x5B	; 91
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 62       	ori	r24, 0x20	; 32
    134e:	8c 93       	st	X, r24
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	88 23       	and	r24, r24
    1356:	39 f4       	brne	.+14     	; 0x1366 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    1358:	ab e5       	ldi	r26, 0x5B	; 91
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	eb e5       	ldi	r30, 0x5B	; 91
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 7d       	andi	r24, 0xDF	; 223
    1364:	8c 93       	st	X, r24
		}
		break;
	}
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	2a 97       	sbiw	r28, 0x0a	; 10
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3a 87       	std	Y+10, r19	; 0x0a
    1394:	29 87       	std	Y+9, r18	; 0x09
    1396:	89 85       	ldd	r24, Y+9	; 0x09
    1398:	9a 85       	ldd	r25, Y+10	; 0x0a
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <EXTI_SetSenstivity+0x2e>
    13a0:	66 c0       	rjmp	.+204    	; 0x146e <EXTI_SetSenstivity+0xfa>
    13a2:	29 85       	ldd	r18, Y+9	; 0x09
    13a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <EXTI_SetSenstivity+0x3a>
    13ac:	bb c0       	rjmp	.+374    	; 0x1524 <EXTI_SetSenstivity+0x1b0>
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <EXTI_SetSenstivity+0x44>
    13b6:	d5 c0       	rjmp	.+426    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	38 87       	std	Y+8, r19	; 0x08
    13c0:	2f 83       	std	Y+7, r18	; 0x07
    13c2:	8f 81       	ldd	r24, Y+7	; 0x07
    13c4:	98 85       	ldd	r25, Y+8	; 0x08
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	21 f1       	breq	.+72     	; 0x1414 <EXTI_SetSenstivity+0xa0>
    13cc:	2f 81       	ldd	r18, Y+7	; 0x07
    13ce:	38 85       	ldd	r19, Y+8	; 0x08
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <EXTI_SetSenstivity+0x6c>
    13d6:	8f 81       	ldd	r24, Y+7	; 0x07
    13d8:	98 85       	ldd	r25, Y+8	; 0x08
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <EXTI_SetSenstivity+0x82>
    13de:	c1 c0       	rjmp	.+386    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
    13e0:	2f 81       	ldd	r18, Y+7	; 0x07
    13e2:	38 85       	ldd	r19, Y+8	; 0x08
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	21 f1       	breq	.+72     	; 0x1432 <EXTI_SetSenstivity+0xbe>
    13ea:	8f 81       	ldd	r24, Y+7	; 0x07
    13ec:	98 85       	ldd	r25, Y+8	; 0x08
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	71 f1       	breq	.+92     	; 0x1450 <EXTI_SetSenstivity+0xdc>
    13f4:	b6 c0       	rjmp	.+364    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8e 7f       	andi	r24, 0xFE	; 254
    1402:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1404:	a5 e5       	ldi	r26, 0x55	; 85
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e5       	ldi	r30, 0x55	; 85
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8d 7f       	andi	r24, 0xFD	; 253
    1410:	8c 93       	st	X, r24
    1412:	a7 c0       	rjmp	.+334    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1422:	a5 e5       	ldi	r26, 0x55	; 85
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	8c 93       	st	X, r24
    1430:	98 c0       	rjmp	.+304    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1432:	a5 e5       	ldi	r26, 0x55	; 85
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e5       	ldi	r30, 0x55	; 85
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	82 60       	ori	r24, 0x02	; 2
    144c:	8c 93       	st	X, r24
    144e:	89 c0       	rjmp	.+274    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1450:	a5 e5       	ldi	r26, 0x55	; 85
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e5       	ldi	r30, 0x55	; 85
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	81 60       	ori	r24, 0x01	; 1
    145c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    145e:	a5 e5       	ldi	r26, 0x55	; 85
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e5       	ldi	r30, 0x55	; 85
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	8c 93       	st	X, r24
    146c:	7a c0       	rjmp	.+244    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3e 83       	std	Y+6, r19	; 0x06
    1476:	2d 83       	std	Y+5, r18	; 0x05
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	21 f1       	breq	.+72     	; 0x14ca <EXTI_SetSenstivity+0x156>
    1482:	2d 81       	ldd	r18, Y+5	; 0x05
    1484:	3e 81       	ldd	r19, Y+6	; 0x06
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <EXTI_SetSenstivity+0x122>
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <EXTI_SetSenstivity+0x138>
    1494:	66 c0       	rjmp	.+204    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	21 f1       	breq	.+72     	; 0x14e8 <EXTI_SetSenstivity+0x174>
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	71 f1       	breq	.+92     	; 0x1506 <EXTI_SetSenstivity+0x192>
    14aa:	5b c0       	rjmp	.+182    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8b 7f       	andi	r24, 0xFB	; 251
    14b8:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	87 7f       	andi	r24, 0xF7	; 247
    14c6:	8c 93       	st	X, r24
    14c8:	4c c0       	rjmp	.+152    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    14ca:	a5 e5       	ldi	r26, 0x55	; 85
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e5       	ldi	r30, 0x55	; 85
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    14d8:	a5 e5       	ldi	r26, 0x55	; 85
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e5       	ldi	r30, 0x55	; 85
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	87 7f       	andi	r24, 0xF7	; 247
    14e4:	8c 93       	st	X, r24
    14e6:	3d c0       	rjmp	.+122    	; 0x1562 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    14e8:	a5 e5       	ldi	r26, 0x55	; 85
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e5       	ldi	r30, 0x55	; 85
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8b 7f       	andi	r24, 0xFB	; 251
    14f4:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    14f6:	a5 e5       	ldi	r26, 0x55	; 85
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e5       	ldi	r30, 0x55	; 85
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	88 60       	ori	r24, 0x08	; 8
    1502:	8c 93       	st	X, r24
    1504:	2e c0       	rjmp	.+92     	; 0x1562 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1506:	a5 e5       	ldi	r26, 0x55	; 85
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e5       	ldi	r30, 0x55	; 85
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	84 60       	ori	r24, 0x04	; 4
    1512:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    1514:	a5 e5       	ldi	r26, 0x55	; 85
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e5       	ldi	r30, 0x55	; 85
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 60       	ori	r24, 0x08	; 8
    1520:	8c 93       	st	X, r24
    1522:	1f c0       	rjmp	.+62     	; 0x1562 <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3c 83       	std	Y+4, r19	; 0x04
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	91 05       	cpc	r25, r1
    1536:	31 f0       	breq	.+12     	; 0x1544 <EXTI_SetSenstivity+0x1d0>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	23 30       	cpi	r18, 0x03	; 3
    153e:	31 05       	cpc	r19, r1
    1540:	49 f0       	breq	.+18     	; 0x1554 <EXTI_SetSenstivity+0x1e0>
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    1544:	a4 e5       	ldi	r26, 0x54	; 84
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e4 e5       	ldi	r30, 0x54	; 84
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	8c 93       	st	X, r24
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    1554:	a4 e5       	ldi	r26, 0x54	; 84
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e4 e5       	ldi	r30, 0x54	; 84
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    1562:	2a 96       	adiw	r28, 0x0a	; 10
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	2d 97       	sbiw	r28, 0x0d	; 13
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02
    158c:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	08 f0       	brcs	.+2      	; 0x1596 <MDIO_vSetPinDir+0x22>
    1594:	09 c1       	rjmp	.+530    	; 0x17a8 <MDIO_vSetPinDir+0x234>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	08 f0       	brcs	.+2      	; 0x159e <MDIO_vSetPinDir+0x2a>
    159c:	05 c1       	rjmp	.+522    	; 0x17a8 <MDIO_vSetPinDir+0x234>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <MDIO_vSetPinDir+0x32>
    15a4:	01 c1       	rjmp	.+514    	; 0x17a8 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 87       	std	Y+13, r19	; 0x0d
    15ae:	2c 87       	std	Y+12, r18	; 0x0c
    15b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <MDIO_vSetPinDir+0x48>
    15ba:	4f c0       	rjmp	.+158    	; 0x165a <MDIO_vSetPinDir+0xe6>
    15bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15be:	3d 85       	ldd	r19, Y+13	; 0x0d
    15c0:	22 30       	cpi	r18, 0x02	; 2
    15c2:	31 05       	cpc	r19, r1
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <MDIO_vSetPinDir+0x5c>
    15c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	71 f0       	breq	.+28     	; 0x15ea <MDIO_vSetPinDir+0x76>
    15ce:	ec c0       	rjmp	.+472    	; 0x17a8 <MDIO_vSetPinDir+0x234>
    15d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <MDIO_vSetPinDir+0x68>
    15da:	77 c0       	rjmp	.+238    	; 0x16ca <MDIO_vSetPinDir+0x156>
    15dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15de:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <MDIO_vSetPinDir+0x74>
    15e6:	a9 c0       	rjmp	.+338    	; 0x173a <MDIO_vSetPinDir+0x1c6>
    15e8:	df c0       	rjmp	.+446    	; 0x17a8 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3b 87       	std	Y+11, r19	; 0x0b
    15f2:	2a 87       	std	Y+10, r18	; 0x0a
    15f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	31 f0       	breq	.+12     	; 0x1608 <MDIO_vSetPinDir+0x94>
    15fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    15fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1600:	21 30       	cpi	r18, 0x01	; 1
    1602:	31 05       	cpc	r19, r1
    1604:	b1 f0       	breq	.+44     	; 0x1632 <MDIO_vSetPinDir+0xbe>
    1606:	d0 c0       	rjmp	.+416    	; 0x17a8 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    1608:	aa e3       	ldi	r26, 0x3A	; 58
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ea e3       	ldi	r30, 0x3A	; 58
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <MDIO_vSetPinDir+0xb2>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <MDIO_vSetPinDir+0xae>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	bb c0       	rjmp	.+374    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    1632:	aa e3       	ldi	r26, 0x3A	; 58
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <MDIO_vSetPinDir+0xdc>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <MDIO_vSetPinDir+0xd8>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	a7 c0       	rjmp	.+334    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	39 87       	std	Y+9, r19	; 0x09
    1662:	28 87       	std	Y+8, r18	; 0x08
    1664:	88 85       	ldd	r24, Y+8	; 0x08
    1666:	99 85       	ldd	r25, Y+9	; 0x09
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	31 f0       	breq	.+12     	; 0x1678 <MDIO_vSetPinDir+0x104>
    166c:	28 85       	ldd	r18, Y+8	; 0x08
    166e:	39 85       	ldd	r19, Y+9	; 0x09
    1670:	21 30       	cpi	r18, 0x01	; 1
    1672:	31 05       	cpc	r19, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <MDIO_vSetPinDir+0x12e>
    1676:	98 c0       	rjmp	.+304    	; 0x17a8 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    1678:	a7 e3       	ldi	r26, 0x37	; 55
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e7 e3       	ldi	r30, 0x37	; 55
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MDIO_vSetPinDir+0x122>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MDIO_vSetPinDir+0x11e>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	83 c0       	rjmp	.+262    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    16a2:	a7 e3       	ldi	r26, 0x37	; 55
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e3       	ldi	r30, 0x37	; 55
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <MDIO_vSetPinDir+0x14c>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <MDIO_vSetPinDir+0x148>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	6f c0       	rjmp	.+222    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3f 83       	std	Y+7, r19	; 0x07
    16d2:	2e 83       	std	Y+6, r18	; 0x06
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	31 f0       	breq	.+12     	; 0x16e8 <MDIO_vSetPinDir+0x174>
    16dc:	2e 81       	ldd	r18, Y+6	; 0x06
    16de:	3f 81       	ldd	r19, Y+7	; 0x07
    16e0:	21 30       	cpi	r18, 0x01	; 1
    16e2:	31 05       	cpc	r19, r1
    16e4:	b1 f0       	breq	.+44     	; 0x1712 <MDIO_vSetPinDir+0x19e>
    16e6:	60 c0       	rjmp	.+192    	; 0x17a8 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    16e8:	a4 e3       	ldi	r26, 0x34	; 52
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e4 e3       	ldi	r30, 0x34	; 52
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <MDIO_vSetPinDir+0x192>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <MDIO_vSetPinDir+0x18e>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	4b c0       	rjmp	.+150    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    1712:	a4 e3       	ldi	r26, 0x34	; 52
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e4 e3       	ldi	r30, 0x34	; 52
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <MDIO_vSetPinDir+0x1bc>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <MDIO_vSetPinDir+0x1b8>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	37 c0       	rjmp	.+110    	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3d 83       	std	Y+5, r19	; 0x05
    1742:	2c 83       	std	Y+4, r18	; 0x04
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	9d 81       	ldd	r25, Y+5	; 0x05
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <MDIO_vSetPinDir+0x1e4>
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	21 30       	cpi	r18, 0x01	; 1
    1752:	31 05       	cpc	r19, r1
    1754:	b1 f0       	breq	.+44     	; 0x1782 <MDIO_vSetPinDir+0x20e>
    1756:	28 c0       	rjmp	.+80     	; 0x17a8 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    1758:	a1 e3       	ldi	r26, 0x31	; 49
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e1 e3       	ldi	r30, 0x31	; 49
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <MDIO_vSetPinDir+0x202>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <MDIO_vSetPinDir+0x1fe>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	13 c0       	rjmp	.+38     	; 0x17a8 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    1782:	a1 e3       	ldi	r26, 0x31	; 49
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e1 e3       	ldi	r30, 0x31	; 49
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MDIO_vSetPinDir+0x22c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <MDIO_vSetPinDir+0x228>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    17a8:	2d 96       	adiw	r28, 0x0d	; 13
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2d 97       	sbiw	r28, 0x0d	; 13
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	6a 83       	std	Y+2, r22	; 0x02
    17d2:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	84 30       	cpi	r24, 0x04	; 4
    17d8:	08 f0       	brcs	.+2      	; 0x17dc <MDIO_vSetPinVal+0x22>
    17da:	09 c1       	rjmp	.+530    	; 0x19ee <MDIO_vSetPinVal+0x234>
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <MDIO_vSetPinVal+0x2a>
    17e2:	05 c1       	rjmp	.+522    	; 0x19ee <MDIO_vSetPinVal+0x234>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <MDIO_vSetPinVal+0x32>
    17ea:	01 c1       	rjmp	.+514    	; 0x19ee <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3d 87       	std	Y+13, r19	; 0x0d
    17f4:	2c 87       	std	Y+12, r18	; 0x0c
    17f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <MDIO_vSetPinVal+0x48>
    1800:	4f c0       	rjmp	.+158    	; 0x18a0 <MDIO_vSetPinVal+0xe6>
    1802:	2c 85       	ldd	r18, Y+12	; 0x0c
    1804:	3d 85       	ldd	r19, Y+13	; 0x0d
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	2c f4       	brge	.+10     	; 0x1816 <MDIO_vSetPinVal+0x5c>
    180c:	8c 85       	ldd	r24, Y+12	; 0x0c
    180e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	71 f0       	breq	.+28     	; 0x1830 <MDIO_vSetPinVal+0x76>
    1814:	ec c0       	rjmp	.+472    	; 0x19ee <MDIO_vSetPinVal+0x234>
    1816:	2c 85       	ldd	r18, Y+12	; 0x0c
    1818:	3d 85       	ldd	r19, Y+13	; 0x0d
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <MDIO_vSetPinVal+0x68>
    1820:	77 c0       	rjmp	.+238    	; 0x1910 <MDIO_vSetPinVal+0x156>
    1822:	8c 85       	ldd	r24, Y+12	; 0x0c
    1824:	9d 85       	ldd	r25, Y+13	; 0x0d
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <MDIO_vSetPinVal+0x74>
    182c:	a9 c0       	rjmp	.+338    	; 0x1980 <MDIO_vSetPinVal+0x1c6>
    182e:	df c0       	rjmp	.+446    	; 0x19ee <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3b 87       	std	Y+11, r19	; 0x0b
    1838:	2a 87       	std	Y+10, r18	; 0x0a
    183a:	8a 85       	ldd	r24, Y+10	; 0x0a
    183c:	9b 85       	ldd	r25, Y+11	; 0x0b
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	31 f0       	breq	.+12     	; 0x184e <MDIO_vSetPinVal+0x94>
    1842:	2a 85       	ldd	r18, Y+10	; 0x0a
    1844:	3b 85       	ldd	r19, Y+11	; 0x0b
    1846:	21 30       	cpi	r18, 0x01	; 1
    1848:	31 05       	cpc	r19, r1
    184a:	b1 f0       	breq	.+44     	; 0x1878 <MDIO_vSetPinVal+0xbe>
    184c:	d0 c0       	rjmp	.+416    	; 0x19ee <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    184e:	ab e3       	ldi	r26, 0x3B	; 59
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	eb e3       	ldi	r30, 0x3B	; 59
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <MDIO_vSetPinVal+0xb2>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <MDIO_vSetPinVal+0xae>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	bb c0       	rjmp	.+374    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    1878:	ab e3       	ldi	r26, 0x3B	; 59
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	eb e3       	ldi	r30, 0x3B	; 59
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <MDIO_vSetPinVal+0xdc>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <MDIO_vSetPinVal+0xd8>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	a7 c0       	rjmp	.+334    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	39 87       	std	Y+9, r19	; 0x09
    18a8:	28 87       	std	Y+8, r18	; 0x08
    18aa:	88 85       	ldd	r24, Y+8	; 0x08
    18ac:	99 85       	ldd	r25, Y+9	; 0x09
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	31 f0       	breq	.+12     	; 0x18be <MDIO_vSetPinVal+0x104>
    18b2:	28 85       	ldd	r18, Y+8	; 0x08
    18b4:	39 85       	ldd	r19, Y+9	; 0x09
    18b6:	21 30       	cpi	r18, 0x01	; 1
    18b8:	31 05       	cpc	r19, r1
    18ba:	b1 f0       	breq	.+44     	; 0x18e8 <MDIO_vSetPinVal+0x12e>
    18bc:	98 c0       	rjmp	.+304    	; 0x19ee <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <MDIO_vSetPinVal+0x122>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <MDIO_vSetPinVal+0x11e>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	83 c0       	rjmp	.+262    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    18e8:	a8 e3       	ldi	r26, 0x38	; 56
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e8 e3       	ldi	r30, 0x38	; 56
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <MDIO_vSetPinVal+0x14c>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <MDIO_vSetPinVal+0x148>
    190a:	84 2b       	or	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	6f c0       	rjmp	.+222    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3f 83       	std	Y+7, r19	; 0x07
    1918:	2e 83       	std	Y+6, r18	; 0x06
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	9f 81       	ldd	r25, Y+7	; 0x07
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	31 f0       	breq	.+12     	; 0x192e <MDIO_vSetPinVal+0x174>
    1922:	2e 81       	ldd	r18, Y+6	; 0x06
    1924:	3f 81       	ldd	r19, Y+7	; 0x07
    1926:	21 30       	cpi	r18, 0x01	; 1
    1928:	31 05       	cpc	r19, r1
    192a:	b1 f0       	breq	.+44     	; 0x1958 <MDIO_vSetPinVal+0x19e>
    192c:	60 c0       	rjmp	.+192    	; 0x19ee <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    192e:	a5 e3       	ldi	r26, 0x35	; 53
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e3       	ldi	r30, 0x35	; 53
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <MDIO_vSetPinVal+0x192>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <MDIO_vSetPinVal+0x18e>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	4b c0       	rjmp	.+150    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    1958:	a5 e3       	ldi	r26, 0x35	; 53
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <MDIO_vSetPinVal+0x1bc>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <MDIO_vSetPinVal+0x1b8>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	37 c0       	rjmp	.+110    	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3d 83       	std	Y+5, r19	; 0x05
    1988:	2c 83       	std	Y+4, r18	; 0x04
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	31 f0       	breq	.+12     	; 0x199e <MDIO_vSetPinVal+0x1e4>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	21 30       	cpi	r18, 0x01	; 1
    1998:	31 05       	cpc	r19, r1
    199a:	b1 f0       	breq	.+44     	; 0x19c8 <MDIO_vSetPinVal+0x20e>
    199c:	28 c0       	rjmp	.+80     	; 0x19ee <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    199e:	a2 e3       	ldi	r26, 0x32	; 50
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e2 e3       	ldi	r30, 0x32	; 50
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MDIO_vSetPinVal+0x202>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <MDIO_vSetPinVal+0x1fe>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	13 c0       	rjmp	.+38     	; 0x19ee <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    19c8:	a2 e3       	ldi	r26, 0x32	; 50
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <MDIO_vSetPinVal+0x22c>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <MDIO_vSetPinVal+0x228>
    19ea:	84 2b       	or	r24, r20
    19ec:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    19ee:	2d 96       	adiw	r28, 0x0d	; 13
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <MDIO_GetPinVal+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <MDIO_GetPinVal+0x8>
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <MDIO_GetPinVal+0x1a>
    1a18:	6b c0       	rjmp	.+214    	; 0x1af0 <MDIO_GetPinVal+0xf0>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <MDIO_GetPinVal+0x22>
    1a20:	67 c0       	rjmp	.+206    	; 0x1af0 <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a30:	41 30       	cpi	r20, 0x01	; 1
    1a32:	51 05       	cpc	r21, r1
    1a34:	41 f1       	breq	.+80     	; 0x1a86 <MDIO_GetPinVal+0x86>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	34 f4       	brge	.+12     	; 0x1a4c <MDIO_GetPinVal+0x4c>
    1a40:	2c 81       	ldd	r18, Y+4	; 0x04
    1a42:	3d 81       	ldd	r19, Y+5	; 0x05
    1a44:	21 15       	cp	r18, r1
    1a46:	31 05       	cpc	r19, r1
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <MDIO_GetPinVal+0x62>
    1a4a:	52 c0       	rjmp	.+164    	; 0x1af0 <MDIO_GetPinVal+0xf0>
    1a4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a50:	42 30       	cpi	r20, 0x02	; 2
    1a52:	51 05       	cpc	r21, r1
    1a54:	51 f1       	breq	.+84     	; 0x1aaa <MDIO_GetPinVal+0xaa>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	b9 f1       	breq	.+110    	; 0x1ace <MDIO_GetPinVal+0xce>
    1a60:	47 c0       	rjmp	.+142    	; 0x1af0 <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1a62:	e9 e3       	ldi	r30, 0x39	; 57
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <MDIO_GetPinVal+0x7a>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <MDIO_GetPinVal+0x76>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	81 70       	andi	r24, 0x01	; 1
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	35 c0       	rjmp	.+106    	; 0x1af0 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1a86:	e6 e3       	ldi	r30, 0x36	; 54
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_GetPinVal+0x9e>
    1a9a:	55 95       	asr	r21
    1a9c:	47 95       	ror	r20
    1a9e:	8a 95       	dec	r24
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <MDIO_GetPinVal+0x9a>
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	81 70       	andi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	23 c0       	rjmp	.+70     	; 0x1af0 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1aaa:	e3 e3       	ldi	r30, 0x33	; 51
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a9 01       	movw	r20, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <MDIO_GetPinVal+0xc2>
    1abe:	55 95       	asr	r21
    1ac0:	47 95       	ror	r20
    1ac2:	8a 95       	dec	r24
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <MDIO_GetPinVal+0xbe>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	11 c0       	rjmp	.+34     	; 0x1af0 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1ace:	e0 e3       	ldi	r30, 0x30	; 48
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a9 01       	movw	r20, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <MDIO_GetPinVal+0xe6>
    1ae2:	55 95       	asr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	8a 95       	dec	r24
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <MDIO_GetPinVal+0xe2>
    1aea:	ca 01       	movw	r24, r20
    1aec:	81 70       	andi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <MDIO_vTogglePinVal+0x6>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <MDIO_vTogglePinVal+0x8>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <MDIO_vTogglePinVal+0x18>
    1b18:	72 c0       	rjmp	.+228    	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <MDIO_vTogglePinVal+0x20>
    1b20:	6e c0       	rjmp	.+220    	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	3c 83       	std	Y+4, r19	; 0x04
    1b2a:	2b 83       	std	Y+3, r18	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	49 f1       	breq	.+82     	; 0x1b88 <MDIO_vTogglePinVal+0x86>
    1b36:	2b 81       	ldd	r18, Y+3	; 0x03
    1b38:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <MDIO_vTogglePinVal+0x48>
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <MDIO_vTogglePinVal+0x5e>
    1b48:	5a c0       	rjmp	.+180    	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
    1b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	71 f1       	breq	.+92     	; 0x1bb0 <MDIO_vTogglePinVal+0xae>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	e9 f1       	breq	.+122    	; 0x1bd8 <MDIO_vTogglePinVal+0xd6>
    1b5e:	4f c0       	rjmp	.+158    	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1b60:	ab e3       	ldi	r26, 0x3B	; 59
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	eb e3       	ldi	r30, 0x3B	; 59
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <MDIO_vTogglePinVal+0x7c>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <MDIO_vTogglePinVal+0x78>
    1b82:	84 27       	eor	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	3b c0       	rjmp	.+118    	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1b88:	a8 e3       	ldi	r26, 0x38	; 56
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e8 e3       	ldi	r30, 0x38	; 56
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <MDIO_vTogglePinVal+0xa4>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <MDIO_vTogglePinVal+0xa0>
    1baa:	84 27       	eor	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1bb0:	a5 e3       	ldi	r26, 0x35	; 53
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <MDIO_vTogglePinVal+0xcc>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <MDIO_vTogglePinVal+0xc8>
    1bd2:	84 27       	eor	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <MDIO_vTogglePinVal+0xf4>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <MDIO_vTogglePinVal+0xf0>
    1bfa:	84 27       	eor	r24, r20
    1bfc:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <MDIO_vSetPortDir+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <MDIO_vSetPortDir+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	90 f5       	brcc	.+100    	; 0x1c86 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <MDIO_vSetPortDir+0x5e>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <MDIO_vSetPortDir+0x3e>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <MDIO_vSetPortDir+0x54>
    1c48:	1e c0       	rjmp	.+60     	; 0x1c86 <MDIO_vSetPortDir+0x7a>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <MDIO_vSetPortDir+0x68>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <MDIO_vSetPortDir+0x72>
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1c60:	ea e3       	ldi	r30, 0x3A	; 58
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1c6a:	e7 e3       	ldi	r30, 0x37	; 55
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1c74:	e4 e3       	ldi	r30, 0x34	; 52
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1c7e:	e1 e3       	ldi	r30, 0x31	; 49
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <MDIO_vSetPortVal+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <MDIO_vSetPortVal+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	90 f5       	brcc	.+100    	; 0x1d0e <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3c 83       	std	Y+4, r19	; 0x04
    1cb2:	2b 83       	std	Y+3, r18	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	d1 f0       	breq	.+52     	; 0x1cf2 <MDIO_vSetPortVal+0x5e>
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <MDIO_vSetPortVal+0x3e>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <MDIO_vSetPortVal+0x54>
    1cd0:	1e c0       	rjmp	.+60     	; 0x1d0e <MDIO_vSetPortVal+0x7a>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <MDIO_vSetPortVal+0x68>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	81 f0       	breq	.+32     	; 0x1d06 <MDIO_vSetPortVal+0x72>
    1ce6:	13 c0       	rjmp	.+38     	; 0x1d0e <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1ce8:	eb e3       	ldi	r30, 0x3B	; 59
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 83       	st	Z, r24
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1cf2:	e8 e3       	ldi	r30, 0x38	; 56
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	80 83       	st	Z, r24
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    1cfc:	e5 e3       	ldi	r30, 0x35	; 53
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	80 83       	st	Z, r24
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <MDIO_vInit>:


void MDIO_vInit()
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1d24:	ea e3       	ldi	r30, 0x3A	; 58
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1d2a:	e7 e3       	ldi	r30, 0x37	; 55
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1d30:	e4 e3       	ldi	r30, 0x34	; 52
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	87 e0       	ldi	r24, 0x07	; 7
    1d36:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1d38:	e1 e3       	ldi	r30, 0x31	; 49
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1d40:	eb e3       	ldi	r30, 0x3B	; 59
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1d4e:	e5 e3       	ldi	r30, 0x35	; 53
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1d54:	e2 e3       	ldi	r30, 0x32	; 50
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
    1d68:	a6 e2       	ldi	r26, 0x26	; 38
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e6 e2       	ldi	r30, 0x26	; 38
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	87 7f       	andi	r24, 0xF7	; 247
    1d74:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
    1d76:	a7 e2       	ldi	r26, 0x27	; 39
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e7 e2       	ldi	r30, 0x27	; 39
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	80 64       	ori	r24, 0x40	; 64
    1d82:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    1d84:	a7 e2       	ldi	r26, 0x27	; 39
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e7 e2       	ldi	r30, 0x27	; 39
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 77       	andi	r24, 0x7F	; 127
    1d90:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    1da0:	a6 e2       	ldi	r26, 0x26	; 38
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 e2       	ldi	r30, 0x26	; 38
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	82 60       	ori	r24, 0x02	; 2
    1dac:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
    1dae:	a6 e2       	ldi	r26, 0x26	; 38
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e6 e2       	ldi	r30, 0x26	; 38
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	84 60       	ori	r24, 0x04	; 4
    1dba:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
    1dbc:	a6 e2       	ldi	r26, 0x26	; 38
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e6 e2       	ldi	r30, 0x26	; 38
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	80 68       	ori	r24, 0x80	; 128
    1dc8:	8c 93       	st	X, r24
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <ADC_StartConvertPolling+0x6>
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
    1dde:	1a 82       	std	Y+2, r1	; 0x02
    1de0:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
    1de2:	a7 e2       	ldi	r26, 0x27	; 39
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 e2       	ldi	r30, 0x27	; 39
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 7e       	andi	r24, 0xE0	; 224
    1dee:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
    1df0:	a7 e2       	ldi	r26, 0x27	; 39
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e2       	ldi	r30, 0x27	; 39
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	90 81       	ld	r25, Z
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	89 2b       	or	r24, r25
    1dfe:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
    1e00:	a6 e2       	ldi	r26, 0x26	; 38
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e2       	ldi	r30, 0x26	; 38
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
    1e0e:	e6 e2       	ldi	r30, 0x26	; 38
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	82 95       	swap	r24
    1e16:	8f 70       	andi	r24, 0x0F	; 15
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	81 70       	andi	r24, 0x01	; 1
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	a9 f3       	breq	.-22     	; 0x1e0e <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
    1e24:	e4 e2       	ldi	r30, 0x24	; 36
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
    1e30:	a6 e2       	ldi	r26, 0x26	; 38
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e6 e2       	ldi	r30, 0x26	; 38
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	80 61       	ori	r24, 0x10	; 16
    1e3c:	8c 93       	st	X, r24
	return ADC_read;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <ADC_StartConvertInt+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <ADC_StartConvertInt+0x8>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <ADC_StartConvertInt+0xa>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
    1e5e:	7c 83       	std	Y+4, r23	; 0x04
    1e60:	6b 83       	std	Y+3, r22	; 0x03
    1e62:	5e 83       	std	Y+6, r21	; 0x06
    1e64:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
    1e66:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
    1e68:	80 91 94 01 	lds	r24, 0x0194
    1e6c:	88 23       	and	r24, r24
    1e6e:	69 f5       	brne	.+90     	; 0x1eca <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 94 01 	sts	0x0194, r24
			Global_ptr=pu16Reading;
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	90 93 91 01 	sts	0x0191, r25
    1e7e:	80 93 90 01 	sts	0x0190, r24
			GlobalPtrFunc = PtrFunc;
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	90 93 93 01 	sts	0x0193, r25
    1e8a:	80 93 92 01 	sts	0x0192, r24

			ADMUX &=0b11100000;
    1e8e:	a7 e2       	ldi	r26, 0x27	; 39
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e7 e2       	ldi	r30, 0x27	; 39
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	80 7e       	andi	r24, 0xE0	; 224
    1e9a:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
    1e9c:	a7 e2       	ldi	r26, 0x27	; 39
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e7 e2       	ldi	r30, 0x27	; 39
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	90 81       	ld	r25, Z
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	89 2b       	or	r24, r25
    1eaa:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
    1eac:	a6 e2       	ldi	r26, 0x26	; 38
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e6 e2       	ldi	r30, 0x26	; 38
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 60       	ori	r24, 0x08	; 8
    1eb8:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
    1eba:	a6 e2       	ldi	r26, 0x26	; 38
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e6 e2       	ldi	r30, 0x26	; 38
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 64       	ori	r24, 0x40	; 64
    1ec6:	8c 93       	st	X, r24
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed0:	26 96       	adiw	r28, 0x06	; 6
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
    1eec:	2f 93       	push	r18
    1eee:	3f 93       	push	r19
    1ef0:	4f 93       	push	r20
    1ef2:	5f 93       	push	r21
    1ef4:	6f 93       	push	r22
    1ef6:	7f 93       	push	r23
    1ef8:	8f 93       	push	r24
    1efa:	9f 93       	push	r25
    1efc:	af 93       	push	r26
    1efe:	bf 93       	push	r27
    1f00:	ef 93       	push	r30
    1f02:	ff 93       	push	r31
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
    1f0c:	a0 91 90 01 	lds	r26, 0x0190
    1f10:	b0 91 91 01 	lds	r27, 0x0191
    1f14:	e4 e2       	ldi	r30, 0x24	; 36
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	8d 93       	st	X+, r24
    1f1e:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
    1f20:	e0 91 92 01 	lds	r30, 0x0192
    1f24:	f0 91 93 01 	lds	r31, 0x0193
    1f28:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
    1f2a:	a6 e2       	ldi	r26, 0x26	; 38
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e6 e2       	ldi	r30, 0x26	; 38
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	87 7f       	andi	r24, 0xF7	; 247
    1f36:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
    1f38:	10 92 94 01 	sts	0x0194, r1



}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <HSSD_vInit+0x6>
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	84 30       	cpi	r24, 0x04	; 4
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <HSSD_vInit+0x16>
    1f76:	42 c0       	rjmp	.+132    	; 0x1ffc <HSSD_vInit+0x9a>
	{
		switch(A_PortID)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3b 83       	std	Y+3, r19	; 0x03
    1f80:	2a 83       	std	Y+2, r18	; 0x02
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	f1 f0       	breq	.+60     	; 0x1fc8 <HSSD_vInit+0x66>
    1f8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <HSSD_vInit+0x3e>
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	61 f0       	breq	.+24     	; 0x1fb6 <HSSD_vInit+0x54>
    1f9e:	2e c0       	rjmp	.+92     	; 0x1ffc <HSSD_vInit+0x9a>
    1fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	c1 f0       	breq	.+48     	; 0x1fda <HSSD_vInit+0x78>
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	e1 f0       	breq	.+56     	; 0x1fec <HSSD_vInit+0x8a>
    1fb4:	23 c0       	rjmp	.+70     	; 0x1ffc <HSSD_vInit+0x9a>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	6f ef       	ldi	r22, 0xFF	; 255
    1fba:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	6f ef       	ldi	r22, 0xFF	; 255
    1fc2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    1fc6:	1a c0       	rjmp	.+52     	; 0x1ffc <HSSD_vInit+0x9a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	6f ef       	ldi	r22, 0xFF	; 255
    1fcc:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	6f ef       	ldi	r22, 0xFF	; 255
    1fd4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    1fd8:	11 c0       	rjmp	.+34     	; 0x1ffc <HSSD_vInit+0x9a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	6f ef       	ldi	r22, 0xFF	; 255
    1fde:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	6f ef       	ldi	r22, 0xFF	; 255
    1fe6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <HSSD_vInit+0x9a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	6f ef       	ldi	r22, 0xFF	; 255
    1ff0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	6f ef       	ldi	r22, 0xFF	; 255
    1ff8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
			break;
		}
	}
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <HSSD_vDisplayNumber+0x6>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <HSSD_vDisplayNumber+0x8>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	90 f5       	brcc	.+100    	; 0x2082 <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3c 83       	std	Y+4, r19	; 0x04
    2026:	2b 83       	std	Y+3, r18	; 0x03
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	d1 f0       	breq	.+52     	; 0x2066 <HSSD_vDisplayNumber+0x5e>
    2032:	2b 81       	ldd	r18, Y+3	; 0x03
    2034:	3c 81       	ldd	r19, Y+4	; 0x04
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	2c f4       	brge	.+10     	; 0x2046 <HSSD_vDisplayNumber+0x3e>
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	61 f0       	breq	.+24     	; 0x205c <HSSD_vDisplayNumber+0x54>
    2044:	1e c0       	rjmp	.+60     	; 0x2082 <HSSD_vDisplayNumber+0x7a>
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <HSSD_vDisplayNumber+0x68>
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	91 05       	cpc	r25, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <HSSD_vDisplayNumber+0x72>
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	6a 81       	ldd	r22, Y+2	; 0x02
    2060:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    2064:	0e c0       	rjmp	.+28     	; 0x2082 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	6a 81       	ldd	r22, Y+2	; 0x02
    206a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    206e:	09 c0       	rjmp	.+18     	; 0x2082 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	6a 81       	ldd	r22, Y+2	; 0x02
    2074:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	6a 81       	ldd	r22, Y+2	; 0x02
    207e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
			break;
		}
	}
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	c0 55       	subi	r28, 0x50	; 80
    209a:	d0 40       	sbci	r29, 0x00	; 0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	fe 01       	movw	r30, r28
    20a8:	e9 5b       	subi	r30, 0xB9	; 185
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 83       	st	Z, r24
    20ae:	fe 01       	movw	r30, r28
    20b0:	e8 5b       	subi	r30, 0xB8	; 184
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	71 83       	std	Z+1, r23	; 0x01
    20b6:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    20b8:	9e 01       	movw	r18, r28
    20ba:	23 5c       	subi	r18, 0xC3	; 195
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	2e 96       	adiw	r28, 0x0e	; 14
    20c0:	3f af       	std	Y+63, r19	; 0x3f
    20c2:	2e af       	std	Y+62, r18	; 0x3e
    20c4:	2e 97       	sbiw	r28, 0x0e	; 14
    20c6:	88 e7       	ldi	r24, 0x78	; 120
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	60 96       	adiw	r28, 0x10	; 16
    20cc:	9f af       	std	Y+63, r25	; 0x3f
    20ce:	8e af       	std	Y+62, r24	; 0x3e
    20d0:	60 97       	sbiw	r28, 0x10	; 16
    20d2:	9a e0       	ldi	r25, 0x0A	; 10
    20d4:	61 96       	adiw	r28, 0x11	; 17
    20d6:	9f af       	std	Y+63, r25	; 0x3f
    20d8:	61 97       	sbiw	r28, 0x11	; 17
    20da:	60 96       	adiw	r28, 0x10	; 16
    20dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    20de:	ff ad       	ldd	r31, Y+63	; 0x3f
    20e0:	60 97       	sbiw	r28, 0x10	; 16
    20e2:	00 80       	ld	r0, Z
    20e4:	60 96       	adiw	r28, 0x10	; 16
    20e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    20e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    20ea:	60 97       	sbiw	r28, 0x10	; 16
    20ec:	2f 5f       	subi	r18, 0xFF	; 255
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	60 96       	adiw	r28, 0x10	; 16
    20f2:	3f af       	std	Y+63, r19	; 0x3f
    20f4:	2e af       	std	Y+62, r18	; 0x3e
    20f6:	60 97       	sbiw	r28, 0x10	; 16
    20f8:	2e 96       	adiw	r28, 0x0e	; 14
    20fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    20fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    20fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2100:	00 82       	st	Z, r0
    2102:	2e 96       	adiw	r28, 0x0e	; 14
    2104:	2e ad       	ldd	r18, Y+62	; 0x3e
    2106:	3f ad       	ldd	r19, Y+63	; 0x3f
    2108:	2e 97       	sbiw	r28, 0x0e	; 14
    210a:	2f 5f       	subi	r18, 0xFF	; 255
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	2e 96       	adiw	r28, 0x0e	; 14
    2110:	3f af       	std	Y+63, r19	; 0x3f
    2112:	2e af       	std	Y+62, r18	; 0x3e
    2114:	2e 97       	sbiw	r28, 0x0e	; 14
    2116:	61 96       	adiw	r28, 0x11	; 17
    2118:	3f ad       	ldd	r19, Y+63	; 0x3f
    211a:	61 97       	sbiw	r28, 0x11	; 17
    211c:	31 50       	subi	r19, 0x01	; 1
    211e:	61 96       	adiw	r28, 0x11	; 17
    2120:	3f af       	std	Y+63, r19	; 0x3f
    2122:	61 97       	sbiw	r28, 0x11	; 17
    2124:	61 96       	adiw	r28, 0x11	; 17
    2126:	8f ad       	ldd	r24, Y+63	; 0x3f
    2128:	61 97       	sbiw	r28, 0x11	; 17
    212a:	88 23       	and	r24, r24
    212c:	b1 f6       	brne	.-84     	; 0x20da <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    212e:	fe 01       	movw	r30, r28
    2130:	e9 5b       	subi	r30, 0xB9	; 185
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	08 f0       	brcs	.+2      	; 0x213c <HSSD_vDisplayNumberAscending+0xac>
    213a:	7c c2       	rjmp	.+1272   	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    213c:	fe 01       	movw	r30, r28
    213e:	e9 5b       	subi	r30, 0xB9	; 185
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	e8 2f       	mov	r30, r24
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	2c 96       	adiw	r28, 0x0c	; 12
    214a:	ff af       	std	Y+63, r31	; 0x3f
    214c:	ee af       	std	Y+62, r30	; 0x3e
    214e:	2c 97       	sbiw	r28, 0x0c	; 12
    2150:	2c 96       	adiw	r28, 0x0c	; 12
    2152:	2e ad       	ldd	r18, Y+62	; 0x3e
    2154:	3f ad       	ldd	r19, Y+63	; 0x3f
    2156:	2c 97       	sbiw	r28, 0x0c	; 12
    2158:	21 30       	cpi	r18, 0x01	; 1
    215a:	31 05       	cpc	r19, r1
    215c:	09 f4       	brne	.+2      	; 0x2160 <HSSD_vDisplayNumberAscending+0xd0>
    215e:	b2 c0       	rjmp	.+356    	; 0x22c4 <HSSD_vDisplayNumberAscending+0x234>
    2160:	2c 96       	adiw	r28, 0x0c	; 12
    2162:	8e ad       	ldd	r24, Y+62	; 0x3e
    2164:	9f ad       	ldd	r25, Y+63	; 0x3f
    2166:	2c 97       	sbiw	r28, 0x0c	; 12
    2168:	82 30       	cpi	r24, 0x02	; 2
    216a:	91 05       	cpc	r25, r1
    216c:	3c f4       	brge	.+14     	; 0x217c <HSSD_vDisplayNumberAscending+0xec>
    216e:	2c 96       	adiw	r28, 0x0c	; 12
    2170:	ee ad       	ldd	r30, Y+62	; 0x3e
    2172:	ff ad       	ldd	r31, Y+63	; 0x3f
    2174:	2c 97       	sbiw	r28, 0x0c	; 12
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	91 f0       	breq	.+36     	; 0x219e <HSSD_vDisplayNumberAscending+0x10e>
    217a:	5c c2       	rjmp	.+1208   	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
    217c:	2c 96       	adiw	r28, 0x0c	; 12
    217e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2180:	3f ad       	ldd	r19, Y+63	; 0x3f
    2182:	2c 97       	sbiw	r28, 0x0c	; 12
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <HSSD_vDisplayNumberAscending+0xfc>
    218a:	2f c1       	rjmp	.+606    	; 0x23ea <HSSD_vDisplayNumberAscending+0x35a>
    218c:	2c 96       	adiw	r28, 0x0c	; 12
    218e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2190:	9f ad       	ldd	r25, Y+63	; 0x3f
    2192:	2c 97       	sbiw	r28, 0x0c	; 12
    2194:	83 30       	cpi	r24, 0x03	; 3
    2196:	91 05       	cpc	r25, r1
    2198:	09 f4       	brne	.+2      	; 0x219c <HSSD_vDisplayNumberAscending+0x10c>
    219a:	ba c1       	rjmp	.+884    	; 0x2510 <HSSD_vDisplayNumberAscending+0x480>
    219c:	4b c2       	rjmp	.+1174   	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    219e:	1c ae       	std	Y+60, r1	; 0x3c
    21a0:	8c c0       	rjmp	.+280    	; 0x22ba <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    21a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	ce 01       	movw	r24, r28
    21aa:	cd 96       	adiw	r24, 0x3d	; 61
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	90 81       	ld	r25, Z
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	69 2f       	mov	r22, r25
    21b8:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    21bc:	fe 01       	movw	r30, r28
    21be:	e8 5b       	subi	r30, 0xB8	; 184
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	cc 01       	movw	r24, r24
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8d ab       	std	Y+53, r24	; 0x35
    21da:	9e ab       	std	Y+54, r25	; 0x36
    21dc:	af ab       	std	Y+55, r26	; 0x37
    21de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6d a9       	ldd	r22, Y+53	; 0x35
    21e2:	7e a9       	ldd	r23, Y+54	; 0x36
    21e4:	8f a9       	ldd	r24, Y+55	; 0x37
    21e6:	98 ad       	ldd	r25, Y+56	; 0x38
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	89 ab       	std	Y+49, r24	; 0x31
    21fa:	9a ab       	std	Y+50, r25	; 0x32
    21fc:	ab ab       	std	Y+51, r26	; 0x33
    21fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2200:	69 a9       	ldd	r22, Y+49	; 0x31
    2202:	7a a9       	ldd	r23, Y+50	; 0x32
    2204:	8b a9       	ldd	r24, Y+51	; 0x33
    2206:	9c a9       	ldd	r25, Y+52	; 0x34
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    2222:	69 a9       	ldd	r22, Y+49	; 0x31
    2224:	7a a9       	ldd	r23, Y+50	; 0x32
    2226:	8b a9       	ldd	r24, Y+51	; 0x33
    2228:	9c a9       	ldd	r25, Y+52	; 0x34
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6d a9       	ldd	r22, Y+53	; 0x35
    223c:	7e a9       	ldd	r23, Y+54	; 0x36
    223e:	8f a9       	ldd	r24, Y+55	; 0x37
    2240:	98 ad       	ldd	r25, Y+56	; 0x38
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	98 ab       	std	Y+48, r25	; 0x30
    2260:	8f a7       	std	Y+47, r24	; 0x2f
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <HSSD_vDisplayNumberAscending+0x1f2>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e a7       	std	Y+46, r25	; 0x2e
    226a:	8d a7       	std	Y+45, r24	; 0x2d
    226c:	8d a5       	ldd	r24, Y+45	; 0x2d
    226e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <HSSD_vDisplayNumberAscending+0x1e0>
    2274:	9e a7       	std	Y+46, r25	; 0x2e
    2276:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8f a5       	ldd	r24, Y+47	; 0x2f
    227a:	98 a9       	ldd	r25, Y+48	; 0x30
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	98 ab       	std	Y+48, r25	; 0x30
    2280:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <HSSD_vDisplayNumberAscending+0x1d4>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	98 ab       	std	Y+48, r25	; 0x30
    229e:	8f a7       	std	Y+47, r24	; 0x2f
    22a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a2:	98 a9       	ldd	r25, Y+48	; 0x30
    22a4:	9c a7       	std	Y+44, r25	; 0x2c
    22a6:	8b a7       	std	Y+43, r24	; 0x2b
    22a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <HSSD_vDisplayNumberAscending+0x21c>
    22b0:	9c a7       	std	Y+44, r25	; 0x2c
    22b2:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    22b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	8c af       	std	Y+60, r24	; 0x3c
    22ba:	8c ad       	ldd	r24, Y+60	; 0x3c
    22bc:	8a 30       	cpi	r24, 0x0A	; 10
    22be:	08 f4       	brcc	.+2      	; 0x22c2 <HSSD_vDisplayNumberAscending+0x232>
    22c0:	70 cf       	rjmp	.-288    	; 0x21a2 <HSSD_vDisplayNumberAscending+0x112>
    22c2:	b8 c1       	rjmp	.+880    	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    22c4:	1b ae       	std	Y+59, r1	; 0x3b
    22c6:	8c c0       	rjmp	.+280    	; 0x23e0 <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    22c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	ce 01       	movw	r24, r28
    22d0:	cd 96       	adiw	r24, 0x3d	; 61
    22d2:	fc 01       	movw	r30, r24
    22d4:	e2 0f       	add	r30, r18
    22d6:	f3 1f       	adc	r31, r19
    22d8:	90 81       	ld	r25, Z
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	69 2f       	mov	r22, r25
    22de:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    22e2:	fe 01       	movw	r30, r28
    22e4:	e8 5b       	subi	r30, 0xB8	; 184
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	cc 01       	movw	r24, r24
    22ee:	a0 e0       	ldi	r26, 0x00	; 0
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8f a3       	std	Y+39, r24	; 0x27
    2300:	98 a7       	std	Y+40, r25	; 0x28
    2302:	a9 a7       	std	Y+41, r26	; 0x29
    2304:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6f a1       	ldd	r22, Y+39	; 0x27
    2308:	78 a5       	ldd	r23, Y+40	; 0x28
    230a:	89 a5       	ldd	r24, Y+41	; 0x29
    230c:	9a a5       	ldd	r25, Y+42	; 0x2a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8b a3       	std	Y+35, r24	; 0x23
    2320:	9c a3       	std	Y+36, r25	; 0x24
    2322:	ad a3       	std	Y+37, r26	; 0x25
    2324:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2326:	6b a1       	ldd	r22, Y+35	; 0x23
    2328:	7c a1       	ldd	r23, Y+36	; 0x24
    232a:	8d a1       	ldd	r24, Y+37	; 0x25
    232c:	9e a1       	ldd	r25, Y+38	; 0x26
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9a a3       	std	Y+34, r25	; 0x22
    2344:	89 a3       	std	Y+33, r24	; 0x21
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    2348:	6b a1       	ldd	r22, Y+35	; 0x23
    234a:	7c a1       	ldd	r23, Y+36	; 0x24
    234c:	8d a1       	ldd	r24, Y+37	; 0x25
    234e:	9e a1       	ldd	r25, Y+38	; 0x26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6f a1       	ldd	r22, Y+39	; 0x27
    2362:	78 a5       	ldd	r23, Y+40	; 0x28
    2364:	89 a5       	ldd	r24, Y+41	; 0x29
    2366:	9a a5       	ldd	r25, Y+42	; 0x2a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9a a3       	std	Y+34, r25	; 0x22
    2386:	89 a3       	std	Y+33, r24	; 0x21
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <HSSD_vDisplayNumberAscending+0x318>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	98 a3       	std	Y+32, r25	; 0x20
    2390:	8f 8f       	std	Y+31, r24	; 0x1f
    2392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2394:	98 a1       	ldd	r25, Y+32	; 0x20
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <HSSD_vDisplayNumberAscending+0x306>
    239a:	98 a3       	std	Y+32, r25	; 0x20
    239c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	89 a1       	ldd	r24, Y+33	; 0x21
    23a0:	9a a1       	ldd	r25, Y+34	; 0x22
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9a a3       	std	Y+34, r25	; 0x22
    23a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	9a a1       	ldd	r25, Y+34	; 0x22
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <HSSD_vDisplayNumberAscending+0x2fa>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6b a1       	ldd	r22, Y+35	; 0x23
    23b4:	7c a1       	ldd	r23, Y+36	; 0x24
    23b6:	8d a1       	ldd	r24, Y+37	; 0x25
    23b8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9a a3       	std	Y+34, r25	; 0x22
    23c4:	89 a3       	std	Y+33, r24	; 0x21
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	9e 8f       	std	Y+30, r25	; 0x1e
    23cc:	8d 8f       	std	Y+29, r24	; 0x1d
    23ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <HSSD_vDisplayNumberAscending+0x342>
    23d6:	9e 8f       	std	Y+30, r25	; 0x1e
    23d8:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    23da:	8b ad       	ldd	r24, Y+59	; 0x3b
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	8b af       	std	Y+59, r24	; 0x3b
    23e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23e2:	8a 30       	cpi	r24, 0x0A	; 10
    23e4:	08 f4       	brcc	.+2      	; 0x23e8 <HSSD_vDisplayNumberAscending+0x358>
    23e6:	70 cf       	rjmp	.-288    	; 0x22c8 <HSSD_vDisplayNumberAscending+0x238>
    23e8:	25 c1       	rjmp	.+586    	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    23ea:	1a ae       	std	Y+58, r1	; 0x3a
    23ec:	8c c0       	rjmp	.+280    	; 0x2506 <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    23ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	ce 01       	movw	r24, r28
    23f6:	cd 96       	adiw	r24, 0x3d	; 61
    23f8:	fc 01       	movw	r30, r24
    23fa:	e2 0f       	add	r30, r18
    23fc:	f3 1f       	adc	r31, r19
    23fe:	90 81       	ld	r25, Z
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	69 2f       	mov	r22, r25
    2404:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2408:	fe 01       	movw	r30, r28
    240a:	e8 5b       	subi	r30, 0xB8	; 184
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	cc 01       	movw	r24, r24
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	89 8f       	std	Y+25, r24	; 0x19
    2426:	9a 8f       	std	Y+26, r25	; 0x1a
    2428:	ab 8f       	std	Y+27, r26	; 0x1b
    242a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	69 8d       	ldd	r22, Y+25	; 0x19
    242e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a ef       	ldi	r20, 0xFA	; 250
    243a:	54 e4       	ldi	r21, 0x44	; 68
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8d 8b       	std	Y+21, r24	; 0x15
    2446:	9e 8b       	std	Y+22, r25	; 0x16
    2448:	af 8b       	std	Y+23, r26	; 0x17
    244a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    246e:	6d 89       	ldd	r22, Y+21	; 0x15
    2470:	7e 89       	ldd	r23, Y+22	; 0x16
    2472:	8f 89       	ldd	r24, Y+23	; 0x17
    2474:	98 8d       	ldd	r25, Y+24	; 0x18
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	69 8d       	ldd	r22, Y+25	; 0x19
    2488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <HSSD_vDisplayNumberAscending+0x43e>
    24b0:	88 ec       	ldi	r24, 0xC8	; 200
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9a 8b       	std	Y+18, r25	; 0x12
    24b6:	89 8b       	std	Y+17, r24	; 0x11
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	9a 89       	ldd	r25, Y+18	; 0x12
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <HSSD_vDisplayNumberAscending+0x42c>
    24c0:	9a 8b       	std	Y+18, r25	; 0x12
    24c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8b 89       	ldd	r24, Y+19	; 0x13
    24c6:	9c 89       	ldd	r25, Y+20	; 0x14
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9c 8b       	std	Y+20, r25	; 0x14
    24cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <HSSD_vDisplayNumberAscending+0x420>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	98 8b       	std	Y+16, r25	; 0x10
    24f2:	8f 87       	std	Y+15, r24	; 0x0f
    24f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f6:	98 89       	ldd	r25, Y+16	; 0x10
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <HSSD_vDisplayNumberAscending+0x468>
    24fc:	98 8b       	std	Y+16, r25	; 0x10
    24fe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2500:	8a ad       	ldd	r24, Y+58	; 0x3a
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	8a af       	std	Y+58, r24	; 0x3a
    2506:	8a ad       	ldd	r24, Y+58	; 0x3a
    2508:	8a 30       	cpi	r24, 0x0A	; 10
    250a:	08 f4       	brcc	.+2      	; 0x250e <HSSD_vDisplayNumberAscending+0x47e>
    250c:	70 cf       	rjmp	.-288    	; 0x23ee <HSSD_vDisplayNumberAscending+0x35e>
    250e:	92 c0       	rjmp	.+292    	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    2510:	19 ae       	std	Y+57, r1	; 0x39
    2512:	8c c0       	rjmp	.+280    	; 0x262c <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    2514:	89 ad       	ldd	r24, Y+57	; 0x39
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	ce 01       	movw	r24, r28
    251c:	cd 96       	adiw	r24, 0x3d	; 61
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	90 81       	ld	r25, Z
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	69 2f       	mov	r22, r25
    252a:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    252e:	fe 01       	movw	r30, r28
    2530:	e8 5b       	subi	r30, 0xB8	; 184
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	cc 01       	movw	r24, r24
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	8b 87       	std	Y+11, r24	; 0x0b
    254c:	9c 87       	std	Y+12, r25	; 0x0c
    254e:	ad 87       	std	Y+13, r26	; 0x0d
    2550:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	4a ef       	ldi	r20, 0xFA	; 250
    2560:	54 e4       	ldi	r21, 0x44	; 68
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8f 83       	std	Y+7, r24	; 0x07
    256c:	98 87       	std	Y+8, r25	; 0x08
    256e:	a9 87       	std	Y+9, r26	; 0x09
    2570:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2572:	6f 81       	ldd	r22, Y+7	; 0x07
    2574:	78 85       	ldd	r23, Y+8	; 0x08
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2586:	88 23       	and	r24, r24
    2588:	2c f4       	brge	.+10     	; 0x2594 <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	3f c0       	rjmp	.+126    	; 0x2612 <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    2594:	6f 81       	ldd	r22, Y+7	; 0x07
    2596:	78 85       	ldd	r23, Y+8	; 0x08
    2598:	89 85       	ldd	r24, Y+9	; 0x09
    259a:	9a 85       	ldd	r25, Y+10	; 0x0a
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	4c f5       	brge	.+82     	; 0x25fe <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <HSSD_vDisplayNumberAscending+0x564>
    25d6:	88 ec       	ldi	r24, 0xC8	; 200
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9c 83       	std	Y+4, r25	; 0x04
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <HSSD_vDisplayNumberAscending+0x552>
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	69 f7       	brne	.-38     	; 0x25d6 <HSSD_vDisplayNumberAscending+0x546>
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	8d 81       	ldd	r24, Y+5	; 0x05
    2614:	9e 81       	ldd	r25, Y+6	; 0x06
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <HSSD_vDisplayNumberAscending+0x58e>
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    2626:	89 ad       	ldd	r24, Y+57	; 0x39
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	89 af       	std	Y+57, r24	; 0x39
    262c:	89 ad       	ldd	r24, Y+57	; 0x39
    262e:	8a 30       	cpi	r24, 0x0A	; 10
    2630:	08 f4       	brcc	.+2      	; 0x2634 <HSSD_vDisplayNumberAscending+0x5a4>
    2632:	70 cf       	rjmp	.-288    	; 0x2514 <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    2634:	c0 5b       	subi	r28, 0xB0	; 176
    2636:	df 4f       	sbci	r29, 0xFF	; 255
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,s8 A_u8Time , u16 A_u16TimetoWait)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	c1 55       	subi	r28, 0x51	; 81
    2652:	d0 40       	sbci	r29, 0x00	; 0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	fe 01       	movw	r30, r28
    2660:	e9 5b       	subi	r30, 0xB9	; 185
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 83       	st	Z, r24
    2666:	fe 01       	movw	r30, r28
    2668:	e8 5b       	subi	r30, 0xB8	; 184
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	60 83       	st	Z, r22
    266e:	fe 01       	movw	r30, r28
    2670:	e7 5b       	subi	r30, 0xB7	; 183
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	51 83       	std	Z+1, r21	; 0x01
    2676:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2678:	9e 01       	movw	r18, r28
    267a:	23 5c       	subi	r18, 0xC3	; 195
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	2f 96       	adiw	r28, 0x0f	; 15
    2680:	3f af       	std	Y+63, r19	; 0x3f
    2682:	2e af       	std	Y+62, r18	; 0x3e
    2684:	2f 97       	sbiw	r28, 0x0f	; 15
    2686:	82 e8       	ldi	r24, 0x82	; 130
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	61 96       	adiw	r28, 0x11	; 17
    268c:	9f af       	std	Y+63, r25	; 0x3f
    268e:	8e af       	std	Y+62, r24	; 0x3e
    2690:	61 97       	sbiw	r28, 0x11	; 17
    2692:	9a e0       	ldi	r25, 0x0A	; 10
    2694:	62 96       	adiw	r28, 0x12	; 18
    2696:	9f af       	std	Y+63, r25	; 0x3f
    2698:	62 97       	sbiw	r28, 0x12	; 18
    269a:	61 96       	adiw	r28, 0x11	; 17
    269c:	ee ad       	ldd	r30, Y+62	; 0x3e
    269e:	ff ad       	ldd	r31, Y+63	; 0x3f
    26a0:	61 97       	sbiw	r28, 0x11	; 17
    26a2:	00 80       	ld	r0, Z
    26a4:	61 96       	adiw	r28, 0x11	; 17
    26a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    26a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    26aa:	61 97       	sbiw	r28, 0x11	; 17
    26ac:	2f 5f       	subi	r18, 0xFF	; 255
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	61 96       	adiw	r28, 0x11	; 17
    26b2:	3f af       	std	Y+63, r19	; 0x3f
    26b4:	2e af       	std	Y+62, r18	; 0x3e
    26b6:	61 97       	sbiw	r28, 0x11	; 17
    26b8:	2f 96       	adiw	r28, 0x0f	; 15
    26ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    26bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    26be:	2f 97       	sbiw	r28, 0x0f	; 15
    26c0:	00 82       	st	Z, r0
    26c2:	2f 96       	adiw	r28, 0x0f	; 15
    26c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    26c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    26c8:	2f 97       	sbiw	r28, 0x0f	; 15
    26ca:	2f 5f       	subi	r18, 0xFF	; 255
    26cc:	3f 4f       	sbci	r19, 0xFF	; 255
    26ce:	2f 96       	adiw	r28, 0x0f	; 15
    26d0:	3f af       	std	Y+63, r19	; 0x3f
    26d2:	2e af       	std	Y+62, r18	; 0x3e
    26d4:	2f 97       	sbiw	r28, 0x0f	; 15
    26d6:	62 96       	adiw	r28, 0x12	; 18
    26d8:	3f ad       	ldd	r19, Y+63	; 0x3f
    26da:	62 97       	sbiw	r28, 0x12	; 18
    26dc:	31 50       	subi	r19, 0x01	; 1
    26de:	62 96       	adiw	r28, 0x12	; 18
    26e0:	3f af       	std	Y+63, r19	; 0x3f
    26e2:	62 97       	sbiw	r28, 0x12	; 18
    26e4:	62 96       	adiw	r28, 0x12	; 18
    26e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    26e8:	62 97       	sbiw	r28, 0x12	; 18
    26ea:	88 23       	and	r24, r24
    26ec:	b1 f6       	brne	.-84     	; 0x269a <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e9 5b       	subi	r30, 0xB9	; 185
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	84 30       	cpi	r24, 0x04	; 4
    26f8:	08 f0       	brcs	.+2      	; 0x26fc <HSSD_vCountDown+0xb4>
    26fa:	9b c2       	rjmp	.+1334   	; 0x2c32 <HSSD_vCountDown+0x5ea>
	{
		switch(A_PortID)
    26fc:	fe 01       	movw	r30, r28
    26fe:	e9 5b       	subi	r30, 0xB9	; 185
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	e8 2f       	mov	r30, r24
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	2d 96       	adiw	r28, 0x0d	; 13
    270a:	ff af       	std	Y+63, r31	; 0x3f
    270c:	ee af       	std	Y+62, r30	; 0x3e
    270e:	2d 97       	sbiw	r28, 0x0d	; 13
    2710:	2d 96       	adiw	r28, 0x0d	; 13
    2712:	2e ad       	ldd	r18, Y+62	; 0x3e
    2714:	3f ad       	ldd	r19, Y+63	; 0x3f
    2716:	2d 97       	sbiw	r28, 0x0d	; 13
    2718:	21 30       	cpi	r18, 0x01	; 1
    271a:	31 05       	cpc	r19, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <HSSD_vCountDown+0xd8>
    271e:	b8 c0       	rjmp	.+368    	; 0x2890 <HSSD_vCountDown+0x248>
    2720:	2d 96       	adiw	r28, 0x0d	; 13
    2722:	8e ad       	ldd	r24, Y+62	; 0x3e
    2724:	9f ad       	ldd	r25, Y+63	; 0x3f
    2726:	2d 97       	sbiw	r28, 0x0d	; 13
    2728:	82 30       	cpi	r24, 0x02	; 2
    272a:	91 05       	cpc	r25, r1
    272c:	3c f4       	brge	.+14     	; 0x273c <HSSD_vCountDown+0xf4>
    272e:	2d 96       	adiw	r28, 0x0d	; 13
    2730:	ee ad       	ldd	r30, Y+62	; 0x3e
    2732:	ff ad       	ldd	r31, Y+63	; 0x3f
    2734:	2d 97       	sbiw	r28, 0x0d	; 13
    2736:	30 97       	sbiw	r30, 0x00	; 0
    2738:	91 f0       	breq	.+36     	; 0x275e <HSSD_vCountDown+0x116>
    273a:	74 c2       	rjmp	.+1256   	; 0x2c24 <HSSD_vCountDown+0x5dc>
    273c:	2d 96       	adiw	r28, 0x0d	; 13
    273e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2740:	3f ad       	ldd	r19, Y+63	; 0x3f
    2742:	2d 97       	sbiw	r28, 0x0d	; 13
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <HSSD_vCountDown+0x104>
    274a:	3b c1       	rjmp	.+630    	; 0x29c2 <HSSD_vCountDown+0x37a>
    274c:	2d 96       	adiw	r28, 0x0d	; 13
    274e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2750:	9f ad       	ldd	r25, Y+63	; 0x3f
    2752:	2d 97       	sbiw	r28, 0x0d	; 13
    2754:	83 30       	cpi	r24, 0x03	; 3
    2756:	91 05       	cpc	r25, r1
    2758:	09 f4       	brne	.+2      	; 0x275c <HSSD_vCountDown+0x114>
    275a:	cc c1       	rjmp	.+920    	; 0x2af4 <HSSD_vCountDown+0x4ac>
    275c:	63 c2       	rjmp	.+1222   	; 0x2c24 <HSSD_vCountDown+0x5dc>
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    275e:	fe 01       	movw	r30, r28
    2760:	e8 5b       	subi	r30, 0xB8	; 184
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	8c af       	std	Y+60, r24	; 0x3c
    2768:	8e c0       	rjmp	.+284    	; 0x2886 <HSSD_vCountDown+0x23e>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    276a:	8c ad       	ldd	r24, Y+60	; 0x3c
    276c:	28 2f       	mov	r18, r24
    276e:	33 27       	eor	r19, r19
    2770:	27 fd       	sbrc	r18, 7
    2772:	30 95       	com	r19
    2774:	ce 01       	movw	r24, r28
    2776:	cd 96       	adiw	r24, 0x3d	; 61
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	90 81       	ld	r25, Z
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	69 2f       	mov	r22, r25
    2784:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2788:	fe 01       	movw	r30, r28
    278a:	e7 5b       	subi	r30, 0xB7	; 183
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	cc 01       	movw	r24, r24
    2794:	a0 e0       	ldi	r26, 0x00	; 0
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8d ab       	std	Y+53, r24	; 0x35
    27a6:	9e ab       	std	Y+54, r25	; 0x36
    27a8:	af ab       	std	Y+55, r26	; 0x37
    27aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ac:	6d a9       	ldd	r22, Y+53	; 0x35
    27ae:	7e a9       	ldd	r23, Y+54	; 0x36
    27b0:	8f a9       	ldd	r24, Y+55	; 0x37
    27b2:	98 ad       	ldd	r25, Y+56	; 0x38
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a ef       	ldi	r20, 0xFA	; 250
    27ba:	54 e4       	ldi	r21, 0x44	; 68
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	89 ab       	std	Y+49, r24	; 0x31
    27c6:	9a ab       	std	Y+50, r25	; 0x32
    27c8:	ab ab       	std	Y+51, r26	; 0x33
    27ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27cc:	69 a9       	ldd	r22, Y+49	; 0x31
    27ce:	7a a9       	ldd	r23, Y+50	; 0x32
    27d0:	8b a9       	ldd	r24, Y+51	; 0x33
    27d2:	9c a9       	ldd	r25, Y+52	; 0x34
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	2c f4       	brge	.+10     	; 0x27ee <HSSD_vCountDown+0x1a6>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
    27ec:	3f c0       	rjmp	.+126    	; 0x286c <HSSD_vCountDown+0x224>
	else if (__tmp > 65535)
    27ee:	69 a9       	ldd	r22, Y+49	; 0x31
    27f0:	7a a9       	ldd	r23, Y+50	; 0x32
    27f2:	8b a9       	ldd	r24, Y+51	; 0x33
    27f4:	9c a9       	ldd	r25, Y+52	; 0x34
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	57 e4       	ldi	r21, 0x47	; 71
    27fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	4c f5       	brge	.+82     	; 0x2858 <HSSD_vCountDown+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2806:	6d a9       	ldd	r22, Y+53	; 0x35
    2808:	7e a9       	ldd	r23, Y+54	; 0x36
    280a:	8f a9       	ldd	r24, Y+55	; 0x37
    280c:	98 ad       	ldd	r25, Y+56	; 0x38
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	98 ab       	std	Y+48, r25	; 0x30
    282c:	8f a7       	std	Y+47, r24	; 0x2f
    282e:	0f c0       	rjmp	.+30     	; 0x284e <HSSD_vCountDown+0x206>
    2830:	88 ec       	ldi	r24, 0xC8	; 200
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9e a7       	std	Y+46, r25	; 0x2e
    2836:	8d a7       	std	Y+45, r24	; 0x2d
    2838:	8d a5       	ldd	r24, Y+45	; 0x2d
    283a:	9e a5       	ldd	r25, Y+46	; 0x2e
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <HSSD_vCountDown+0x1f4>
    2840:	9e a7       	std	Y+46, r25	; 0x2e
    2842:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2844:	8f a5       	ldd	r24, Y+47	; 0x2f
    2846:	98 a9       	ldd	r25, Y+48	; 0x30
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	98 ab       	std	Y+48, r25	; 0x30
    284c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2850:	98 a9       	ldd	r25, Y+48	; 0x30
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	69 f7       	brne	.-38     	; 0x2830 <HSSD_vCountDown+0x1e8>
    2856:	14 c0       	rjmp	.+40     	; 0x2880 <HSSD_vCountDown+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2858:	69 a9       	ldd	r22, Y+49	; 0x31
    285a:	7a a9       	ldd	r23, Y+50	; 0x32
    285c:	8b a9       	ldd	r24, Y+51	; 0x33
    285e:	9c a9       	ldd	r25, Y+52	; 0x34
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	98 ab       	std	Y+48, r25	; 0x30
    286a:	8f a7       	std	Y+47, r24	; 0x2f
    286c:	8f a5       	ldd	r24, Y+47	; 0x2f
    286e:	98 a9       	ldd	r25, Y+48	; 0x30
    2870:	9c a7       	std	Y+44, r25	; 0x2c
    2872:	8b a7       	std	Y+43, r24	; 0x2b
    2874:	8b a5       	ldd	r24, Y+43	; 0x2b
    2876:	9c a5       	ldd	r25, Y+44	; 0x2c
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <HSSD_vCountDown+0x230>
    287c:	9c a7       	std	Y+44, r25	; 0x2c
    287e:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    2880:	8c ad       	ldd	r24, Y+60	; 0x3c
    2882:	81 50       	subi	r24, 0x01	; 1
    2884:	8c af       	std	Y+60, r24	; 0x3c
    2886:	8c ad       	ldd	r24, Y+60	; 0x3c
    2888:	88 23       	and	r24, r24
    288a:	0c f0       	brlt	.+2      	; 0x288e <HSSD_vCountDown+0x246>
    288c:	6e cf       	rjmp	.-292    	; 0x276a <HSSD_vCountDown+0x122>
    288e:	ca c1       	rjmp	.+916    	; 0x2c24 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2890:	fe 01       	movw	r30, r28
    2892:	e8 5b       	subi	r30, 0xB8	; 184
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	8b af       	std	Y+59, r24	; 0x3b
    289a:	8e c0       	rjmp	.+284    	; 0x29b8 <HSSD_vCountDown+0x370>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    289c:	8b ad       	ldd	r24, Y+59	; 0x3b
    289e:	28 2f       	mov	r18, r24
    28a0:	33 27       	eor	r19, r19
    28a2:	27 fd       	sbrc	r18, 7
    28a4:	30 95       	com	r19
    28a6:	ce 01       	movw	r24, r28
    28a8:	cd 96       	adiw	r24, 0x3d	; 61
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	90 81       	ld	r25, Z
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	69 2f       	mov	r22, r25
    28b6:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    28ba:	fe 01       	movw	r30, r28
    28bc:	e7 5b       	subi	r30, 0xB7	; 183
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	cc 01       	movw	r24, r24
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8f a3       	std	Y+39, r24	; 0x27
    28d8:	98 a7       	std	Y+40, r25	; 0x28
    28da:	a9 a7       	std	Y+41, r26	; 0x29
    28dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6f a1       	ldd	r22, Y+39	; 0x27
    28e0:	78 a5       	ldd	r23, Y+40	; 0x28
    28e2:	89 a5       	ldd	r24, Y+41	; 0x29
    28e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a ef       	ldi	r20, 0xFA	; 250
    28ec:	54 e4       	ldi	r21, 0x44	; 68
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8b a3       	std	Y+35, r24	; 0x23
    28f8:	9c a3       	std	Y+36, r25	; 0x24
    28fa:	ad a3       	std	Y+37, r26	; 0x25
    28fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2900:	7c a1       	ldd	r23, Y+36	; 0x24
    2902:	8d a1       	ldd	r24, Y+37	; 0x25
    2904:	9e a1       	ldd	r25, Y+38	; 0x26
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <HSSD_vCountDown+0x2d8>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9a a3       	std	Y+34, r25	; 0x22
    291c:	89 a3       	std	Y+33, r24	; 0x21
    291e:	3f c0       	rjmp	.+126    	; 0x299e <HSSD_vCountDown+0x356>
	else if (__tmp > 65535)
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <HSSD_vCountDown+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6f a1       	ldd	r22, Y+39	; 0x27
    293a:	78 a5       	ldd	r23, Y+40	; 0x28
    293c:	89 a5       	ldd	r24, Y+41	; 0x29
    293e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9a a3       	std	Y+34, r25	; 0x22
    295e:	89 a3       	std	Y+33, r24	; 0x21
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <HSSD_vCountDown+0x338>
    2962:	88 ec       	ldi	r24, 0xC8	; 200
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	98 a3       	std	Y+32, r25	; 0x20
    2968:	8f 8f       	std	Y+31, r24	; 0x1f
    296a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    296c:	98 a1       	ldd	r25, Y+32	; 0x20
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <HSSD_vCountDown+0x326>
    2972:	98 a3       	std	Y+32, r25	; 0x20
    2974:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	89 a1       	ldd	r24, Y+33	; 0x21
    2978:	9a a1       	ldd	r25, Y+34	; 0x22
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9a a3       	std	Y+34, r25	; 0x22
    297e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	89 a1       	ldd	r24, Y+33	; 0x21
    2982:	9a a1       	ldd	r25, Y+34	; 0x22
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <HSSD_vCountDown+0x31a>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <HSSD_vCountDown+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6b a1       	ldd	r22, Y+35	; 0x23
    298c:	7c a1       	ldd	r23, Y+36	; 0x24
    298e:	8d a1       	ldd	r24, Y+37	; 0x25
    2990:	9e a1       	ldd	r25, Y+38	; 0x26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	89 a3       	std	Y+33, r24	; 0x21
    299e:	89 a1       	ldd	r24, Y+33	; 0x21
    29a0:	9a a1       	ldd	r25, Y+34	; 0x22
    29a2:	9e 8f       	std	Y+30, r25	; 0x1e
    29a4:	8d 8f       	std	Y+29, r24	; 0x1d
    29a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <HSSD_vCountDown+0x362>
    29ae:	9e 8f       	std	Y+30, r25	; 0x1e
    29b0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    29b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    29b4:	81 50       	subi	r24, 0x01	; 1
    29b6:	8b af       	std	Y+59, r24	; 0x3b
    29b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ba:	88 23       	and	r24, r24
    29bc:	0c f0       	brlt	.+2      	; 0x29c0 <HSSD_vCountDown+0x378>
    29be:	6e cf       	rjmp	.-292    	; 0x289c <HSSD_vCountDown+0x254>
    29c0:	31 c1       	rjmp	.+610    	; 0x2c24 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e8 5b       	subi	r30, 0xB8	; 184
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	8a af       	std	Y+58, r24	; 0x3a
    29cc:	8e c0       	rjmp	.+284    	; 0x2aea <HSSD_vCountDown+0x4a2>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    29ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    29d0:	28 2f       	mov	r18, r24
    29d2:	33 27       	eor	r19, r19
    29d4:	27 fd       	sbrc	r18, 7
    29d6:	30 95       	com	r19
    29d8:	ce 01       	movw	r24, r28
    29da:	cd 96       	adiw	r24, 0x3d	; 61
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	90 81       	ld	r25, Z
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	69 2f       	mov	r22, r25
    29e8:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    29ec:	fe 01       	movw	r30, r28
    29ee:	e7 5b       	subi	r30, 0xB7	; 183
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	cc 01       	movw	r24, r24
    29f8:	a0 e0       	ldi	r26, 0x00	; 0
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	89 8f       	std	Y+25, r24	; 0x19
    2a0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	69 8d       	ldd	r22, Y+25	; 0x19
    2a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a ef       	ldi	r20, 0xFA	; 250
    2a1e:	54 e4       	ldi	r21, 0x44	; 68
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8d 8b       	std	Y+21, r24	; 0x15
    2a2a:	9e 8b       	std	Y+22, r25	; 0x16
    2a2c:	af 8b       	std	Y+23, r26	; 0x17
    2a2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <HSSD_vCountDown+0x40a>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <HSSD_vCountDown+0x488>
	else if (__tmp > 65535)
    2a52:	6d 89       	ldd	r22, Y+21	; 0x15
    2a54:	7e 89       	ldd	r23, Y+22	; 0x16
    2a56:	8f 89       	ldd	r24, Y+23	; 0x17
    2a58:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <HSSD_vCountDown+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9c 8b       	std	Y+20, r25	; 0x14
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <HSSD_vCountDown+0x46a>
    2a94:	88 ec       	ldi	r24, 0xC8	; 200
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9a 8b       	std	Y+18, r25	; 0x12
    2a9a:	89 8b       	std	Y+17, r24	; 0x11
    2a9c:	89 89       	ldd	r24, Y+17	; 0x11
    2a9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <HSSD_vCountDown+0x458>
    2aa4:	9a 8b       	std	Y+18, r25	; 0x12
    2aa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <HSSD_vCountDown+0x44c>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <HSSD_vCountDown+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9c 8b       	std	Y+20, r25	; 0x14
    2ace:	8b 8b       	std	Y+19, r24	; 0x13
    2ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad4:	98 8b       	std	Y+16, r25	; 0x10
    2ad6:	8f 87       	std	Y+15, r24	; 0x0f
    2ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ada:	98 89       	ldd	r25, Y+16	; 0x10
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <HSSD_vCountDown+0x494>
    2ae0:	98 8b       	std	Y+16, r25	; 0x10
    2ae2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2ae4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ae6:	81 50       	subi	r24, 0x01	; 1
    2ae8:	8a af       	std	Y+58, r24	; 0x3a
    2aea:	8a ad       	ldd	r24, Y+58	; 0x3a
    2aec:	88 23       	and	r24, r24
    2aee:	0c f0       	brlt	.+2      	; 0x2af2 <HSSD_vCountDown+0x4aa>
    2af0:	6e cf       	rjmp	.-292    	; 0x29ce <HSSD_vCountDown+0x386>
    2af2:	98 c0       	rjmp	.+304    	; 0x2c24 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2af4:	fe 01       	movw	r30, r28
    2af6:	e8 5b       	subi	r30, 0xB8	; 184
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	89 af       	std	Y+57, r24	; 0x39
    2afe:	8e c0       	rjmp	.+284    	; 0x2c1c <HSSD_vCountDown+0x5d4>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    2b00:	89 ad       	ldd	r24, Y+57	; 0x39
    2b02:	28 2f       	mov	r18, r24
    2b04:	33 27       	eor	r19, r19
    2b06:	27 fd       	sbrc	r18, 7
    2b08:	30 95       	com	r19
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	cd 96       	adiw	r24, 0x3d	; 61
    2b0e:	fc 01       	movw	r30, r24
    2b10:	e2 0f       	add	r30, r18
    2b12:	f3 1f       	adc	r31, r19
    2b14:	90 81       	ld	r25, Z
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	69 2f       	mov	r22, r25
    2b1a:	0e 94 04 10 	call	0x2008	; 0x2008 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e7 5b       	subi	r30, 0xB7	; 183
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	cc 01       	movw	r24, r24
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8b 87       	std	Y+11, r24	; 0x0b
    2b3c:	9c 87       	std	Y+12, r25	; 0x0c
    2b3e:	ad 87       	std	Y+13, r26	; 0x0d
    2b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a ef       	ldi	r20, 0xFA	; 250
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8f 83       	std	Y+7, r24	; 0x07
    2b5c:	98 87       	std	Y+8, r25	; 0x08
    2b5e:	a9 87       	std	Y+9, r26	; 0x09
    2b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <HSSD_vCountDown+0x53c>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <HSSD_vCountDown+0x5ba>
	else if (__tmp > 65535)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <HSSD_vCountDown+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <HSSD_vCountDown+0x59c>
    2bc6:	88 ec       	ldi	r24, 0xC8	; 200
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <HSSD_vCountDown+0x58a>
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <HSSD_vCountDown+0x57e>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <HSSD_vCountDown+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf0:	78 85       	ldd	r23, Y+8	; 0x08
    2bf2:	89 85       	ldd	r24, Y+9	; 0x09
    2bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <HSSD_vCountDown+0x5c6>
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2c16:	89 ad       	ldd	r24, Y+57	; 0x39
    2c18:	81 50       	subi	r24, 0x01	; 1
    2c1a:	89 af       	std	Y+57, r24	; 0x39
    2c1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2c1e:	88 23       	and	r24, r24
    2c20:	0c f0       	brlt	.+2      	; 0x2c24 <HSSD_vCountDown+0x5dc>
    2c22:	6e cf       	rjmp	.-292    	; 0x2b00 <HSSD_vCountDown+0x4b8>
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
		MDIO_vSetPortVal(A_PortID , 0xFF);
    2c24:	fe 01       	movw	r30, r28
    2c26:	e9 5b       	subi	r30, 0xB9	; 185
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	6f ef       	ldi	r22, 0xFF	; 255
    2c2e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
	}
}
    2c32:	cf 5a       	subi	r28, 0xAF	; 175
    2c34:	df 4f       	sbci	r29, 0xFF	; 255
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <HSSD_vTurnOFF>:

void HSSD_vTurnOFF(DIO_PORT_e A_PortID)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	0f 92       	push	r0
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortVal(A_PortID , 0xFF);
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	6f ef       	ldi	r22, 0xFF	; 255
    2c56:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
}
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	61 e0       	ldi	r22, 0x01	; 1
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	62 e0       	ldi	r22, 0x02	; 2
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	6f ef       	ldi	r22, 0xFF	; 255
    2c8c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
}
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	2f 97       	sbiw	r28, 0x0f	; 15
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	61 e0       	ldi	r22, 0x01	; 1
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cc4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	62 e0       	ldi	r22, 0x02	; 2
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 e8       	ldi	r26, 0x80	; 128
    2cd8:	bf e3       	ldi	r27, 0x3F	; 63
    2cda:	8b 87       	std	Y+11, r24	; 0x0b
    2cdc:	9c 87       	std	Y+12, r25	; 0x0c
    2cde:	ad 87       	std	Y+13, r26	; 0x0d
    2ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4a ef       	ldi	r20, 0xFA	; 250
    2cf0:	54 e4       	ldi	r21, 0x44	; 68
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8f 83       	std	Y+7, r24	; 0x07
    2cfc:	98 87       	std	Y+8, r25	; 0x08
    2cfe:	a9 87       	std	Y+9, r26	; 0x09
    2d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e8       	ldi	r20, 0x80	; 128
    2d10:	5f e3       	ldi	r21, 0x3F	; 63
    2d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d16:	88 23       	and	r24, r24
    2d18:	2c f4       	brge	.+10     	; 0x2d24 <LCD_SendCommand+0x8e>
		__ticks = 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    2d24:	6f 81       	ldd	r22, Y+7	; 0x07
    2d26:	78 85       	ldd	r23, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	4c f5       	brge	.+82     	; 0x2d8e <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <LCD_SendCommand+0xee>
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_SendCommand+0xdc>
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <LCD_SendCommand+0xd0>
    2d8c:	14 c0       	rjmp	.+40     	; 0x2db6 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCD_SendCommand+0x118>
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	62 e0       	ldi	r22, 0x02	; 2
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>

}
    2dc0:	2f 96       	adiw	r28, 0x0f	; 15
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	2f 97       	sbiw	r28, 0x0f	; 15
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	41 e0       	ldi	r20, 0x01	; 1
    2dee:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	61 e0       	ldi	r22, 0x01	; 1
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e00:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	62 e0       	ldi	r22, 0x02	; 2
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 e8       	ldi	r26, 0x80	; 128
    2e14:	bf e3       	ldi	r27, 0x3F	; 63
    2e16:	8b 87       	std	Y+11, r24	; 0x0b
    2e18:	9c 87       	std	Y+12, r25	; 0x0c
    2e1a:	ad 87       	std	Y+13, r26	; 0x0d
    2e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8f 83       	std	Y+7, r24	; 0x07
    2e38:	98 87       	std	Y+8, r25	; 0x08
    2e3a:	a9 87       	std	Y+9, r26	; 0x09
    2e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <LCD_SendData+0x8e>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <LCD_SendData+0xee>
    2ea2:	88 ec       	ldi	r24, 0xC8	; 200
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <LCD_SendData+0xdc>
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <LCD_SendData+0xd0>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <LCD_SendData+0x118>
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	62 e0       	ldi	r22, 0x02	; 2
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
}
    2efc:	2f 96       	adiw	r28, 0x0f	; 15
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <LCD_Init>:

void LCD_Init(void)
{
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	c6 54       	subi	r28, 0x46	; 70
    2f1c:	d0 40       	sbci	r29, 0x00	; 0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ed 5b       	subi	r30, 0xBD	; 189
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 e2       	ldi	r26, 0x20	; 32
    2f34:	b2 e4       	ldi	r27, 0x42	; 66
    2f36:	80 83       	st	Z, r24
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	a2 83       	std	Z+2, r26	; 0x02
    2f3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	8e 01       	movw	r16, r28
    2f40:	01 5c       	subi	r16, 0xC1	; 193
    2f42:	1f 4f       	sbci	r17, 0xFF	; 255
    2f44:	fe 01       	movw	r30, r28
    2f46:	ed 5b       	subi	r30, 0xBD	; 189
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4a ef       	ldi	r20, 0xFA	; 250
    2f58:	54 e4       	ldi	r21, 0x44	; 68
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	f8 01       	movw	r30, r16
    2f64:	80 83       	st	Z, r24
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	a2 83       	std	Z+2, r26	; 0x02
    2f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ff 96       	adiw	r30, 0x3f	; 63
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <LCD_Init+0x84>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9e af       	std	Y+62, r25	; 0x3e
    2f8e:	8d af       	std	Y+61, r24	; 0x3d
    2f90:	46 c0       	rjmp	.+140    	; 0x301e <LCD_Init+0x110>
	else if (__tmp > 65535)
    2f92:	fe 01       	movw	r30, r28
    2f94:	ff 96       	adiw	r30, 0x3f	; 63
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	64 f5       	brge	.+88     	; 0x3006 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ed 5b       	subi	r30, 0xBD	; 189
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9e af       	std	Y+62, r25	; 0x3e
    2fda:	8d af       	std	Y+61, r24	; 0x3d
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <LCD_Init+0xee>
    2fde:	88 ec       	ldi	r24, 0xC8	; 200
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9c af       	std	Y+60, r25	; 0x3c
    2fe4:	8b af       	std	Y+59, r24	; 0x3b
    2fe6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fe8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_Init+0xdc>
    2fee:	9c af       	std	Y+60, r25	; 0x3c
    2ff0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	9e af       	std	Y+62, r25	; 0x3e
    2ffa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <LCD_Init+0xd0>
    3004:	16 c0       	rjmp	.+44     	; 0x3032 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	fe 01       	movw	r30, r28
    3008:	ff 96       	adiw	r30, 0x3f	; 63
    300a:	60 81       	ld	r22, Z
    300c:	71 81       	ldd	r23, Z+1	; 0x01
    300e:	82 81       	ldd	r24, Z+2	; 0x02
    3010:	93 81       	ldd	r25, Z+3	; 0x03
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9e af       	std	Y+62, r25	; 0x3e
    301c:	8d af       	std	Y+61, r24	; 0x3d
    301e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3020:	9e ad       	ldd	r25, Y+62	; 0x3e
    3022:	9a af       	std	Y+58, r25	; 0x3a
    3024:	89 af       	std	Y+57, r24	; 0x39
    3026:	89 ad       	ldd	r24, Y+57	; 0x39
    3028:	9a ad       	ldd	r25, Y+58	; 0x3a
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <LCD_Init+0x11c>
    302e:	9a af       	std	Y+58, r25	; 0x3a
    3030:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    3032:	88 e3       	ldi	r24, 0x38	; 56
    3034:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e8       	ldi	r26, 0x80	; 128
    303e:	bf e3       	ldi	r27, 0x3F	; 63
    3040:	8d ab       	std	Y+53, r24	; 0x35
    3042:	9e ab       	std	Y+54, r25	; 0x36
    3044:	af ab       	std	Y+55, r26	; 0x37
    3046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6d a9       	ldd	r22, Y+53	; 0x35
    304a:	7e a9       	ldd	r23, Y+54	; 0x36
    304c:	8f a9       	ldd	r24, Y+55	; 0x37
    304e:	98 ad       	ldd	r25, Y+56	; 0x38
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	89 ab       	std	Y+49, r24	; 0x31
    3062:	9a ab       	std	Y+50, r25	; 0x32
    3064:	ab ab       	std	Y+51, r26	; 0x33
    3066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3068:	69 a9       	ldd	r22, Y+49	; 0x31
    306a:	7a a9       	ldd	r23, Y+50	; 0x32
    306c:	8b a9       	ldd	r24, Y+51	; 0x33
    306e:	9c a9       	ldd	r25, Y+52	; 0x34
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_Init+0x17c>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    308a:	69 a9       	ldd	r22, Y+49	; 0x31
    308c:	7a a9       	ldd	r23, Y+50	; 0x32
    308e:	8b a9       	ldd	r24, Y+51	; 0x33
    3090:	9c a9       	ldd	r25, Y+52	; 0x34
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6d a9       	ldd	r22, Y+53	; 0x35
    30a4:	7e a9       	ldd	r23, Y+54	; 0x36
    30a6:	8f a9       	ldd	r24, Y+55	; 0x37
    30a8:	98 ad       	ldd	r25, Y+56	; 0x38
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	98 ab       	std	Y+48, r25	; 0x30
    30c8:	8f a7       	std	Y+47, r24	; 0x2f
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_Init+0x1dc>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9e a7       	std	Y+46, r25	; 0x2e
    30d2:	8d a7       	std	Y+45, r24	; 0x2d
    30d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_Init+0x1ca>
    30dc:	9e a7       	std	Y+46, r25	; 0x2e
    30de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	98 ab       	std	Y+48, r25	; 0x30
    30e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ec:	98 a9       	ldd	r25, Y+48	; 0x30
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_Init+0x1be>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	69 a9       	ldd	r22, Y+49	; 0x31
    30f6:	7a a9       	ldd	r23, Y+50	; 0x32
    30f8:	8b a9       	ldd	r24, Y+51	; 0x33
    30fa:	9c a9       	ldd	r25, Y+52	; 0x34
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	98 ab       	std	Y+48, r25	; 0x30
    3106:	8f a7       	std	Y+47, r24	; 0x2f
    3108:	8f a5       	ldd	r24, Y+47	; 0x2f
    310a:	98 a9       	ldd	r25, Y+48	; 0x30
    310c:	9c a7       	std	Y+44, r25	; 0x2c
    310e:	8b a7       	std	Y+43, r24	; 0x2b
    3110:	8b a5       	ldd	r24, Y+43	; 0x2b
    3112:	9c a5       	ldd	r25, Y+44	; 0x2c
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_Init+0x206>
    3118:	9c a7       	std	Y+44, r25	; 0x2c
    311a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    311c:	8c e0       	ldi	r24, 0x0C	; 12
    311e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e8       	ldi	r26, 0x80	; 128
    3128:	bf e3       	ldi	r27, 0x3F	; 63
    312a:	8f a3       	std	Y+39, r24	; 0x27
    312c:	98 a7       	std	Y+40, r25	; 0x28
    312e:	a9 a7       	std	Y+41, r26	; 0x29
    3130:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3132:	6f a1       	ldd	r22, Y+39	; 0x27
    3134:	78 a5       	ldd	r23, Y+40	; 0x28
    3136:	89 a5       	ldd	r24, Y+41	; 0x29
    3138:	9a a5       	ldd	r25, Y+42	; 0x2a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a ef       	ldi	r20, 0xFA	; 250
    3140:	54 e4       	ldi	r21, 0x44	; 68
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8b a3       	std	Y+35, r24	; 0x23
    314c:	9c a3       	std	Y+36, r25	; 0x24
    314e:	ad a3       	std	Y+37, r26	; 0x25
    3150:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3152:	6b a1       	ldd	r22, Y+35	; 0x23
    3154:	7c a1       	ldd	r23, Y+36	; 0x24
    3156:	8d a1       	ldd	r24, Y+37	; 0x25
    3158:	9e a1       	ldd	r25, Y+38	; 0x26
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e8       	ldi	r20, 0x80	; 128
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3166:	88 23       	and	r24, r24
    3168:	2c f4       	brge	.+10     	; 0x3174 <LCD_Init+0x266>
		__ticks = 1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9a a3       	std	Y+34, r25	; 0x22
    3170:	89 a3       	std	Y+33, r24	; 0x21
    3172:	3f c0       	rjmp	.+126    	; 0x31f2 <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    3174:	6b a1       	ldd	r22, Y+35	; 0x23
    3176:	7c a1       	ldd	r23, Y+36	; 0x24
    3178:	8d a1       	ldd	r24, Y+37	; 0x25
    317a:	9e a1       	ldd	r25, Y+38	; 0x26
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	3f ef       	ldi	r19, 0xFF	; 255
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	57 e4       	ldi	r21, 0x47	; 71
    3184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	4c f5       	brge	.+82     	; 0x31de <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318c:	6f a1       	ldd	r22, Y+39	; 0x27
    318e:	78 a5       	ldd	r23, Y+40	; 0x28
    3190:	89 a5       	ldd	r24, Y+41	; 0x29
    3192:	9a a5       	ldd	r25, Y+42	; 0x2a
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9a a3       	std	Y+34, r25	; 0x22
    31b2:	89 a3       	std	Y+33, r24	; 0x21
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <LCD_Init+0x2c6>
    31b6:	88 ec       	ldi	r24, 0xC8	; 200
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	98 a3       	std	Y+32, r25	; 0x20
    31bc:	8f 8f       	std	Y+31, r24	; 0x1f
    31be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c0:	98 a1       	ldd	r25, Y+32	; 0x20
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <LCD_Init+0x2b4>
    31c6:	98 a3       	std	Y+32, r25	; 0x20
    31c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ca:	89 a1       	ldd	r24, Y+33	; 0x21
    31cc:	9a a1       	ldd	r25, Y+34	; 0x22
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	9a a3       	std	Y+34, r25	; 0x22
    31d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d4:	89 a1       	ldd	r24, Y+33	; 0x21
    31d6:	9a a1       	ldd	r25, Y+34	; 0x22
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	69 f7       	brne	.-38     	; 0x31b6 <LCD_Init+0x2a8>
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31de:	6b a1       	ldd	r22, Y+35	; 0x23
    31e0:	7c a1       	ldd	r23, Y+36	; 0x24
    31e2:	8d a1       	ldd	r24, Y+37	; 0x25
    31e4:	9e a1       	ldd	r25, Y+38	; 0x26
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9a a3       	std	Y+34, r25	; 0x22
    31f0:	89 a3       	std	Y+33, r24	; 0x21
    31f2:	89 a1       	ldd	r24, Y+33	; 0x21
    31f4:	9a a1       	ldd	r25, Y+34	; 0x22
    31f6:	9e 8f       	std	Y+30, r25	; 0x1e
    31f8:	8d 8f       	std	Y+29, r24	; 0x1d
    31fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <LCD_Init+0x2f0>
    3202:	9e 8f       	std	Y+30, r25	; 0x1e
    3204:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e0       	ldi	r26, 0x00	; 0
    3212:	b0 e4       	ldi	r27, 0x40	; 64
    3214:	89 8f       	std	Y+25, r24	; 0x19
    3216:	9a 8f       	std	Y+26, r25	; 0x1a
    3218:	ab 8f       	std	Y+27, r26	; 0x1b
    321a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	69 8d       	ldd	r22, Y+25	; 0x19
    321e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	4a ef       	ldi	r20, 0xFA	; 250
    322a:	54 e4       	ldi	r21, 0x44	; 68
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	8d 8b       	std	Y+21, r24	; 0x15
    3236:	9e 8b       	std	Y+22, r25	; 0x16
    3238:	af 8b       	std	Y+23, r26	; 0x17
    323a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    323c:	6d 89       	ldd	r22, Y+21	; 0x15
    323e:	7e 89       	ldd	r23, Y+22	; 0x16
    3240:	8f 89       	ldd	r24, Y+23	; 0x17
    3242:	98 8d       	ldd	r25, Y+24	; 0x18
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	2c f4       	brge	.+10     	; 0x325e <LCD_Init+0x350>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	3f c0       	rjmp	.+126    	; 0x32dc <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    325e:	6d 89       	ldd	r22, Y+21	; 0x15
    3260:	7e 89       	ldd	r23, Y+22	; 0x16
    3262:	8f 89       	ldd	r24, Y+23	; 0x17
    3264:	98 8d       	ldd	r25, Y+24	; 0x18
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	3f ef       	ldi	r19, 0xFF	; 255
    326a:	4f e7       	ldi	r20, 0x7F	; 127
    326c:	57 e4       	ldi	r21, 0x47	; 71
    326e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3272:	18 16       	cp	r1, r24
    3274:	4c f5       	brge	.+82     	; 0x32c8 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3276:	69 8d       	ldd	r22, Y+25	; 0x19
    3278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e2       	ldi	r20, 0x20	; 32
    3284:	51 e4       	ldi	r21, 0x41	; 65
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9c 8b       	std	Y+20, r25	; 0x14
    329c:	8b 8b       	std	Y+19, r24	; 0x13
    329e:	0f c0       	rjmp	.+30     	; 0x32be <LCD_Init+0x3b0>
    32a0:	88 ec       	ldi	r24, 0xC8	; 200
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	9a 8b       	std	Y+18, r25	; 0x12
    32a6:	89 8b       	std	Y+17, r24	; 0x11
    32a8:	89 89       	ldd	r24, Y+17	; 0x11
    32aa:	9a 89       	ldd	r25, Y+18	; 0x12
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_Init+0x39e>
    32b0:	9a 8b       	std	Y+18, r25	; 0x12
    32b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	9c 8b       	std	Y+20, r25	; 0x14
    32bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	8b 89       	ldd	r24, Y+19	; 0x13
    32c0:	9c 89       	ldd	r25, Y+20	; 0x14
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <LCD_Init+0x392>
    32c6:	14 c0       	rjmp	.+40     	; 0x32f0 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ca:	7e 89       	ldd	r23, Y+22	; 0x16
    32cc:	8f 89       	ldd	r24, Y+23	; 0x17
    32ce:	98 8d       	ldd	r25, Y+24	; 0x18
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9c 8b       	std	Y+20, r25	; 0x14
    32da:	8b 8b       	std	Y+19, r24	; 0x13
    32dc:	8b 89       	ldd	r24, Y+19	; 0x13
    32de:	9c 89       	ldd	r25, Y+20	; 0x14
    32e0:	98 8b       	std	Y+16, r25	; 0x10
    32e2:	8f 87       	std	Y+15, r24	; 0x0f
    32e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e6:	98 89       	ldd	r25, Y+16	; 0x10
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <LCD_Init+0x3da>
    32ec:	98 8b       	std	Y+16, r25	; 0x10
    32ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    32f0:	86 e0       	ldi	r24, 0x06	; 6
    32f2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 e8       	ldi	r26, 0x80	; 128
    32fc:	bf e3       	ldi	r27, 0x3F	; 63
    32fe:	8b 87       	std	Y+11, r24	; 0x0b
    3300:	9c 87       	std	Y+12, r25	; 0x0c
    3302:	ad 87       	std	Y+13, r26	; 0x0d
    3304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a ef       	ldi	r20, 0xFA	; 250
    3314:	54 e4       	ldi	r21, 0x44	; 68
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	8f 83       	std	Y+7, r24	; 0x07
    3320:	98 87       	std	Y+8, r25	; 0x08
    3322:	a9 87       	std	Y+9, r26	; 0x09
    3324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	5f e3       	ldi	r21, 0x3F	; 63
    3336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    333a:	88 23       	and	r24, r24
    333c:	2c f4       	brge	.+10     	; 0x3348 <LCD_Init+0x43a>
		__ticks = 1;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	3f c0       	rjmp	.+126    	; 0x33c6 <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    3348:	6f 81       	ldd	r22, Y+7	; 0x07
    334a:	78 85       	ldd	r23, Y+8	; 0x08
    334c:	89 85       	ldd	r24, Y+9	; 0x09
    334e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	4c f5       	brge	.+82     	; 0x33b2 <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <LCD_Init+0x49a>
    338a:	88 ec       	ldi	r24, 0xC8	; 200
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <LCD_Init+0x488>
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a8:	8d 81       	ldd	r24, Y+5	; 0x05
    33aa:	9e 81       	ldd	r25, Y+6	; 0x06
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	69 f7       	brne	.-38     	; 0x338a <LCD_Init+0x47c>
    33b0:	14 c0       	rjmp	.+40     	; 0x33da <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	6f 81       	ldd	r22, Y+7	; 0x07
    33b4:	78 85       	ldd	r23, Y+8	; 0x08
    33b6:	89 85       	ldd	r24, Y+9	; 0x09
    33b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_Init+0x4c4>
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    33da:	ca 5b       	subi	r28, 0xBA	; 186
    33dc:	df 4f       	sbci	r29, 0xFF	; 255
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	08 95       	ret

000033f2 <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <LCD_SendString+0x6>
    33f8:	0f 92       	push	r0
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	9b 83       	std	Y+3, r25	; 0x03
    3400:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    3402:	19 82       	std	Y+1, r1	; 0x01
    3404:	0e c0       	rjmp	.+28     	; 0x3422 <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	9b 81       	ldd	r25, Y+3	; 0x03
    3410:	fc 01       	movw	r30, r24
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
    3416:	80 81       	ld	r24, Z
    3418:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_SendData>
		Counter++;
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	9b 81       	ldd	r25, Y+3	; 0x03
    342c:	fc 01       	movw	r30, r24
    342e:	e2 0f       	add	r30, r18
    3430:	f3 1f       	adc	r31, r19
    3432:	80 81       	ld	r24, Z
    3434:	88 23       	and	r24, r24
    3436:	39 f7       	brne	.-50     	; 0x3406 <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <LCD_GoToXY+0x6>
    344a:	00 d0       	rcall	.+0      	; 0x344c <LCD_GoToXY+0x8>
    344c:	0f 92       	push	r0
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	8a 83       	std	Y+2, r24	; 0x02
    3454:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	88 23       	and	r24, r24
    345a:	19 f0       	breq	.+6      	; 0x3462 <LCD_GoToXY+0x1e>
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	81 30       	cpi	r24, 0x01	; 1
    3460:	e1 f4       	brne	.+56     	; 0x349a <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	80 31       	cpi	r24, 0x10	; 16
    3466:	a8 f4       	brcc	.+42     	; 0x3492 <LCD_GoToXY+0x4e>
		{
			switch(Row)
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	3d 83       	std	Y+5, r19	; 0x05
    3470:	2c 83       	std	Y+4, r18	; 0x04
    3472:	8c 81       	ldd	r24, Y+4	; 0x04
    3474:	9d 81       	ldd	r25, Y+5	; 0x05
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	31 f0       	breq	.+12     	; 0x3486 <LCD_GoToXY+0x42>
    347a:	2c 81       	ldd	r18, Y+4	; 0x04
    347c:	3d 81       	ldd	r19, Y+5	; 0x05
    347e:	21 30       	cpi	r18, 0x01	; 1
    3480:	31 05       	cpc	r19, r1
    3482:	21 f0       	breq	.+8      	; 0x348c <LCD_GoToXY+0x48>
    3484:	06 c0       	rjmp	.+12     	; 0x3492 <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	80 5c       	subi	r24, 0xC0	; 192
    3490:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	80 58       	subi	r24, 0x80	; 128
    3496:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
	}
}
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	2e 97       	sbiw	r28, 0x0e	; 14
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_SendCommand>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e4       	ldi	r27, 0x40	; 64
    34cc:	8b 87       	std	Y+11, r24	; 0x0b
    34ce:	9c 87       	std	Y+12, r25	; 0x0c
    34d0:	ad 87       	std	Y+13, r26	; 0x0d
    34d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34da:	9e 85       	ldd	r25, Y+14	; 0x0e
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a ef       	ldi	r20, 0xFA	; 250
    34e2:	54 e4       	ldi	r21, 0x44	; 68
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	8f 83       	std	Y+7, r24	; 0x07
    34ee:	98 87       	std	Y+8, r25	; 0x08
    34f0:	a9 87       	std	Y+9, r26	; 0x09
    34f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34f4:	6f 81       	ldd	r22, Y+7	; 0x07
    34f6:	78 85       	ldd	r23, Y+8	; 0x08
    34f8:	89 85       	ldd	r24, Y+9	; 0x09
    34fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f e3       	ldi	r21, 0x3F	; 63
    3504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3508:	88 23       	and	r24, r24
    350a:	2c f4       	brge	.+10     	; 0x3516 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9e 83       	std	Y+6, r25	; 0x06
    3512:	8d 83       	std	Y+5, r24	; 0x05
    3514:	3f c0       	rjmp	.+126    	; 0x3594 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    3516:	6f 81       	ldd	r22, Y+7	; 0x07
    3518:	78 85       	ldd	r23, Y+8	; 0x08
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	4c f5       	brge	.+82     	; 0x3580 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3530:	7c 85       	ldd	r23, Y+12	; 0x0c
    3532:	8d 85       	ldd	r24, Y+13	; 0x0d
    3534:	9e 85       	ldd	r25, Y+14	; 0x0e
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <LCD_ClearDisplay+0xcc>
    3558:	88 ec       	ldi	r24, 0xC8	; 200
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9c 83       	std	Y+4, r25	; 0x04
    355e:	8b 83       	std	Y+3, r24	; 0x03
    3560:	8b 81       	ldd	r24, Y+3	; 0x03
    3562:	9c 81       	ldd	r25, Y+4	; 0x04
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <LCD_ClearDisplay+0xba>
    3568:	9c 83       	std	Y+4, r25	; 0x04
    356a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	8d 81       	ldd	r24, Y+5	; 0x05
    356e:	9e 81       	ldd	r25, Y+6	; 0x06
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	8d 81       	ldd	r24, Y+5	; 0x05
    3578:	9e 81       	ldd	r25, Y+6	; 0x06
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <LCD_ClearDisplay+0xae>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9e 83       	std	Y+6, r25	; 0x06
    3592:	8d 83       	std	Y+5, r24	; 0x05
    3594:	8d 81       	ldd	r24, Y+5	; 0x05
    3596:	9e 81       	ldd	r25, Y+6	; 0x06
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <LCD_ClearDisplay+0xf6>
    35a4:	9a 83       	std	Y+2, r25	; 0x02
    35a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    35a8:	2e 96       	adiw	r28, 0x0e	; 14
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <LCD_DisplayNumber>:

void LCD_DisplayNumber(u32 Number)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <LCD_DisplayNumber+0x6>
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <LCD_DisplayNumber+0x8>
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
	if(Number == 0)
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	31 f5       	brne	.+76     	; 0x3626 <LCD_DisplayNumber+0x6c>
	{
		LCD_SendData('0');
    35da:	80 e3       	ldi	r24, 0x30	; 48
    35dc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_SendData>
    35e0:	22 c0       	rjmp	.+68     	; 0x3626 <LCD_DisplayNumber+0x6c>
	}

	while(Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	9a 81       	ldd	r25, Y+2	; 0x02
    35e6:	9c 01       	movw	r18, r24
    35e8:	22 0f       	add	r18, r18
    35ea:	33 1f       	adc	r19, r19
    35ec:	c9 01       	movw	r24, r18
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	f9 01       	movw	r30, r18
    35f8:	e8 0f       	add	r30, r24
    35fa:	f9 1f       	adc	r31, r25
    35fc:	8b 81       	ldd	r24, Y+3	; 0x03
    35fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3600:	2a e0       	ldi	r18, 0x0A	; 10
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	b9 01       	movw	r22, r18
    3606:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    360a:	8e 0f       	add	r24, r30
    360c:	9f 1f       	adc	r25, r31
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
		Number = Number /10;
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	9c 81       	ldd	r25, Y+4	; 0x04
    3616:	2a e0       	ldi	r18, 0x0A	; 10
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	b9 01       	movw	r22, r18
    361c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    3620:	cb 01       	movw	r24, r22
    3622:	9c 83       	std	Y+4, r25	; 0x04
    3624:	8b 83       	std	Y+3, r24	; 0x03
	if(Number == 0)
	{
		LCD_SendData('0');
	}

	while(Number != 0)
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	9c 81       	ldd	r25, Y+4	; 0x04
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	d1 f6       	brne	.-76     	; 0x35e2 <LCD_DisplayNumber+0x28>
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <LCD_DisplayNumber+0x9e>
		Number = Number /10;
	}

	while(ReversedNum != 1)
	{
		LCD_SendData( (ReversedNum%10) + 48);
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	2a e0       	ldi	r18, 0x0A	; 10
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	b9 01       	movw	r22, r18
    363a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    363e:	80 5d       	subi	r24, 0xD0	; 208
    3640:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_SendData>
		ReversedNum= ReversedNum/10;
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	2a e0       	ldi	r18, 0x0A	; 10
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	b9 01       	movw	r22, r18
    364e:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    3652:	cb 01       	movw	r24, r22
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
		Number = Number /10;
	}

	while(ReversedNum != 1)
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	9a 81       	ldd	r25, Y+2	; 0x02
    365c:	81 30       	cpi	r24, 0x01	; 1
    365e:	91 05       	cpc	r25, r1
    3660:	39 f7       	brne	.-50     	; 0x3630 <LCD_DisplayNumber+0x76>
	{
		LCD_SendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <Keypad_Init>:
						{'C',0,'=','#'}
					  };


u8 Keypad_Init()
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	0f 92       	push	r0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT , 0xF0);
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	60 ef       	ldi	r22, 0xF0	; 240
    367e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	6f ef       	ldi	r22, 0xFF	; 255
    3686:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <MDIO_vSetPortVal>
}
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <KeypadGetKey>:

u8 KeypadGetKey()
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	6f 97       	sbiw	r28, 0x1f	; 31
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
	for(u8 Col=0; Col <COLs_NO; Col++)
    36a6:	1e 8e       	std	Y+30, r1	; 0x1e
    36a8:	28 c1       	rjmp	.+592    	; 0x38fa <KeypadGetKey+0x268>
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    36aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36ac:	98 2f       	mov	r25, r24
    36ae:	9c 5f       	subi	r25, 0xFC	; 252
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	69 2f       	mov	r22, r25
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>

		for(u8 Row=0; Row <ROWs_NO; Row++)
    36ba:	1d 8e       	std	Y+29, r1	; 0x1d
    36bc:	0f c1       	rjmp	.+542    	; 0x38dc <KeypadGetKey+0x24a>
		{
			if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0 )
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36c2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <MDIO_GetPinVal>
    36c6:	88 23       	and	r24, r24
    36c8:	09 f0       	breq	.+2      	; 0x36cc <KeypadGetKey+0x3a>
    36ca:	05 c1       	rjmp	.+522    	; 0x38d6 <KeypadGetKey+0x244>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	a8 e4       	ldi	r26, 0x48	; 72
    36d2:	b2 e4       	ldi	r27, 0x42	; 66
    36d4:	89 8f       	std	Y+25, r24	; 0x19
    36d6:	9a 8f       	std	Y+26, r25	; 0x1a
    36d8:	ab 8f       	std	Y+27, r26	; 0x1b
    36da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36dc:	69 8d       	ldd	r22, Y+25	; 0x19
    36de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a ef       	ldi	r20, 0xFA	; 250
    36ea:	54 e4       	ldi	r21, 0x44	; 68
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8d 8b       	std	Y+21, r24	; 0x15
    36f6:	9e 8b       	std	Y+22, r25	; 0x16
    36f8:	af 8b       	std	Y+23, r26	; 0x17
    36fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36fc:	6d 89       	ldd	r22, Y+21	; 0x15
    36fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3700:	8f 89       	ldd	r24, Y+23	; 0x17
    3702:	98 8d       	ldd	r25, Y+24	; 0x18
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	2c f4       	brge	.+10     	; 0x371e <KeypadGetKey+0x8c>
		__ticks = 1;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	9c 8b       	std	Y+20, r25	; 0x14
    371a:	8b 8b       	std	Y+19, r24	; 0x13
    371c:	3f c0       	rjmp	.+126    	; 0x379c <KeypadGetKey+0x10a>
	else if (__tmp > 65535)
    371e:	6d 89       	ldd	r22, Y+21	; 0x15
    3720:	7e 89       	ldd	r23, Y+22	; 0x16
    3722:	8f 89       	ldd	r24, Y+23	; 0x17
    3724:	98 8d       	ldd	r25, Y+24	; 0x18
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	3f ef       	ldi	r19, 0xFF	; 255
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	57 e4       	ldi	r21, 0x47	; 71
    372e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3732:	18 16       	cp	r1, r24
    3734:	4c f5       	brge	.+82     	; 0x3788 <KeypadGetKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3736:	69 8d       	ldd	r22, Y+25	; 0x19
    3738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    373a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    373c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9c 8b       	std	Y+20, r25	; 0x14
    375c:	8b 8b       	std	Y+19, r24	; 0x13
    375e:	0f c0       	rjmp	.+30     	; 0x377e <KeypadGetKey+0xec>
    3760:	88 ec       	ldi	r24, 0xC8	; 200
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	89 8b       	std	Y+17, r24	; 0x11
    3768:	89 89       	ldd	r24, Y+17	; 0x11
    376a:	9a 89       	ldd	r25, Y+18	; 0x12
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <KeypadGetKey+0xda>
    3770:	9a 8b       	std	Y+18, r25	; 0x12
    3772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3774:	8b 89       	ldd	r24, Y+19	; 0x13
    3776:	9c 89       	ldd	r25, Y+20	; 0x14
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	9c 8b       	std	Y+20, r25	; 0x14
    377c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377e:	8b 89       	ldd	r24, Y+19	; 0x13
    3780:	9c 89       	ldd	r25, Y+20	; 0x14
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	69 f7       	brne	.-38     	; 0x3760 <KeypadGetKey+0xce>
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <KeypadGetKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3788:	6d 89       	ldd	r22, Y+21	; 0x15
    378a:	7e 89       	ldd	r23, Y+22	; 0x16
    378c:	8f 89       	ldd	r24, Y+23	; 0x17
    378e:	98 8d       	ldd	r25, Y+24	; 0x18
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
    379c:	8b 89       	ldd	r24, Y+19	; 0x13
    379e:	9c 89       	ldd	r25, Y+20	; 0x14
    37a0:	98 8b       	std	Y+16, r25	; 0x10
    37a2:	8f 87       	std	Y+15, r24	; 0x0f
    37a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37a6:	98 89       	ldd	r25, Y+16	; 0x10
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <KeypadGetKey+0x116>
    37ac:	98 8b       	std	Y+16, r25	; 0x10
    37ae:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50);
				if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37b4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <MDIO_GetPinVal>
    37b8:	88 23       	and	r24, r24
    37ba:	09 f0       	breq	.+2      	; 0x37be <KeypadGetKey+0x12c>
    37bc:	8c c0       	rjmp	.+280    	; 0x38d6 <KeypadGetKey+0x244>
				{
					while(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37c2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <MDIO_GetPinVal>
    37c6:	88 23       	and	r24, r24
    37c8:	09 f0       	breq	.+2      	; 0x37cc <KeypadGetKey+0x13a>
    37ca:	85 c0       	rjmp	.+266    	; 0x38d6 <KeypadGetKey+0x244>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a8 e4       	ldi	r26, 0x48	; 72
    37d2:	b2 e4       	ldi	r27, 0x42	; 66
    37d4:	8b 87       	std	Y+11, r24	; 0x0b
    37d6:	9c 87       	std	Y+12, r25	; 0x0c
    37d8:	ad 87       	std	Y+13, r26	; 0x0d
    37da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	98 87       	std	Y+8, r25	; 0x08
    37f8:	a9 87       	std	Y+9, r26	; 0x09
    37fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <KeypadGetKey+0x18c>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	3f c0       	rjmp	.+126    	; 0x389c <KeypadGetKey+0x20a>
	else if (__tmp > 65535)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <KeypadGetKey+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6b 85       	ldd	r22, Y+11	; 0x0b
    3838:	7c 85       	ldd	r23, Y+12	; 0x0c
    383a:	8d 85       	ldd	r24, Y+13	; 0x0d
    383c:	9e 85       	ldd	r25, Y+14	; 0x0e
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	0f c0       	rjmp	.+30     	; 0x387e <KeypadGetKey+0x1ec>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <KeypadGetKey+0x1da>
    3870:	9c 83       	std	Y+4, r25	; 0x04
    3872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <KeypadGetKey+0x1ce>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <KeypadGetKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6f 81       	ldd	r22, Y+7	; 0x07
    388a:	78 85       	ldd	r23, Y+8	; 0x08
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <KeypadGetKey+0x216>
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						return KeypadMap[Row][Col];
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	48 2f       	mov	r20, r24
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	ca 01       	movw	r24, r20
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	82 0f       	add	r24, r18
    38c8:	93 1f       	adc	r25, r19
    38ca:	fc 01       	movw	r30, r24
    38cc:	e8 59       	subi	r30, 0x98	; 152
    38ce:	fe 4f       	sbci	r31, 0xFE	; 254
    38d0:	80 81       	ld	r24, Z
    38d2:	8f 8f       	std	Y+31, r24	; 0x1f
    38d4:	18 c0       	rjmp	.+48     	; 0x3906 <KeypadGetKey+0x274>
	for(u8 Col=0; Col <COLs_NO; Col++)
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);

		for(u8 Row=0; Row <ROWs_NO; Row++)
    38d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38d8:	8f 5f       	subi	r24, 0xFF	; 255
    38da:	8d 8f       	std	Y+29, r24	; 0x1d
    38dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38de:	84 30       	cpi	r24, 0x04	; 4
    38e0:	08 f4       	brcc	.+2      	; 0x38e4 <KeypadGetKey+0x252>
    38e2:	ed ce       	rjmp	.-550    	; 0x36be <KeypadGetKey+0x2c>
				}
//				return KeypadMap[Row][Col];
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    38e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38e6:	98 2f       	mov	r25, r24
    38e8:	9c 5f       	subi	r25, 0xFC	; 252
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	69 2f       	mov	r22, r25
    38ee:	41 e0       	ldi	r20, 0x01	; 1
    38f0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MDIO_vSetPinVal>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
}

u8 KeypadGetKey()
{
	for(u8 Col=0; Col <COLs_NO; Col++)
    38f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38f6:	8f 5f       	subi	r24, 0xFF	; 255
    38f8:	8e 8f       	std	Y+30, r24	; 0x1e
    38fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38fc:	84 30       	cpi	r24, 0x04	; 4
    38fe:	08 f4       	brcc	.+2      	; 0x3902 <KeypadGetKey+0x270>
    3900:	d4 ce       	rjmp	.-600    	; 0x36aa <KeypadGetKey+0x18>
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return NO_KEY_PRESSED;
    3902:	8f ef       	ldi	r24, 0xFF	; 255
    3904:	8f 8f       	std	Y+31, r24	; 0x1f
    3906:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3908:	6f 96       	adiw	r28, 0x1f	; 31
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	cf 91       	pop	r28
    3916:	df 91       	pop	r29
    3918:	08 95       	ret

0000391a <__udivmodhi4>:
    391a:	aa 1b       	sub	r26, r26
    391c:	bb 1b       	sub	r27, r27
    391e:	51 e1       	ldi	r21, 0x11	; 17
    3920:	07 c0       	rjmp	.+14     	; 0x3930 <__udivmodhi4_ep>

00003922 <__udivmodhi4_loop>:
    3922:	aa 1f       	adc	r26, r26
    3924:	bb 1f       	adc	r27, r27
    3926:	a6 17       	cp	r26, r22
    3928:	b7 07       	cpc	r27, r23
    392a:	10 f0       	brcs	.+4      	; 0x3930 <__udivmodhi4_ep>
    392c:	a6 1b       	sub	r26, r22
    392e:	b7 0b       	sbc	r27, r23

00003930 <__udivmodhi4_ep>:
    3930:	88 1f       	adc	r24, r24
    3932:	99 1f       	adc	r25, r25
    3934:	5a 95       	dec	r21
    3936:	a9 f7       	brne	.-22     	; 0x3922 <__udivmodhi4_loop>
    3938:	80 95       	com	r24
    393a:	90 95       	com	r25
    393c:	bc 01       	movw	r22, r24
    393e:	cd 01       	movw	r24, r26
    3940:	08 95       	ret

00003942 <__prologue_saves__>:
    3942:	2f 92       	push	r2
    3944:	3f 92       	push	r3
    3946:	4f 92       	push	r4
    3948:	5f 92       	push	r5
    394a:	6f 92       	push	r6
    394c:	7f 92       	push	r7
    394e:	8f 92       	push	r8
    3950:	9f 92       	push	r9
    3952:	af 92       	push	r10
    3954:	bf 92       	push	r11
    3956:	cf 92       	push	r12
    3958:	df 92       	push	r13
    395a:	ef 92       	push	r14
    395c:	ff 92       	push	r15
    395e:	0f 93       	push	r16
    3960:	1f 93       	push	r17
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	ca 1b       	sub	r28, r26
    396c:	db 0b       	sbc	r29, r27
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	09 94       	ijmp

0000397a <__epilogue_restores__>:
    397a:	2a 88       	ldd	r2, Y+18	; 0x12
    397c:	39 88       	ldd	r3, Y+17	; 0x11
    397e:	48 88       	ldd	r4, Y+16	; 0x10
    3980:	5f 84       	ldd	r5, Y+15	; 0x0f
    3982:	6e 84       	ldd	r6, Y+14	; 0x0e
    3984:	7d 84       	ldd	r7, Y+13	; 0x0d
    3986:	8c 84       	ldd	r8, Y+12	; 0x0c
    3988:	9b 84       	ldd	r9, Y+11	; 0x0b
    398a:	aa 84       	ldd	r10, Y+10	; 0x0a
    398c:	b9 84       	ldd	r11, Y+9	; 0x09
    398e:	c8 84       	ldd	r12, Y+8	; 0x08
    3990:	df 80       	ldd	r13, Y+7	; 0x07
    3992:	ee 80       	ldd	r14, Y+6	; 0x06
    3994:	fd 80       	ldd	r15, Y+5	; 0x05
    3996:	0c 81       	ldd	r16, Y+4	; 0x04
    3998:	1b 81       	ldd	r17, Y+3	; 0x03
    399a:	aa 81       	ldd	r26, Y+2	; 0x02
    399c:	b9 81       	ldd	r27, Y+1	; 0x01
    399e:	ce 0f       	add	r28, r30
    39a0:	d1 1d       	adc	r29, r1
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	ed 01       	movw	r28, r26
    39ae:	08 95       	ret

000039b0 <_exit>:
    39b0:	f8 94       	cli

000039b2 <__stop_program>:
    39b2:	ff cf       	rjmp	.-2      	; 0x39b2 <__stop_program>

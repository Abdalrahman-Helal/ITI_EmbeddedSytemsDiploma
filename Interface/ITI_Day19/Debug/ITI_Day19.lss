
ITI_Day19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003a42  00003ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080018c  0080018c  00003c02  2**0
                  ALLOC
  3 .stab         00003a08  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017de  00000000  00000000  0000760c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000913d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d2c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dfcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_10>
      2c:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:

#define F_CPU 8000000UL


void main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DIO_PORTD , PIN0 , DIO_INPUT); // PD0 -> Rx
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTD , PIN1 , DIO_OUTPUT); // PD1 -> Tx
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTA ,PIN0 , DIO_OUTPUT); // LED1
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA ,PIN1 , DIO_OUTPUT);	// LED2
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>


	USART_vInit();
     d08:	0e 94 d1 06 	call	0xda2	; 0xda2 <USART_vInit>



	while(1)
	{
		Reading = USART_POLL_vReceiveData();
     d0c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <USART_POLL_vReceiveData>
     d10:	89 83       	std	Y+1, r24	; 0x01

		if(Reading == '1')
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	81 33       	cpi	r24, 0x31	; 49
     d16:	29 f4       	brne	.+10     	; 0xd22 <main+0x4c>
		{
			MDIO_vTogglePinVal(DIO_PORTA , PIN0 );
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <MDIO_vTogglePinVal>
     d20:	f5 cf       	rjmp	.-22     	; 0xd0c <main+0x36>
		}
		else if(Reading == '2')
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	82 33       	cpi	r24, 0x32	; 50
     d26:	91 f7       	brne	.-28     	; 0xd0c <main+0x36>
		{
			MDIO_vTogglePinVal(DIO_PORTA , PIN1 );
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <MDIO_vTogglePinVal>
     d30:	ed cf       	rjmp	.-38     	; 0xd0c <main+0x36>

00000d32 <WDT_vEnable>:
#include "MCAL/WDT/WDT_Interface.h"
#include "MCAL/WDT/WDT_Private.h"
#include "MCAL/WDT/WDT_Cfg.h"

void WDT_vEnable(void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR , WDTCR_WDE);
     d3a:	a1 e4       	ldi	r26, 0x41	; 65
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e4       	ldi	r30, 0x41	; 65
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	8c 93       	st	X, r24
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <WDT_vDisable>:

void WDT_vDisable(void)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
     d56:	e1 e4       	ldi	r30, 0x41	; 65
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	88 e1       	ldi	r24, 0x18	; 24
     d5c:	80 83       	st	Z, r24
	WDTCR = 0;
     d5e:	e1 e4       	ldi	r30, 0x41	; 65
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	10 82       	st	Z, r1
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <WDT_vSleep>:

void WDT_vSleep(u8 Copy_u8SleepCycle)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepCycle < 8)
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	78 f4       	brcc	.+30     	; 0xd9a <WDT_vSleep+0x30>
	{
		WDTCR &=11111000;
     d7c:	a1 e4       	ldi	r26, 0x41	; 65
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e1 e4       	ldi	r30, 0x41	; 65
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 75       	andi	r24, 0x58	; 88
     d88:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepCycle;
     d8a:	a1 e4       	ldi	r26, 0x41	; 65
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e1 e4       	ldi	r30, 0x41	; 65
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	90 81       	ld	r25, Z
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	89 2b       	or	r24, r25
     d98:	8c 93       	st	X, r24

	}
}
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <USART_vInit>:
#include "MCAL/UART/UART_Private.h"
#include "MCAL/UART/UART_Cfg.h"


void USART_vInit(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62

	u8 Local_UCSRC=0;
     dac:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_URSEL);
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == Asynchronous
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMSEL);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	8f 7b       	andi	r24, 0xBF	; 191
     db8:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Wrong Config of UART_MODE"
#endif

#if USART_PARITY_MODE == EVEN_PARITY
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UPM1);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 62       	ori	r24, 0x20	; 32
     dbe:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 7e       	andi	r24, 0xEF	; 239
     dc4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
#else
#endif

#if USART_STOP_MODE == STOP_1BIT
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_USBS);
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	89 83       	std	Y+1, r24	; 0x01

#else
#endif

	// Set Character Frame Size to 8 bit
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ0);
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	82 60       	ori	r24, 0x02	; 2
     dd0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ1);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	89 83       	std	Y+1, r24	; 0x01

	UCSRC_UBRRH = Local_UCSRC;
     dd8:	e0 e4       	ldi	r30, 0x40	; 64
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	80 83       	st	Z, r24

	// Set Baud Rate 9600
	UBRRL = BAUD_RATE_9600;
     de0:	e9 e2       	ldi	r30, 0x29	; 41
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	83 e3       	ldi	r24, 0x33	; 51
     de6:	80 83       	st	Z, r24

	SET_BIT(UCSRB , UCSRB_RXEN);
     de8:	aa e2       	ldi	r26, 0x2A	; 42
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea e2       	ldi	r30, 0x2A	; 42
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 61       	ori	r24, 0x10	; 16
     df4:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
     df6:	aa e2       	ldi	r26, 0x2A	; 42
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e2       	ldi	r30, 0x2A	; 42
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	8c 93       	st	X, r24

}
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <USART_POLL_vSendData>:
void USART_POLL_vSendData(const u8 Data)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
	// Send 1 Byte of data == 8 Bit
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     e18:	eb e2       	ldi	r30, 0x2B	; 43
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	82 95       	swap	r24
     e20:	86 95       	lsr	r24
     e22:	87 70       	andi	r24, 0x07	; 7
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	90 70       	andi	r25, 0x00	; 0
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	a1 f3       	breq	.-24     	; 0xe18 <USART_POLL_vSendData+0xc>
	UDR = Data;
     e30:	ec e2       	ldi	r30, 0x2C	; 44
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	80 83       	st	Z, r24

}
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <USART_POLL_vSendString>:
void USART_POLL_vSendString(const u8* Data)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <USART_POLL_vSendString+0x6>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	0b c0       	rjmp	.+22     	; 0xe66 <USART_POLL_vSendString+0x26>
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
	{
		USART_POLL_vSendData(*Data++);
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	20 81       	ld	r18, Z
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	82 2f       	mov	r24, r18
     e62:	0e 94 06 07 	call	0xe0c	; 0xe0c <USART_POLL_vSendData>
	//	while(Data[Counter] != '\0')
	//	{
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
     e66:	e9 81       	ldd	r30, Y+1	; 0x01
     e68:	fa 81       	ldd	r31, Y+2	; 0x02
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	81 f7       	brne	.-32     	; 0xe50 <USART_POLL_vSendString+0x10>
	{
		USART_POLL_vSendData(*Data++);
	}
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <USART_POLL_vReceiveData>:
u8 USART_POLL_vReceiveData(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
     e82:	eb e2       	ldi	r30, 0x2B	; 43
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	dc f7       	brge	.-10     	; 0xe82 <USART_POLL_vReceiveData+0x8>
	return UDR;
     e8c:	ec e2       	ldi	r30, 0x2C	; 44
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z

}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <USART_POLL_vReceiveString>:
void USART_POLL_vReceiveString(u8 Counter , u8* Data)
{
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <USART_POLL_vReceiveString+0xa>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <USART_POLL_vReceiveString+0xc>
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	8a 83       	std	Y+2, r24	; 0x02
     eaa:	7c 83       	std	Y+4, r23	; 0x04
     eac:	6b 83       	std	Y+3, r22	; 0x03
	//	{
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
     eae:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ;i < Counter;i++)
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <USART_POLL_vReceiveString+0x3a>
	{
		Data[i] = USART_POLL_vReceiveData();
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	8c 01       	movw	r16, r24
     ec0:	02 0f       	add	r16, r18
     ec2:	13 1f       	adc	r17, r19
     ec4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <USART_POLL_vReceiveData>
     ec8:	f8 01       	movw	r30, r16
     eca:	80 83       	st	Z, r24
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
	for(i=0 ;i < Counter;i++)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	99 81       	ldd	r25, Y+1	; 0x01
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	98 17       	cp	r25, r24
     ed8:	68 f3       	brcs	.-38     	; 0xeb4 <USART_POLL_vReceiveString+0x1c>
	{
		Data[i] = USART_POLL_vReceiveData();
	}
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <TIMER0_vInit>:

static void(*Global_pvOVFIntFunc)(void)= NULL;
static void(*Global_pvCTCIntFunc)(void)= NULL;

void TIMER0_vInit(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
	SET_BIT(TCCR0 , TCCR0_WGM01);

#elif TIMER0_MODE == FAST_PWM_MODE
	SET_BIT(TCCR0 , TCCR0_WGM00);
     ef4:	a3 e5       	ldi	r26, 0x53	; 83
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e3 e5       	ldi	r30, 0x53	; 83
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 64       	ori	r24, 0x40	; 64
     f00:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
     f02:	a3 e5       	ldi	r26, 0x53	; 83
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24

	// clear on compare set on top
	CLR_BIT(TCCR0 , TCCR0_COM00);
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7e       	andi	r24, 0xEF	; 239
     f1c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01);
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	8c 93       	st	X, r24

#error "Select The Timer Mode "

#endif
	// Set Prescaler
	TCCR0 &=0b11111000; //Bit Clearing
     f2c:	a3 e5       	ldi	r26, 0x53	; 83
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 7f       	andi	r24, 0xF8	; 248
     f38:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_PRESCALER;
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	8c 93       	st	X, r24

}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <TIMER0_vDeinit>:

void TIMER0_vDeinit(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TIMER0_u8SetOVFCallBack>:

u8 TIMER0_u8SetOVFCallBack(void (*pvCallBackFunc)(void))
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TIMER0_u8SetOVFCallBack+0x6>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	9b 83       	std	Y+3, r25	; 0x03
     f70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status = OK;
     f72:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	39 f0       	breq	.+14     	; 0xf8a <TIMER0_u8SetOVFCallBack+0x28>
	{
		Global_pvOVFIntFunc=pvCallBackFunc;
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	90 93 8d 01 	sts	0x018D, r25
     f84:	80 93 8c 01 	sts	0x018C, r24
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <TIMER0_u8SetOVFCallBack+0x2c>
	}
	else
	{
		Local_Status = NOK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	Global_pvCTCIntFunc();
     fc6:	e0 91 8e 01 	lds	r30, 0x018E
     fca:	f0 91 8f 01 	lds	r31, 0x018F
     fce:	09 95       	icall
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	Global_pvOVFIntFunc();
    1020:	e0 91 8c 01 	lds	r30, 0x018C
    1024:	f0 91 8d 01 	lds	r31, 0x018D
    1028:	09 95       	icall
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <TIMER0_vSetTimerValue>:

void TIMER0_vSetTimerValue(u8 Copy_u8Value)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    105c:	e2 e5       	ldi	r30, 0x52	; 82
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	80 83       	st	Z, r24
}
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <TIMER0_vCTCTimerValue>:


void TIMER0_vCTCTimerValue(u8 Copy_u8Value)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Value;
    1078:	ec e5       	ldi	r30, 0x5C	; 92
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	80 83       	st	Z, r24
}
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TIMER0_vOVFIntEnableDisable>:

void TIMER0_vOVFIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	41 f4       	brne	.+16     	; 0x10aa <TIMER0_vOVFIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_TOIE0);
    109a:	a9 e5       	ldi	r26, 0x59	; 89
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e9 e5       	ldi	r30, 0x59	; 89
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	8c 93       	st	X, r24
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <TIMER0_vOVFIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_TOIE0);
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	8c 93       	st	X, r24
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <TIMER0_vCTCIntEnableDisable>:
void TIMER0_vCTCIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	41 f4       	brne	.+16     	; 0x10e2 <TIMER0_vCTCIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_OCIE0);
    10d2:	a9 e5       	ldi	r26, 0x59	; 89
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e9 e5       	ldi	r30, 0x59	; 89
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	8c 93       	st	X, r24
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <TIMER0_vCTCIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_OCIE0);
    10e2:	a9 e5       	ldi	r26, 0x59	; 89
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e9 e5       	ldi	r30, 0x59	; 89
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8d 7f       	andi	r24, 0xFD	; 253
    10ee:	8c 93       	st	X, r24
	}
}
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <TIMER0_u8SetCTCCallBack>:
u8 TIMER0_u8SetCTCCallBack(void (*pvCallBackFunc)(void))
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <TIMER0_u8SetCTCCallBack+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9b 83       	std	Y+3, r25	; 0x03
    1106:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status=OK;
    1108:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	41 f0       	breq	.+16     	; 0x1122 <TIMER0_u8SetCTCCallBack+0x2a>
	{
		Global_pvCTCIntFunc = pvCallBackFunc;
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	90 93 8f 01 	sts	0x018F, r25
    111a:	80 93 8e 01 	sts	0x018E, r24
		Local_Status=OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <TIMER0_u8SetCTCCallBack+0x2e>
	}
	else
	{
		Local_Status =NOK;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <TIMER1_vInit>:

void TIMER1_vInit(void)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    113c:	af e4       	ldi	r26, 0x4F	; 79
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
    114a:	af e4       	ldi	r26, 0x4F	; 79
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ef e4       	ldi	r30, 0x4F	; 79
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
    1158:	ae e4       	ldi	r26, 0x4E	; 78
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	88 60       	ori	r24, 0x08	; 8
    1164:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
    1166:	ae e4       	ldi	r26, 0x4E	; 78
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ee e4       	ldi	r30, 0x4E	; 78
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	8c 93       	st	X, r24

	// Set on Top , Clear on CTC
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    1174:	af e4       	ldi	r26, 0x4F	; 79
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ef e4       	ldi	r30, 0x4F	; 79
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
    1182:	af e4       	ldi	r26, 0x4F	; 79
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ef e4       	ldi	r30, 0x4F	; 79
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    1190:	ae e4       	ldi	r26, 0x4E	; 78
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ee e4       	ldi	r30, 0x4E	; 78
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	88 7f       	andi	r24, 0xF8	; 248
    119c:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    119e:	ae e4       	ldi	r26, 0x4E	; 78
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ee e4       	ldi	r30, 0x4E	; 78
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	8c 93       	st	X, r24

	// Disable INT
	TIMSK &=0b110000011;
    11ac:	a9 e5       	ldi	r26, 0x59	; 89
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e9 e5       	ldi	r30, 0x59	; 89
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	83 78       	andi	r24, 0x83	; 131
    11b8:	8c 93       	st	X, r24
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <TIMER1_vICUInit>:

void TIMER1_vICUInit(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	// Normal Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    11c8:	af e4       	ldi	r26, 0x4F	; 79
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ef e4       	ldi	r30, 0x4F	; 79
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    11d6:	af e4       	ldi	r26, 0x4F	; 79
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e4       	ldi	r30, 0x4F	; 79
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    11e4:	ae e4       	ldi	r26, 0x4E	; 78
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ee e4       	ldi	r30, 0x4E	; 78
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	87 7f       	andi	r24, 0xF7	; 247
    11f0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    11f2:	ae e4       	ldi	r26, 0x4E	; 78
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ee e4       	ldi	r30, 0x4E	; 78
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7e       	andi	r24, 0xEF	; 239
    11fe:	8c 93       	st	X, r24

	// Noise Cancel;
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    1200:	ae e4       	ldi	r26, 0x4E	; 78
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ee e4       	ldi	r30, 0x4E	; 78
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24

	// Select ICU Edge
	SET_BIT(TCCR1B , TCCR1B_ICES1);
    120e:	ae e4       	ldi	r26, 0x4E	; 78
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ee e4       	ldi	r30, 0x4E	; 78
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	8c 93       	st	X, r24

	// ICU Interrupt
	SET_BIT(TIMSK, TIMSK_TICIE1);
    121c:	a9 e5       	ldi	r26, 0x59	; 89
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e9 e5       	ldi	r30, 0x59	; 89
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 62       	ori	r24, 0x20	; 32
    1228:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    122a:	ae e4       	ldi	r26, 0x4E	; 78
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ee e4       	ldi	r30, 0x4E	; 78
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 7f       	andi	r24, 0xF8	; 248
    1236:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    1238:	ae e4       	ldi	r26, 0x4E	; 78
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	8c 93       	st	X, r24
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <TIMER1_u16ICRRead>:

u16 TIMER1_u16ICRRead(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1254:	e6 e4       	ldi	r30, 0x46	; 70
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <TIMER1_vSetTop>:

void TIMER1_vSetTop(u16 Copy_u16TopValue)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <TIMER1_vSetTop+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    1270:	e6 e4       	ldi	r30, 0x46	; 70
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <TIMER1_vSetCTC_A_value>:

void TIMER1_vSetCTC_A_value(u16 Copy_u16CTCValue)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <TIMER1_vSetCTC_A_value+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCValue;
    1294:	ea e4       	ldi	r30, 0x4A	; 74
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <TIMER1_vICUSelectingEdge>:

void TIMER1_vICUSelectingEdge(u8 Copy_u8EdgeValue)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8EdgeValue == ICU_RISING_EDGE)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	41 f4       	brne	.+16     	; 0x12cc <TIMER1_vICUSelectingEdge+0x22>
	{
		// Select ICU Rising Edge
		SET_BIT(TCCR1B , TCCR1B_ICES1);
    12bc:	ae e4       	ldi	r26, 0x4E	; 78
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ee e4       	ldi	r30, 0x4E	; 78
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 64       	ori	r24, 0x40	; 64
    12c8:	8c 93       	st	X, r24
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <TIMER1_vICUSelectingEdge+0x30>
	}
	else
	{
		// Select ICU Falling Edge
		CLR_BIT(TCCR1B , TCCR1B_ICES1);
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 7b       	andi	r24, 0xBF	; 191
    12d8:	8c 93       	st	X, r24
	}
}
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <TIMER1_vICUDeinit>:

void TIMER1_vICUDeinit(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	10 82       	st	Z, r1
	TCCR1B = 0;
    12f0:	ee e4       	ldi	r30, 0x4E	; 78
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	10 82       	st	Z, r1
	TIMSK = 0;
    12f6:	e9 e5       	ldi	r30, 0x59	; 89
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	10 82       	st	Z, r1
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    130a:	af e5       	ldi	r26, 0x5F	; 95
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ef e5       	ldi	r30, 0x5F	; 95
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	8c 93       	st	X, r24
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <GIE_Disable>:
void GIE_Disable(void)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    1326:	af e5       	ldi	r26, 0x5F	; 95
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ef e5       	ldi	r30, 0x5F	; 95
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8f 77       	andi	r24, 0x7F	; 127
    1332:	8c 93       	st	X, r24
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <EXTI_EnableDisable+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <EXTI_EnableDisable+0x8>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3c 83       	std	Y+4, r19	; 0x04
    1352:	2b 83       	std	Y+3, r18	; 0x03
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	01 f1       	breq	.+64     	; 0x139e <EXTI_EnableDisable+0x64>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	89 f1       	breq	.+98     	; 0x13ca <EXTI_EnableDisable+0x90>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <EXTI_EnableDisable+0x38>
    1370:	41 c0       	rjmp	.+130    	; 0x13f4 <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	41 f4       	brne	.+16     	; 0x1388 <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    1378:	ab e5       	ldi	r26, 0x5B	; 91
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	eb e5       	ldi	r30, 0x5B	; 91
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	8c 93       	st	X, r24
    1386:	36 c0       	rjmp	.+108    	; 0x13f4 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	88 23       	and	r24, r24
    138c:	99 f5       	brne	.+102    	; 0x13f4 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    138e:	ab e5       	ldi	r26, 0x5B	; 91
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	eb e5       	ldi	r30, 0x5B	; 91
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8f 7b       	andi	r24, 0xBF	; 191
    139a:	8c 93       	st	X, r24
    139c:	2b c0       	rjmp	.+86     	; 0x13f4 <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	41 f4       	brne	.+16     	; 0x13b4 <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
    13b2:	20 c0       	rjmp	.+64     	; 0x13f4 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	88 23       	and	r24, r24
    13b8:	e9 f4       	brne	.+58     	; 0x13f4 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    13ba:	ab e5       	ldi	r26, 0x5B	; 91
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e5       	ldi	r30, 0x5B	; 91
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 77       	andi	r24, 0x7F	; 127
    13c6:	8c 93       	st	X, r24
    13c8:	15 c0       	rjmp	.+42     	; 0x13f4 <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    13d0:	ab e5       	ldi	r26, 0x5B	; 91
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e5       	ldi	r30, 0x5B	; 91
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 62       	ori	r24, 0x20	; 32
    13dc:	8c 93       	st	X, r24
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	88 23       	and	r24, r24
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    13e6:	ab e5       	ldi	r26, 0x5B	; 91
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	eb e5       	ldi	r30, 0x5B	; 91
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7d       	andi	r24, 0xDF	; 223
    13f2:	8c 93       	st	X, r24
		}
		break;
	}
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	2a 97       	sbiw	r28, 0x0a	; 10
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3a 87       	std	Y+10, r19	; 0x0a
    1422:	29 87       	std	Y+9, r18	; 0x09
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <EXTI_SetSenstivity+0x2e>
    142e:	66 c0       	rjmp	.+204    	; 0x14fc <EXTI_SetSenstivity+0xfa>
    1430:	29 85       	ldd	r18, Y+9	; 0x09
    1432:	3a 85       	ldd	r19, Y+10	; 0x0a
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <EXTI_SetSenstivity+0x3a>
    143a:	bb c0       	rjmp	.+374    	; 0x15b2 <EXTI_SetSenstivity+0x1b0>
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	09 f0       	breq	.+2      	; 0x1446 <EXTI_SetSenstivity+0x44>
    1444:	d5 c0       	rjmp	.+426    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	38 87       	std	Y+8, r19	; 0x08
    144e:	2f 83       	std	Y+7, r18	; 0x07
    1450:	8f 81       	ldd	r24, Y+7	; 0x07
    1452:	98 85       	ldd	r25, Y+8	; 0x08
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	21 f1       	breq	.+72     	; 0x14a2 <EXTI_SetSenstivity+0xa0>
    145a:	2f 81       	ldd	r18, Y+7	; 0x07
    145c:	38 85       	ldd	r19, Y+8	; 0x08
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	2c f4       	brge	.+10     	; 0x146e <EXTI_SetSenstivity+0x6c>
    1464:	8f 81       	ldd	r24, Y+7	; 0x07
    1466:	98 85       	ldd	r25, Y+8	; 0x08
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	61 f0       	breq	.+24     	; 0x1484 <EXTI_SetSenstivity+0x82>
    146c:	c1 c0       	rjmp	.+386    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
    146e:	2f 81       	ldd	r18, Y+7	; 0x07
    1470:	38 85       	ldd	r19, Y+8	; 0x08
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	21 f1       	breq	.+72     	; 0x14c0 <EXTI_SetSenstivity+0xbe>
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	71 f1       	breq	.+92     	; 0x14de <EXTI_SetSenstivity+0xdc>
    1482:	b6 c0       	rjmp	.+364    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1484:	a5 e5       	ldi	r26, 0x55	; 85
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e5       	ldi	r30, 0x55	; 85
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8e 7f       	andi	r24, 0xFE	; 254
    1490:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1492:	a5 e5       	ldi	r26, 0x55	; 85
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e5       	ldi	r30, 0x55	; 85
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8d 7f       	andi	r24, 0xFD	; 253
    149e:	8c 93       	st	X, r24
    14a0:	a7 c0       	rjmp	.+334    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    14a2:	a5 e5       	ldi	r26, 0x55	; 85
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e5       	ldi	r30, 0x55	; 85
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    14b0:	a5 e5       	ldi	r26, 0x55	; 85
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e5       	ldi	r30, 0x55	; 85
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8d 7f       	andi	r24, 0xFD	; 253
    14bc:	8c 93       	st	X, r24
    14be:	98 c0       	rjmp	.+304    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    14c0:	a5 e5       	ldi	r26, 0x55	; 85
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e5       	ldi	r30, 0x55	; 85
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8e 7f       	andi	r24, 0xFE	; 254
    14cc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    14ce:	a5 e5       	ldi	r26, 0x55	; 85
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e5       	ldi	r30, 0x55	; 85
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	82 60       	ori	r24, 0x02	; 2
    14da:	8c 93       	st	X, r24
    14dc:	89 c0       	rjmp	.+274    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    14de:	a5 e5       	ldi	r26, 0x55	; 85
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e5       	ldi	r30, 0x55	; 85
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    14ec:	a5 e5       	ldi	r26, 0x55	; 85
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e5       	ldi	r30, 0x55	; 85
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	8c 93       	st	X, r24
    14fa:	7a c0       	rjmp	.+244    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3e 83       	std	Y+6, r19	; 0x06
    1504:	2d 83       	std	Y+5, r18	; 0x05
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	21 f1       	breq	.+72     	; 0x1558 <EXTI_SetSenstivity+0x156>
    1510:	2d 81       	ldd	r18, Y+5	; 0x05
    1512:	3e 81       	ldd	r19, Y+6	; 0x06
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <EXTI_SetSenstivity+0x122>
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	61 f0       	breq	.+24     	; 0x153a <EXTI_SetSenstivity+0x138>
    1522:	66 c0       	rjmp	.+204    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	21 f1       	breq	.+72     	; 0x1576 <EXTI_SetSenstivity+0x174>
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f1       	breq	.+92     	; 0x1594 <EXTI_SetSenstivity+0x192>
    1538:	5b c0       	rjmp	.+182    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    153a:	a5 e5       	ldi	r26, 0x55	; 85
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e5       	ldi	r30, 0x55	; 85
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8b 7f       	andi	r24, 0xFB	; 251
    1546:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1548:	a5 e5       	ldi	r26, 0x55	; 85
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e5       	ldi	r30, 0x55	; 85
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
    1556:	4c c0       	rjmp	.+152    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	87 7f       	andi	r24, 0xF7	; 247
    1572:	8c 93       	st	X, r24
    1574:	3d c0       	rjmp	.+122    	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    1576:	a5 e5       	ldi	r26, 0x55	; 85
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e5       	ldi	r30, 0x55	; 85
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8b 7f       	andi	r24, 0xFB	; 251
    1582:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	88 60       	ori	r24, 0x08	; 8
    1590:	8c 93       	st	X, r24
    1592:	2e c0       	rjmp	.+92     	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	84 60       	ori	r24, 0x04	; 4
    15a0:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	8c 93       	st	X, r24
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3c 83       	std	Y+4, r19	; 0x04
    15ba:	2b 83       	std	Y+3, r18	; 0x03
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	31 f0       	breq	.+12     	; 0x15d2 <EXTI_SetSenstivity+0x1d0>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	23 30       	cpi	r18, 0x03	; 3
    15cc:	31 05       	cpc	r19, r1
    15ce:	49 f0       	breq	.+18     	; 0x15e2 <EXTI_SetSenstivity+0x1e0>
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    15d2:	a4 e5       	ldi	r26, 0x54	; 84
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e4 e5       	ldi	r30, 0x54	; 84
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 64       	ori	r24, 0x40	; 64
    15de:	8c 93       	st	X, r24
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    15e2:	a4 e5       	ldi	r26, 0x54	; 84
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e5       	ldi	r30, 0x54	; 84
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7b       	andi	r24, 0xBF	; 191
    15ee:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    15f0:	2a 96       	adiw	r28, 0x0a	; 10
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2d 97       	sbiw	r28, 0x0d	; 13
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
    161a:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	08 f0       	brcs	.+2      	; 0x1624 <MDIO_vSetPinDir+0x22>
    1622:	09 c1       	rjmp	.+530    	; 0x1836 <MDIO_vSetPinDir+0x234>
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	08 f0       	brcs	.+2      	; 0x162c <MDIO_vSetPinDir+0x2a>
    162a:	05 c1       	rjmp	.+522    	; 0x1836 <MDIO_vSetPinDir+0x234>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	08 f0       	brcs	.+2      	; 0x1634 <MDIO_vSetPinDir+0x32>
    1632:	01 c1       	rjmp	.+514    	; 0x1836 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3d 87       	std	Y+13, r19	; 0x0d
    163c:	2c 87       	std	Y+12, r18	; 0x0c
    163e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1640:	9d 85       	ldd	r25, Y+13	; 0x0d
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <MDIO_vSetPinDir+0x48>
    1648:	4f c0       	rjmp	.+158    	; 0x16e8 <MDIO_vSetPinDir+0xe6>
    164a:	2c 85       	ldd	r18, Y+12	; 0x0c
    164c:	3d 85       	ldd	r19, Y+13	; 0x0d
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	2c f4       	brge	.+10     	; 0x165e <MDIO_vSetPinDir+0x5c>
    1654:	8c 85       	ldd	r24, Y+12	; 0x0c
    1656:	9d 85       	ldd	r25, Y+13	; 0x0d
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	71 f0       	breq	.+28     	; 0x1678 <MDIO_vSetPinDir+0x76>
    165c:	ec c0       	rjmp	.+472    	; 0x1836 <MDIO_vSetPinDir+0x234>
    165e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1660:	3d 85       	ldd	r19, Y+13	; 0x0d
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <MDIO_vSetPinDir+0x68>
    1668:	77 c0       	rjmp	.+238    	; 0x1758 <MDIO_vSetPinDir+0x156>
    166a:	8c 85       	ldd	r24, Y+12	; 0x0c
    166c:	9d 85       	ldd	r25, Y+13	; 0x0d
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <MDIO_vSetPinDir+0x74>
    1674:	a9 c0       	rjmp	.+338    	; 0x17c8 <MDIO_vSetPinDir+0x1c6>
    1676:	df c0       	rjmp	.+446    	; 0x1836 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3b 87       	std	Y+11, r19	; 0x0b
    1680:	2a 87       	std	Y+10, r18	; 0x0a
    1682:	8a 85       	ldd	r24, Y+10	; 0x0a
    1684:	9b 85       	ldd	r25, Y+11	; 0x0b
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	31 f0       	breq	.+12     	; 0x1696 <MDIO_vSetPinDir+0x94>
    168a:	2a 85       	ldd	r18, Y+10	; 0x0a
    168c:	3b 85       	ldd	r19, Y+11	; 0x0b
    168e:	21 30       	cpi	r18, 0x01	; 1
    1690:	31 05       	cpc	r19, r1
    1692:	b1 f0       	breq	.+44     	; 0x16c0 <MDIO_vSetPinDir+0xbe>
    1694:	d0 c0       	rjmp	.+416    	; 0x1836 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    1696:	aa e3       	ldi	r26, 0x3A	; 58
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ea e3       	ldi	r30, 0x3A	; 58
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <MDIO_vSetPinDir+0xb2>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <MDIO_vSetPinDir+0xae>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	bb c0       	rjmp	.+374    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    16c0:	aa e3       	ldi	r26, 0x3A	; 58
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <MDIO_vSetPinDir+0xdc>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <MDIO_vSetPinDir+0xd8>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	a7 c0       	rjmp	.+334    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	39 87       	std	Y+9, r19	; 0x09
    16f0:	28 87       	std	Y+8, r18	; 0x08
    16f2:	88 85       	ldd	r24, Y+8	; 0x08
    16f4:	99 85       	ldd	r25, Y+9	; 0x09
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	31 f0       	breq	.+12     	; 0x1706 <MDIO_vSetPinDir+0x104>
    16fa:	28 85       	ldd	r18, Y+8	; 0x08
    16fc:	39 85       	ldd	r19, Y+9	; 0x09
    16fe:	21 30       	cpi	r18, 0x01	; 1
    1700:	31 05       	cpc	r19, r1
    1702:	b1 f0       	breq	.+44     	; 0x1730 <MDIO_vSetPinDir+0x12e>
    1704:	98 c0       	rjmp	.+304    	; 0x1836 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    1706:	a7 e3       	ldi	r26, 0x37	; 55
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e7 e3       	ldi	r30, 0x37	; 55
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <MDIO_vSetPinDir+0x122>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <MDIO_vSetPinDir+0x11e>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	83 c0       	rjmp	.+262    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    1730:	a7 e3       	ldi	r26, 0x37	; 55
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e7 e3       	ldi	r30, 0x37	; 55
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <MDIO_vSetPinDir+0x14c>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <MDIO_vSetPinDir+0x148>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	6f c0       	rjmp	.+222    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3f 83       	std	Y+7, r19	; 0x07
    1760:	2e 83       	std	Y+6, r18	; 0x06
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	31 f0       	breq	.+12     	; 0x1776 <MDIO_vSetPinDir+0x174>
    176a:	2e 81       	ldd	r18, Y+6	; 0x06
    176c:	3f 81       	ldd	r19, Y+7	; 0x07
    176e:	21 30       	cpi	r18, 0x01	; 1
    1770:	31 05       	cpc	r19, r1
    1772:	b1 f0       	breq	.+44     	; 0x17a0 <MDIO_vSetPinDir+0x19e>
    1774:	60 c0       	rjmp	.+192    	; 0x1836 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    1776:	a4 e3       	ldi	r26, 0x34	; 52
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e4 e3       	ldi	r30, 0x34	; 52
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <MDIO_vSetPinDir+0x192>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <MDIO_vSetPinDir+0x18e>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	4b c0       	rjmp	.+150    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    17a0:	a4 e3       	ldi	r26, 0x34	; 52
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e4 e3       	ldi	r30, 0x34	; 52
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <MDIO_vSetPinDir+0x1bc>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <MDIO_vSetPinDir+0x1b8>
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	37 c0       	rjmp	.+110    	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3d 83       	std	Y+5, r19	; 0x05
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <MDIO_vSetPinDir+0x1e4>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	21 30       	cpi	r18, 0x01	; 1
    17e0:	31 05       	cpc	r19, r1
    17e2:	b1 f0       	breq	.+44     	; 0x1810 <MDIO_vSetPinDir+0x20e>
    17e4:	28 c0       	rjmp	.+80     	; 0x1836 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    17e6:	a1 e3       	ldi	r26, 0x31	; 49
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e3       	ldi	r30, 0x31	; 49
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <MDIO_vSetPinDir+0x202>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <MDIO_vSetPinDir+0x1fe>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    1810:	a1 e3       	ldi	r26, 0x31	; 49
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <MDIO_vSetPinDir+0x22c>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <MDIO_vSetPinDir+0x228>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1836:	2d 96       	adiw	r28, 0x0d	; 13
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	2d 97       	sbiw	r28, 0x0d	; 13
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	6a 83       	std	Y+2, r22	; 0x02
    1860:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	08 f0       	brcs	.+2      	; 0x186a <MDIO_vSetPinVal+0x22>
    1868:	09 c1       	rjmp	.+530    	; 0x1a7c <MDIO_vSetPinVal+0x234>
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	08 f0       	brcs	.+2      	; 0x1872 <MDIO_vSetPinVal+0x2a>
    1870:	05 c1       	rjmp	.+522    	; 0x1a7c <MDIO_vSetPinVal+0x234>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	08 f0       	brcs	.+2      	; 0x187a <MDIO_vSetPinVal+0x32>
    1878:	01 c1       	rjmp	.+514    	; 0x1a7c <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3d 87       	std	Y+13, r19	; 0x0d
    1882:	2c 87       	std	Y+12, r18	; 0x0c
    1884:	8c 85       	ldd	r24, Y+12	; 0x0c
    1886:	9d 85       	ldd	r25, Y+13	; 0x0d
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <MDIO_vSetPinVal+0x48>
    188e:	4f c0       	rjmp	.+158    	; 0x192e <MDIO_vSetPinVal+0xe6>
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	3d 85       	ldd	r19, Y+13	; 0x0d
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <MDIO_vSetPinVal+0x5c>
    189a:	8c 85       	ldd	r24, Y+12	; 0x0c
    189c:	9d 85       	ldd	r25, Y+13	; 0x0d
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	71 f0       	breq	.+28     	; 0x18be <MDIO_vSetPinVal+0x76>
    18a2:	ec c0       	rjmp	.+472    	; 0x1a7c <MDIO_vSetPinVal+0x234>
    18a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <MDIO_vSetPinVal+0x68>
    18ae:	77 c0       	rjmp	.+238    	; 0x199e <MDIO_vSetPinVal+0x156>
    18b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	91 05       	cpc	r25, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <MDIO_vSetPinVal+0x74>
    18ba:	a9 c0       	rjmp	.+338    	; 0x1a0e <MDIO_vSetPinVal+0x1c6>
    18bc:	df c0       	rjmp	.+446    	; 0x1a7c <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3b 87       	std	Y+11, r19	; 0x0b
    18c6:	2a 87       	std	Y+10, r18	; 0x0a
    18c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	31 f0       	breq	.+12     	; 0x18dc <MDIO_vSetPinVal+0x94>
    18d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18d4:	21 30       	cpi	r18, 0x01	; 1
    18d6:	31 05       	cpc	r19, r1
    18d8:	b1 f0       	breq	.+44     	; 0x1906 <MDIO_vSetPinVal+0xbe>
    18da:	d0 c0       	rjmp	.+416    	; 0x1a7c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    18dc:	ab e3       	ldi	r26, 0x3B	; 59
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <MDIO_vSetPinVal+0xb2>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <MDIO_vSetPinVal+0xae>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	bb c0       	rjmp	.+374    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    1906:	ab e3       	ldi	r26, 0x3B	; 59
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e3       	ldi	r30, 0x3B	; 59
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <MDIO_vSetPinVal+0xdc>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <MDIO_vSetPinVal+0xd8>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	a7 c0       	rjmp	.+334    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	39 87       	std	Y+9, r19	; 0x09
    1936:	28 87       	std	Y+8, r18	; 0x08
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	31 f0       	breq	.+12     	; 0x194c <MDIO_vSetPinVal+0x104>
    1940:	28 85       	ldd	r18, Y+8	; 0x08
    1942:	39 85       	ldd	r19, Y+9	; 0x09
    1944:	21 30       	cpi	r18, 0x01	; 1
    1946:	31 05       	cpc	r19, r1
    1948:	b1 f0       	breq	.+44     	; 0x1976 <MDIO_vSetPinVal+0x12e>
    194a:	98 c0       	rjmp	.+304    	; 0x1a7c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    194c:	a8 e3       	ldi	r26, 0x38	; 56
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <MDIO_vSetPinVal+0x122>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <MDIO_vSetPinVal+0x11e>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	83 c0       	rjmp	.+262    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1976:	a8 e3       	ldi	r26, 0x38	; 56
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <MDIO_vSetPinVal+0x14c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <MDIO_vSetPinVal+0x148>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	6f c0       	rjmp	.+222    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	3f 83       	std	Y+7, r19	; 0x07
    19a6:	2e 83       	std	Y+6, r18	; 0x06
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	9f 81       	ldd	r25, Y+7	; 0x07
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	31 f0       	breq	.+12     	; 0x19bc <MDIO_vSetPinVal+0x174>
    19b0:	2e 81       	ldd	r18, Y+6	; 0x06
    19b2:	3f 81       	ldd	r19, Y+7	; 0x07
    19b4:	21 30       	cpi	r18, 0x01	; 1
    19b6:	31 05       	cpc	r19, r1
    19b8:	b1 f0       	breq	.+44     	; 0x19e6 <MDIO_vSetPinVal+0x19e>
    19ba:	60 c0       	rjmp	.+192    	; 0x1a7c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    19bc:	a5 e3       	ldi	r26, 0x35	; 53
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e5 e3       	ldi	r30, 0x35	; 53
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <MDIO_vSetPinVal+0x192>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <MDIO_vSetPinVal+0x18e>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	4b c0       	rjmp	.+150    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    19e6:	a5 e3       	ldi	r26, 0x35	; 53
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e3       	ldi	r30, 0x35	; 53
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <MDIO_vSetPinVal+0x1bc>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <MDIO_vSetPinVal+0x1b8>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	37 c0       	rjmp	.+110    	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	3d 83       	std	Y+5, r19	; 0x05
    1a16:	2c 83       	std	Y+4, r18	; 0x04
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <MDIO_vSetPinVal+0x1e4>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	21 30       	cpi	r18, 0x01	; 1
    1a26:	31 05       	cpc	r19, r1
    1a28:	b1 f0       	breq	.+44     	; 0x1a56 <MDIO_vSetPinVal+0x20e>
    1a2a:	28 c0       	rjmp	.+80     	; 0x1a7c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    1a2c:	a2 e3       	ldi	r26, 0x32	; 50
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e2 e3       	ldi	r30, 0x32	; 50
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <MDIO_vSetPinVal+0x202>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <MDIO_vSetPinVal+0x1fe>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    1a56:	a2 e3       	ldi	r26, 0x32	; 50
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <MDIO_vSetPinVal+0x22c>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <MDIO_vSetPinVal+0x228>
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1a7c:	2d 96       	adiw	r28, 0x0d	; 13
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <MDIO_GetPinVal+0x6>
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <MDIO_GetPinVal+0x8>
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	8a 83       	std	Y+2, r24	; 0x02
    1a9e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <MDIO_GetPinVal+0x1a>
    1aa6:	6b c0       	rjmp	.+214    	; 0x1b7e <MDIO_GetPinVal+0xf0>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 30       	cpi	r24, 0x08	; 8
    1aac:	08 f0       	brcs	.+2      	; 0x1ab0 <MDIO_GetPinVal+0x22>
    1aae:	67 c0       	rjmp	.+206    	; 0x1b7e <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3d 83       	std	Y+5, r19	; 0x05
    1ab8:	2c 83       	std	Y+4, r18	; 0x04
    1aba:	4c 81       	ldd	r20, Y+4	; 0x04
    1abc:	5d 81       	ldd	r21, Y+5	; 0x05
    1abe:	41 30       	cpi	r20, 0x01	; 1
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	41 f1       	breq	.+80     	; 0x1b14 <MDIO_GetPinVal+0x86>
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	82 30       	cpi	r24, 0x02	; 2
    1aca:	91 05       	cpc	r25, r1
    1acc:	34 f4       	brge	.+12     	; 0x1ada <MDIO_GetPinVal+0x4c>
    1ace:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad2:	21 15       	cp	r18, r1
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <MDIO_GetPinVal+0x62>
    1ad8:	52 c0       	rjmp	.+164    	; 0x1b7e <MDIO_GetPinVal+0xf0>
    1ada:	4c 81       	ldd	r20, Y+4	; 0x04
    1adc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ade:	42 30       	cpi	r20, 0x02	; 2
    1ae0:	51 05       	cpc	r21, r1
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <MDIO_GetPinVal+0xaa>
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	b9 f1       	breq	.+110    	; 0x1b5c <MDIO_GetPinVal+0xce>
    1aee:	47 c0       	rjmp	.+142    	; 0x1b7e <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1af0:	e9 e3       	ldi	r30, 0x39	; 57
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <MDIO_GetPinVal+0x7a>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <MDIO_GetPinVal+0x76>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	35 c0       	rjmp	.+106    	; 0x1b7e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1b14:	e6 e3       	ldi	r30, 0x36	; 54
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <MDIO_GetPinVal+0x9e>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <MDIO_GetPinVal+0x9a>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	23 c0       	rjmp	.+70     	; 0x1b7e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1b38:	e3 e3       	ldi	r30, 0x33	; 51
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <MDIO_GetPinVal+0xc2>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <MDIO_GetPinVal+0xbe>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	11 c0       	rjmp	.+34     	; 0x1b7e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1b5c:	e0 e3       	ldi	r30, 0x30	; 48
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <MDIO_GetPinVal+0xe6>
    1b70:	55 95       	asr	r21
    1b72:	47 95       	ror	r20
    1b74:	8a 95       	dec	r24
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <MDIO_GetPinVal+0xe2>
    1b78:	ca 01       	movw	r24, r20
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <MDIO_vTogglePinVal+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <MDIO_vTogglePinVal+0x8>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	08 f0       	brcs	.+2      	; 0x1ba8 <MDIO_vTogglePinVal+0x18>
    1ba6:	72 c0       	rjmp	.+228    	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <MDIO_vTogglePinVal+0x20>
    1bae:	6e c0       	rjmp	.+220    	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3c 83       	std	Y+4, r19	; 0x04
    1bb8:	2b 83       	std	Y+3, r18	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	49 f1       	breq	.+82     	; 0x1c16 <MDIO_vTogglePinVal+0x86>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <MDIO_vTogglePinVal+0x48>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <MDIO_vTogglePinVal+0x5e>
    1bd6:	5a c0       	rjmp	.+180    	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	71 f1       	breq	.+92     	; 0x1c3e <MDIO_vTogglePinVal+0xae>
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	e9 f1       	breq	.+122    	; 0x1c66 <MDIO_vTogglePinVal+0xd6>
    1bec:	4f c0       	rjmp	.+158    	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1bee:	ab e3       	ldi	r26, 0x3B	; 59
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <MDIO_vTogglePinVal+0x7c>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <MDIO_vTogglePinVal+0x78>
    1c10:	84 27       	eor	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	3b c0       	rjmp	.+118    	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1c16:	a8 e3       	ldi	r26, 0x38	; 56
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <MDIO_vTogglePinVal+0xa4>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <MDIO_vTogglePinVal+0xa0>
    1c38:	84 27       	eor	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	27 c0       	rjmp	.+78     	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1c3e:	a5 e3       	ldi	r26, 0x35	; 53
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e5 e3       	ldi	r30, 0x35	; 53
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <MDIO_vTogglePinVal+0xcc>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <MDIO_vTogglePinVal+0xc8>
    1c60:	84 27       	eor	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	13 c0       	rjmp	.+38     	; 0x1c8c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1c66:	a2 e3       	ldi	r26, 0x32	; 50
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e2 e3       	ldi	r30, 0x32	; 50
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <MDIO_vTogglePinVal+0xf4>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <MDIO_vTogglePinVal+0xf0>
    1c88:	84 27       	eor	r24, r20
    1c8a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <MDIO_vSetPortDir+0x6>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <MDIO_vSetPortDir+0x8>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	90 f5       	brcc	.+100    	; 0x1d14 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	3c 83       	std	Y+4, r19	; 0x04
    1cb8:	2b 83       	std	Y+3, r18	; 0x03
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	d1 f0       	breq	.+52     	; 0x1cf8 <MDIO_vSetPortDir+0x5e>
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <MDIO_vSetPortDir+0x3e>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	61 f0       	breq	.+24     	; 0x1cee <MDIO_vSetPortDir+0x54>
    1cd6:	1e c0       	rjmp	.+60     	; 0x1d14 <MDIO_vSetPortDir+0x7a>
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	81 f0       	breq	.+32     	; 0x1d02 <MDIO_vSetPortDir+0x68>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	81 f0       	breq	.+32     	; 0x1d0c <MDIO_vSetPortDir+0x72>
    1cec:	13 c0       	rjmp	.+38     	; 0x1d14 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1cee:	ea e3       	ldi	r30, 0x3A	; 58
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	80 83       	st	Z, r24
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1cf8:	e7 e3       	ldi	r30, 0x37	; 55
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	80 83       	st	Z, r24
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1d02:	e4 e3       	ldi	r30, 0x34	; 52
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	80 83       	st	Z, r24
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1d0c:	e1 e3       	ldi	r30, 0x31	; 49
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <MDIO_vSetPortVal+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <MDIO_vSetPortVal+0x8>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	84 30       	cpi	r24, 0x04	; 4
    1d36:	90 f5       	brcc	.+100    	; 0x1d9c <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3c 83       	std	Y+4, r19	; 0x04
    1d40:	2b 83       	std	Y+3, r18	; 0x03
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	91 05       	cpc	r25, r1
    1d4a:	d1 f0       	breq	.+52     	; 0x1d80 <MDIO_vSetPortVal+0x5e>
    1d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d50:	22 30       	cpi	r18, 0x02	; 2
    1d52:	31 05       	cpc	r19, r1
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <MDIO_vSetPortVal+0x3e>
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	61 f0       	breq	.+24     	; 0x1d76 <MDIO_vSetPortVal+0x54>
    1d5e:	1e c0       	rjmp	.+60     	; 0x1d9c <MDIO_vSetPortVal+0x7a>
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	81 f0       	breq	.+32     	; 0x1d8a <MDIO_vSetPortVal+0x68>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	91 05       	cpc	r25, r1
    1d72:	81 f0       	breq	.+32     	; 0x1d94 <MDIO_vSetPortVal+0x72>
    1d74:	13 c0       	rjmp	.+38     	; 0x1d9c <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	80 83       	st	Z, r24
    1d7e:	0e c0       	rjmp	.+28     	; 0x1d9c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	80 83       	st	Z, r24
    1d88:	09 c0       	rjmp	.+18     	; 0x1d9c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    1d8a:	e5 e3       	ldi	r30, 0x35	; 53
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	80 83       	st	Z, r24
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <MDIO_vInit>:


void MDIO_vInit()
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1db2:	ea e3       	ldi	r30, 0x3A	; 58
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1db8:	e7 e3       	ldi	r30, 0x37	; 55
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1dbe:	e4 e3       	ldi	r30, 0x34	; 52
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	87 e0       	ldi	r24, 0x07	; 7
    1dc4:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1dc6:	e1 e3       	ldi	r30, 0x31	; 49
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1dce:	eb e3       	ldi	r30, 0x3B	; 59
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1dd4:	e8 e3       	ldi	r30, 0x38	; 56
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1ddc:	e5 e3       	ldi	r30, 0x35	; 53
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1de2:	e2 e3       	ldi	r30, 0x32	; 50
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
    1df6:	a6 e2       	ldi	r26, 0x26	; 38
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e6 e2       	ldi	r30, 0x26	; 38
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
    1e04:	a7 e2       	ldi	r26, 0x27	; 39
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e7 e2       	ldi	r30, 0x27	; 39
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    1e12:	a7 e2       	ldi	r26, 0x27	; 39
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e2       	ldi	r30, 0x27	; 39
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 77       	andi	r24, 0x7F	; 127
    1e1e:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
    1e20:	a6 e2       	ldi	r26, 0x26	; 38
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e2       	ldi	r30, 0x26	; 38
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	81 60       	ori	r24, 0x01	; 1
    1e2c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    1e2e:	a6 e2       	ldi	r26, 0x26	; 38
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e6 e2       	ldi	r30, 0x26	; 38
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	82 60       	ori	r24, 0x02	; 2
    1e3a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
    1e3c:	a6 e2       	ldi	r26, 0x26	; 38
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e6 e2       	ldi	r30, 0x26	; 38
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	84 60       	ori	r24, 0x04	; 4
    1e48:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
    1e4a:	a6 e2       	ldi	r26, 0x26	; 38
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e6 e2       	ldi	r30, 0x26	; 38
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	8c 93       	st	X, r24
}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <ADC_StartConvertPolling+0x6>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
    1e6c:	1a 82       	std	Y+2, r1	; 0x02
    1e6e:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
    1e70:	a7 e2       	ldi	r26, 0x27	; 39
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e7 e2       	ldi	r30, 0x27	; 39
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 7e       	andi	r24, 0xE0	; 224
    1e7c:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
    1e7e:	a7 e2       	ldi	r26, 0x27	; 39
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e7 e2       	ldi	r30, 0x27	; 39
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	90 81       	ld	r25, Z
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	89 2b       	or	r24, r25
    1e8c:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
    1e8e:	a6 e2       	ldi	r26, 0x26	; 38
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e6 e2       	ldi	r30, 0x26	; 38
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	80 64       	ori	r24, 0x40	; 64
    1e9a:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
    1e9c:	e6 e2       	ldi	r30, 0x26	; 38
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	82 95       	swap	r24
    1ea4:	8f 70       	andi	r24, 0x0F	; 15
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	a9 f3       	breq	.-22     	; 0x1e9c <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
    1eb2:	e4 e2       	ldi	r30, 0x24	; 36
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
    1ebe:	a6 e2       	ldi	r26, 0x26	; 38
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e6 e2       	ldi	r30, 0x26	; 38
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 61       	ori	r24, 0x10	; 16
    1eca:	8c 93       	st	X, r24
	return ADC_read;
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <ADC_StartConvertInt+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <ADC_StartConvertInt+0x8>
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <ADC_StartConvertInt+0xa>
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	7c 83       	std	Y+4, r23	; 0x04
    1eee:	6b 83       	std	Y+3, r22	; 0x03
    1ef0:	5e 83       	std	Y+6, r21	; 0x06
    1ef2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
    1ef4:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
    1ef6:	80 91 94 01 	lds	r24, 0x0194
    1efa:	88 23       	and	r24, r24
    1efc:	69 f5       	brne	.+90     	; 0x1f58 <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 93 94 01 	sts	0x0194, r24
			Global_ptr=pu16Reading;
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	90 93 91 01 	sts	0x0191, r25
    1f0c:	80 93 90 01 	sts	0x0190, r24
			GlobalPtrFunc = PtrFunc;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	90 93 93 01 	sts	0x0193, r25
    1f18:	80 93 92 01 	sts	0x0192, r24

			ADMUX &=0b11100000;
    1f1c:	a7 e2       	ldi	r26, 0x27	; 39
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e7 e2       	ldi	r30, 0x27	; 39
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 7e       	andi	r24, 0xE0	; 224
    1f28:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
    1f2a:	a7 e2       	ldi	r26, 0x27	; 39
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e7 e2       	ldi	r30, 0x27	; 39
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	90 81       	ld	r25, Z
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	89 2b       	or	r24, r25
    1f38:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
    1f3a:	a6 e2       	ldi	r26, 0x26	; 38
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e6 e2       	ldi	r30, 0x26	; 38
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	88 60       	ori	r24, 0x08	; 8
    1f46:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
    1f48:	a6 e2       	ldi	r26, 0x26	; 38
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e6 e2       	ldi	r30, 0x26	; 38
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5e:	26 96       	adiw	r28, 0x06	; 6
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1f70:	1f 92       	push	r1
    1f72:	0f 92       	push	r0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	0f 92       	push	r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
    1f9a:	a0 91 90 01 	lds	r26, 0x0190
    1f9e:	b0 91 91 01 	lds	r27, 0x0191
    1fa2:	e4 e2       	ldi	r30, 0x24	; 36
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	8d 93       	st	X+, r24
    1fac:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
    1fae:	e0 91 92 01 	lds	r30, 0x0192
    1fb2:	f0 91 93 01 	lds	r31, 0x0193
    1fb6:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
    1fb8:	a6 e2       	ldi	r26, 0x26	; 38
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e6 e2       	ldi	r30, 0x26	; 38
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	87 7f       	andi	r24, 0xF7	; 247
    1fc4:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
    1fc6:	10 92 94 01 	sts	0x0194, r1



}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	0f 90       	pop	r0
    1fec:	1f 90       	pop	r1
    1fee:	18 95       	reti

00001ff0 <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <HSSD_vInit+0x6>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	08 f0       	brcs	.+2      	; 0x2006 <HSSD_vInit+0x16>
    2004:	42 c0       	rjmp	.+132    	; 0x208a <HSSD_vInit+0x9a>
	{
		switch(A_PortID)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	3b 83       	std	Y+3, r19	; 0x03
    200e:	2a 83       	std	Y+2, r18	; 0x02
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	91 05       	cpc	r25, r1
    2018:	f1 f0       	breq	.+60     	; 0x2056 <HSSD_vInit+0x66>
    201a:	2a 81       	ldd	r18, Y+2	; 0x02
    201c:	3b 81       	ldd	r19, Y+3	; 0x03
    201e:	22 30       	cpi	r18, 0x02	; 2
    2020:	31 05       	cpc	r19, r1
    2022:	2c f4       	brge	.+10     	; 0x202e <HSSD_vInit+0x3e>
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	61 f0       	breq	.+24     	; 0x2044 <HSSD_vInit+0x54>
    202c:	2e c0       	rjmp	.+92     	; 0x208a <HSSD_vInit+0x9a>
    202e:	2a 81       	ldd	r18, Y+2	; 0x02
    2030:	3b 81       	ldd	r19, Y+3	; 0x03
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	31 05       	cpc	r19, r1
    2036:	c1 f0       	breq	.+48     	; 0x2068 <HSSD_vInit+0x78>
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	83 30       	cpi	r24, 0x03	; 3
    203e:	91 05       	cpc	r25, r1
    2040:	e1 f0       	breq	.+56     	; 0x207a <HSSD_vInit+0x8a>
    2042:	23 c0       	rjmp	.+70     	; 0x208a <HSSD_vInit+0x9a>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	6f ef       	ldi	r22, 0xFF	; 255
    2050:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    2054:	1a c0       	rjmp	.+52     	; 0x208a <HSSD_vInit+0x9a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	6f ef       	ldi	r22, 0xFF	; 255
    205a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	6f ef       	ldi	r22, 0xFF	; 255
    2062:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    2066:	11 c0       	rjmp	.+34     	; 0x208a <HSSD_vInit+0x9a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	6f ef       	ldi	r22, 0xFF	; 255
    206c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	6f ef       	ldi	r22, 0xFF	; 255
    2074:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    2078:	08 c0       	rjmp	.+16     	; 0x208a <HSSD_vInit+0x9a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	6f ef       	ldi	r22, 0xFF	; 255
    207e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	6f ef       	ldi	r22, 0xFF	; 255
    2086:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
			break;
		}
	}
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <HSSD_vDisplayNumber+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <HSSD_vDisplayNumber+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	90 f5       	brcc	.+100    	; 0x2110 <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3c 83       	std	Y+4, r19	; 0x04
    20b4:	2b 83       	std	Y+3, r18	; 0x03
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	d1 f0       	breq	.+52     	; 0x20f4 <HSSD_vDisplayNumber+0x5e>
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <HSSD_vDisplayNumber+0x3e>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	61 f0       	breq	.+24     	; 0x20ea <HSSD_vDisplayNumber+0x54>
    20d2:	1e c0       	rjmp	.+60     	; 0x2110 <HSSD_vDisplayNumber+0x7a>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	81 f0       	breq	.+32     	; 0x20fe <HSSD_vDisplayNumber+0x68>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	81 f0       	breq	.+32     	; 0x2108 <HSSD_vDisplayNumber+0x72>
    20e8:	13 c0       	rjmp	.+38     	; 0x2110 <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	6a 81       	ldd	r22, Y+2	; 0x02
    20ee:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    20f2:	0e c0       	rjmp	.+28     	; 0x2110 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	6a 81       	ldd	r22, Y+2	; 0x02
    20f8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	6a 81       	ldd	r22, Y+2	; 0x02
    2102:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	6a 81       	ldd	r22, Y+2	; 0x02
    210c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
			break;
		}
	}
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	c0 55       	subi	r28, 0x50	; 80
    2128:	d0 40       	sbci	r29, 0x00	; 0
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	fe 01       	movw	r30, r28
    2136:	e9 5b       	subi	r30, 0xB9	; 185
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 83       	st	Z, r24
    213c:	fe 01       	movw	r30, r28
    213e:	e8 5b       	subi	r30, 0xB8	; 184
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	71 83       	std	Z+1, r23	; 0x01
    2144:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2146:	9e 01       	movw	r18, r28
    2148:	23 5c       	subi	r18, 0xC3	; 195
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	2e 96       	adiw	r28, 0x0e	; 14
    214e:	3f af       	std	Y+63, r19	; 0x3f
    2150:	2e af       	std	Y+62, r18	; 0x3e
    2152:	2e 97       	sbiw	r28, 0x0e	; 14
    2154:	88 e7       	ldi	r24, 0x78	; 120
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	60 96       	adiw	r28, 0x10	; 16
    215a:	9f af       	std	Y+63, r25	; 0x3f
    215c:	8e af       	std	Y+62, r24	; 0x3e
    215e:	60 97       	sbiw	r28, 0x10	; 16
    2160:	9a e0       	ldi	r25, 0x0A	; 10
    2162:	61 96       	adiw	r28, 0x11	; 17
    2164:	9f af       	std	Y+63, r25	; 0x3f
    2166:	61 97       	sbiw	r28, 0x11	; 17
    2168:	60 96       	adiw	r28, 0x10	; 16
    216a:	ee ad       	ldd	r30, Y+62	; 0x3e
    216c:	ff ad       	ldd	r31, Y+63	; 0x3f
    216e:	60 97       	sbiw	r28, 0x10	; 16
    2170:	00 80       	ld	r0, Z
    2172:	60 96       	adiw	r28, 0x10	; 16
    2174:	2e ad       	ldd	r18, Y+62	; 0x3e
    2176:	3f ad       	ldd	r19, Y+63	; 0x3f
    2178:	60 97       	sbiw	r28, 0x10	; 16
    217a:	2f 5f       	subi	r18, 0xFF	; 255
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	60 96       	adiw	r28, 0x10	; 16
    2180:	3f af       	std	Y+63, r19	; 0x3f
    2182:	2e af       	std	Y+62, r18	; 0x3e
    2184:	60 97       	sbiw	r28, 0x10	; 16
    2186:	2e 96       	adiw	r28, 0x0e	; 14
    2188:	ee ad       	ldd	r30, Y+62	; 0x3e
    218a:	ff ad       	ldd	r31, Y+63	; 0x3f
    218c:	2e 97       	sbiw	r28, 0x0e	; 14
    218e:	00 82       	st	Z, r0
    2190:	2e 96       	adiw	r28, 0x0e	; 14
    2192:	2e ad       	ldd	r18, Y+62	; 0x3e
    2194:	3f ad       	ldd	r19, Y+63	; 0x3f
    2196:	2e 97       	sbiw	r28, 0x0e	; 14
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	2e 96       	adiw	r28, 0x0e	; 14
    219e:	3f af       	std	Y+63, r19	; 0x3f
    21a0:	2e af       	std	Y+62, r18	; 0x3e
    21a2:	2e 97       	sbiw	r28, 0x0e	; 14
    21a4:	61 96       	adiw	r28, 0x11	; 17
    21a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    21a8:	61 97       	sbiw	r28, 0x11	; 17
    21aa:	31 50       	subi	r19, 0x01	; 1
    21ac:	61 96       	adiw	r28, 0x11	; 17
    21ae:	3f af       	std	Y+63, r19	; 0x3f
    21b0:	61 97       	sbiw	r28, 0x11	; 17
    21b2:	61 96       	adiw	r28, 0x11	; 17
    21b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    21b6:	61 97       	sbiw	r28, 0x11	; 17
    21b8:	88 23       	and	r24, r24
    21ba:	b1 f6       	brne	.-84     	; 0x2168 <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    21bc:	fe 01       	movw	r30, r28
    21be:	e9 5b       	subi	r30, 0xB9	; 185
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	84 30       	cpi	r24, 0x04	; 4
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <HSSD_vDisplayNumberAscending+0xac>
    21c8:	7c c2       	rjmp	.+1272   	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 5b       	subi	r30, 0xB9	; 185
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	e8 2f       	mov	r30, r24
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	2c 96       	adiw	r28, 0x0c	; 12
    21d8:	ff af       	std	Y+63, r31	; 0x3f
    21da:	ee af       	std	Y+62, r30	; 0x3e
    21dc:	2c 97       	sbiw	r28, 0x0c	; 12
    21de:	2c 96       	adiw	r28, 0x0c	; 12
    21e0:	2e ad       	ldd	r18, Y+62	; 0x3e
    21e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    21e4:	2c 97       	sbiw	r28, 0x0c	; 12
    21e6:	21 30       	cpi	r18, 0x01	; 1
    21e8:	31 05       	cpc	r19, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <HSSD_vDisplayNumberAscending+0xd0>
    21ec:	b2 c0       	rjmp	.+356    	; 0x2352 <HSSD_vDisplayNumberAscending+0x234>
    21ee:	2c 96       	adiw	r28, 0x0c	; 12
    21f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f4:	2c 97       	sbiw	r28, 0x0c	; 12
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	91 05       	cpc	r25, r1
    21fa:	3c f4       	brge	.+14     	; 0x220a <HSSD_vDisplayNumberAscending+0xec>
    21fc:	2c 96       	adiw	r28, 0x0c	; 12
    21fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    2200:	ff ad       	ldd	r31, Y+63	; 0x3f
    2202:	2c 97       	sbiw	r28, 0x0c	; 12
    2204:	30 97       	sbiw	r30, 0x00	; 0
    2206:	91 f0       	breq	.+36     	; 0x222c <HSSD_vDisplayNumberAscending+0x10e>
    2208:	5c c2       	rjmp	.+1208   	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
    220a:	2c 96       	adiw	r28, 0x0c	; 12
    220c:	2e ad       	ldd	r18, Y+62	; 0x3e
    220e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2210:	2c 97       	sbiw	r28, 0x0c	; 12
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <HSSD_vDisplayNumberAscending+0xfc>
    2218:	2f c1       	rjmp	.+606    	; 0x2478 <HSSD_vDisplayNumberAscending+0x35a>
    221a:	2c 96       	adiw	r28, 0x0c	; 12
    221c:	8e ad       	ldd	r24, Y+62	; 0x3e
    221e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2220:	2c 97       	sbiw	r28, 0x0c	; 12
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <HSSD_vDisplayNumberAscending+0x10c>
    2228:	ba c1       	rjmp	.+884    	; 0x259e <HSSD_vDisplayNumberAscending+0x480>
    222a:	4b c2       	rjmp	.+1174   	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    222c:	1c ae       	std	Y+60, r1	; 0x3c
    222e:	8c c0       	rjmp	.+280    	; 0x2348 <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    2230:	8c ad       	ldd	r24, Y+60	; 0x3c
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	ce 01       	movw	r24, r28
    2238:	cd 96       	adiw	r24, 0x3d	; 61
    223a:	fc 01       	movw	r30, r24
    223c:	e2 0f       	add	r30, r18
    223e:	f3 1f       	adc	r31, r19
    2240:	90 81       	ld	r25, Z
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	69 2f       	mov	r22, r25
    2246:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    224a:	fe 01       	movw	r30, r28
    224c:	e8 5b       	subi	r30, 0xB8	; 184
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	cc 01       	movw	r24, r24
    2256:	a0 e0       	ldi	r26, 0x00	; 0
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8d ab       	std	Y+53, r24	; 0x35
    2268:	9e ab       	std	Y+54, r25	; 0x36
    226a:	af ab       	std	Y+55, r26	; 0x37
    226c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6d a9       	ldd	r22, Y+53	; 0x35
    2270:	7e a9       	ldd	r23, Y+54	; 0x36
    2272:	8f a9       	ldd	r24, Y+55	; 0x37
    2274:	98 ad       	ldd	r25, Y+56	; 0x38
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	89 ab       	std	Y+49, r24	; 0x31
    2288:	9a ab       	std	Y+50, r25	; 0x32
    228a:	ab ab       	std	Y+51, r26	; 0x33
    228c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228e:	69 a9       	ldd	r22, Y+49	; 0x31
    2290:	7a a9       	ldd	r23, Y+50	; 0x32
    2292:	8b a9       	ldd	r24, Y+51	; 0x33
    2294:	9c a9       	ldd	r25, Y+52	; 0x34
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	98 ab       	std	Y+48, r25	; 0x30
    22ac:	8f a7       	std	Y+47, r24	; 0x2f
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    22b0:	69 a9       	ldd	r22, Y+49	; 0x31
    22b2:	7a a9       	ldd	r23, Y+50	; 0x32
    22b4:	8b a9       	ldd	r24, Y+51	; 0x33
    22b6:	9c a9       	ldd	r25, Y+52	; 0x34
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6d a9       	ldd	r22, Y+53	; 0x35
    22ca:	7e a9       	ldd	r23, Y+54	; 0x36
    22cc:	8f a9       	ldd	r24, Y+55	; 0x37
    22ce:	98 ad       	ldd	r25, Y+56	; 0x38
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	98 ab       	std	Y+48, r25	; 0x30
    22ee:	8f a7       	std	Y+47, r24	; 0x2f
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <HSSD_vDisplayNumberAscending+0x1f2>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9e a7       	std	Y+46, r25	; 0x2e
    22f8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <HSSD_vDisplayNumberAscending+0x1e0>
    2302:	9e a7       	std	Y+46, r25	; 0x2e
    2304:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8f a5       	ldd	r24, Y+47	; 0x2f
    2308:	98 a9       	ldd	r25, Y+48	; 0x30
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	98 ab       	std	Y+48, r25	; 0x30
    230e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8f a5       	ldd	r24, Y+47	; 0x2f
    2312:	98 a9       	ldd	r25, Y+48	; 0x30
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <HSSD_vDisplayNumberAscending+0x1d4>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	69 a9       	ldd	r22, Y+49	; 0x31
    231c:	7a a9       	ldd	r23, Y+50	; 0x32
    231e:	8b a9       	ldd	r24, Y+51	; 0x33
    2320:	9c a9       	ldd	r25, Y+52	; 0x34
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	98 ab       	std	Y+48, r25	; 0x30
    232c:	8f a7       	std	Y+47, r24	; 0x2f
    232e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2330:	98 a9       	ldd	r25, Y+48	; 0x30
    2332:	9c a7       	std	Y+44, r25	; 0x2c
    2334:	8b a7       	std	Y+43, r24	; 0x2b
    2336:	8b a5       	ldd	r24, Y+43	; 0x2b
    2338:	9c a5       	ldd	r25, Y+44	; 0x2c
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <HSSD_vDisplayNumberAscending+0x21c>
    233e:	9c a7       	std	Y+44, r25	; 0x2c
    2340:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    2342:	8c ad       	ldd	r24, Y+60	; 0x3c
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	8c af       	std	Y+60, r24	; 0x3c
    2348:	8c ad       	ldd	r24, Y+60	; 0x3c
    234a:	8a 30       	cpi	r24, 0x0A	; 10
    234c:	08 f4       	brcc	.+2      	; 0x2350 <HSSD_vDisplayNumberAscending+0x232>
    234e:	70 cf       	rjmp	.-288    	; 0x2230 <HSSD_vDisplayNumberAscending+0x112>
    2350:	b8 c1       	rjmp	.+880    	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    2352:	1b ae       	std	Y+59, r1	; 0x3b
    2354:	8c c0       	rjmp	.+280    	; 0x246e <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    2356:	8b ad       	ldd	r24, Y+59	; 0x3b
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	ce 01       	movw	r24, r28
    235e:	cd 96       	adiw	r24, 0x3d	; 61
    2360:	fc 01       	movw	r30, r24
    2362:	e2 0f       	add	r30, r18
    2364:	f3 1f       	adc	r31, r19
    2366:	90 81       	ld	r25, Z
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	69 2f       	mov	r22, r25
    236c:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2370:	fe 01       	movw	r30, r28
    2372:	e8 5b       	subi	r30, 0xB8	; 184
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	cc 01       	movw	r24, r24
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8f a3       	std	Y+39, r24	; 0x27
    238e:	98 a7       	std	Y+40, r25	; 0x28
    2390:	a9 a7       	std	Y+41, r26	; 0x29
    2392:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6f a1       	ldd	r22, Y+39	; 0x27
    2396:	78 a5       	ldd	r23, Y+40	; 0x28
    2398:	89 a5       	ldd	r24, Y+41	; 0x29
    239a:	9a a5       	ldd	r25, Y+42	; 0x2a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8b a3       	std	Y+35, r24	; 0x23
    23ae:	9c a3       	std	Y+36, r25	; 0x24
    23b0:	ad a3       	std	Y+37, r26	; 0x25
    23b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b4:	6b a1       	ldd	r22, Y+35	; 0x23
    23b6:	7c a1       	ldd	r23, Y+36	; 0x24
    23b8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ba:	9e a1       	ldd	r25, Y+38	; 0x26
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9a a3       	std	Y+34, r25	; 0x22
    23d2:	89 a3       	std	Y+33, r24	; 0x21
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6f a1       	ldd	r22, Y+39	; 0x27
    23f0:	78 a5       	ldd	r23, Y+40	; 0x28
    23f2:	89 a5       	ldd	r24, Y+41	; 0x29
    23f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9a a3       	std	Y+34, r25	; 0x22
    2414:	89 a3       	std	Y+33, r24	; 0x21
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <HSSD_vDisplayNumberAscending+0x318>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	98 a3       	std	Y+32, r25	; 0x20
    241e:	8f 8f       	std	Y+31, r24	; 0x1f
    2420:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2422:	98 a1       	ldd	r25, Y+32	; 0x20
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <HSSD_vDisplayNumberAscending+0x306>
    2428:	98 a3       	std	Y+32, r25	; 0x20
    242a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	89 a1       	ldd	r24, Y+33	; 0x21
    242e:	9a a1       	ldd	r25, Y+34	; 0x22
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	89 a1       	ldd	r24, Y+33	; 0x21
    2438:	9a a1       	ldd	r25, Y+34	; 0x22
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <HSSD_vDisplayNumberAscending+0x2fa>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6b a1       	ldd	r22, Y+35	; 0x23
    2442:	7c a1       	ldd	r23, Y+36	; 0x24
    2444:	8d a1       	ldd	r24, Y+37	; 0x25
    2446:	9e a1       	ldd	r25, Y+38	; 0x26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	9e 8f       	std	Y+30, r25	; 0x1e
    245a:	8d 8f       	std	Y+29, r24	; 0x1d
    245c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <HSSD_vDisplayNumberAscending+0x342>
    2464:	9e 8f       	std	Y+30, r25	; 0x1e
    2466:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    2468:	8b ad       	ldd	r24, Y+59	; 0x3b
    246a:	8f 5f       	subi	r24, 0xFF	; 255
    246c:	8b af       	std	Y+59, r24	; 0x3b
    246e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2470:	8a 30       	cpi	r24, 0x0A	; 10
    2472:	08 f4       	brcc	.+2      	; 0x2476 <HSSD_vDisplayNumberAscending+0x358>
    2474:	70 cf       	rjmp	.-288    	; 0x2356 <HSSD_vDisplayNumberAscending+0x238>
    2476:	25 c1       	rjmp	.+586    	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2478:	1a ae       	std	Y+58, r1	; 0x3a
    247a:	8c c0       	rjmp	.+280    	; 0x2594 <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    247c:	8a ad       	ldd	r24, Y+58	; 0x3a
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	ce 01       	movw	r24, r28
    2484:	cd 96       	adiw	r24, 0x3d	; 61
    2486:	fc 01       	movw	r30, r24
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	90 81       	ld	r25, Z
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	69 2f       	mov	r22, r25
    2492:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2496:	fe 01       	movw	r30, r28
    2498:	e8 5b       	subi	r30, 0xB8	; 184
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	cc 01       	movw	r24, r24
    24a2:	a0 e0       	ldi	r26, 0x00	; 0
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	89 8f       	std	Y+25, r24	; 0x19
    24b4:	9a 8f       	std	Y+26, r25	; 0x1a
    24b6:	ab 8f       	std	Y+27, r26	; 0x1b
    24b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8d 8b       	std	Y+21, r24	; 0x15
    24d4:	9e 8b       	std	Y+22, r25	; 0x16
    24d6:	af 8b       	std	Y+23, r26	; 0x17
    24d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24da:	6d 89       	ldd	r22, Y+21	; 0x15
    24dc:	7e 89       	ldd	r23, Y+22	; 0x16
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	98 8d       	ldd	r25, Y+24	; 0x18
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    24fc:	6d 89       	ldd	r22, Y+21	; 0x15
    24fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	69 8d       	ldd	r22, Y+25	; 0x19
    2516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	0f c0       	rjmp	.+30     	; 0x255c <HSSD_vDisplayNumberAscending+0x43e>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9a 8b       	std	Y+18, r25	; 0x12
    2544:	89 8b       	std	Y+17, r24	; 0x11
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	9a 89       	ldd	r25, Y+18	; 0x12
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <HSSD_vDisplayNumberAscending+0x42c>
    254e:	9a 8b       	std	Y+18, r25	; 0x12
    2550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	9c 89       	ldd	r25, Y+20	; 0x14
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9c 8b       	std	Y+20, r25	; 0x14
    255a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8b 89       	ldd	r24, Y+19	; 0x13
    255e:	9c 89       	ldd	r25, Y+20	; 0x14
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <HSSD_vDisplayNumberAscending+0x420>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	98 8b       	std	Y+16, r25	; 0x10
    2580:	8f 87       	std	Y+15, r24	; 0x0f
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	98 89       	ldd	r25, Y+16	; 0x10
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <HSSD_vDisplayNumberAscending+0x468>
    258a:	98 8b       	std	Y+16, r25	; 0x10
    258c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    258e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	8a af       	std	Y+58, r24	; 0x3a
    2594:	8a ad       	ldd	r24, Y+58	; 0x3a
    2596:	8a 30       	cpi	r24, 0x0A	; 10
    2598:	08 f4       	brcc	.+2      	; 0x259c <HSSD_vDisplayNumberAscending+0x47e>
    259a:	70 cf       	rjmp	.-288    	; 0x247c <HSSD_vDisplayNumberAscending+0x35e>
    259c:	92 c0       	rjmp	.+292    	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    259e:	19 ae       	std	Y+57, r1	; 0x39
    25a0:	8c c0       	rjmp	.+280    	; 0x26ba <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    25a2:	89 ad       	ldd	r24, Y+57	; 0x39
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	ce 01       	movw	r24, r28
    25aa:	cd 96       	adiw	r24, 0x3d	; 61
    25ac:	fc 01       	movw	r30, r24
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	90 81       	ld	r25, Z
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	69 2f       	mov	r22, r25
    25b8:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    25bc:	fe 01       	movw	r30, r28
    25be:	e8 5b       	subi	r30, 0xB8	; 184
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	cc 01       	movw	r24, r24
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <HSSD_vDisplayNumberAscending+0x564>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <HSSD_vDisplayNumberAscending+0x552>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <HSSD_vDisplayNumberAscending+0x546>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <HSSD_vDisplayNumberAscending+0x58e>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    26b4:	89 ad       	ldd	r24, Y+57	; 0x39
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	89 af       	std	Y+57, r24	; 0x39
    26ba:	89 ad       	ldd	r24, Y+57	; 0x39
    26bc:	8a 30       	cpi	r24, 0x0A	; 10
    26be:	08 f4       	brcc	.+2      	; 0x26c2 <HSSD_vDisplayNumberAscending+0x5a4>
    26c0:	70 cf       	rjmp	.-288    	; 0x25a2 <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    26c2:	c0 5b       	subi	r28, 0xB0	; 176
    26c4:	df 4f       	sbci	r29, 0xFF	; 255
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,s8 A_u8Time , u16 A_u16TimetoWait)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	c1 55       	subi	r28, 0x51	; 81
    26e0:	d0 40       	sbci	r29, 0x00	; 0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	fe 01       	movw	r30, r28
    26ee:	e9 5b       	subi	r30, 0xB9	; 185
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 83       	st	Z, r24
    26f4:	fe 01       	movw	r30, r28
    26f6:	e8 5b       	subi	r30, 0xB8	; 184
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 83       	st	Z, r22
    26fc:	fe 01       	movw	r30, r28
    26fe:	e7 5b       	subi	r30, 0xB7	; 183
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	51 83       	std	Z+1, r21	; 0x01
    2704:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2706:	9e 01       	movw	r18, r28
    2708:	23 5c       	subi	r18, 0xC3	; 195
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	2f 96       	adiw	r28, 0x0f	; 15
    270e:	3f af       	std	Y+63, r19	; 0x3f
    2710:	2e af       	std	Y+62, r18	; 0x3e
    2712:	2f 97       	sbiw	r28, 0x0f	; 15
    2714:	82 e8       	ldi	r24, 0x82	; 130
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	61 96       	adiw	r28, 0x11	; 17
    271a:	9f af       	std	Y+63, r25	; 0x3f
    271c:	8e af       	std	Y+62, r24	; 0x3e
    271e:	61 97       	sbiw	r28, 0x11	; 17
    2720:	9a e0       	ldi	r25, 0x0A	; 10
    2722:	62 96       	adiw	r28, 0x12	; 18
    2724:	9f af       	std	Y+63, r25	; 0x3f
    2726:	62 97       	sbiw	r28, 0x12	; 18
    2728:	61 96       	adiw	r28, 0x11	; 17
    272a:	ee ad       	ldd	r30, Y+62	; 0x3e
    272c:	ff ad       	ldd	r31, Y+63	; 0x3f
    272e:	61 97       	sbiw	r28, 0x11	; 17
    2730:	00 80       	ld	r0, Z
    2732:	61 96       	adiw	r28, 0x11	; 17
    2734:	2e ad       	ldd	r18, Y+62	; 0x3e
    2736:	3f ad       	ldd	r19, Y+63	; 0x3f
    2738:	61 97       	sbiw	r28, 0x11	; 17
    273a:	2f 5f       	subi	r18, 0xFF	; 255
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	61 96       	adiw	r28, 0x11	; 17
    2740:	3f af       	std	Y+63, r19	; 0x3f
    2742:	2e af       	std	Y+62, r18	; 0x3e
    2744:	61 97       	sbiw	r28, 0x11	; 17
    2746:	2f 96       	adiw	r28, 0x0f	; 15
    2748:	ee ad       	ldd	r30, Y+62	; 0x3e
    274a:	ff ad       	ldd	r31, Y+63	; 0x3f
    274c:	2f 97       	sbiw	r28, 0x0f	; 15
    274e:	00 82       	st	Z, r0
    2750:	2f 96       	adiw	r28, 0x0f	; 15
    2752:	2e ad       	ldd	r18, Y+62	; 0x3e
    2754:	3f ad       	ldd	r19, Y+63	; 0x3f
    2756:	2f 97       	sbiw	r28, 0x0f	; 15
    2758:	2f 5f       	subi	r18, 0xFF	; 255
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	2f 96       	adiw	r28, 0x0f	; 15
    275e:	3f af       	std	Y+63, r19	; 0x3f
    2760:	2e af       	std	Y+62, r18	; 0x3e
    2762:	2f 97       	sbiw	r28, 0x0f	; 15
    2764:	62 96       	adiw	r28, 0x12	; 18
    2766:	3f ad       	ldd	r19, Y+63	; 0x3f
    2768:	62 97       	sbiw	r28, 0x12	; 18
    276a:	31 50       	subi	r19, 0x01	; 1
    276c:	62 96       	adiw	r28, 0x12	; 18
    276e:	3f af       	std	Y+63, r19	; 0x3f
    2770:	62 97       	sbiw	r28, 0x12	; 18
    2772:	62 96       	adiw	r28, 0x12	; 18
    2774:	8f ad       	ldd	r24, Y+63	; 0x3f
    2776:	62 97       	sbiw	r28, 0x12	; 18
    2778:	88 23       	and	r24, r24
    277a:	b1 f6       	brne	.-84     	; 0x2728 <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5b       	subi	r30, 0xB9	; 185
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	84 30       	cpi	r24, 0x04	; 4
    2786:	08 f0       	brcs	.+2      	; 0x278a <HSSD_vCountDown+0xb4>
    2788:	9b c2       	rjmp	.+1334   	; 0x2cc0 <HSSD_vCountDown+0x5ea>
	{
		switch(A_PortID)
    278a:	fe 01       	movw	r30, r28
    278c:	e9 5b       	subi	r30, 0xB9	; 185
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	e8 2f       	mov	r30, r24
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	2d 96       	adiw	r28, 0x0d	; 13
    2798:	ff af       	std	Y+63, r31	; 0x3f
    279a:	ee af       	std	Y+62, r30	; 0x3e
    279c:	2d 97       	sbiw	r28, 0x0d	; 13
    279e:	2d 96       	adiw	r28, 0x0d	; 13
    27a0:	2e ad       	ldd	r18, Y+62	; 0x3e
    27a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    27a4:	2d 97       	sbiw	r28, 0x0d	; 13
    27a6:	21 30       	cpi	r18, 0x01	; 1
    27a8:	31 05       	cpc	r19, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <HSSD_vCountDown+0xd8>
    27ac:	b8 c0       	rjmp	.+368    	; 0x291e <HSSD_vCountDown+0x248>
    27ae:	2d 96       	adiw	r28, 0x0d	; 13
    27b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    27b4:	2d 97       	sbiw	r28, 0x0d	; 13
    27b6:	82 30       	cpi	r24, 0x02	; 2
    27b8:	91 05       	cpc	r25, r1
    27ba:	3c f4       	brge	.+14     	; 0x27ca <HSSD_vCountDown+0xf4>
    27bc:	2d 96       	adiw	r28, 0x0d	; 13
    27be:	ee ad       	ldd	r30, Y+62	; 0x3e
    27c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    27c2:	2d 97       	sbiw	r28, 0x0d	; 13
    27c4:	30 97       	sbiw	r30, 0x00	; 0
    27c6:	91 f0       	breq	.+36     	; 0x27ec <HSSD_vCountDown+0x116>
    27c8:	74 c2       	rjmp	.+1256   	; 0x2cb2 <HSSD_vCountDown+0x5dc>
    27ca:	2d 96       	adiw	r28, 0x0d	; 13
    27cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    27ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    27d0:	2d 97       	sbiw	r28, 0x0d	; 13
    27d2:	22 30       	cpi	r18, 0x02	; 2
    27d4:	31 05       	cpc	r19, r1
    27d6:	09 f4       	brne	.+2      	; 0x27da <HSSD_vCountDown+0x104>
    27d8:	3b c1       	rjmp	.+630    	; 0x2a50 <HSSD_vCountDown+0x37a>
    27da:	2d 96       	adiw	r28, 0x0d	; 13
    27dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    27de:	9f ad       	ldd	r25, Y+63	; 0x3f
    27e0:	2d 97       	sbiw	r28, 0x0d	; 13
    27e2:	83 30       	cpi	r24, 0x03	; 3
    27e4:	91 05       	cpc	r25, r1
    27e6:	09 f4       	brne	.+2      	; 0x27ea <HSSD_vCountDown+0x114>
    27e8:	cc c1       	rjmp	.+920    	; 0x2b82 <HSSD_vCountDown+0x4ac>
    27ea:	63 c2       	rjmp	.+1222   	; 0x2cb2 <HSSD_vCountDown+0x5dc>
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e8 5b       	subi	r30, 0xB8	; 184
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	8c af       	std	Y+60, r24	; 0x3c
    27f6:	8e c0       	rjmp	.+284    	; 0x2914 <HSSD_vCountDown+0x23e>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    27f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    27fa:	28 2f       	mov	r18, r24
    27fc:	33 27       	eor	r19, r19
    27fe:	27 fd       	sbrc	r18, 7
    2800:	30 95       	com	r19
    2802:	ce 01       	movw	r24, r28
    2804:	cd 96       	adiw	r24, 0x3d	; 61
    2806:	fc 01       	movw	r30, r24
    2808:	e2 0f       	add	r30, r18
    280a:	f3 1f       	adc	r31, r19
    280c:	90 81       	ld	r25, Z
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	69 2f       	mov	r22, r25
    2812:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2816:	fe 01       	movw	r30, r28
    2818:	e7 5b       	subi	r30, 0xB7	; 183
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	cc 01       	movw	r24, r24
    2822:	a0 e0       	ldi	r26, 0x00	; 0
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	8d ab       	std	Y+53, r24	; 0x35
    2834:	9e ab       	std	Y+54, r25	; 0x36
    2836:	af ab       	std	Y+55, r26	; 0x37
    2838:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6d a9       	ldd	r22, Y+53	; 0x35
    283c:	7e a9       	ldd	r23, Y+54	; 0x36
    283e:	8f a9       	ldd	r24, Y+55	; 0x37
    2840:	98 ad       	ldd	r25, Y+56	; 0x38
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	89 ab       	std	Y+49, r24	; 0x31
    2854:	9a ab       	std	Y+50, r25	; 0x32
    2856:	ab ab       	std	Y+51, r26	; 0x33
    2858:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    285a:	69 a9       	ldd	r22, Y+49	; 0x31
    285c:	7a a9       	ldd	r23, Y+50	; 0x32
    285e:	8b a9       	ldd	r24, Y+51	; 0x33
    2860:	9c a9       	ldd	r25, Y+52	; 0x34
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <HSSD_vCountDown+0x1a6>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	98 ab       	std	Y+48, r25	; 0x30
    2878:	8f a7       	std	Y+47, r24	; 0x2f
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <HSSD_vCountDown+0x224>
	else if (__tmp > 65535)
    287c:	69 a9       	ldd	r22, Y+49	; 0x31
    287e:	7a a9       	ldd	r23, Y+50	; 0x32
    2880:	8b a9       	ldd	r24, Y+51	; 0x33
    2882:	9c a9       	ldd	r25, Y+52	; 0x34
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <HSSD_vCountDown+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6d a9       	ldd	r22, Y+53	; 0x35
    2896:	7e a9       	ldd	r23, Y+54	; 0x36
    2898:	8f a9       	ldd	r24, Y+55	; 0x37
    289a:	98 ad       	ldd	r25, Y+56	; 0x38
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <HSSD_vCountDown+0x206>
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e a7       	std	Y+46, r25	; 0x2e
    28c4:	8d a7       	std	Y+45, r24	; 0x2d
    28c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <HSSD_vCountDown+0x1f4>
    28ce:	9e a7       	std	Y+46, r25	; 0x2e
    28d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d4:	98 a9       	ldd	r25, Y+48	; 0x30
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	98 ab       	std	Y+48, r25	; 0x30
    28da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <HSSD_vCountDown+0x1e8>
    28e4:	14 c0       	rjmp	.+40     	; 0x290e <HSSD_vCountDown+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	69 a9       	ldd	r22, Y+49	; 0x31
    28e8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ea:	8b a9       	ldd	r24, Y+51	; 0x33
    28ec:	9c a9       	ldd	r25, Y+52	; 0x34
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	98 ab       	std	Y+48, r25	; 0x30
    28f8:	8f a7       	std	Y+47, r24	; 0x2f
    28fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fc:	98 a9       	ldd	r25, Y+48	; 0x30
    28fe:	9c a7       	std	Y+44, r25	; 0x2c
    2900:	8b a7       	std	Y+43, r24	; 0x2b
    2902:	8b a5       	ldd	r24, Y+43	; 0x2b
    2904:	9c a5       	ldd	r25, Y+44	; 0x2c
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <HSSD_vCountDown+0x230>
    290a:	9c a7       	std	Y+44, r25	; 0x2c
    290c:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    290e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	8c af       	std	Y+60, r24	; 0x3c
    2914:	8c ad       	ldd	r24, Y+60	; 0x3c
    2916:	88 23       	and	r24, r24
    2918:	0c f0       	brlt	.+2      	; 0x291c <HSSD_vCountDown+0x246>
    291a:	6e cf       	rjmp	.-292    	; 0x27f8 <HSSD_vCountDown+0x122>
    291c:	ca c1       	rjmp	.+916    	; 0x2cb2 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    291e:	fe 01       	movw	r30, r28
    2920:	e8 5b       	subi	r30, 0xB8	; 184
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	8b af       	std	Y+59, r24	; 0x3b
    2928:	8e c0       	rjmp	.+284    	; 0x2a46 <HSSD_vCountDown+0x370>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    292a:	8b ad       	ldd	r24, Y+59	; 0x3b
    292c:	28 2f       	mov	r18, r24
    292e:	33 27       	eor	r19, r19
    2930:	27 fd       	sbrc	r18, 7
    2932:	30 95       	com	r19
    2934:	ce 01       	movw	r24, r28
    2936:	cd 96       	adiw	r24, 0x3d	; 61
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	90 81       	ld	r25, Z
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	69 2f       	mov	r22, r25
    2944:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2948:	fe 01       	movw	r30, r28
    294a:	e7 5b       	subi	r30, 0xB7	; 183
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	cc 01       	movw	r24, r24
    2954:	a0 e0       	ldi	r26, 0x00	; 0
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8f a3       	std	Y+39, r24	; 0x27
    2966:	98 a7       	std	Y+40, r25	; 0x28
    2968:	a9 a7       	std	Y+41, r26	; 0x29
    296a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6f a1       	ldd	r22, Y+39	; 0x27
    296e:	78 a5       	ldd	r23, Y+40	; 0x28
    2970:	89 a5       	ldd	r24, Y+41	; 0x29
    2972:	9a a5       	ldd	r25, Y+42	; 0x2a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8b a3       	std	Y+35, r24	; 0x23
    2986:	9c a3       	std	Y+36, r25	; 0x24
    2988:	ad a3       	std	Y+37, r26	; 0x25
    298a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    298c:	6b a1       	ldd	r22, Y+35	; 0x23
    298e:	7c a1       	ldd	r23, Y+36	; 0x24
    2990:	8d a1       	ldd	r24, Y+37	; 0x25
    2992:	9e a1       	ldd	r25, Y+38	; 0x26
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <HSSD_vCountDown+0x2d8>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9a a3       	std	Y+34, r25	; 0x22
    29aa:	89 a3       	std	Y+33, r24	; 0x21
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <HSSD_vCountDown+0x356>
	else if (__tmp > 65535)
    29ae:	6b a1       	ldd	r22, Y+35	; 0x23
    29b0:	7c a1       	ldd	r23, Y+36	; 0x24
    29b2:	8d a1       	ldd	r24, Y+37	; 0x25
    29b4:	9e a1       	ldd	r25, Y+38	; 0x26
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <HSSD_vCountDown+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6f a1       	ldd	r22, Y+39	; 0x27
    29c8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ca:	89 a5       	ldd	r24, Y+41	; 0x29
    29cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <HSSD_vCountDown+0x338>
    29f0:	88 ec       	ldi	r24, 0xC8	; 200
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	98 a3       	std	Y+32, r25	; 0x20
    29f6:	8f 8f       	std	Y+31, r24	; 0x1f
    29f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29fa:	98 a1       	ldd	r25, Y+32	; 0x20
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <HSSD_vCountDown+0x326>
    2a00:	98 a3       	std	Y+32, r25	; 0x20
    2a02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	89 a1       	ldd	r24, Y+33	; 0x21
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9a a3       	std	Y+34, r25	; 0x22
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a10:	9a a1       	ldd	r25, Y+34	; 0x22
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <HSSD_vCountDown+0x31a>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <HSSD_vCountDown+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9a a3       	std	Y+34, r25	; 0x22
    2a2a:	89 a3       	std	Y+33, r24	; 0x21
    2a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a30:	9e 8f       	std	Y+30, r25	; 0x1e
    2a32:	8d 8f       	std	Y+29, r24	; 0x1d
    2a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <HSSD_vCountDown+0x362>
    2a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2a40:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a42:	81 50       	subi	r24, 0x01	; 1
    2a44:	8b af       	std	Y+59, r24	; 0x3b
    2a46:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a48:	88 23       	and	r24, r24
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <HSSD_vCountDown+0x378>
    2a4c:	6e cf       	rjmp	.-292    	; 0x292a <HSSD_vCountDown+0x254>
    2a4e:	31 c1       	rjmp	.+610    	; 0x2cb2 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2a50:	fe 01       	movw	r30, r28
    2a52:	e8 5b       	subi	r30, 0xB8	; 184
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	8a af       	std	Y+58, r24	; 0x3a
    2a5a:	8e c0       	rjmp	.+284    	; 0x2b78 <HSSD_vCountDown+0x4a2>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2a5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a5e:	28 2f       	mov	r18, r24
    2a60:	33 27       	eor	r19, r19
    2a62:	27 fd       	sbrc	r18, 7
    2a64:	30 95       	com	r19
    2a66:	ce 01       	movw	r24, r28
    2a68:	cd 96       	adiw	r24, 0x3d	; 61
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 0f       	add	r30, r18
    2a6e:	f3 1f       	adc	r31, r19
    2a70:	90 81       	ld	r25, Z
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	69 2f       	mov	r22, r25
    2a76:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e7 5b       	subi	r30, 0xB7	; 183
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	cc 01       	movw	r24, r24
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	89 8f       	std	Y+25, r24	; 0x19
    2a98:	9a 8f       	std	Y+26, r25	; 0x1a
    2a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	4a ef       	ldi	r20, 0xFA	; 250
    2aac:	54 e4       	ldi	r21, 0x44	; 68
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	8d 8b       	std	Y+21, r24	; 0x15
    2ab8:	9e 8b       	std	Y+22, r25	; 0x16
    2aba:	af 8b       	std	Y+23, r26	; 0x17
    2abc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2abe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e8       	ldi	r20, 0x80	; 128
    2acc:	5f e3       	ldi	r21, 0x3F	; 63
    2ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad2:	88 23       	and	r24, r24
    2ad4:	2c f4       	brge	.+10     	; 0x2ae0 <HSSD_vCountDown+0x40a>
		__ticks = 1;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	3f c0       	rjmp	.+126    	; 0x2b5e <HSSD_vCountDown+0x488>
	else if (__tmp > 65535)
    2ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	3f ef       	ldi	r19, 0xFF	; 255
    2aec:	4f e7       	ldi	r20, 0x7F	; 127
    2aee:	57 e4       	ldi	r21, 0x47	; 71
    2af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af4:	18 16       	cp	r1, r24
    2af6:	4c f5       	brge	.+82     	; 0x2b4a <HSSD_vCountDown+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af8:	69 8d       	ldd	r22, Y+25	; 0x19
    2afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e2       	ldi	r20, 0x20	; 32
    2b06:	51 e4       	ldi	r21, 0x41	; 65
    2b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	bc 01       	movw	r22, r24
    2b12:	cd 01       	movw	r24, r26
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	0f c0       	rjmp	.+30     	; 0x2b40 <HSSD_vCountDown+0x46a>
    2b22:	88 ec       	ldi	r24, 0xC8	; 200
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	9a 8b       	std	Y+18, r25	; 0x12
    2b28:	89 8b       	std	Y+17, r24	; 0x11
    2b2a:	89 89       	ldd	r24, Y+17	; 0x11
    2b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <HSSD_vCountDown+0x458>
    2b32:	9a 8b       	std	Y+18, r25	; 0x12
    2b34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b36:	8b 89       	ldd	r24, Y+19	; 0x13
    2b38:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	9c 8b       	std	Y+20, r25	; 0x14
    2b3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b40:	8b 89       	ldd	r24, Y+19	; 0x13
    2b42:	9c 89       	ldd	r25, Y+20	; 0x14
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	69 f7       	brne	.-38     	; 0x2b22 <HSSD_vCountDown+0x44c>
    2b48:	14 c0       	rjmp	.+40     	; 0x2b72 <HSSD_vCountDown+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b50:	98 8d       	ldd	r25, Y+24	; 0x18
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9c 8b       	std	Y+20, r25	; 0x14
    2b5c:	8b 8b       	std	Y+19, r24	; 0x13
    2b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b60:	9c 89       	ldd	r25, Y+20	; 0x14
    2b62:	98 8b       	std	Y+16, r25	; 0x10
    2b64:	8f 87       	std	Y+15, r24	; 0x0f
    2b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b68:	98 89       	ldd	r25, Y+16	; 0x10
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <HSSD_vCountDown+0x494>
    2b6e:	98 8b       	std	Y+16, r25	; 0x10
    2b70:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2b72:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b74:	81 50       	subi	r24, 0x01	; 1
    2b76:	8a af       	std	Y+58, r24	; 0x3a
    2b78:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b7a:	88 23       	and	r24, r24
    2b7c:	0c f0       	brlt	.+2      	; 0x2b80 <HSSD_vCountDown+0x4aa>
    2b7e:	6e cf       	rjmp	.-292    	; 0x2a5c <HSSD_vCountDown+0x386>
    2b80:	98 c0       	rjmp	.+304    	; 0x2cb2 <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2b82:	fe 01       	movw	r30, r28
    2b84:	e8 5b       	subi	r30, 0xB8	; 184
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	89 af       	std	Y+57, r24	; 0x39
    2b8c:	8e c0       	rjmp	.+284    	; 0x2caa <HSSD_vCountDown+0x5d4>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    2b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b90:	28 2f       	mov	r18, r24
    2b92:	33 27       	eor	r19, r19
    2b94:	27 fd       	sbrc	r18, 7
    2b96:	30 95       	com	r19
    2b98:	ce 01       	movw	r24, r28
    2b9a:	cd 96       	adiw	r24, 0x3d	; 61
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e2 0f       	add	r30, r18
    2ba0:	f3 1f       	adc	r31, r19
    2ba2:	90 81       	ld	r25, Z
    2ba4:	83 e0       	ldi	r24, 0x03	; 3
    2ba6:	69 2f       	mov	r22, r25
    2ba8:	0e 94 4b 10 	call	0x2096	; 0x2096 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2bac:	fe 01       	movw	r30, r28
    2bae:	e7 5b       	subi	r30, 0xB7	; 183
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	cc 01       	movw	r24, r24
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8b 87       	std	Y+11, r24	; 0x0b
    2bca:	9c 87       	std	Y+12, r25	; 0x0c
    2bcc:	ad 87       	std	Y+13, r26	; 0x0d
    2bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4a ef       	ldi	r20, 0xFA	; 250
    2bde:	54 e4       	ldi	r21, 0x44	; 68
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	8f 83       	std	Y+7, r24	; 0x07
    2bea:	98 87       	std	Y+8, r25	; 0x08
    2bec:	a9 87       	std	Y+9, r26	; 0x09
    2bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <HSSD_vCountDown+0x53c>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <HSSD_vCountDown+0x5ba>
	else if (__tmp > 65535)
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	78 85       	ldd	r23, Y+8	; 0x08
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <HSSD_vCountDown+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <HSSD_vCountDown+0x59c>
    2c54:	88 ec       	ldi	r24, 0xC8	; 200
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <HSSD_vCountDown+0x58a>
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <HSSD_vCountDown+0x57e>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <HSSD_vCountDown+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <HSSD_vCountDown+0x5c6>
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca6:	81 50       	subi	r24, 0x01	; 1
    2ca8:	89 af       	std	Y+57, r24	; 0x39
    2caa:	89 ad       	ldd	r24, Y+57	; 0x39
    2cac:	88 23       	and	r24, r24
    2cae:	0c f0       	brlt	.+2      	; 0x2cb2 <HSSD_vCountDown+0x5dc>
    2cb0:	6e cf       	rjmp	.-292    	; 0x2b8e <HSSD_vCountDown+0x4b8>
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
		MDIO_vSetPortVal(A_PortID , 0xFF);
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e9 5b       	subi	r30, 0xB9	; 185
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	80 81       	ld	r24, Z
    2cba:	6f ef       	ldi	r22, 0xFF	; 255
    2cbc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
	}
}
    2cc0:	cf 5a       	subi	r28, 0xAF	; 175
    2cc2:	df 4f       	sbci	r29, 0xFF	; 255
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <HSSD_vTurnOFF>:

void HSSD_vTurnOFF(DIO_PORT_e A_PortID)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	0f 92       	push	r0
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortVal(A_PortID , 0xFF);
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	6f ef       	ldi	r22, 0xFF	; 255
    2ce4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
}
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	61 e0       	ldi	r22, 0x01	; 1
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	62 e0       	ldi	r22, 0x02	; 2
    2d10:	41 e0       	ldi	r20, 0x01	; 1
    2d12:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	6f ef       	ldi	r22, 0xFF	; 255
    2d1a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
}
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	2f 97       	sbiw	r28, 0x0f	; 15
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	61 e0       	ldi	r22, 0x01	; 1
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d52:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	62 e0       	ldi	r22, 0x02	; 2
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a0 e8       	ldi	r26, 0x80	; 128
    2d66:	bf e3       	ldi	r27, 0x3F	; 63
    2d68:	8b 87       	std	Y+11, r24	; 0x0b
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	ad 87       	std	Y+13, r26	; 0x0d
    2d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	4a ef       	ldi	r20, 0xFA	; 250
    2d7e:	54 e4       	ldi	r21, 0x44	; 68
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8f 83       	std	Y+7, r24	; 0x07
    2d8a:	98 87       	std	Y+8, r25	; 0x08
    2d8c:	a9 87       	std	Y+9, r26	; 0x09
    2d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	2c f4       	brge	.+10     	; 0x2db2 <LCD_SendCommand+0x8e>
		__ticks = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	3f c0       	rjmp	.+126    	; 0x2e30 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	4c f5       	brge	.+82     	; 0x2e1c <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e2       	ldi	r20, 0x20	; 32
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	0f c0       	rjmp	.+30     	; 0x2e12 <LCD_SendCommand+0xee>
    2df4:	88 ec       	ldi	r24, 0xC8	; 200
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <LCD_SendCommand+0xdc>
    2e04:	9c 83       	std	Y+4, r25	; 0x04
    2e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	69 f7       	brne	.-38     	; 0x2df4 <LCD_SendCommand+0xd0>
    2e1a:	14 c0       	rjmp	.+40     	; 0x2e44 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_SendCommand+0x118>
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	62 e0       	ldi	r22, 0x02	; 2
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>

}
    2e4e:	2f 96       	adiw	r28, 0x0f	; 15
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	2f 97       	sbiw	r28, 0x0f	; 15
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    2e76:	82 e0       	ldi	r24, 0x02	; 2
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e8e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	62 e0       	ldi	r22, 0x02	; 2
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	a0 e8       	ldi	r26, 0x80	; 128
    2ea2:	bf e3       	ldi	r27, 0x3F	; 63
    2ea4:	8b 87       	std	Y+11, r24	; 0x0b
    2ea6:	9c 87       	std	Y+12, r25	; 0x0c
    2ea8:	ad 87       	std	Y+13, r26	; 0x0d
    2eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8f 83       	std	Y+7, r24	; 0x07
    2ec6:	98 87       	std	Y+8, r25	; 0x08
    2ec8:	a9 87       	std	Y+9, r26	; 0x09
    2eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee0:	88 23       	and	r24, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <LCD_SendData+0x8e>
		__ticks = 1;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	3f c0       	rjmp	.+126    	; 0x2f6c <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	4c f5       	brge	.+82     	; 0x2f58 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <LCD_SendData+0xee>
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <LCD_SendData+0xdc>
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	69 f7       	brne	.-38     	; 0x2f30 <LCD_SendData+0xd0>
    2f56:	14 c0       	rjmp	.+40     	; 0x2f80 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_SendData+0x118>
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	62 e0       	ldi	r22, 0x02	; 2
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>
}
    2f8a:	2f 96       	adiw	r28, 0x0f	; 15
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <LCD_Init>:

void LCD_Init(void)
{
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	c6 54       	subi	r28, 0x46	; 70
    2faa:	d0 40       	sbci	r29, 0x00	; 0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ed 5b       	subi	r30, 0xBD	; 189
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e2       	ldi	r26, 0x20	; 32
    2fc2:	b2 e4       	ldi	r27, 0x42	; 66
    2fc4:	80 83       	st	Z, r24
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	a2 83       	std	Z+2, r26	; 0x02
    2fca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fcc:	8e 01       	movw	r16, r28
    2fce:	01 5c       	subi	r16, 0xC1	; 193
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ed 5b       	subi	r30, 0xBD	; 189
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	4a ef       	ldi	r20, 0xFA	; 250
    2fe6:	54 e4       	ldi	r21, 0x44	; 68
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	80 83       	st	Z, r24
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	a2 83       	std	Z+2, r26	; 0x02
    2ff8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ff 96       	adiw	r30, 0x3f	; 63
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <LCD_Init+0x84>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9e af       	std	Y+62, r25	; 0x3e
    301c:	8d af       	std	Y+61, r24	; 0x3d
    301e:	46 c0       	rjmp	.+140    	; 0x30ac <LCD_Init+0x110>
	else if (__tmp > 65535)
    3020:	fe 01       	movw	r30, r28
    3022:	ff 96       	adiw	r30, 0x3f	; 63
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	64 f5       	brge	.+88     	; 0x3094 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	fe 01       	movw	r30, r28
    303e:	ed 5b       	subi	r30, 0xBD	; 189
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e af       	std	Y+62, r25	; 0x3e
    3068:	8d af       	std	Y+61, r24	; 0x3d
    306a:	0f c0       	rjmp	.+30     	; 0x308a <LCD_Init+0xee>
    306c:	88 ec       	ldi	r24, 0xC8	; 200
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9c af       	std	Y+60, r25	; 0x3c
    3072:	8b af       	std	Y+59, r24	; 0x3b
    3074:	8b ad       	ldd	r24, Y+59	; 0x3b
    3076:	9c ad       	ldd	r25, Y+60	; 0x3c
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <LCD_Init+0xdc>
    307c:	9c af       	std	Y+60, r25	; 0x3c
    307e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	8d ad       	ldd	r24, Y+61	; 0x3d
    3082:	9e ad       	ldd	r25, Y+62	; 0x3e
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	9e af       	std	Y+62, r25	; 0x3e
    3088:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308a:	8d ad       	ldd	r24, Y+61	; 0x3d
    308c:	9e ad       	ldd	r25, Y+62	; 0x3e
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	69 f7       	brne	.-38     	; 0x306c <LCD_Init+0xd0>
    3092:	16 c0       	rjmp	.+44     	; 0x30c0 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3094:	fe 01       	movw	r30, r28
    3096:	ff 96       	adiw	r30, 0x3f	; 63
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9e af       	std	Y+62, r25	; 0x3e
    30aa:	8d af       	std	Y+61, r24	; 0x3d
    30ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    30b0:	9a af       	std	Y+58, r25	; 0x3a
    30b2:	89 af       	std	Y+57, r24	; 0x39
    30b4:	89 ad       	ldd	r24, Y+57	; 0x39
    30b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_Init+0x11c>
    30bc:	9a af       	std	Y+58, r25	; 0x3a
    30be:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    30c0:	88 e3       	ldi	r24, 0x38	; 56
    30c2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e8       	ldi	r26, 0x80	; 128
    30cc:	bf e3       	ldi	r27, 0x3F	; 63
    30ce:	8d ab       	std	Y+53, r24	; 0x35
    30d0:	9e ab       	std	Y+54, r25	; 0x36
    30d2:	af ab       	std	Y+55, r26	; 0x37
    30d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	6d a9       	ldd	r22, Y+53	; 0x35
    30d8:	7e a9       	ldd	r23, Y+54	; 0x36
    30da:	8f a9       	ldd	r24, Y+55	; 0x37
    30dc:	98 ad       	ldd	r25, Y+56	; 0x38
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	89 ab       	std	Y+49, r24	; 0x31
    30f0:	9a ab       	std	Y+50, r25	; 0x32
    30f2:	ab ab       	std	Y+51, r26	; 0x33
    30f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30f6:	69 a9       	ldd	r22, Y+49	; 0x31
    30f8:	7a a9       	ldd	r23, Y+50	; 0x32
    30fa:	8b a9       	ldd	r24, Y+51	; 0x33
    30fc:	9c a9       	ldd	r25, Y+52	; 0x34
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <LCD_Init+0x17c>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	98 ab       	std	Y+48, r25	; 0x30
    3114:	8f a7       	std	Y+47, r24	; 0x2f
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    3118:	69 a9       	ldd	r22, Y+49	; 0x31
    311a:	7a a9       	ldd	r23, Y+50	; 0x32
    311c:	8b a9       	ldd	r24, Y+51	; 0x33
    311e:	9c a9       	ldd	r25, Y+52	; 0x34
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	4c f5       	brge	.+82     	; 0x3182 <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	6d a9       	ldd	r22, Y+53	; 0x35
    3132:	7e a9       	ldd	r23, Y+54	; 0x36
    3134:	8f a9       	ldd	r24, Y+55	; 0x37
    3136:	98 ad       	ldd	r25, Y+56	; 0x38
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	98 ab       	std	Y+48, r25	; 0x30
    3156:	8f a7       	std	Y+47, r24	; 0x2f
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <LCD_Init+0x1dc>
    315a:	88 ec       	ldi	r24, 0xC8	; 200
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9e a7       	std	Y+46, r25	; 0x2e
    3160:	8d a7       	std	Y+45, r24	; 0x2d
    3162:	8d a5       	ldd	r24, Y+45	; 0x2d
    3164:	9e a5       	ldd	r25, Y+46	; 0x2e
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <LCD_Init+0x1ca>
    316a:	9e a7       	std	Y+46, r25	; 0x2e
    316c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3170:	98 a9       	ldd	r25, Y+48	; 0x30
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	98 ab       	std	Y+48, r25	; 0x30
    3176:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	8f a5       	ldd	r24, Y+47	; 0x2f
    317a:	98 a9       	ldd	r25, Y+48	; 0x30
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	69 f7       	brne	.-38     	; 0x315a <LCD_Init+0x1be>
    3180:	14 c0       	rjmp	.+40     	; 0x31aa <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	69 a9       	ldd	r22, Y+49	; 0x31
    3184:	7a a9       	ldd	r23, Y+50	; 0x32
    3186:	8b a9       	ldd	r24, Y+51	; 0x33
    3188:	9c a9       	ldd	r25, Y+52	; 0x34
    318a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	98 ab       	std	Y+48, r25	; 0x30
    3194:	8f a7       	std	Y+47, r24	; 0x2f
    3196:	8f a5       	ldd	r24, Y+47	; 0x2f
    3198:	98 a9       	ldd	r25, Y+48	; 0x30
    319a:	9c a7       	std	Y+44, r25	; 0x2c
    319c:	8b a7       	std	Y+43, r24	; 0x2b
    319e:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <LCD_Init+0x206>
    31a6:	9c a7       	std	Y+44, r25	; 0x2c
    31a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    31aa:	8c e0       	ldi	r24, 0x0C	; 12
    31ac:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e8       	ldi	r26, 0x80	; 128
    31b6:	bf e3       	ldi	r27, 0x3F	; 63
    31b8:	8f a3       	std	Y+39, r24	; 0x27
    31ba:	98 a7       	std	Y+40, r25	; 0x28
    31bc:	a9 a7       	std	Y+41, r26	; 0x29
    31be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	6f a1       	ldd	r22, Y+39	; 0x27
    31c2:	78 a5       	ldd	r23, Y+40	; 0x28
    31c4:	89 a5       	ldd	r24, Y+41	; 0x29
    31c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	4a ef       	ldi	r20, 0xFA	; 250
    31ce:	54 e4       	ldi	r21, 0x44	; 68
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8b a3       	std	Y+35, r24	; 0x23
    31da:	9c a3       	std	Y+36, r25	; 0x24
    31dc:	ad a3       	std	Y+37, r26	; 0x25
    31de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e0:	6b a1       	ldd	r22, Y+35	; 0x23
    31e2:	7c a1       	ldd	r23, Y+36	; 0x24
    31e4:	8d a1       	ldd	r24, Y+37	; 0x25
    31e6:	9e a1       	ldd	r25, Y+38	; 0x26
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	2c f4       	brge	.+10     	; 0x3202 <LCD_Init+0x266>
		__ticks = 1;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	9a a3       	std	Y+34, r25	; 0x22
    31fe:	89 a3       	std	Y+33, r24	; 0x21
    3200:	3f c0       	rjmp	.+126    	; 0x3280 <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    3202:	6b a1       	ldd	r22, Y+35	; 0x23
    3204:	7c a1       	ldd	r23, Y+36	; 0x24
    3206:	8d a1       	ldd	r24, Y+37	; 0x25
    3208:	9e a1       	ldd	r25, Y+38	; 0x26
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	4c f5       	brge	.+82     	; 0x326c <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	6f a1       	ldd	r22, Y+39	; 0x27
    321c:	78 a5       	ldd	r23, Y+40	; 0x28
    321e:	89 a5       	ldd	r24, Y+41	; 0x29
    3220:	9a a5       	ldd	r25, Y+42	; 0x2a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e2       	ldi	r20, 0x20	; 32
    3228:	51 e4       	ldi	r21, 0x41	; 65
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9a a3       	std	Y+34, r25	; 0x22
    3240:	89 a3       	std	Y+33, r24	; 0x21
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <LCD_Init+0x2c6>
    3244:	88 ec       	ldi	r24, 0xC8	; 200
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	98 a3       	std	Y+32, r25	; 0x20
    324a:	8f 8f       	std	Y+31, r24	; 0x1f
    324c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    324e:	98 a1       	ldd	r25, Y+32	; 0x20
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <LCD_Init+0x2b4>
    3254:	98 a3       	std	Y+32, r25	; 0x20
    3256:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3258:	89 a1       	ldd	r24, Y+33	; 0x21
    325a:	9a a1       	ldd	r25, Y+34	; 0x22
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	9a a3       	std	Y+34, r25	; 0x22
    3260:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3262:	89 a1       	ldd	r24, Y+33	; 0x21
    3264:	9a a1       	ldd	r25, Y+34	; 0x22
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	69 f7       	brne	.-38     	; 0x3244 <LCD_Init+0x2a8>
    326a:	14 c0       	rjmp	.+40     	; 0x3294 <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326c:	6b a1       	ldd	r22, Y+35	; 0x23
    326e:	7c a1       	ldd	r23, Y+36	; 0x24
    3270:	8d a1       	ldd	r24, Y+37	; 0x25
    3272:	9e a1       	ldd	r25, Y+38	; 0x26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9a a3       	std	Y+34, r25	; 0x22
    327e:	89 a3       	std	Y+33, r24	; 0x21
    3280:	89 a1       	ldd	r24, Y+33	; 0x21
    3282:	9a a1       	ldd	r25, Y+34	; 0x22
    3284:	9e 8f       	std	Y+30, r25	; 0x1e
    3286:	8d 8f       	std	Y+29, r24	; 0x1d
    3288:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <LCD_Init+0x2f0>
    3290:	9e 8f       	std	Y+30, r25	; 0x1e
    3292:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a0 e0       	ldi	r26, 0x00	; 0
    32a0:	b0 e4       	ldi	r27, 0x40	; 64
    32a2:	89 8f       	std	Y+25, r24	; 0x19
    32a4:	9a 8f       	std	Y+26, r25	; 0x1a
    32a6:	ab 8f       	std	Y+27, r26	; 0x1b
    32a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32aa:	69 8d       	ldd	r22, Y+25	; 0x19
    32ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8d 8b       	std	Y+21, r24	; 0x15
    32c4:	9e 8b       	std	Y+22, r25	; 0x16
    32c6:	af 8b       	std	Y+23, r26	; 0x17
    32c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ca:	6d 89       	ldd	r22, Y+21	; 0x15
    32cc:	7e 89       	ldd	r23, Y+22	; 0x16
    32ce:	8f 89       	ldd	r24, Y+23	; 0x17
    32d0:	98 8d       	ldd	r25, Y+24	; 0x18
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	5f e3       	ldi	r21, 0x3F	; 63
    32da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32de:	88 23       	and	r24, r24
    32e0:	2c f4       	brge	.+10     	; 0x32ec <LCD_Init+0x350>
		__ticks = 1;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	9c 8b       	std	Y+20, r25	; 0x14
    32e8:	8b 8b       	std	Y+19, r24	; 0x13
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    32ec:	6d 89       	ldd	r22, Y+21	; 0x15
    32ee:	7e 89       	ldd	r23, Y+22	; 0x16
    32f0:	8f 89       	ldd	r24, Y+23	; 0x17
    32f2:	98 8d       	ldd	r25, Y+24	; 0x18
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	3f ef       	ldi	r19, 0xFF	; 255
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	57 e4       	ldi	r21, 0x47	; 71
    32fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	4c f5       	brge	.+82     	; 0x3356 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3304:	69 8d       	ldd	r22, Y+25	; 0x19
    3306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    330a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e2       	ldi	r20, 0x20	; 32
    3312:	51 e4       	ldi	r21, 0x41	; 65
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
    332c:	0f c0       	rjmp	.+30     	; 0x334c <LCD_Init+0x3b0>
    332e:	88 ec       	ldi	r24, 0xC8	; 200
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9a 8b       	std	Y+18, r25	; 0x12
    3334:	89 8b       	std	Y+17, r24	; 0x11
    3336:	89 89       	ldd	r24, Y+17	; 0x11
    3338:	9a 89       	ldd	r25, Y+18	; 0x12
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <LCD_Init+0x39e>
    333e:	9a 8b       	std	Y+18, r25	; 0x12
    3340:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	8b 89       	ldd	r24, Y+19	; 0x13
    3344:	9c 89       	ldd	r25, Y+20	; 0x14
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	9c 8b       	std	Y+20, r25	; 0x14
    334a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334c:	8b 89       	ldd	r24, Y+19	; 0x13
    334e:	9c 89       	ldd	r25, Y+20	; 0x14
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	69 f7       	brne	.-38     	; 0x332e <LCD_Init+0x392>
    3354:	14 c0       	rjmp	.+40     	; 0x337e <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3356:	6d 89       	ldd	r22, Y+21	; 0x15
    3358:	7e 89       	ldd	r23, Y+22	; 0x16
    335a:	8f 89       	ldd	r24, Y+23	; 0x17
    335c:	98 8d       	ldd	r25, Y+24	; 0x18
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
    336a:	8b 89       	ldd	r24, Y+19	; 0x13
    336c:	9c 89       	ldd	r25, Y+20	; 0x14
    336e:	98 8b       	std	Y+16, r25	; 0x10
    3370:	8f 87       	std	Y+15, r24	; 0x0f
    3372:	8f 85       	ldd	r24, Y+15	; 0x0f
    3374:	98 89       	ldd	r25, Y+16	; 0x10
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <LCD_Init+0x3da>
    337a:	98 8b       	std	Y+16, r25	; 0x10
    337c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    337e:	86 e0       	ldi	r24, 0x06	; 6
    3380:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e8       	ldi	r26, 0x80	; 128
    338a:	bf e3       	ldi	r27, 0x3F	; 63
    338c:	8b 87       	std	Y+11, r24	; 0x0b
    338e:	9c 87       	std	Y+12, r25	; 0x0c
    3390:	ad 87       	std	Y+13, r26	; 0x0d
    3392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	6b 85       	ldd	r22, Y+11	; 0x0b
    3396:	7c 85       	ldd	r23, Y+12	; 0x0c
    3398:	8d 85       	ldd	r24, Y+13	; 0x0d
    339a:	9e 85       	ldd	r25, Y+14	; 0x0e
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a ef       	ldi	r20, 0xFA	; 250
    33a2:	54 e4       	ldi	r21, 0x44	; 68
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	8f 83       	std	Y+7, r24	; 0x07
    33ae:	98 87       	std	Y+8, r25	; 0x08
    33b0:	a9 87       	std	Y+9, r26	; 0x09
    33b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b4:	6f 81       	ldd	r22, Y+7	; 0x07
    33b6:	78 85       	ldd	r23, Y+8	; 0x08
    33b8:	89 85       	ldd	r24, Y+9	; 0x09
    33ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c8:	88 23       	and	r24, r24
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <LCD_Init+0x43a>
		__ticks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
    33d4:	3f c0       	rjmp	.+126    	; 0x3454 <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    33d6:	6f 81       	ldd	r22, Y+7	; 0x07
    33d8:	78 85       	ldd	r23, Y+8	; 0x08
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	4c f5       	brge	.+82     	; 0x3440 <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <LCD_Init+0x49a>
    3418:	88 ec       	ldi	r24, 0xC8	; 200
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	9c 83       	std	Y+4, r25	; 0x04
    341e:	8b 83       	std	Y+3, r24	; 0x03
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	9c 81       	ldd	r25, Y+4	; 0x04
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <LCD_Init+0x488>
    3428:	9c 83       	std	Y+4, r25	; 0x04
    342a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	69 f7       	brne	.-38     	; 0x3418 <LCD_Init+0x47c>
    343e:	14 c0       	rjmp	.+40     	; 0x3468 <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LCD_Init+0x4c4>
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3468:	ca 5b       	subi	r28, 0xBA	; 186
    346a:	df 4f       	sbci	r29, 0xFF	; 255
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	08 95       	ret

00003480 <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	00 d0       	rcall	.+0      	; 0x3486 <LCD_SendString+0x6>
    3486:	0f 92       	push	r0
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	9b 83       	std	Y+3, r25	; 0x03
    348e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    3490:	19 82       	std	Y+1, r1	; 0x01
    3492:	0e c0       	rjmp	.+28     	; 0x34b0 <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	fc 01       	movw	r30, r24
    34a0:	e2 0f       	add	r30, r18
    34a2:	f3 1f       	adc	r31, r19
    34a4:	80 81       	ld	r24, Z
    34a6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_SendData>
		Counter++;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	8f 5f       	subi	r24, 0xFF	; 255
    34ae:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ba:	fc 01       	movw	r30, r24
    34bc:	e2 0f       	add	r30, r18
    34be:	f3 1f       	adc	r31, r19
    34c0:	80 81       	ld	r24, Z
    34c2:	88 23       	and	r24, r24
    34c4:	39 f7       	brne	.-50     	; 0x3494 <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	00 d0       	rcall	.+0      	; 0x34d8 <LCD_GoToXY+0x6>
    34d8:	00 d0       	rcall	.+0      	; 0x34da <LCD_GoToXY+0x8>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	8a 83       	std	Y+2, r24	; 0x02
    34e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	88 23       	and	r24, r24
    34e8:	19 f0       	breq	.+6      	; 0x34f0 <LCD_GoToXY+0x1e>
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	e1 f4       	brne	.+56     	; 0x3528 <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	80 31       	cpi	r24, 0x10	; 16
    34f4:	a8 f4       	brcc	.+42     	; 0x3520 <LCD_GoToXY+0x4e>
		{
			switch(Row)
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	3d 83       	std	Y+5, r19	; 0x05
    34fe:	2c 83       	std	Y+4, r18	; 0x04
    3500:	8c 81       	ldd	r24, Y+4	; 0x04
    3502:	9d 81       	ldd	r25, Y+5	; 0x05
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	31 f0       	breq	.+12     	; 0x3514 <LCD_GoToXY+0x42>
    3508:	2c 81       	ldd	r18, Y+4	; 0x04
    350a:	3d 81       	ldd	r19, Y+5	; 0x05
    350c:	21 30       	cpi	r18, 0x01	; 1
    350e:	31 05       	cpc	r19, r1
    3510:	21 f0       	breq	.+8      	; 0x351a <LCD_GoToXY+0x48>
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	80 5c       	subi	r24, 0xC0	; 192
    351e:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	80 58       	subi	r24, 0x80	; 128
    3524:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
	}
}
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	2e 97       	sbiw	r28, 0x0e	; 14
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_SendCommand>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	a0 e0       	ldi	r26, 0x00	; 0
    3558:	b0 e4       	ldi	r27, 0x40	; 64
    355a:	8b 87       	std	Y+11, r24	; 0x0b
    355c:	9c 87       	std	Y+12, r25	; 0x0c
    355e:	ad 87       	std	Y+13, r26	; 0x0d
    3560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3562:	6b 85       	ldd	r22, Y+11	; 0x0b
    3564:	7c 85       	ldd	r23, Y+12	; 0x0c
    3566:	8d 85       	ldd	r24, Y+13	; 0x0d
    3568:	9e 85       	ldd	r25, Y+14	; 0x0e
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4a ef       	ldi	r20, 0xFA	; 250
    3570:	54 e4       	ldi	r21, 0x44	; 68
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	8f 83       	std	Y+7, r24	; 0x07
    357c:	98 87       	std	Y+8, r25	; 0x08
    357e:	a9 87       	std	Y+9, r26	; 0x09
    3580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3582:	6f 81       	ldd	r22, Y+7	; 0x07
    3584:	78 85       	ldd	r23, Y+8	; 0x08
    3586:	89 85       	ldd	r24, Y+9	; 0x09
    3588:	9a 85       	ldd	r25, Y+10	; 0x0a
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5f e3       	ldi	r21, 0x3F	; 63
    3592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3596:	88 23       	and	r24, r24
    3598:	2c f4       	brge	.+10     	; 0x35a4 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
    35a2:	3f c0       	rjmp	.+126    	; 0x3622 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	3f ef       	ldi	r19, 0xFF	; 255
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	57 e4       	ldi	r21, 0x47	; 71
    35b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	4c f5       	brge	.+82     	; 0x360e <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35be:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e2       	ldi	r20, 0x20	; 32
    35ca:	51 e4       	ldi	r21, 0x41	; 65
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	0f c0       	rjmp	.+30     	; 0x3604 <LCD_ClearDisplay+0xcc>
    35e6:	88 ec       	ldi	r24, 0xC8	; 200
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	9c 83       	std	Y+4, r25	; 0x04
    35ec:	8b 83       	std	Y+3, r24	; 0x03
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <LCD_ClearDisplay+0xba>
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	69 f7       	brne	.-38     	; 0x35e6 <LCD_ClearDisplay+0xae>
    360c:	14 c0       	rjmp	.+40     	; 0x3636 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <LCD_ClearDisplay+0xf6>
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3636:	2e 96       	adiw	r28, 0x0e	; 14
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <LCD_DisplayNumber>:

void LCD_DisplayNumber(u32 Number)
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	00 d0       	rcall	.+0      	; 0x364e <LCD_DisplayNumber+0x6>
    364e:	00 d0       	rcall	.+0      	; 0x3650 <LCD_DisplayNumber+0x8>
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	89 83       	std	Y+1, r24	; 0x01
	if(Number == 0)
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	31 f5       	brne	.+76     	; 0x36b4 <LCD_DisplayNumber+0x6c>
	{
		LCD_SendData('0');
    3668:	80 e3       	ldi	r24, 0x30	; 48
    366a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_SendData>
    366e:	22 c0       	rjmp	.+68     	; 0x36b4 <LCD_DisplayNumber+0x6c>
	}

	while(Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	9c 01       	movw	r18, r24
    3676:	22 0f       	add	r18, r18
    3678:	33 1f       	adc	r19, r19
    367a:	c9 01       	movw	r24, r18
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	f9 01       	movw	r30, r18
    3686:	e8 0f       	add	r30, r24
    3688:	f9 1f       	adc	r31, r25
    368a:	8b 81       	ldd	r24, Y+3	; 0x03
    368c:	9c 81       	ldd	r25, Y+4	; 0x04
    368e:	2a e0       	ldi	r18, 0x0A	; 10
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	b9 01       	movw	r22, r18
    3694:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__udivmodhi4>
    3698:	8e 0f       	add	r24, r30
    369a:	9f 1f       	adc	r25, r31
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
		Number = Number /10;
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	9c 81       	ldd	r25, Y+4	; 0x04
    36a4:	2a e0       	ldi	r18, 0x0A	; 10
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	b9 01       	movw	r22, r18
    36aa:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__udivmodhi4>
    36ae:	cb 01       	movw	r24, r22
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
	if(Number == 0)
	{
		LCD_SendData('0');
	}

	while(Number != 0)
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	d1 f6       	brne	.-76     	; 0x3670 <LCD_DisplayNumber+0x28>
    36bc:	14 c0       	rjmp	.+40     	; 0x36e6 <LCD_DisplayNumber+0x9e>
		Number = Number /10;
	}

	while(ReversedNum != 1)
	{
		LCD_SendData( (ReversedNum%10) + 48);
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	2a e0       	ldi	r18, 0x0A	; 10
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	b9 01       	movw	r22, r18
    36c8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__udivmodhi4>
    36cc:	80 5d       	subi	r24, 0xD0	; 208
    36ce:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_SendData>
		ReversedNum= ReversedNum/10;
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	2a e0       	ldi	r18, 0x0A	; 10
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	b9 01       	movw	r22, r18
    36dc:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__udivmodhi4>
    36e0:	cb 01       	movw	r24, r22
    36e2:	9a 83       	std	Y+2, r25	; 0x02
    36e4:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
		Number = Number /10;
	}

	while(ReversedNum != 1)
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	91 05       	cpc	r25, r1
    36ee:	39 f7       	brne	.-50     	; 0x36be <LCD_DisplayNumber+0x76>
	{
		LCD_SendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <Keypad_Init>:
						{'C',0,'=','#'}
					  };


u8 Keypad_Init()
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT , 0xF0);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	60 ef       	ldi	r22, 0xF0	; 240
    370c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	6f ef       	ldi	r22, 0xFF	; 255
    3714:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_vSetPortVal>
}
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <KeypadGetKey>:

u8 KeypadGetKey()
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	6f 97       	sbiw	r28, 0x1f	; 31
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
	for(u8 Col=0; Col <COLs_NO; Col++)
    3734:	1e 8e       	std	Y+30, r1	; 0x1e
    3736:	28 c1       	rjmp	.+592    	; 0x3988 <KeypadGetKey+0x268>
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    3738:	8e 8d       	ldd	r24, Y+30	; 0x1e
    373a:	98 2f       	mov	r25, r24
    373c:	9c 5f       	subi	r25, 0xFC	; 252
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	69 2f       	mov	r22, r25
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3748:	1d 8e       	std	Y+29, r1	; 0x1d
    374a:	0f c1       	rjmp	.+542    	; 0x396a <KeypadGetKey+0x24a>
		{
			if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0 )
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3750:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <MDIO_GetPinVal>
    3754:	88 23       	and	r24, r24
    3756:	09 f0       	breq	.+2      	; 0x375a <KeypadGetKey+0x3a>
    3758:	05 c1       	rjmp	.+522    	; 0x3964 <KeypadGetKey+0x244>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a8 e4       	ldi	r26, 0x48	; 72
    3760:	b2 e4       	ldi	r27, 0x42	; 66
    3762:	89 8f       	std	Y+25, r24	; 0x19
    3764:	9a 8f       	std	Y+26, r25	; 0x1a
    3766:	ab 8f       	std	Y+27, r26	; 0x1b
    3768:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	69 8d       	ldd	r22, Y+25	; 0x19
    376c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    376e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a ef       	ldi	r20, 0xFA	; 250
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	8d 8b       	std	Y+21, r24	; 0x15
    3784:	9e 8b       	std	Y+22, r25	; 0x16
    3786:	af 8b       	std	Y+23, r26	; 0x17
    3788:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    378a:	6d 89       	ldd	r22, Y+21	; 0x15
    378c:	7e 89       	ldd	r23, Y+22	; 0x16
    378e:	8f 89       	ldd	r24, Y+23	; 0x17
    3790:	98 8d       	ldd	r25, Y+24	; 0x18
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <KeypadGetKey+0x8c>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9c 8b       	std	Y+20, r25	; 0x14
    37a8:	8b 8b       	std	Y+19, r24	; 0x13
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <KeypadGetKey+0x10a>
	else if (__tmp > 65535)
    37ac:	6d 89       	ldd	r22, Y+21	; 0x15
    37ae:	7e 89       	ldd	r23, Y+22	; 0x16
    37b0:	8f 89       	ldd	r24, Y+23	; 0x17
    37b2:	98 8d       	ldd	r25, Y+24	; 0x18
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <KeypadGetKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	69 8d       	ldd	r22, Y+25	; 0x19
    37c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9c 8b       	std	Y+20, r25	; 0x14
    37ea:	8b 8b       	std	Y+19, r24	; 0x13
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <KeypadGetKey+0xec>
    37ee:	88 ec       	ldi	r24, 0xC8	; 200
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9a 8b       	std	Y+18, r25	; 0x12
    37f4:	89 8b       	std	Y+17, r24	; 0x11
    37f6:	89 89       	ldd	r24, Y+17	; 0x11
    37f8:	9a 89       	ldd	r25, Y+18	; 0x12
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <KeypadGetKey+0xda>
    37fe:	9a 8b       	std	Y+18, r25	; 0x12
    3800:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	8b 89       	ldd	r24, Y+19	; 0x13
    3804:	9c 89       	ldd	r25, Y+20	; 0x14
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9c 8b       	std	Y+20, r25	; 0x14
    380a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	8b 89       	ldd	r24, Y+19	; 0x13
    380e:	9c 89       	ldd	r25, Y+20	; 0x14
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <KeypadGetKey+0xce>
    3814:	14 c0       	rjmp	.+40     	; 0x383e <KeypadGetKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	6d 89       	ldd	r22, Y+21	; 0x15
    3818:	7e 89       	ldd	r23, Y+22	; 0x16
    381a:	8f 89       	ldd	r24, Y+23	; 0x17
    381c:	98 8d       	ldd	r25, Y+24	; 0x18
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9c 8b       	std	Y+20, r25	; 0x14
    3828:	8b 8b       	std	Y+19, r24	; 0x13
    382a:	8b 89       	ldd	r24, Y+19	; 0x13
    382c:	9c 89       	ldd	r25, Y+20	; 0x14
    382e:	98 8b       	std	Y+16, r25	; 0x10
    3830:	8f 87       	std	Y+15, r24	; 0x0f
    3832:	8f 85       	ldd	r24, Y+15	; 0x0f
    3834:	98 89       	ldd	r25, Y+16	; 0x10
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <KeypadGetKey+0x116>
    383a:	98 8b       	std	Y+16, r25	; 0x10
    383c:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50);
				if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3842:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <MDIO_GetPinVal>
    3846:	88 23       	and	r24, r24
    3848:	09 f0       	breq	.+2      	; 0x384c <KeypadGetKey+0x12c>
    384a:	8c c0       	rjmp	.+280    	; 0x3964 <KeypadGetKey+0x244>
				{
					while(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3850:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <MDIO_GetPinVal>
    3854:	88 23       	and	r24, r24
    3856:	09 f0       	breq	.+2      	; 0x385a <KeypadGetKey+0x13a>
    3858:	85 c0       	rjmp	.+266    	; 0x3964 <KeypadGetKey+0x244>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a8 e4       	ldi	r26, 0x48	; 72
    3860:	b2 e4       	ldi	r27, 0x42	; 66
    3862:	8b 87       	std	Y+11, r24	; 0x0b
    3864:	9c 87       	std	Y+12, r25	; 0x0c
    3866:	ad 87       	std	Y+13, r26	; 0x0d
    3868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	6b 85       	ldd	r22, Y+11	; 0x0b
    386c:	7c 85       	ldd	r23, Y+12	; 0x0c
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8f 83       	std	Y+7, r24	; 0x07
    3884:	98 87       	std	Y+8, r25	; 0x08
    3886:	a9 87       	std	Y+9, r26	; 0x09
    3888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <KeypadGetKey+0x18c>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <KeypadGetKey+0x20a>
	else if (__tmp > 65535)
    38ac:	6f 81       	ldd	r22, Y+7	; 0x07
    38ae:	78 85       	ldd	r23, Y+8	; 0x08
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <KeypadGetKey+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <KeypadGetKey+0x1ec>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9c 83       	std	Y+4, r25	; 0x04
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <KeypadGetKey+0x1da>
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	9e 81       	ldd	r25, Y+6	; 0x06
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <KeypadGetKey+0x1ce>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <KeypadGetKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	6f 81       	ldd	r22, Y+7	; 0x07
    3918:	78 85       	ldd	r23, Y+8	; 0x08
    391a:	89 85       	ldd	r24, Y+9	; 0x09
    391c:	9a 85       	ldd	r25, Y+10	; 0x0a
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	9e 81       	ldd	r25, Y+6	; 0x06
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <KeypadGetKey+0x216>
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						return KeypadMap[Row][Col];
    393e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3940:	48 2f       	mov	r20, r24
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3946:	28 2f       	mov	r18, r24
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	ca 01       	movw	r24, r20
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	82 0f       	add	r24, r18
    3956:	93 1f       	adc	r25, r19
    3958:	fc 01       	movw	r30, r24
    395a:	e8 59       	subi	r30, 0x98	; 152
    395c:	fe 4f       	sbci	r31, 0xFE	; 254
    395e:	80 81       	ld	r24, Z
    3960:	8f 8f       	std	Y+31, r24	; 0x1f
    3962:	18 c0       	rjmp	.+48     	; 0x3994 <KeypadGetKey+0x274>
	for(u8 Col=0; Col <COLs_NO; Col++)
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3966:	8f 5f       	subi	r24, 0xFF	; 255
    3968:	8d 8f       	std	Y+29, r24	; 0x1d
    396a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    396c:	84 30       	cpi	r24, 0x04	; 4
    396e:	08 f4       	brcc	.+2      	; 0x3972 <KeypadGetKey+0x252>
    3970:	ed ce       	rjmp	.-550    	; 0x374c <KeypadGetKey+0x2c>
				}
//				return KeypadMap[Row][Col];
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    3972:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3974:	98 2f       	mov	r25, r24
    3976:	9c 5f       	subi	r25, 0xFC	; 252
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	69 2f       	mov	r22, r25
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
}

u8 KeypadGetKey()
{
	for(u8 Col=0; Col <COLs_NO; Col++)
    3982:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3984:	8f 5f       	subi	r24, 0xFF	; 255
    3986:	8e 8f       	std	Y+30, r24	; 0x1e
    3988:	8e 8d       	ldd	r24, Y+30	; 0x1e
    398a:	84 30       	cpi	r24, 0x04	; 4
    398c:	08 f4       	brcc	.+2      	; 0x3990 <KeypadGetKey+0x270>
    398e:	d4 ce       	rjmp	.-600    	; 0x3738 <KeypadGetKey+0x18>
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return NO_KEY_PRESSED;
    3990:	8f ef       	ldi	r24, 0xFF	; 255
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
    3994:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3996:	6f 96       	adiw	r28, 0x1f	; 31
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <__udivmodhi4>:
    39a8:	aa 1b       	sub	r26, r26
    39aa:	bb 1b       	sub	r27, r27
    39ac:	51 e1       	ldi	r21, 0x11	; 17
    39ae:	07 c0       	rjmp	.+14     	; 0x39be <__udivmodhi4_ep>

000039b0 <__udivmodhi4_loop>:
    39b0:	aa 1f       	adc	r26, r26
    39b2:	bb 1f       	adc	r27, r27
    39b4:	a6 17       	cp	r26, r22
    39b6:	b7 07       	cpc	r27, r23
    39b8:	10 f0       	brcs	.+4      	; 0x39be <__udivmodhi4_ep>
    39ba:	a6 1b       	sub	r26, r22
    39bc:	b7 0b       	sbc	r27, r23

000039be <__udivmodhi4_ep>:
    39be:	88 1f       	adc	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	5a 95       	dec	r21
    39c4:	a9 f7       	brne	.-22     	; 0x39b0 <__udivmodhi4_loop>
    39c6:	80 95       	com	r24
    39c8:	90 95       	com	r25
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	08 95       	ret

000039d0 <__prologue_saves__>:
    39d0:	2f 92       	push	r2
    39d2:	3f 92       	push	r3
    39d4:	4f 92       	push	r4
    39d6:	5f 92       	push	r5
    39d8:	6f 92       	push	r6
    39da:	7f 92       	push	r7
    39dc:	8f 92       	push	r8
    39de:	9f 92       	push	r9
    39e0:	af 92       	push	r10
    39e2:	bf 92       	push	r11
    39e4:	cf 92       	push	r12
    39e6:	df 92       	push	r13
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	ca 1b       	sub	r28, r26
    39fa:	db 0b       	sbc	r29, r27
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	09 94       	ijmp

00003a08 <__epilogue_restores__>:
    3a08:	2a 88       	ldd	r2, Y+18	; 0x12
    3a0a:	39 88       	ldd	r3, Y+17	; 0x11
    3a0c:	48 88       	ldd	r4, Y+16	; 0x10
    3a0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a1e:	df 80       	ldd	r13, Y+7	; 0x07
    3a20:	ee 80       	ldd	r14, Y+6	; 0x06
    3a22:	fd 80       	ldd	r15, Y+5	; 0x05
    3a24:	0c 81       	ldd	r16, Y+4	; 0x04
    3a26:	1b 81       	ldd	r17, Y+3	; 0x03
    3a28:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2c:	ce 0f       	add	r28, r30
    3a2e:	d1 1d       	adc	r29, r1
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	ed 01       	movw	r28, r26
    3a3c:	08 95       	ret

00003a3e <_exit>:
    3a3e:	f8 94       	cli

00003a40 <__stop_program>:
    3a40:	ff cf       	rjmp	.-2      	; 0x3a40 <__stop_program>


ITI_Day20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003afa  00003b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080018c  0080018c  00003cba  2**0
                  ALLOC
  3 .stab         00003bdc  00000000  00000000  00003cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000184d  00000000  00000000  00007898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000090e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00009265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000da19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__vector_10>
      2c:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:

#define F_CPU 8000000UL


void main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62

	// Master
	while(1)
	{
		MDIO_vSetPinDir(DIO_PORTB , PIN5 , DIO_OUTPUT);
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>
		MDIO_vSetPinDir(DIO_PORTB , PIN6 , DIO_INPUT);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	66 e0       	ldi	r22, 0x06	; 6
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>
		MDIO_vSetPinDir(DIO_PORTB , PIN7 , DIO_OUTPUT);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	67 e0       	ldi	r22, 0x07	; 7
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>

		// Init
		LCD_InitPortDir();
     cfe:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_InitPortDir>
		LCD_Init();
     d02:	0e 94 2a 18 	call	0x3054	; 0x3054 <LCD_Init>
		SPI_vInit(SPI_MASTER_MODE);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 77 09 	call	0x12ee	; 0x12ee <SPI_vInit>

		// Send
		u8 Data = SPI_u8DataSendReceive ('A');
     d0c:	81 e4       	ldi	r24, 0x41	; 65
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 c7 09 	call	0x138e	; 0x138e <SPI_u8DataSendReceive>
     d14:	89 83       	std	Y+1, r24	; 0x01
		LCD_SendData(Data);
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_SendData>
     d1c:	ff cf       	rjmp	.-2      	; 0xd1c <main+0x46>

00000d1e <WDT_vEnable>:
#include "MCAL/WDT/WDT_Interface.h"
#include "MCAL/WDT/WDT_Private.h"
#include "MCAL/WDT/WDT_Cfg.h"

void WDT_vEnable(void)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR , WDTCR_WDE);
     d26:	a1 e4       	ldi	r26, 0x41	; 65
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e1 e4       	ldi	r30, 0x41	; 65
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 60       	ori	r24, 0x08	; 8
     d32:	8c 93       	st	X, r24
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <WDT_vDisable>:

void WDT_vDisable(void)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
     d42:	e1 e4       	ldi	r30, 0x41	; 65
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	88 e1       	ldi	r24, 0x18	; 24
     d48:	80 83       	st	Z, r24
	WDTCR = 0;
     d4a:	e1 e4       	ldi	r30, 0x41	; 65
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	10 82       	st	Z, r1
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <WDT_vSleep>:

void WDT_vSleep(u8 Copy_u8SleepCycle)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepCycle < 8)
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	88 30       	cpi	r24, 0x08	; 8
     d66:	78 f4       	brcc	.+30     	; 0xd86 <WDT_vSleep+0x30>
	{
		WDTCR &=11111000;
     d68:	a1 e4       	ldi	r26, 0x41	; 65
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e1 e4       	ldi	r30, 0x41	; 65
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	88 75       	andi	r24, 0x58	; 88
     d74:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepCycle;
     d76:	a1 e4       	ldi	r26, 0x41	; 65
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e4       	ldi	r30, 0x41	; 65
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	90 81       	ld	r25, Z
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	89 2b       	or	r24, r25
     d84:	8c 93       	st	X, r24

	}
}
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <USART_vInit>:
#include "MCAL/UART/UART_Private.h"
#include "MCAL/UART/UART_Cfg.h"


void USART_vInit(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62

	u8 Local_UCSRC=0;
     d98:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_URSEL);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == Asynchronous
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMSEL);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 7b       	andi	r24, 0xBF	; 191
     da4:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Wrong Config of UART_MODE"
#endif

#if USART_PARITY_MODE == EVEN_PARITY
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UPM1);
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	8f 7e       	andi	r24, 0xEF	; 239
     db0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
#else
#endif

#if USART_STOP_MODE == STOP_1BIT
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_USBS);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	87 7f       	andi	r24, 0xF7	; 247
     db6:	89 83       	std	Y+1, r24	; 0x01

#else
#endif

	// Set Character Frame Size to 8 bit
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ0);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ1);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	89 83       	std	Y+1, r24	; 0x01

	UCSRC_UBRRH = Local_UCSRC;
     dc4:	e0 e4       	ldi	r30, 0x40	; 64
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	80 83       	st	Z, r24

	// Set Baud Rate 9600
	UBRRL = BAUD_RATE_9600;
     dcc:	e9 e2       	ldi	r30, 0x29	; 41
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	83 e3       	ldi	r24, 0x33	; 51
     dd2:	80 83       	st	Z, r24

	SET_BIT(UCSRB , UCSRB_RXEN);
     dd4:	aa e2       	ldi	r26, 0x2A	; 42
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ea e2       	ldi	r30, 0x2A	; 42
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 61       	ori	r24, 0x10	; 16
     de0:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
     de2:	aa e2       	ldi	r26, 0x2A	; 42
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ea e2       	ldi	r30, 0x2A	; 42
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	8c 93       	st	X, r24

}
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <USART_POLL_vSendData>:
void USART_POLL_vSendData(const u8 Data)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
	// Send 1 Byte of data == 8 Bit
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     e04:	eb e2       	ldi	r30, 0x2B	; 43
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	82 95       	swap	r24
     e0c:	86 95       	lsr	r24
     e0e:	87 70       	andi	r24, 0x07	; 7
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	90 70       	andi	r25, 0x00	; 0
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a1 f3       	breq	.-24     	; 0xe04 <USART_POLL_vSendData+0xc>
	UDR = Data;
     e1c:	ec e2       	ldi	r30, 0x2C	; 44
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	80 83       	st	Z, r24

}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <USART_POLL_vSendString>:
void USART_POLL_vSendString(const u8* Data)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <USART_POLL_vSendString+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <USART_POLL_vSendString+0x26>
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
	{
		USART_POLL_vSendData(*Data++);
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	20 81       	ld	r18, Z
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	82 2f       	mov	r24, r18
     e4e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <USART_POLL_vSendData>
	//	while(Data[Counter] != '\0')
	//	{
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	81 f7       	brne	.-32     	; 0xe3c <USART_POLL_vSendString+0x10>
	{
		USART_POLL_vSendData(*Data++);
	}
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <USART_POLL_vReceiveData>:
u8 USART_POLL_vReceiveData(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
     e6e:	eb e2       	ldi	r30, 0x2B	; 43
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	dc f7       	brge	.-10     	; 0xe6e <USART_POLL_vReceiveData+0x8>
	return UDR;
     e78:	ec e2       	ldi	r30, 0x2C	; 44
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z

}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <USART_POLL_vReceiveString>:
void USART_POLL_vReceiveString(u8 Counter , u8* Data)
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <USART_POLL_vReceiveString+0xa>
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <USART_POLL_vReceiveString+0xc>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	8a 83       	std	Y+2, r24	; 0x02
     e96:	7c 83       	std	Y+4, r23	; 0x04
     e98:	6b 83       	std	Y+3, r22	; 0x03
	//	{
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
     e9a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ;i < Counter;i++)
     e9c:	19 82       	std	Y+1, r1	; 0x01
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <USART_POLL_vReceiveString+0x3a>
	{
		Data[i] = USART_POLL_vReceiveData();
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	8c 01       	movw	r16, r24
     eac:	02 0f       	add	r16, r18
     eae:	13 1f       	adc	r17, r19
     eb0:	0e 94 33 07 	call	0xe66	; 0xe66 <USART_POLL_vReceiveData>
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 83       	st	Z, r24
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
	for(i=0 ;i < Counter;i++)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	99 81       	ldd	r25, Y+1	; 0x01
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	98 17       	cp	r25, r24
     ec4:	68 f3       	brcs	.-38     	; 0xea0 <USART_POLL_vReceiveString+0x1c>
	{
		Data[i] = USART_POLL_vReceiveData();
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <TIMER0_vInit>:

static void(*Global_pvOVFIntFunc)(void)= NULL;
static void(*Global_pvCTCIntFunc)(void)= NULL;

void TIMER0_vInit(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
	SET_BIT(TCCR0 , TCCR0_WGM01);

#elif TIMER0_MODE == FAST_PWM_MODE
	SET_BIT(TCCR0 , TCCR0_WGM00);
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	8c 93       	st	X, r24

	// clear on compare set on top
	CLR_BIT(TCCR0 , TCCR0_COM00);
     efc:	a3 e5       	ldi	r26, 0x53	; 83
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e5       	ldi	r30, 0x53	; 83
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 7e       	andi	r24, 0xEF	; 239
     f08:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01);
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 62       	ori	r24, 0x20	; 32
     f16:	8c 93       	st	X, r24

#error "Select The Timer Mode "

#endif
	// Set Prescaler
	TCCR0 &=0b11111000; //Bit Clearing
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 7f       	andi	r24, 0xF8	; 248
     f24:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_PRESCALER;
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	82 60       	ori	r24, 0x02	; 2
     f32:	8c 93       	st	X, r24

}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <TIMER0_vDeinit>:

void TIMER0_vDeinit(void)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     f42:	e3 e5       	ldi	r30, 0x53	; 83
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	10 82       	st	Z, r1
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <TIMER0_u8SetOVFCallBack>:

u8 TIMER0_u8SetOVFCallBack(void (*pvCallBackFunc)(void))
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <TIMER0_u8SetOVFCallBack+0x6>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9b 83       	std	Y+3, r25	; 0x03
     f5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status = OK;
     f5e:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	9b 81       	ldd	r25, Y+3	; 0x03
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	39 f0       	breq	.+14     	; 0xf76 <TIMER0_u8SetOVFCallBack+0x28>
	{
		Global_pvOVFIntFunc=pvCallBackFunc;
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	90 93 8d 01 	sts	0x018D, r25
     f70:	80 93 8c 01 	sts	0x018C, r24
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <TIMER0_u8SetOVFCallBack+0x2c>
	}
	else
	{
		Local_Status = NOK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     f88:	1f 92       	push	r1
     f8a:	0f 92       	push	r0
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	0f 92       	push	r0
     f90:	11 24       	eor	r1, r1
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
	Global_pvCTCIntFunc();
     fb2:	e0 91 8e 01 	lds	r30, 0x018E
     fb6:	f0 91 8f 01 	lds	r31, 0x018F
     fba:	09 95       	icall
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	Global_pvOVFIntFunc();
    100c:	e0 91 8c 01 	lds	r30, 0x018C
    1010:	f0 91 8d 01 	lds	r31, 0x018D
    1014:	09 95       	icall
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <TIMER0_vSetTimerValue>:

void TIMER0_vSetTimerValue(u8 Copy_u8Value)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    1048:	e2 e5       	ldi	r30, 0x52	; 82
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 83       	st	Z, r24
}
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <TIMER0_vCTCTimerValue>:


void TIMER0_vCTCTimerValue(u8 Copy_u8Value)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Value;
    1064:	ec e5       	ldi	r30, 0x5C	; 92
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	80 83       	st	Z, r24
}
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TIMER0_vOVFIntEnableDisable>:

void TIMER0_vOVFIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	41 f4       	brne	.+16     	; 0x1096 <TIMER0_vOVFIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_TOIE0);
    1086:	a9 e5       	ldi	r26, 0x59	; 89
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e9 e5       	ldi	r30, 0x59	; 89
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	8c 93       	st	X, r24
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <TIMER0_vOVFIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_TOIE0);
    1096:	a9 e5       	ldi	r26, 0x59	; 89
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e9 e5       	ldi	r30, 0x59	; 89
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8e 7f       	andi	r24, 0xFE	; 254
    10a2:	8c 93       	st	X, r24
	}
}
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TIMER0_vCTCIntEnableDisable>:
void TIMER0_vCTCIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	41 f4       	brne	.+16     	; 0x10ce <TIMER0_vCTCIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_OCIE0);
    10be:	a9 e5       	ldi	r26, 0x59	; 89
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e9 e5       	ldi	r30, 0x59	; 89
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	82 60       	ori	r24, 0x02	; 2
    10ca:	8c 93       	st	X, r24
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <TIMER0_vCTCIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_OCIE0);
    10ce:	a9 e5       	ldi	r26, 0x59	; 89
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e9 e5       	ldi	r30, 0x59	; 89
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8d 7f       	andi	r24, 0xFD	; 253
    10da:	8c 93       	st	X, r24
	}
}
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <TIMER0_u8SetCTCCallBack>:
u8 TIMER0_u8SetCTCCallBack(void (*pvCallBackFunc)(void))
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <TIMER0_u8SetCTCCallBack+0x6>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status=OK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	9b 81       	ldd	r25, Y+3	; 0x03
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	41 f0       	breq	.+16     	; 0x110e <TIMER0_u8SetCTCCallBack+0x2a>
	{
		Global_pvCTCIntFunc = pvCallBackFunc;
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	90 93 8f 01 	sts	0x018F, r25
    1106:	80 93 8e 01 	sts	0x018E, r24
		Local_Status=OK;
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <TIMER0_u8SetCTCCallBack+0x2e>
	}
	else
	{
		Local_Status =NOK;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIMER1_vInit>:

void TIMER1_vInit(void)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    1128:	af e4       	ldi	r26, 0x4F	; 79
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ef e4       	ldi	r30, 0x4F	; 79
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8e 7f       	andi	r24, 0xFE	; 254
    1134:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
    1136:	af e4       	ldi	r26, 0x4F	; 79
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ef e4       	ldi	r30, 0x4F	; 79
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
    1144:	ae e4       	ldi	r26, 0x4E	; 78
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ee e4       	ldi	r30, 0x4E	; 78
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 61       	ori	r24, 0x10	; 16
    115e:	8c 93       	st	X, r24

	// Set on Top , Clear on CTC
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    1160:	af e4       	ldi	r26, 0x4F	; 79
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ef e4       	ldi	r30, 0x4F	; 79
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8f 7b       	andi	r24, 0xBF	; 191
    116c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
    116e:	af e4       	ldi	r26, 0x4F	; 79
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ef e4       	ldi	r30, 0x4F	; 79
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	80 68       	ori	r24, 0x80	; 128
    117a:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    117c:	ae e4       	ldi	r26, 0x4E	; 78
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ee e4       	ldi	r30, 0x4E	; 78
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 7f       	andi	r24, 0xF8	; 248
    1188:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    118a:	ae e4       	ldi	r26, 0x4E	; 78
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ee e4       	ldi	r30, 0x4E	; 78
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	8c 93       	st	X, r24

	// Disable INT
	TIMSK &=0b110000011;
    1198:	a9 e5       	ldi	r26, 0x59	; 89
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e9 e5       	ldi	r30, 0x59	; 89
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	83 78       	andi	r24, 0x83	; 131
    11a4:	8c 93       	st	X, r24
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <TIMER1_vICUInit>:

void TIMER1_vICUInit(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	// Normal Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    11b4:	af e4       	ldi	r26, 0x4F	; 79
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ef e4       	ldi	r30, 0x4F	; 79
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8e 7f       	andi	r24, 0xFE	; 254
    11c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    11c2:	af e4       	ldi	r26, 0x4F	; 79
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ef e4       	ldi	r30, 0x4F	; 79
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8d 7f       	andi	r24, 0xFD	; 253
    11ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    11d0:	ae e4       	ldi	r26, 0x4E	; 78
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ee e4       	ldi	r30, 0x4E	; 78
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    11de:	ae e4       	ldi	r26, 0x4E	; 78
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ee e4       	ldi	r30, 0x4E	; 78
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8f 7e       	andi	r24, 0xEF	; 239
    11ea:	8c 93       	st	X, r24

	// Noise Cancel;
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    11ec:	ae e4       	ldi	r26, 0x4E	; 78
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ee e4       	ldi	r30, 0x4E	; 78
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 68       	ori	r24, 0x80	; 128
    11f8:	8c 93       	st	X, r24

	// Select ICU Edge
	SET_BIT(TCCR1B , TCCR1B_ICES1);
    11fa:	ae e4       	ldi	r26, 0x4E	; 78
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ee e4       	ldi	r30, 0x4E	; 78
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	8c 93       	st	X, r24

	// ICU Interrupt
	SET_BIT(TIMSK, TIMSK_TICIE1);
    1208:	a9 e5       	ldi	r26, 0x59	; 89
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e9 e5       	ldi	r30, 0x59	; 89
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    1216:	ae e4       	ldi	r26, 0x4E	; 78
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ee e4       	ldi	r30, 0x4E	; 78
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	88 7f       	andi	r24, 0xF8	; 248
    1222:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    1224:	ae e4       	ldi	r26, 0x4E	; 78
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ee e4       	ldi	r30, 0x4E	; 78
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	8c 93       	st	X, r24
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <TIMER1_u16ICRRead>:

u16 TIMER1_u16ICRRead(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1240:	e6 e4       	ldi	r30, 0x46	; 70
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <TIMER1_vSetTop>:

void TIMER1_vSetTop(u16 Copy_u16TopValue)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <TIMER1_vSetTop+0x6>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    125c:	e6 e4       	ldi	r30, 0x46	; 70
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <TIMER1_vSetCTC_A_value>:

void TIMER1_vSetCTC_A_value(u16 Copy_u16CTCValue)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TIMER1_vSetCTC_A_value+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCValue;
    1280:	ea e4       	ldi	r30, 0x4A	; 74
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	91 83       	std	Z+1, r25	; 0x01
    128a:	80 83       	st	Z, r24
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <TIMER1_vICUSelectingEdge>:

void TIMER1_vICUSelectingEdge(u8 Copy_u8EdgeValue)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8EdgeValue == ICU_RISING_EDGE)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	41 f4       	brne	.+16     	; 0x12b8 <TIMER1_vICUSelectingEdge+0x22>
	{
		// Select ICU Rising Edge
		SET_BIT(TCCR1B , TCCR1B_ICES1);
    12a8:	ae e4       	ldi	r26, 0x4E	; 78
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ee e4       	ldi	r30, 0x4E	; 78
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	80 64       	ori	r24, 0x40	; 64
    12b4:	8c 93       	st	X, r24
    12b6:	07 c0       	rjmp	.+14     	; 0x12c6 <TIMER1_vICUSelectingEdge+0x30>
	}
	else
	{
		// Select ICU Falling Edge
		CLR_BIT(TCCR1B , TCCR1B_ICES1);
    12b8:	ae e4       	ldi	r26, 0x4E	; 78
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ee e4       	ldi	r30, 0x4E	; 78
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	8c 93       	st	X, r24
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <TIMER1_vICUDeinit>:

void TIMER1_vICUDeinit(void)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    12d6:	ef e4       	ldi	r30, 0x4F	; 79
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1
	TCCR1B = 0;
    12dc:	ee e4       	ldi	r30, 0x4E	; 78
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	10 82       	st	Z, r1
	TIMSK = 0;
    12e2:	e9 e5       	ldi	r30, 0x59	; 89
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	10 82       	st	Z, r1
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <SPI_vInit>:
#include "SPI_Interface.h"
#include "SPI_Private.h"


void SPI_vInit(u8 Copy_u8SPIMode)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SPIMode == SPI_MASTER_MODE)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	88 23       	and	r24, r24
    12fe:	91 f5       	brne	.+100    	; 0x1364 <SPI_vInit+0x76>
	{
		// Set in Master Mode
		SET_BIT(SPCR , SPCR_MSTR);
    1300:	ad e2       	ldi	r26, 0x2D	; 45
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ed e2       	ldi	r30, 0x2D	; 45
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 61       	ori	r24, 0x10	; 16
    130c:	8c 93       	st	X, r24

		// Clock Polarity -> Rising
		CLR_BIT(SPCR , SPCR_CPOL);
    130e:	ad e2       	ldi	r26, 0x2D	; 45
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ed e2       	ldi	r30, 0x2D	; 45
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	8c 93       	st	X, r24

		// Clock Phase -> Sample
		CLR_BIT(SPCR , SPCR_CPHA);
    131c:	ad e2       	ldi	r26, 0x2D	; 45
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ed e2       	ldi	r30, 0x2D	; 45
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8b 7f       	andi	r24, 0xFB	; 251
    1328:	8c 93       	st	X, r24

		// Set Clock Prescaler -> 64
		CLR_BIT(SPCR , SPCR_SPR0);
    132a:	ad e2       	ldi	r26, 0x2D	; 45
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ed e2       	ldi	r30, 0x2D	; 45
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	8c 93       	st	X, r24
		SET_BIT(SPCR , SPCR_SPR1);
    1338:	ad e2       	ldi	r26, 0x2D	; 45
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ed e2       	ldi	r30, 0x2D	; 45
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X);
    1346:	ae e2       	ldi	r26, 0x2E	; 46
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e2       	ldi	r30, 0x2E	; 46
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8e 7f       	andi	r24, 0xFE	; 254
    1352:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    1354:	ad e2       	ldi	r26, 0x2D	; 45
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ed e2       	ldi	r30, 0x2D	; 45
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	80 64       	ori	r24, 0x40	; 64
    1360:	8c 93       	st	X, r24
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <SPI_vInit+0x98>
	}

	else if(Copy_u8SPIMode == SPI_SLAVE_MODE )
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	71 f4       	brne	.+28     	; 0x1386 <SPI_vInit+0x98>
	{
		// Set in Slave Mode
		CLR_BIT( SPCR , SPCR_MSTR);
    136a:	ad e2       	ldi	r26, 0x2D	; 45
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ed e2       	ldi	r30, 0x2D	; 45
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8f 7e       	andi	r24, 0xEF	; 239
    1376:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    1378:	ad e2       	ldi	r26, 0x2D	; 45
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ed e2       	ldi	r30, 0x2D	; 45
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	8c 93       	st	X, r24
	}
}
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <SPI_u8DataSendReceive>:

u8 SPI_u8DataSendReceive(u8 Copy_u8Data)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    139a:	ef e2       	ldi	r30, 0x2F	; 47
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	80 83       	st	Z, r24

	while(GET_BIT(SPSR , SPSR_SPIF) == 0 );
    13a2:	ee e2       	ldi	r30, 0x2E	; 46
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	dc f7       	brge	.-10     	; 0x13a2 <SPI_u8DataSendReceive+0x14>
	return SPDR;
    13ac:	ef e2       	ldi	r30, 0x2F	; 47
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
}
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    13c2:	af e5       	ldi	r26, 0x5F	; 95
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e5       	ldi	r30, 0x5F	; 95
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GIE_Disable>:
void GIE_Disable(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    13de:	af e5       	ldi	r26, 0x5F	; 95
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e5       	ldi	r30, 0x5F	; 95
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 77       	andi	r24, 0x7F	; 127
    13ea:	8c 93       	st	X, r24
}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <EXTI_EnableDisable+0x6>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <EXTI_EnableDisable+0x8>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3c 83       	std	Y+4, r19	; 0x04
    140a:	2b 83       	std	Y+3, r18	; 0x03
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	01 f1       	breq	.+64     	; 0x1456 <EXTI_EnableDisable+0x64>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	89 f1       	breq	.+98     	; 0x1482 <EXTI_EnableDisable+0x90>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f0       	breq	.+2      	; 0x142a <EXTI_EnableDisable+0x38>
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	41 f4       	brne	.+16     	; 0x1440 <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    1430:	ab e5       	ldi	r26, 0x5B	; 91
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e5       	ldi	r30, 0x5B	; 91
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 64       	ori	r24, 0x40	; 64
    143c:	8c 93       	st	X, r24
    143e:	36 c0       	rjmp	.+108    	; 0x14ac <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 23       	and	r24, r24
    1444:	99 f5       	brne	.+102    	; 0x14ac <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    1446:	ab e5       	ldi	r26, 0x5B	; 91
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e5       	ldi	r30, 0x5B	; 91
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7b       	andi	r24, 0xBF	; 191
    1452:	8c 93       	st	X, r24
    1454:	2b c0       	rjmp	.+86     	; 0x14ac <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	41 f4       	brne	.+16     	; 0x146c <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    145c:	ab e5       	ldi	r26, 0x5B	; 91
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	eb e5       	ldi	r30, 0x5B	; 91
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 68       	ori	r24, 0x80	; 128
    1468:	8c 93       	st	X, r24
    146a:	20 c0       	rjmp	.+64     	; 0x14ac <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	88 23       	and	r24, r24
    1470:	e9 f4       	brne	.+58     	; 0x14ac <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    1472:	ab e5       	ldi	r26, 0x5B	; 91
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	eb e5       	ldi	r30, 0x5B	; 91
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8f 77       	andi	r24, 0x7F	; 127
    147e:	8c 93       	st	X, r24
    1480:	15 c0       	rjmp	.+42     	; 0x14ac <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	41 f4       	brne	.+16     	; 0x1498 <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    1488:	ab e5       	ldi	r26, 0x5B	; 91
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e5       	ldi	r30, 0x5B	; 91
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 62       	ori	r24, 0x20	; 32
    1494:	8c 93       	st	X, r24
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	88 23       	and	r24, r24
    149c:	39 f4       	brne	.+14     	; 0x14ac <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    149e:	ab e5       	ldi	r26, 0x5B	; 91
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e5       	ldi	r30, 0x5B	; 91
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	8c 93       	st	X, r24
		}
		break;
	}
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	2a 97       	sbiw	r28, 0x0a	; 10
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3a 87       	std	Y+10, r19	; 0x0a
    14da:	29 87       	std	Y+9, r18	; 0x09
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <EXTI_SetSenstivity+0x2e>
    14e6:	66 c0       	rjmp	.+204    	; 0x15b4 <EXTI_SetSenstivity+0xfa>
    14e8:	29 85       	ldd	r18, Y+9	; 0x09
    14ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <EXTI_SetSenstivity+0x3a>
    14f2:	bb c0       	rjmp	.+374    	; 0x166a <EXTI_SetSenstivity+0x1b0>
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <EXTI_SetSenstivity+0x44>
    14fc:	d5 c0       	rjmp	.+426    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	38 87       	std	Y+8, r19	; 0x08
    1506:	2f 83       	std	Y+7, r18	; 0x07
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	21 f1       	breq	.+72     	; 0x155a <EXTI_SetSenstivity+0xa0>
    1512:	2f 81       	ldd	r18, Y+7	; 0x07
    1514:	38 85       	ldd	r19, Y+8	; 0x08
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <EXTI_SetSenstivity+0x6c>
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <EXTI_SetSenstivity+0x82>
    1524:	c1 c0       	rjmp	.+386    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
    1526:	2f 81       	ldd	r18, Y+7	; 0x07
    1528:	38 85       	ldd	r19, Y+8	; 0x08
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	21 f1       	breq	.+72     	; 0x1578 <EXTI_SetSenstivity+0xbe>
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	98 85       	ldd	r25, Y+8	; 0x08
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	71 f1       	breq	.+92     	; 0x1596 <EXTI_SetSenstivity+0xdc>
    153a:	b6 c0       	rjmp	.+364    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    153c:	a5 e5       	ldi	r26, 0x55	; 85
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e5       	ldi	r30, 0x55	; 85
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8d 7f       	andi	r24, 0xFD	; 253
    1556:	8c 93       	st	X, r24
    1558:	a7 c0       	rjmp	.+334    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    155a:	a5 e5       	ldi	r26, 0x55	; 85
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1568:	a5 e5       	ldi	r26, 0x55	; 85
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e5       	ldi	r30, 0x55	; 85
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	8c 93       	st	X, r24
    1576:	98 c0       	rjmp	.+304    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1578:	a5 e5       	ldi	r26, 0x55	; 85
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e5       	ldi	r30, 0x55	; 85
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	82 60       	ori	r24, 0x02	; 2
    1592:	8c 93       	st	X, r24
    1594:	89 c0       	rjmp	.+274    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1596:	a5 e5       	ldi	r26, 0x55	; 85
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e5       	ldi	r30, 0x55	; 85
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    15a4:	a5 e5       	ldi	r26, 0x55	; 85
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e5       	ldi	r30, 0x55	; 85
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	82 60       	ori	r24, 0x02	; 2
    15b0:	8c 93       	st	X, r24
    15b2:	7a c0       	rjmp	.+244    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3e 83       	std	Y+6, r19	; 0x06
    15bc:	2d 83       	std	Y+5, r18	; 0x05
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	21 f1       	breq	.+72     	; 0x1610 <EXTI_SetSenstivity+0x156>
    15c8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ca:	3e 81       	ldd	r19, Y+6	; 0x06
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <EXTI_SetSenstivity+0x122>
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <EXTI_SetSenstivity+0x138>
    15da:	66 c0       	rjmp	.+204    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
    15dc:	2d 81       	ldd	r18, Y+5	; 0x05
    15de:	3e 81       	ldd	r19, Y+6	; 0x06
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	21 f1       	breq	.+72     	; 0x162e <EXTI_SetSenstivity+0x174>
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	71 f1       	breq	.+92     	; 0x164c <EXTI_SetSenstivity+0x192>
    15f0:	5b c0       	rjmp	.+182    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    15f2:	a5 e5       	ldi	r26, 0x55	; 85
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e5       	ldi	r30, 0x55	; 85
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8b 7f       	andi	r24, 0xFB	; 251
    15fe:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1600:	a5 e5       	ldi	r26, 0x55	; 85
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e5       	ldi	r30, 0x55	; 85
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	87 7f       	andi	r24, 0xF7	; 247
    160c:	8c 93       	st	X, r24
    160e:	4c c0       	rjmp	.+152    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    161e:	a5 e5       	ldi	r26, 0x55	; 85
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e5       	ldi	r30, 0x55	; 85
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	87 7f       	andi	r24, 0xF7	; 247
    162a:	8c 93       	st	X, r24
    162c:	3d c0       	rjmp	.+122    	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    162e:	a5 e5       	ldi	r26, 0x55	; 85
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e5       	ldi	r30, 0x55	; 85
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8b 7f       	andi	r24, 0xFB	; 251
    163a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    163c:	a5 e5       	ldi	r26, 0x55	; 85
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 60       	ori	r24, 0x08	; 8
    1648:	8c 93       	st	X, r24
    164a:	2e c0       	rjmp	.+92     	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    164c:	a5 e5       	ldi	r26, 0x55	; 85
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e5       	ldi	r30, 0x55	; 85
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    165a:	a5 e5       	ldi	r26, 0x55	; 85
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e5       	ldi	r30, 0x55	; 85
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	88 60       	ori	r24, 0x08	; 8
    1666:	8c 93       	st	X, r24
    1668:	1f c0       	rjmp	.+62     	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	91 05       	cpc	r25, r1
    167c:	31 f0       	breq	.+12     	; 0x168a <EXTI_SetSenstivity+0x1d0>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	23 30       	cpi	r18, 0x03	; 3
    1684:	31 05       	cpc	r19, r1
    1686:	49 f0       	breq	.+18     	; 0x169a <EXTI_SetSenstivity+0x1e0>
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    168a:	a4 e5       	ldi	r26, 0x54	; 84
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e4 e5       	ldi	r30, 0x54	; 84
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 64       	ori	r24, 0x40	; 64
    1696:	8c 93       	st	X, r24
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    169a:	a4 e5       	ldi	r26, 0x54	; 84
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e4 e5       	ldi	r30, 0x54	; 84
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7b       	andi	r24, 0xBF	; 191
    16a6:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    16a8:	2a 96       	adiw	r28, 0x0a	; 10
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	2d 97       	sbiw	r28, 0x0d	; 13
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02
    16d2:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <MDIO_vSetPinDir+0x22>
    16da:	09 c1       	rjmp	.+530    	; 0x18ee <MDIO_vSetPinDir+0x234>
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 30       	cpi	r24, 0x08	; 8
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <MDIO_vSetPinDir+0x2a>
    16e2:	05 c1       	rjmp	.+522    	; 0x18ee <MDIO_vSetPinDir+0x234>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <MDIO_vSetPinDir+0x32>
    16ea:	01 c1       	rjmp	.+514    	; 0x18ee <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3d 87       	std	Y+13, r19	; 0x0d
    16f4:	2c 87       	std	Y+12, r18	; 0x0c
    16f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <MDIO_vSetPinDir+0x48>
    1700:	4f c0       	rjmp	.+158    	; 0x17a0 <MDIO_vSetPinDir+0xe6>
    1702:	2c 85       	ldd	r18, Y+12	; 0x0c
    1704:	3d 85       	ldd	r19, Y+13	; 0x0d
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	2c f4       	brge	.+10     	; 0x1716 <MDIO_vSetPinDir+0x5c>
    170c:	8c 85       	ldd	r24, Y+12	; 0x0c
    170e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	71 f0       	breq	.+28     	; 0x1730 <MDIO_vSetPinDir+0x76>
    1714:	ec c0       	rjmp	.+472    	; 0x18ee <MDIO_vSetPinDir+0x234>
    1716:	2c 85       	ldd	r18, Y+12	; 0x0c
    1718:	3d 85       	ldd	r19, Y+13	; 0x0d
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <MDIO_vSetPinDir+0x68>
    1720:	77 c0       	rjmp	.+238    	; 0x1810 <MDIO_vSetPinDir+0x156>
    1722:	8c 85       	ldd	r24, Y+12	; 0x0c
    1724:	9d 85       	ldd	r25, Y+13	; 0x0d
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <MDIO_vSetPinDir+0x74>
    172c:	a9 c0       	rjmp	.+338    	; 0x1880 <MDIO_vSetPinDir+0x1c6>
    172e:	df c0       	rjmp	.+446    	; 0x18ee <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3b 87       	std	Y+11, r19	; 0x0b
    1738:	2a 87       	std	Y+10, r18	; 0x0a
    173a:	8a 85       	ldd	r24, Y+10	; 0x0a
    173c:	9b 85       	ldd	r25, Y+11	; 0x0b
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	31 f0       	breq	.+12     	; 0x174e <MDIO_vSetPinDir+0x94>
    1742:	2a 85       	ldd	r18, Y+10	; 0x0a
    1744:	3b 85       	ldd	r19, Y+11	; 0x0b
    1746:	21 30       	cpi	r18, 0x01	; 1
    1748:	31 05       	cpc	r19, r1
    174a:	b1 f0       	breq	.+44     	; 0x1778 <MDIO_vSetPinDir+0xbe>
    174c:	d0 c0       	rjmp	.+416    	; 0x18ee <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    174e:	aa e3       	ldi	r26, 0x3A	; 58
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ea e3       	ldi	r30, 0x3A	; 58
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <MDIO_vSetPinDir+0xb2>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <MDIO_vSetPinDir+0xae>
    1770:	80 95       	com	r24
    1772:	84 23       	and	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	bb c0       	rjmp	.+374    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    1778:	aa e3       	ldi	r26, 0x3A	; 58
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ea e3       	ldi	r30, 0x3A	; 58
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <MDIO_vSetPinDir+0xdc>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <MDIO_vSetPinDir+0xd8>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	a7 c0       	rjmp	.+334    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	39 87       	std	Y+9, r19	; 0x09
    17a8:	28 87       	std	Y+8, r18	; 0x08
    17aa:	88 85       	ldd	r24, Y+8	; 0x08
    17ac:	99 85       	ldd	r25, Y+9	; 0x09
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	31 f0       	breq	.+12     	; 0x17be <MDIO_vSetPinDir+0x104>
    17b2:	28 85       	ldd	r18, Y+8	; 0x08
    17b4:	39 85       	ldd	r19, Y+9	; 0x09
    17b6:	21 30       	cpi	r18, 0x01	; 1
    17b8:	31 05       	cpc	r19, r1
    17ba:	b1 f0       	breq	.+44     	; 0x17e8 <MDIO_vSetPinDir+0x12e>
    17bc:	98 c0       	rjmp	.+304    	; 0x18ee <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    17be:	a7 e3       	ldi	r26, 0x37	; 55
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e7 e3       	ldi	r30, 0x37	; 55
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <MDIO_vSetPinDir+0x122>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <MDIO_vSetPinDir+0x11e>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	83 c0       	rjmp	.+262    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    17e8:	a7 e3       	ldi	r26, 0x37	; 55
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e7 e3       	ldi	r30, 0x37	; 55
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <MDIO_vSetPinDir+0x14c>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <MDIO_vSetPinDir+0x148>
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	6f c0       	rjmp	.+222    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3f 83       	std	Y+7, r19	; 0x07
    1818:	2e 83       	std	Y+6, r18	; 0x06
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	31 f0       	breq	.+12     	; 0x182e <MDIO_vSetPinDir+0x174>
    1822:	2e 81       	ldd	r18, Y+6	; 0x06
    1824:	3f 81       	ldd	r19, Y+7	; 0x07
    1826:	21 30       	cpi	r18, 0x01	; 1
    1828:	31 05       	cpc	r19, r1
    182a:	b1 f0       	breq	.+44     	; 0x1858 <MDIO_vSetPinDir+0x19e>
    182c:	60 c0       	rjmp	.+192    	; 0x18ee <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    182e:	a4 e3       	ldi	r26, 0x34	; 52
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e4 e3       	ldi	r30, 0x34	; 52
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <MDIO_vSetPinDir+0x192>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <MDIO_vSetPinDir+0x18e>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	4b c0       	rjmp	.+150    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    1858:	a4 e3       	ldi	r26, 0x34	; 52
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e4 e3       	ldi	r30, 0x34	; 52
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <MDIO_vSetPinDir+0x1bc>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <MDIO_vSetPinDir+0x1b8>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	37 c0       	rjmp	.+110    	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3d 83       	std	Y+5, r19	; 0x05
    1888:	2c 83       	std	Y+4, r18	; 0x04
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	31 f0       	breq	.+12     	; 0x189e <MDIO_vSetPinDir+0x1e4>
    1892:	2c 81       	ldd	r18, Y+4	; 0x04
    1894:	3d 81       	ldd	r19, Y+5	; 0x05
    1896:	21 30       	cpi	r18, 0x01	; 1
    1898:	31 05       	cpc	r19, r1
    189a:	b1 f0       	breq	.+44     	; 0x18c8 <MDIO_vSetPinDir+0x20e>
    189c:	28 c0       	rjmp	.+80     	; 0x18ee <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    189e:	a1 e3       	ldi	r26, 0x31	; 49
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e1 e3       	ldi	r30, 0x31	; 49
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <MDIO_vSetPinDir+0x202>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <MDIO_vSetPinDir+0x1fe>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    18c8:	a1 e3       	ldi	r26, 0x31	; 49
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e1 e3       	ldi	r30, 0x31	; 49
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <MDIO_vSetPinDir+0x22c>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <MDIO_vSetPinDir+0x228>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    18ee:	2d 96       	adiw	r28, 0x0d	; 13
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	2d 97       	sbiw	r28, 0x0d	; 13
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	6a 83       	std	Y+2, r22	; 0x02
    1918:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	84 30       	cpi	r24, 0x04	; 4
    191e:	08 f0       	brcs	.+2      	; 0x1922 <MDIO_vSetPinVal+0x22>
    1920:	09 c1       	rjmp	.+530    	; 0x1b34 <MDIO_vSetPinVal+0x234>
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	88 30       	cpi	r24, 0x08	; 8
    1926:	08 f0       	brcs	.+2      	; 0x192a <MDIO_vSetPinVal+0x2a>
    1928:	05 c1       	rjmp	.+522    	; 0x1b34 <MDIO_vSetPinVal+0x234>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	08 f0       	brcs	.+2      	; 0x1932 <MDIO_vSetPinVal+0x32>
    1930:	01 c1       	rjmp	.+514    	; 0x1b34 <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3d 87       	std	Y+13, r19	; 0x0d
    193a:	2c 87       	std	Y+12, r18	; 0x0c
    193c:	8c 85       	ldd	r24, Y+12	; 0x0c
    193e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <MDIO_vSetPinVal+0x48>
    1946:	4f c0       	rjmp	.+158    	; 0x19e6 <MDIO_vSetPinVal+0xe6>
    1948:	2c 85       	ldd	r18, Y+12	; 0x0c
    194a:	3d 85       	ldd	r19, Y+13	; 0x0d
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <MDIO_vSetPinVal+0x5c>
    1952:	8c 85       	ldd	r24, Y+12	; 0x0c
    1954:	9d 85       	ldd	r25, Y+13	; 0x0d
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	71 f0       	breq	.+28     	; 0x1976 <MDIO_vSetPinVal+0x76>
    195a:	ec c0       	rjmp	.+472    	; 0x1b34 <MDIO_vSetPinVal+0x234>
    195c:	2c 85       	ldd	r18, Y+12	; 0x0c
    195e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <MDIO_vSetPinVal+0x68>
    1966:	77 c0       	rjmp	.+238    	; 0x1a56 <MDIO_vSetPinVal+0x156>
    1968:	8c 85       	ldd	r24, Y+12	; 0x0c
    196a:	9d 85       	ldd	r25, Y+13	; 0x0d
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <MDIO_vSetPinVal+0x74>
    1972:	a9 c0       	rjmp	.+338    	; 0x1ac6 <MDIO_vSetPinVal+0x1c6>
    1974:	df c0       	rjmp	.+446    	; 0x1b34 <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3b 87       	std	Y+11, r19	; 0x0b
    197e:	2a 87       	std	Y+10, r18	; 0x0a
    1980:	8a 85       	ldd	r24, Y+10	; 0x0a
    1982:	9b 85       	ldd	r25, Y+11	; 0x0b
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	31 f0       	breq	.+12     	; 0x1994 <MDIO_vSetPinVal+0x94>
    1988:	2a 85       	ldd	r18, Y+10	; 0x0a
    198a:	3b 85       	ldd	r19, Y+11	; 0x0b
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	31 05       	cpc	r19, r1
    1990:	b1 f0       	breq	.+44     	; 0x19be <MDIO_vSetPinVal+0xbe>
    1992:	d0 c0       	rjmp	.+416    	; 0x1b34 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    1994:	ab e3       	ldi	r26, 0x3B	; 59
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	eb e3       	ldi	r30, 0x3B	; 59
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <MDIO_vSetPinVal+0xb2>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <MDIO_vSetPinVal+0xae>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	bb c0       	rjmp	.+374    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    19be:	ab e3       	ldi	r26, 0x3B	; 59
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <MDIO_vSetPinVal+0xdc>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <MDIO_vSetPinVal+0xd8>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	a7 c0       	rjmp	.+334    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	39 87       	std	Y+9, r19	; 0x09
    19ee:	28 87       	std	Y+8, r18	; 0x08
    19f0:	88 85       	ldd	r24, Y+8	; 0x08
    19f2:	99 85       	ldd	r25, Y+9	; 0x09
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <MDIO_vSetPinVal+0x104>
    19f8:	28 85       	ldd	r18, Y+8	; 0x08
    19fa:	39 85       	ldd	r19, Y+9	; 0x09
    19fc:	21 30       	cpi	r18, 0x01	; 1
    19fe:	31 05       	cpc	r19, r1
    1a00:	b1 f0       	breq	.+44     	; 0x1a2e <MDIO_vSetPinVal+0x12e>
    1a02:	98 c0       	rjmp	.+304    	; 0x1b34 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <MDIO_vSetPinVal+0x122>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <MDIO_vSetPinVal+0x11e>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	83 c0       	rjmp	.+262    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1a2e:	a8 e3       	ldi	r26, 0x38	; 56
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e8 e3       	ldi	r30, 0x38	; 56
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <MDIO_vSetPinVal+0x14c>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <MDIO_vSetPinVal+0x148>
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	6f c0       	rjmp	.+222    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3f 83       	std	Y+7, r19	; 0x07
    1a5e:	2e 83       	std	Y+6, r18	; 0x06
    1a60:	8e 81       	ldd	r24, Y+6	; 0x06
    1a62:	9f 81       	ldd	r25, Y+7	; 0x07
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	31 f0       	breq	.+12     	; 0x1a74 <MDIO_vSetPinVal+0x174>
    1a68:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6c:	21 30       	cpi	r18, 0x01	; 1
    1a6e:	31 05       	cpc	r19, r1
    1a70:	b1 f0       	breq	.+44     	; 0x1a9e <MDIO_vSetPinVal+0x19e>
    1a72:	60 c0       	rjmp	.+192    	; 0x1b34 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    1a74:	a5 e3       	ldi	r26, 0x35	; 53
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e5 e3       	ldi	r30, 0x35	; 53
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	48 2f       	mov	r20, r24
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 2e       	mov	r0, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <MDIO_vSetPinVal+0x192>
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	0a 94       	dec	r0
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <MDIO_vSetPinVal+0x18e>
    1a96:	80 95       	com	r24
    1a98:	84 23       	and	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	4b c0       	rjmp	.+150    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    1a9e:	a5 e3       	ldi	r26, 0x35	; 53
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e3       	ldi	r30, 0x35	; 53
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <MDIO_vSetPinVal+0x1bc>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <MDIO_vSetPinVal+0x1b8>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	37 c0       	rjmp	.+110    	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	3d 83       	std	Y+5, r19	; 0x05
    1ace:	2c 83       	std	Y+4, r18	; 0x04
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	31 f0       	breq	.+12     	; 0x1ae4 <MDIO_vSetPinVal+0x1e4>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	21 30       	cpi	r18, 0x01	; 1
    1ade:	31 05       	cpc	r19, r1
    1ae0:	b1 f0       	breq	.+44     	; 0x1b0e <MDIO_vSetPinVal+0x20e>
    1ae2:	28 c0       	rjmp	.+80     	; 0x1b34 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    1ae4:	a2 e3       	ldi	r26, 0x32	; 50
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e2 e3       	ldi	r30, 0x32	; 50
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <MDIO_vSetPinVal+0x202>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <MDIO_vSetPinVal+0x1fe>
    1b06:	80 95       	com	r24
    1b08:	84 23       	and	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <MDIO_vSetPinVal+0x22c>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <MDIO_vSetPinVal+0x228>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1b34:	2d 96       	adiw	r28, 0x0d	; 13
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <MDIO_GetPinVal+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <MDIO_GetPinVal+0x8>
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <MDIO_GetPinVal+0x1a>
    1b5e:	6b c0       	rjmp	.+214    	; 0x1c36 <MDIO_GetPinVal+0xf0>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 30       	cpi	r24, 0x08	; 8
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <MDIO_GetPinVal+0x22>
    1b66:	67 c0       	rjmp	.+206    	; 0x1c36 <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3d 83       	std	Y+5, r19	; 0x05
    1b70:	2c 83       	std	Y+4, r18	; 0x04
    1b72:	4c 81       	ldd	r20, Y+4	; 0x04
    1b74:	5d 81       	ldd	r21, Y+5	; 0x05
    1b76:	41 30       	cpi	r20, 0x01	; 1
    1b78:	51 05       	cpc	r21, r1
    1b7a:	41 f1       	breq	.+80     	; 0x1bcc <MDIO_GetPinVal+0x86>
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	91 05       	cpc	r25, r1
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <MDIO_GetPinVal+0x4c>
    1b86:	2c 81       	ldd	r18, Y+4	; 0x04
    1b88:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8a:	21 15       	cp	r18, r1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	61 f0       	breq	.+24     	; 0x1ba8 <MDIO_GetPinVal+0x62>
    1b90:	52 c0       	rjmp	.+164    	; 0x1c36 <MDIO_GetPinVal+0xf0>
    1b92:	4c 81       	ldd	r20, Y+4	; 0x04
    1b94:	5d 81       	ldd	r21, Y+5	; 0x05
    1b96:	42 30       	cpi	r20, 0x02	; 2
    1b98:	51 05       	cpc	r21, r1
    1b9a:	51 f1       	breq	.+84     	; 0x1bf0 <MDIO_GetPinVal+0xaa>
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	b9 f1       	breq	.+110    	; 0x1c14 <MDIO_GetPinVal+0xce>
    1ba6:	47 c0       	rjmp	.+142    	; 0x1c36 <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1ba8:	e9 e3       	ldi	r30, 0x39	; 57
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <MDIO_GetPinVal+0x7a>
    1bbc:	55 95       	asr	r21
    1bbe:	47 95       	ror	r20
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <MDIO_GetPinVal+0x76>
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	81 70       	andi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	35 c0       	rjmp	.+106    	; 0x1c36 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1bcc:	e6 e3       	ldi	r30, 0x36	; 54
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <MDIO_GetPinVal+0x9e>
    1be0:	55 95       	asr	r21
    1be2:	47 95       	ror	r20
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <MDIO_GetPinVal+0x9a>
    1be8:	ca 01       	movw	r24, r20
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	23 c0       	rjmp	.+70     	; 0x1c36 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1bf0:	e3 e3       	ldi	r30, 0x33	; 51
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a9 01       	movw	r20, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <MDIO_GetPinVal+0xc2>
    1c04:	55 95       	asr	r21
    1c06:	47 95       	ror	r20
    1c08:	8a 95       	dec	r24
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <MDIO_GetPinVal+0xbe>
    1c0c:	ca 01       	movw	r24, r20
    1c0e:	81 70       	andi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	11 c0       	rjmp	.+34     	; 0x1c36 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1c14:	e0 e3       	ldi	r30, 0x30	; 48
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <MDIO_GetPinVal+0xe6>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <MDIO_GetPinVal+0xe2>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <MDIO_vTogglePinVal+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <MDIO_vTogglePinVal+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <MDIO_vTogglePinVal+0x18>
    1c5e:	72 c0       	rjmp	.+228    	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <MDIO_vTogglePinVal+0x20>
    1c66:	6e c0       	rjmp	.+220    	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3c 83       	std	Y+4, r19	; 0x04
    1c70:	2b 83       	std	Y+3, r18	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	49 f1       	breq	.+82     	; 0x1cce <MDIO_vTogglePinVal+0x86>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <MDIO_vTogglePinVal+0x48>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <MDIO_vTogglePinVal+0x5e>
    1c8e:	5a c0       	rjmp	.+180    	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	71 f1       	breq	.+92     	; 0x1cf6 <MDIO_vTogglePinVal+0xae>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	e9 f1       	breq	.+122    	; 0x1d1e <MDIO_vTogglePinVal+0xd6>
    1ca4:	4f c0       	rjmp	.+158    	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <MDIO_vTogglePinVal+0x7c>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <MDIO_vTogglePinVal+0x78>
    1cc8:	84 27       	eor	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	3b c0       	rjmp	.+118    	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1cce:	a8 e3       	ldi	r26, 0x38	; 56
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e8 e3       	ldi	r30, 0x38	; 56
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <MDIO_vTogglePinVal+0xa4>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <MDIO_vTogglePinVal+0xa0>
    1cf0:	84 27       	eor	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	27 c0       	rjmp	.+78     	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <MDIO_vTogglePinVal+0xcc>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <MDIO_vTogglePinVal+0xc8>
    1d18:	84 27       	eor	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	13 c0       	rjmp	.+38     	; 0x1d44 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1d1e:	a2 e3       	ldi	r26, 0x32	; 50
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e2 e3       	ldi	r30, 0x32	; 50
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <MDIO_vTogglePinVal+0xf4>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <MDIO_vTogglePinVal+0xf0>
    1d40:	84 27       	eor	r24, r20
    1d42:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <MDIO_vSetPortDir+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <MDIO_vSetPortDir+0x8>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	84 30       	cpi	r24, 0x04	; 4
    1d66:	90 f5       	brcc	.+100    	; 0x1dcc <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	3c 83       	std	Y+4, r19	; 0x04
    1d70:	2b 83       	std	Y+3, r18	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	91 05       	cpc	r25, r1
    1d7a:	d1 f0       	breq	.+52     	; 0x1db0 <MDIO_vSetPortDir+0x5e>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <MDIO_vSetPortDir+0x3e>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <MDIO_vSetPortDir+0x54>
    1d8e:	1e c0       	rjmp	.+60     	; 0x1dcc <MDIO_vSetPortDir+0x7a>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	81 f0       	breq	.+32     	; 0x1dba <MDIO_vSetPortDir+0x68>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	91 05       	cpc	r25, r1
    1da2:	81 f0       	breq	.+32     	; 0x1dc4 <MDIO_vSetPortDir+0x72>
    1da4:	13 c0       	rjmp	.+38     	; 0x1dcc <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1da6:	ea e3       	ldi	r30, 0x3A	; 58
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	80 83       	st	Z, r24
    1dae:	0e c0       	rjmp	.+28     	; 0x1dcc <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1db0:	e7 e3       	ldi	r30, 0x37	; 55
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	80 83       	st	Z, r24
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1dba:	e4 e3       	ldi	r30, 0x34	; 52
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	80 83       	st	Z, r24
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1dc4:	e1 e3       	ldi	r30, 0x31	; 49
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <MDIO_vSetPortVal+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <MDIO_vSetPortVal+0x8>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	90 f5       	brcc	.+100    	; 0x1e54 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3c 83       	std	Y+4, r19	; 0x04
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	91 05       	cpc	r25, r1
    1e02:	d1 f0       	breq	.+52     	; 0x1e38 <MDIO_vSetPortVal+0x5e>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <MDIO_vSetPortVal+0x3e>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <MDIO_vSetPortVal+0x54>
    1e16:	1e c0       	rjmp	.+60     	; 0x1e54 <MDIO_vSetPortVal+0x7a>
    1e18:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1c:	22 30       	cpi	r18, 0x02	; 2
    1e1e:	31 05       	cpc	r19, r1
    1e20:	81 f0       	breq	.+32     	; 0x1e42 <MDIO_vSetPortVal+0x68>
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	81 f0       	breq	.+32     	; 0x1e4c <MDIO_vSetPortVal+0x72>
    1e2c:	13 c0       	rjmp	.+38     	; 0x1e54 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1e2e:	eb e3       	ldi	r30, 0x3B	; 59
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	80 83       	st	Z, r24
    1e36:	0e c0       	rjmp	.+28     	; 0x1e54 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	80 83       	st	Z, r24
    1e40:	09 c0       	rjmp	.+18     	; 0x1e54 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    1e42:	e5 e3       	ldi	r30, 0x35	; 53
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	80 83       	st	Z, r24
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1e4c:	e2 e3       	ldi	r30, 0x32	; 50
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <MDIO_vInit>:


void MDIO_vInit()
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1e6a:	ea e3       	ldi	r30, 0x3A	; 58
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1e70:	e7 e3       	ldi	r30, 0x37	; 55
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1e76:	e4 e3       	ldi	r30, 0x34	; 52
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	87 e0       	ldi	r24, 0x07	; 7
    1e7c:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1e7e:	e1 e3       	ldi	r30, 0x31	; 49
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1e86:	eb e3       	ldi	r30, 0x3B	; 59
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1e8c:	e8 e3       	ldi	r30, 0x38	; 56
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	84 e0       	ldi	r24, 0x04	; 4
    1e92:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1e94:	e5 e3       	ldi	r30, 0x35	; 53
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1e9a:	e2 e3       	ldi	r30, 0x32	; 50
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
    1eae:	a6 e2       	ldi	r26, 0x26	; 38
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e6 e2       	ldi	r30, 0x26	; 38
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	87 7f       	andi	r24, 0xF7	; 247
    1eba:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
    1ebc:	a7 e2       	ldi	r26, 0x27	; 39
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e7 e2       	ldi	r30, 0x27	; 39
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 64       	ori	r24, 0x40	; 64
    1ec8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    1eca:	a7 e2       	ldi	r26, 0x27	; 39
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e7 e2       	ldi	r30, 0x27	; 39
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 77       	andi	r24, 0x7F	; 127
    1ed6:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
    1ed8:	a6 e2       	ldi	r26, 0x26	; 38
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e6 e2       	ldi	r30, 0x26	; 38
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	81 60       	ori	r24, 0x01	; 1
    1ee4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    1ee6:	a6 e2       	ldi	r26, 0x26	; 38
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e6 e2       	ldi	r30, 0x26	; 38
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	82 60       	ori	r24, 0x02	; 2
    1ef2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
    1ef4:	a6 e2       	ldi	r26, 0x26	; 38
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e6 e2       	ldi	r30, 0x26	; 38
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	84 60       	ori	r24, 0x04	; 4
    1f00:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
    1f02:	a6 e2       	ldi	r26, 0x26	; 38
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e6 e2       	ldi	r30, 0x26	; 38
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	8c 93       	st	X, r24
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <ADC_StartConvertPolling+0x6>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
    1f24:	1a 82       	std	Y+2, r1	; 0x02
    1f26:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
    1f28:	a7 e2       	ldi	r26, 0x27	; 39
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e7 e2       	ldi	r30, 0x27	; 39
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 7e       	andi	r24, 0xE0	; 224
    1f34:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
    1f36:	a7 e2       	ldi	r26, 0x27	; 39
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e7 e2       	ldi	r30, 0x27	; 39
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	90 81       	ld	r25, Z
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	89 2b       	or	r24, r25
    1f44:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
    1f46:	a6 e2       	ldi	r26, 0x26	; 38
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e6 e2       	ldi	r30, 0x26	; 38
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 64       	ori	r24, 0x40	; 64
    1f52:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
    1f54:	e6 e2       	ldi	r30, 0x26	; 38
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 95       	swap	r24
    1f5c:	8f 70       	andi	r24, 0x0F	; 15
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	81 70       	andi	r24, 0x01	; 1
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	a9 f3       	breq	.-22     	; 0x1f54 <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
    1f6a:	e4 e2       	ldi	r30, 0x24	; 36
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
    1f76:	a6 e2       	ldi	r26, 0x26	; 38
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e6 e2       	ldi	r30, 0x26	; 38
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 61       	ori	r24, 0x10	; 16
    1f82:	8c 93       	st	X, r24
	return ADC_read;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <ADC_StartConvertInt+0x6>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <ADC_StartConvertInt+0x8>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <ADC_StartConvertInt+0xa>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
    1fa4:	7c 83       	std	Y+4, r23	; 0x04
    1fa6:	6b 83       	std	Y+3, r22	; 0x03
    1fa8:	5e 83       	std	Y+6, r21	; 0x06
    1faa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
    1fac:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
    1fae:	80 91 94 01 	lds	r24, 0x0194
    1fb2:	88 23       	and	r24, r24
    1fb4:	69 f5       	brne	.+90     	; 0x2010 <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	80 93 94 01 	sts	0x0194, r24
			Global_ptr=pu16Reading;
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	90 93 91 01 	sts	0x0191, r25
    1fc4:	80 93 90 01 	sts	0x0190, r24
			GlobalPtrFunc = PtrFunc;
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	90 93 93 01 	sts	0x0193, r25
    1fd0:	80 93 92 01 	sts	0x0192, r24

			ADMUX &=0b11100000;
    1fd4:	a7 e2       	ldi	r26, 0x27	; 39
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e7 e2       	ldi	r30, 0x27	; 39
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 7e       	andi	r24, 0xE0	; 224
    1fe0:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
    1fe2:	a7 e2       	ldi	r26, 0x27	; 39
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e7 e2       	ldi	r30, 0x27	; 39
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	90 81       	ld	r25, Z
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	89 2b       	or	r24, r25
    1ff0:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
    1ff2:	a6 e2       	ldi	r26, 0x26	; 38
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e6 e2       	ldi	r30, 0x26	; 38
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 60       	ori	r24, 0x08	; 8
    1ffe:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
    2000:	a6 e2       	ldi	r26, 0x26	; 38
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e6 e2       	ldi	r30, 0x26	; 38
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 64       	ori	r24, 0x40	; 64
    200c:	8c 93       	st	X, r24
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2028:	1f 92       	push	r1
    202a:	0f 92       	push	r0
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	0f 92       	push	r0
    2030:	11 24       	eor	r1, r1
    2032:	2f 93       	push	r18
    2034:	3f 93       	push	r19
    2036:	4f 93       	push	r20
    2038:	5f 93       	push	r21
    203a:	6f 93       	push	r22
    203c:	7f 93       	push	r23
    203e:	8f 93       	push	r24
    2040:	9f 93       	push	r25
    2042:	af 93       	push	r26
    2044:	bf 93       	push	r27
    2046:	ef 93       	push	r30
    2048:	ff 93       	push	r31
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
    2052:	a0 91 90 01 	lds	r26, 0x0190
    2056:	b0 91 91 01 	lds	r27, 0x0191
    205a:	e4 e2       	ldi	r30, 0x24	; 36
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	8d 93       	st	X+, r24
    2064:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
    2066:	e0 91 92 01 	lds	r30, 0x0192
    206a:	f0 91 93 01 	lds	r31, 0x0193
    206e:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
    2070:	a6 e2       	ldi	r26, 0x26	; 38
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e6 e2       	ldi	r30, 0x26	; 38
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	87 7f       	andi	r24, 0xF7	; 247
    207c:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
    207e:	10 92 94 01 	sts	0x0194, r1



}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	ff 91       	pop	r31
    2088:	ef 91       	pop	r30
    208a:	bf 91       	pop	r27
    208c:	af 91       	pop	r26
    208e:	9f 91       	pop	r25
    2090:	8f 91       	pop	r24
    2092:	7f 91       	pop	r23
    2094:	6f 91       	pop	r22
    2096:	5f 91       	pop	r21
    2098:	4f 91       	pop	r20
    209a:	3f 91       	pop	r19
    209c:	2f 91       	pop	r18
    209e:	0f 90       	pop	r0
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	0f 90       	pop	r0
    20a4:	1f 90       	pop	r1
    20a6:	18 95       	reti

000020a8 <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <HSSD_vInit+0x6>
    20ae:	0f 92       	push	r0
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	08 f0       	brcs	.+2      	; 0x20be <HSSD_vInit+0x16>
    20bc:	42 c0       	rjmp	.+132    	; 0x2142 <HSSD_vInit+0x9a>
	{
		switch(A_PortID)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3b 83       	std	Y+3, r19	; 0x03
    20c6:	2a 83       	std	Y+2, r18	; 0x02
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	f1 f0       	breq	.+60     	; 0x210e <HSSD_vInit+0x66>
    20d2:	2a 81       	ldd	r18, Y+2	; 0x02
    20d4:	3b 81       	ldd	r19, Y+3	; 0x03
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <HSSD_vInit+0x3e>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 f0       	breq	.+24     	; 0x20fc <HSSD_vInit+0x54>
    20e4:	2e c0       	rjmp	.+92     	; 0x2142 <HSSD_vInit+0x9a>
    20e6:	2a 81       	ldd	r18, Y+2	; 0x02
    20e8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	c1 f0       	breq	.+48     	; 0x2120 <HSSD_vInit+0x78>
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	91 05       	cpc	r25, r1
    20f8:	e1 f0       	breq	.+56     	; 0x2132 <HSSD_vInit+0x8a>
    20fa:	23 c0       	rjmp	.+70     	; 0x2142 <HSSD_vInit+0x9a>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	6f ef       	ldi	r22, 0xFF	; 255
    2100:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	6f ef       	ldi	r22, 0xFF	; 255
    2108:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    210c:	1a c0       	rjmp	.+52     	; 0x2142 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	6f ef       	ldi	r22, 0xFF	; 255
    2112:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	6f ef       	ldi	r22, 0xFF	; 255
    211a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    211e:	11 c0       	rjmp	.+34     	; 0x2142 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	6f ef       	ldi	r22, 0xFF	; 255
    2124:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	6f ef       	ldi	r22, 0xFF	; 255
    212c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	6f ef       	ldi	r22, 0xFF	; 255
    2136:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	6f ef       	ldi	r22, 0xFF	; 255
    213e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
			break;
		}
	}
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <HSSD_vDisplayNumber+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <HSSD_vDisplayNumber+0x8>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	90 f5       	brcc	.+100    	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3c 83       	std	Y+4, r19	; 0x04
    216c:	2b 83       	std	Y+3, r18	; 0x03
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	d1 f0       	breq	.+52     	; 0x21ac <HSSD_vDisplayNumber+0x5e>
    2178:	2b 81       	ldd	r18, Y+3	; 0x03
    217a:	3c 81       	ldd	r19, Y+4	; 0x04
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	2c f4       	brge	.+10     	; 0x218c <HSSD_vDisplayNumber+0x3e>
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	61 f0       	breq	.+24     	; 0x21a2 <HSSD_vDisplayNumber+0x54>
    218a:	1e c0       	rjmp	.+60     	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
    218c:	2b 81       	ldd	r18, Y+3	; 0x03
    218e:	3c 81       	ldd	r19, Y+4	; 0x04
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	81 f0       	breq	.+32     	; 0x21b6 <HSSD_vDisplayNumber+0x68>
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	83 30       	cpi	r24, 0x03	; 3
    219c:	91 05       	cpc	r25, r1
    219e:	81 f0       	breq	.+32     	; 0x21c0 <HSSD_vDisplayNumber+0x72>
    21a0:	13 c0       	rjmp	.+38     	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	6a 81       	ldd	r22, Y+2	; 0x02
    21a6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    21aa:	0e c0       	rjmp	.+28     	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	6a 81       	ldd	r22, Y+2	; 0x02
    21b0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    21b4:	09 c0       	rjmp	.+18     	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	6a 81       	ldd	r22, Y+2	; 0x02
    21ba:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	6a 81       	ldd	r22, Y+2	; 0x02
    21c4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
			break;
		}
	}
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	c0 55       	subi	r28, 0x50	; 80
    21e0:	d0 40       	sbci	r29, 0x00	; 0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	fe 01       	movw	r30, r28
    21ee:	e9 5b       	subi	r30, 0xB9	; 185
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 83       	st	Z, r24
    21f4:	fe 01       	movw	r30, r28
    21f6:	e8 5b       	subi	r30, 0xB8	; 184
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	71 83       	std	Z+1, r23	; 0x01
    21fc:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    21fe:	9e 01       	movw	r18, r28
    2200:	23 5c       	subi	r18, 0xC3	; 195
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	2e 96       	adiw	r28, 0x0e	; 14
    2206:	3f af       	std	Y+63, r19	; 0x3f
    2208:	2e af       	std	Y+62, r18	; 0x3e
    220a:	2e 97       	sbiw	r28, 0x0e	; 14
    220c:	88 e7       	ldi	r24, 0x78	; 120
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	60 96       	adiw	r28, 0x10	; 16
    2212:	9f af       	std	Y+63, r25	; 0x3f
    2214:	8e af       	std	Y+62, r24	; 0x3e
    2216:	60 97       	sbiw	r28, 0x10	; 16
    2218:	9a e0       	ldi	r25, 0x0A	; 10
    221a:	61 96       	adiw	r28, 0x11	; 17
    221c:	9f af       	std	Y+63, r25	; 0x3f
    221e:	61 97       	sbiw	r28, 0x11	; 17
    2220:	60 96       	adiw	r28, 0x10	; 16
    2222:	ee ad       	ldd	r30, Y+62	; 0x3e
    2224:	ff ad       	ldd	r31, Y+63	; 0x3f
    2226:	60 97       	sbiw	r28, 0x10	; 16
    2228:	00 80       	ld	r0, Z
    222a:	60 96       	adiw	r28, 0x10	; 16
    222c:	2e ad       	ldd	r18, Y+62	; 0x3e
    222e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2230:	60 97       	sbiw	r28, 0x10	; 16
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	60 96       	adiw	r28, 0x10	; 16
    2238:	3f af       	std	Y+63, r19	; 0x3f
    223a:	2e af       	std	Y+62, r18	; 0x3e
    223c:	60 97       	sbiw	r28, 0x10	; 16
    223e:	2e 96       	adiw	r28, 0x0e	; 14
    2240:	ee ad       	ldd	r30, Y+62	; 0x3e
    2242:	ff ad       	ldd	r31, Y+63	; 0x3f
    2244:	2e 97       	sbiw	r28, 0x0e	; 14
    2246:	00 82       	st	Z, r0
    2248:	2e 96       	adiw	r28, 0x0e	; 14
    224a:	2e ad       	ldd	r18, Y+62	; 0x3e
    224c:	3f ad       	ldd	r19, Y+63	; 0x3f
    224e:	2e 97       	sbiw	r28, 0x0e	; 14
    2250:	2f 5f       	subi	r18, 0xFF	; 255
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	2e 96       	adiw	r28, 0x0e	; 14
    2256:	3f af       	std	Y+63, r19	; 0x3f
    2258:	2e af       	std	Y+62, r18	; 0x3e
    225a:	2e 97       	sbiw	r28, 0x0e	; 14
    225c:	61 96       	adiw	r28, 0x11	; 17
    225e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2260:	61 97       	sbiw	r28, 0x11	; 17
    2262:	31 50       	subi	r19, 0x01	; 1
    2264:	61 96       	adiw	r28, 0x11	; 17
    2266:	3f af       	std	Y+63, r19	; 0x3f
    2268:	61 97       	sbiw	r28, 0x11	; 17
    226a:	61 96       	adiw	r28, 0x11	; 17
    226c:	8f ad       	ldd	r24, Y+63	; 0x3f
    226e:	61 97       	sbiw	r28, 0x11	; 17
    2270:	88 23       	and	r24, r24
    2272:	b1 f6       	brne	.-84     	; 0x2220 <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    2274:	fe 01       	movw	r30, r28
    2276:	e9 5b       	subi	r30, 0xB9	; 185
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	08 f0       	brcs	.+2      	; 0x2282 <HSSD_vDisplayNumberAscending+0xac>
    2280:	7c c2       	rjmp	.+1272   	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    2282:	fe 01       	movw	r30, r28
    2284:	e9 5b       	subi	r30, 0xB9	; 185
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	e8 2f       	mov	r30, r24
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	2c 96       	adiw	r28, 0x0c	; 12
    2290:	ff af       	std	Y+63, r31	; 0x3f
    2292:	ee af       	std	Y+62, r30	; 0x3e
    2294:	2c 97       	sbiw	r28, 0x0c	; 12
    2296:	2c 96       	adiw	r28, 0x0c	; 12
    2298:	2e ad       	ldd	r18, Y+62	; 0x3e
    229a:	3f ad       	ldd	r19, Y+63	; 0x3f
    229c:	2c 97       	sbiw	r28, 0x0c	; 12
    229e:	21 30       	cpi	r18, 0x01	; 1
    22a0:	31 05       	cpc	r19, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <HSSD_vDisplayNumberAscending+0xd0>
    22a4:	b2 c0       	rjmp	.+356    	; 0x240a <HSSD_vDisplayNumberAscending+0x234>
    22a6:	2c 96       	adiw	r28, 0x0c	; 12
    22a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    22ac:	2c 97       	sbiw	r28, 0x0c	; 12
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	91 05       	cpc	r25, r1
    22b2:	3c f4       	brge	.+14     	; 0x22c2 <HSSD_vDisplayNumberAscending+0xec>
    22b4:	2c 96       	adiw	r28, 0x0c	; 12
    22b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    22b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    22ba:	2c 97       	sbiw	r28, 0x0c	; 12
    22bc:	30 97       	sbiw	r30, 0x00	; 0
    22be:	91 f0       	breq	.+36     	; 0x22e4 <HSSD_vDisplayNumberAscending+0x10e>
    22c0:	5c c2       	rjmp	.+1208   	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
    22c2:	2c 96       	adiw	r28, 0x0c	; 12
    22c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    22c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    22c8:	2c 97       	sbiw	r28, 0x0c	; 12
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <HSSD_vDisplayNumberAscending+0xfc>
    22d0:	2f c1       	rjmp	.+606    	; 0x2530 <HSSD_vDisplayNumberAscending+0x35a>
    22d2:	2c 96       	adiw	r28, 0x0c	; 12
    22d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d8:	2c 97       	sbiw	r28, 0x0c	; 12
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	91 05       	cpc	r25, r1
    22de:	09 f4       	brne	.+2      	; 0x22e2 <HSSD_vDisplayNumberAscending+0x10c>
    22e0:	ba c1       	rjmp	.+884    	; 0x2656 <HSSD_vDisplayNumberAscending+0x480>
    22e2:	4b c2       	rjmp	.+1174   	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    22e4:	1c ae       	std	Y+60, r1	; 0x3c
    22e6:	8c c0       	rjmp	.+280    	; 0x2400 <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    22e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	ce 01       	movw	r24, r28
    22f0:	cd 96       	adiw	r24, 0x3d	; 61
    22f2:	fc 01       	movw	r30, r24
    22f4:	e2 0f       	add	r30, r18
    22f6:	f3 1f       	adc	r31, r19
    22f8:	90 81       	ld	r25, Z
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	69 2f       	mov	r22, r25
    22fe:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2302:	fe 01       	movw	r30, r28
    2304:	e8 5b       	subi	r30, 0xB8	; 184
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	cc 01       	movw	r24, r24
    230e:	a0 e0       	ldi	r26, 0x00	; 0
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8d ab       	std	Y+53, r24	; 0x35
    2320:	9e ab       	std	Y+54, r25	; 0x36
    2322:	af ab       	std	Y+55, r26	; 0x37
    2324:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6d a9       	ldd	r22, Y+53	; 0x35
    2328:	7e a9       	ldd	r23, Y+54	; 0x36
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a ef       	ldi	r20, 0xFA	; 250
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	89 ab       	std	Y+49, r24	; 0x31
    2340:	9a ab       	std	Y+50, r25	; 0x32
    2342:	ab ab       	std	Y+51, r26	; 0x33
    2344:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2346:	69 a9       	ldd	r22, Y+49	; 0x31
    2348:	7a a9       	ldd	r23, Y+50	; 0x32
    234a:	8b a9       	ldd	r24, Y+51	; 0x33
    234c:	9c a9       	ldd	r25, Y+52	; 0x34
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	98 ab       	std	Y+48, r25	; 0x30
    2364:	8f a7       	std	Y+47, r24	; 0x2f
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6d a9       	ldd	r22, Y+53	; 0x35
    2382:	7e a9       	ldd	r23, Y+54	; 0x36
    2384:	8f a9       	ldd	r24, Y+55	; 0x37
    2386:	98 ad       	ldd	r25, Y+56	; 0x38
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	98 ab       	std	Y+48, r25	; 0x30
    23a6:	8f a7       	std	Y+47, r24	; 0x2f
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <HSSD_vDisplayNumberAscending+0x1f2>
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e a7       	std	Y+46, r25	; 0x2e
    23b0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <HSSD_vDisplayNumberAscending+0x1e0>
    23ba:	9e a7       	std	Y+46, r25	; 0x2e
    23bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c0:	98 a9       	ldd	r25, Y+48	; 0x30
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	98 ab       	std	Y+48, r25	; 0x30
    23c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ca:	98 a9       	ldd	r25, Y+48	; 0x30
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <HSSD_vDisplayNumberAscending+0x1d4>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	9c a7       	std	Y+44, r25	; 0x2c
    23ec:	8b a7       	std	Y+43, r24	; 0x2b
    23ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <HSSD_vDisplayNumberAscending+0x21c>
    23f6:	9c a7       	std	Y+44, r25	; 0x2c
    23f8:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    23fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    23fc:	8f 5f       	subi	r24, 0xFF	; 255
    23fe:	8c af       	std	Y+60, r24	; 0x3c
    2400:	8c ad       	ldd	r24, Y+60	; 0x3c
    2402:	8a 30       	cpi	r24, 0x0A	; 10
    2404:	08 f4       	brcc	.+2      	; 0x2408 <HSSD_vDisplayNumberAscending+0x232>
    2406:	70 cf       	rjmp	.-288    	; 0x22e8 <HSSD_vDisplayNumberAscending+0x112>
    2408:	b8 c1       	rjmp	.+880    	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    240a:	1b ae       	std	Y+59, r1	; 0x3b
    240c:	8c c0       	rjmp	.+280    	; 0x2526 <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    240e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	ce 01       	movw	r24, r28
    2416:	cd 96       	adiw	r24, 0x3d	; 61
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	90 81       	ld	r25, Z
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	69 2f       	mov	r22, r25
    2424:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2428:	fe 01       	movw	r30, r28
    242a:	e8 5b       	subi	r30, 0xB8	; 184
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	cc 01       	movw	r24, r24
    2434:	a0 e0       	ldi	r26, 0x00	; 0
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8f a3       	std	Y+39, r24	; 0x27
    2446:	98 a7       	std	Y+40, r25	; 0x28
    2448:	a9 a7       	std	Y+41, r26	; 0x29
    244a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	6f a1       	ldd	r22, Y+39	; 0x27
    244e:	78 a5       	ldd	r23, Y+40	; 0x28
    2450:	89 a5       	ldd	r24, Y+41	; 0x29
    2452:	9a a5       	ldd	r25, Y+42	; 0x2a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a ef       	ldi	r20, 0xFA	; 250
    245a:	54 e4       	ldi	r21, 0x44	; 68
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8b a3       	std	Y+35, r24	; 0x23
    2466:	9c a3       	std	Y+36, r25	; 0x24
    2468:	ad a3       	std	Y+37, r26	; 0x25
    246a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    246c:	6b a1       	ldd	r22, Y+35	; 0x23
    246e:	7c a1       	ldd	r23, Y+36	; 0x24
    2470:	8d a1       	ldd	r24, Y+37	; 0x25
    2472:	9e a1       	ldd	r25, Y+38	; 0x26
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9a a3       	std	Y+34, r25	; 0x22
    248a:	89 a3       	std	Y+33, r24	; 0x21
    248c:	3f c0       	rjmp	.+126    	; 0x250c <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	6f a1       	ldd	r22, Y+39	; 0x27
    24a8:	78 a5       	ldd	r23, Y+40	; 0x28
    24aa:	89 a5       	ldd	r24, Y+41	; 0x29
    24ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9a a3       	std	Y+34, r25	; 0x22
    24cc:	89 a3       	std	Y+33, r24	; 0x21
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <HSSD_vDisplayNumberAscending+0x318>
    24d0:	88 ec       	ldi	r24, 0xC8	; 200
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	98 a3       	std	Y+32, r25	; 0x20
    24d6:	8f 8f       	std	Y+31, r24	; 0x1f
    24d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24da:	98 a1       	ldd	r25, Y+32	; 0x20
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <HSSD_vDisplayNumberAscending+0x306>
    24e0:	98 a3       	std	Y+32, r25	; 0x20
    24e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9a a3       	std	Y+34, r25	; 0x22
    24ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	89 a1       	ldd	r24, Y+33	; 0x21
    24f0:	9a a1       	ldd	r25, Y+34	; 0x22
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <HSSD_vDisplayNumberAscending+0x2fa>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9a a3       	std	Y+34, r25	; 0x22
    250a:	89 a3       	std	Y+33, r24	; 0x21
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	9e 8f       	std	Y+30, r25	; 0x1e
    2512:	8d 8f       	std	Y+29, r24	; 0x1d
    2514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <HSSD_vDisplayNumberAscending+0x342>
    251c:	9e 8f       	std	Y+30, r25	; 0x1e
    251e:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    2520:	8b ad       	ldd	r24, Y+59	; 0x3b
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	8b af       	std	Y+59, r24	; 0x3b
    2526:	8b ad       	ldd	r24, Y+59	; 0x3b
    2528:	8a 30       	cpi	r24, 0x0A	; 10
    252a:	08 f4       	brcc	.+2      	; 0x252e <HSSD_vDisplayNumberAscending+0x358>
    252c:	70 cf       	rjmp	.-288    	; 0x240e <HSSD_vDisplayNumberAscending+0x238>
    252e:	25 c1       	rjmp	.+586    	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2530:	1a ae       	std	Y+58, r1	; 0x3a
    2532:	8c c0       	rjmp	.+280    	; 0x264c <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2534:	8a ad       	ldd	r24, Y+58	; 0x3a
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	ce 01       	movw	r24, r28
    253c:	cd 96       	adiw	r24, 0x3d	; 61
    253e:	fc 01       	movw	r30, r24
    2540:	e2 0f       	add	r30, r18
    2542:	f3 1f       	adc	r31, r19
    2544:	90 81       	ld	r25, Z
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	69 2f       	mov	r22, r25
    254a:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    254e:	fe 01       	movw	r30, r28
    2550:	e8 5b       	subi	r30, 0xB8	; 184
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	cc 01       	movw	r24, r24
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	89 8f       	std	Y+25, r24	; 0x19
    256c:	9a 8f       	std	Y+26, r25	; 0x1a
    256e:	ab 8f       	std	Y+27, r26	; 0x1b
    2570:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	69 8d       	ldd	r22, Y+25	; 0x19
    2574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8d 8b       	std	Y+21, r24	; 0x15
    258c:	9e 8b       	std	Y+22, r25	; 0x16
    258e:	af 8b       	std	Y+23, r26	; 0x17
    2590:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2592:	6d 89       	ldd	r22, Y+21	; 0x15
    2594:	7e 89       	ldd	r23, Y+22	; 0x16
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	98 8d       	ldd	r25, Y+24	; 0x18
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	69 8d       	ldd	r22, Y+25	; 0x19
    25ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <HSSD_vDisplayNumberAscending+0x43e>
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9a 8b       	std	Y+18, r25	; 0x12
    25fc:	89 8b       	std	Y+17, r24	; 0x11
    25fe:	89 89       	ldd	r24, Y+17	; 0x11
    2600:	9a 89       	ldd	r25, Y+18	; 0x12
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <HSSD_vDisplayNumberAscending+0x42c>
    2606:	9a 8b       	std	Y+18, r25	; 0x12
    2608:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8b 89       	ldd	r24, Y+19	; 0x13
    2616:	9c 89       	ldd	r25, Y+20	; 0x14
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <HSSD_vDisplayNumberAscending+0x420>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6d 89       	ldd	r22, Y+21	; 0x15
    2620:	7e 89       	ldd	r23, Y+22	; 0x16
    2622:	8f 89       	ldd	r24, Y+23	; 0x17
    2624:	98 8d       	ldd	r25, Y+24	; 0x18
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	98 8b       	std	Y+16, r25	; 0x10
    2638:	8f 87       	std	Y+15, r24	; 0x0f
    263a:	8f 85       	ldd	r24, Y+15	; 0x0f
    263c:	98 89       	ldd	r25, Y+16	; 0x10
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <HSSD_vDisplayNumberAscending+0x468>
    2642:	98 8b       	std	Y+16, r25	; 0x10
    2644:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2646:	8a ad       	ldd	r24, Y+58	; 0x3a
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	8a af       	std	Y+58, r24	; 0x3a
    264c:	8a ad       	ldd	r24, Y+58	; 0x3a
    264e:	8a 30       	cpi	r24, 0x0A	; 10
    2650:	08 f4       	brcc	.+2      	; 0x2654 <HSSD_vDisplayNumberAscending+0x47e>
    2652:	70 cf       	rjmp	.-288    	; 0x2534 <HSSD_vDisplayNumberAscending+0x35e>
    2654:	92 c0       	rjmp	.+292    	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    2656:	19 ae       	std	Y+57, r1	; 0x39
    2658:	8c c0       	rjmp	.+280    	; 0x2772 <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    265a:	89 ad       	ldd	r24, Y+57	; 0x39
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	ce 01       	movw	r24, r28
    2662:	cd 96       	adiw	r24, 0x3d	; 61
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	90 81       	ld	r25, Z
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	69 2f       	mov	r22, r25
    2670:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2674:	fe 01       	movw	r30, r28
    2676:	e8 5b       	subi	r30, 0xB8	; 184
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	cc 01       	movw	r24, r24
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8b 87       	std	Y+11, r24	; 0x0b
    2692:	9c 87       	std	Y+12, r25	; 0x0c
    2694:	ad 87       	std	Y+13, r26	; 0x0d
    2696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	6b 85       	ldd	r22, Y+11	; 0x0b
    269a:	7c 85       	ldd	r23, Y+12	; 0x0c
    269c:	8d 85       	ldd	r24, Y+13	; 0x0d
    269e:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a ef       	ldi	r20, 0xFA	; 250
    26a6:	54 e4       	ldi	r21, 0x44	; 68
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8f 83       	std	Y+7, r24	; 0x07
    26b2:	98 87       	std	Y+8, r25	; 0x08
    26b4:	a9 87       	std	Y+9, r26	; 0x09
    26b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ba:	78 85       	ldd	r23, Y+8	; 0x08
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    26da:	6f 81       	ldd	r22, Y+7	; 0x07
    26dc:	78 85       	ldd	r23, Y+8	; 0x08
    26de:	89 85       	ldd	r24, Y+9	; 0x09
    26e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	0f c0       	rjmp	.+30     	; 0x273a <HSSD_vDisplayNumberAscending+0x564>
    271c:	88 ec       	ldi	r24, 0xC8	; 200
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9c 83       	std	Y+4, r25	; 0x04
    2722:	8b 83       	std	Y+3, r24	; 0x03
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <HSSD_vDisplayNumberAscending+0x552>
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <HSSD_vDisplayNumberAscending+0x546>
    2742:	14 c0       	rjmp	.+40     	; 0x276c <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <HSSD_vDisplayNumberAscending+0x58e>
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    276c:	89 ad       	ldd	r24, Y+57	; 0x39
    276e:	8f 5f       	subi	r24, 0xFF	; 255
    2770:	89 af       	std	Y+57, r24	; 0x39
    2772:	89 ad       	ldd	r24, Y+57	; 0x39
    2774:	8a 30       	cpi	r24, 0x0A	; 10
    2776:	08 f4       	brcc	.+2      	; 0x277a <HSSD_vDisplayNumberAscending+0x5a4>
    2778:	70 cf       	rjmp	.-288    	; 0x265a <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    277a:	c0 5b       	subi	r28, 0xB0	; 176
    277c:	df 4f       	sbci	r29, 0xFF	; 255
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,s8 A_u8Time , u16 A_u16TimetoWait)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	c1 55       	subi	r28, 0x51	; 81
    2798:	d0 40       	sbci	r29, 0x00	; 0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 5b       	subi	r30, 0xB9	; 185
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 83       	st	Z, r24
    27ac:	fe 01       	movw	r30, r28
    27ae:	e8 5b       	subi	r30, 0xB8	; 184
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 83       	st	Z, r22
    27b4:	fe 01       	movw	r30, r28
    27b6:	e7 5b       	subi	r30, 0xB7	; 183
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	51 83       	std	Z+1, r21	; 0x01
    27bc:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    27be:	9e 01       	movw	r18, r28
    27c0:	23 5c       	subi	r18, 0xC3	; 195
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	2f 96       	adiw	r28, 0x0f	; 15
    27c6:	3f af       	std	Y+63, r19	; 0x3f
    27c8:	2e af       	std	Y+62, r18	; 0x3e
    27ca:	2f 97       	sbiw	r28, 0x0f	; 15
    27cc:	82 e8       	ldi	r24, 0x82	; 130
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	61 96       	adiw	r28, 0x11	; 17
    27d2:	9f af       	std	Y+63, r25	; 0x3f
    27d4:	8e af       	std	Y+62, r24	; 0x3e
    27d6:	61 97       	sbiw	r28, 0x11	; 17
    27d8:	9a e0       	ldi	r25, 0x0A	; 10
    27da:	62 96       	adiw	r28, 0x12	; 18
    27dc:	9f af       	std	Y+63, r25	; 0x3f
    27de:	62 97       	sbiw	r28, 0x12	; 18
    27e0:	61 96       	adiw	r28, 0x11	; 17
    27e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    27e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    27e6:	61 97       	sbiw	r28, 0x11	; 17
    27e8:	00 80       	ld	r0, Z
    27ea:	61 96       	adiw	r28, 0x11	; 17
    27ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    27ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    27f0:	61 97       	sbiw	r28, 0x11	; 17
    27f2:	2f 5f       	subi	r18, 0xFF	; 255
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	61 96       	adiw	r28, 0x11	; 17
    27f8:	3f af       	std	Y+63, r19	; 0x3f
    27fa:	2e af       	std	Y+62, r18	; 0x3e
    27fc:	61 97       	sbiw	r28, 0x11	; 17
    27fe:	2f 96       	adiw	r28, 0x0f	; 15
    2800:	ee ad       	ldd	r30, Y+62	; 0x3e
    2802:	ff ad       	ldd	r31, Y+63	; 0x3f
    2804:	2f 97       	sbiw	r28, 0x0f	; 15
    2806:	00 82       	st	Z, r0
    2808:	2f 96       	adiw	r28, 0x0f	; 15
    280a:	2e ad       	ldd	r18, Y+62	; 0x3e
    280c:	3f ad       	ldd	r19, Y+63	; 0x3f
    280e:	2f 97       	sbiw	r28, 0x0f	; 15
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	2f 96       	adiw	r28, 0x0f	; 15
    2816:	3f af       	std	Y+63, r19	; 0x3f
    2818:	2e af       	std	Y+62, r18	; 0x3e
    281a:	2f 97       	sbiw	r28, 0x0f	; 15
    281c:	62 96       	adiw	r28, 0x12	; 18
    281e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2820:	62 97       	sbiw	r28, 0x12	; 18
    2822:	31 50       	subi	r19, 0x01	; 1
    2824:	62 96       	adiw	r28, 0x12	; 18
    2826:	3f af       	std	Y+63, r19	; 0x3f
    2828:	62 97       	sbiw	r28, 0x12	; 18
    282a:	62 96       	adiw	r28, 0x12	; 18
    282c:	8f ad       	ldd	r24, Y+63	; 0x3f
    282e:	62 97       	sbiw	r28, 0x12	; 18
    2830:	88 23       	and	r24, r24
    2832:	b1 f6       	brne	.-84     	; 0x27e0 <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    2834:	fe 01       	movw	r30, r28
    2836:	e9 5b       	subi	r30, 0xB9	; 185
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	84 30       	cpi	r24, 0x04	; 4
    283e:	08 f0       	brcs	.+2      	; 0x2842 <HSSD_vCountDown+0xb4>
    2840:	9b c2       	rjmp	.+1334   	; 0x2d78 <HSSD_vCountDown+0x5ea>
	{
		switch(A_PortID)
    2842:	fe 01       	movw	r30, r28
    2844:	e9 5b       	subi	r30, 0xB9	; 185
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	e8 2f       	mov	r30, r24
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	2d 96       	adiw	r28, 0x0d	; 13
    2850:	ff af       	std	Y+63, r31	; 0x3f
    2852:	ee af       	std	Y+62, r30	; 0x3e
    2854:	2d 97       	sbiw	r28, 0x0d	; 13
    2856:	2d 96       	adiw	r28, 0x0d	; 13
    2858:	2e ad       	ldd	r18, Y+62	; 0x3e
    285a:	3f ad       	ldd	r19, Y+63	; 0x3f
    285c:	2d 97       	sbiw	r28, 0x0d	; 13
    285e:	21 30       	cpi	r18, 0x01	; 1
    2860:	31 05       	cpc	r19, r1
    2862:	09 f4       	brne	.+2      	; 0x2866 <HSSD_vCountDown+0xd8>
    2864:	b8 c0       	rjmp	.+368    	; 0x29d6 <HSSD_vCountDown+0x248>
    2866:	2d 96       	adiw	r28, 0x0d	; 13
    2868:	8e ad       	ldd	r24, Y+62	; 0x3e
    286a:	9f ad       	ldd	r25, Y+63	; 0x3f
    286c:	2d 97       	sbiw	r28, 0x0d	; 13
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	91 05       	cpc	r25, r1
    2872:	3c f4       	brge	.+14     	; 0x2882 <HSSD_vCountDown+0xf4>
    2874:	2d 96       	adiw	r28, 0x0d	; 13
    2876:	ee ad       	ldd	r30, Y+62	; 0x3e
    2878:	ff ad       	ldd	r31, Y+63	; 0x3f
    287a:	2d 97       	sbiw	r28, 0x0d	; 13
    287c:	30 97       	sbiw	r30, 0x00	; 0
    287e:	91 f0       	breq	.+36     	; 0x28a4 <HSSD_vCountDown+0x116>
    2880:	74 c2       	rjmp	.+1256   	; 0x2d6a <HSSD_vCountDown+0x5dc>
    2882:	2d 96       	adiw	r28, 0x0d	; 13
    2884:	2e ad       	ldd	r18, Y+62	; 0x3e
    2886:	3f ad       	ldd	r19, Y+63	; 0x3f
    2888:	2d 97       	sbiw	r28, 0x0d	; 13
    288a:	22 30       	cpi	r18, 0x02	; 2
    288c:	31 05       	cpc	r19, r1
    288e:	09 f4       	brne	.+2      	; 0x2892 <HSSD_vCountDown+0x104>
    2890:	3b c1       	rjmp	.+630    	; 0x2b08 <HSSD_vCountDown+0x37a>
    2892:	2d 96       	adiw	r28, 0x0d	; 13
    2894:	8e ad       	ldd	r24, Y+62	; 0x3e
    2896:	9f ad       	ldd	r25, Y+63	; 0x3f
    2898:	2d 97       	sbiw	r28, 0x0d	; 13
    289a:	83 30       	cpi	r24, 0x03	; 3
    289c:	91 05       	cpc	r25, r1
    289e:	09 f4       	brne	.+2      	; 0x28a2 <HSSD_vCountDown+0x114>
    28a0:	cc c1       	rjmp	.+920    	; 0x2c3a <HSSD_vCountDown+0x4ac>
    28a2:	63 c2       	rjmp	.+1222   	; 0x2d6a <HSSD_vCountDown+0x5dc>
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e8 5b       	subi	r30, 0xB8	; 184
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	8c af       	std	Y+60, r24	; 0x3c
    28ae:	8e c0       	rjmp	.+284    	; 0x29cc <HSSD_vCountDown+0x23e>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    28b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    28b2:	28 2f       	mov	r18, r24
    28b4:	33 27       	eor	r19, r19
    28b6:	27 fd       	sbrc	r18, 7
    28b8:	30 95       	com	r19
    28ba:	ce 01       	movw	r24, r28
    28bc:	cd 96       	adiw	r24, 0x3d	; 61
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	90 81       	ld	r25, Z
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	69 2f       	mov	r22, r25
    28ca:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 5b       	subi	r30, 0xB7	; 183
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	cc 01       	movw	r24, r24
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8d ab       	std	Y+53, r24	; 0x35
    28ec:	9e ab       	std	Y+54, r25	; 0x36
    28ee:	af ab       	std	Y+55, r26	; 0x37
    28f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	6d a9       	ldd	r22, Y+53	; 0x35
    28f4:	7e a9       	ldd	r23, Y+54	; 0x36
    28f6:	8f a9       	ldd	r24, Y+55	; 0x37
    28f8:	98 ad       	ldd	r25, Y+56	; 0x38
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	89 ab       	std	Y+49, r24	; 0x31
    290c:	9a ab       	std	Y+50, r25	; 0x32
    290e:	ab ab       	std	Y+51, r26	; 0x33
    2910:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2912:	69 a9       	ldd	r22, Y+49	; 0x31
    2914:	7a a9       	ldd	r23, Y+50	; 0x32
    2916:	8b a9       	ldd	r24, Y+51	; 0x33
    2918:	9c a9       	ldd	r25, Y+52	; 0x34
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <HSSD_vCountDown+0x1a6>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	98 ab       	std	Y+48, r25	; 0x30
    2930:	8f a7       	std	Y+47, r24	; 0x2f
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <HSSD_vCountDown+0x224>
	else if (__tmp > 65535)
    2934:	69 a9       	ldd	r22, Y+49	; 0x31
    2936:	7a a9       	ldd	r23, Y+50	; 0x32
    2938:	8b a9       	ldd	r24, Y+51	; 0x33
    293a:	9c a9       	ldd	r25, Y+52	; 0x34
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <HSSD_vCountDown+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	6d a9       	ldd	r22, Y+53	; 0x35
    294e:	7e a9       	ldd	r23, Y+54	; 0x36
    2950:	8f a9       	ldd	r24, Y+55	; 0x37
    2952:	98 ad       	ldd	r25, Y+56	; 0x38
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	98 ab       	std	Y+48, r25	; 0x30
    2972:	8f a7       	std	Y+47, r24	; 0x2f
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <HSSD_vCountDown+0x206>
    2976:	88 ec       	ldi	r24, 0xC8	; 200
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9e a7       	std	Y+46, r25	; 0x2e
    297c:	8d a7       	std	Y+45, r24	; 0x2d
    297e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2980:	9e a5       	ldd	r25, Y+46	; 0x2e
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <HSSD_vCountDown+0x1f4>
    2986:	9e a7       	std	Y+46, r25	; 0x2e
    2988:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	98 a9       	ldd	r25, Y+48	; 0x30
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	98 ab       	std	Y+48, r25	; 0x30
    2992:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8f a5       	ldd	r24, Y+47	; 0x2f
    2996:	98 a9       	ldd	r25, Y+48	; 0x30
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <HSSD_vCountDown+0x1e8>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <HSSD_vCountDown+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	69 a9       	ldd	r22, Y+49	; 0x31
    29a0:	7a a9       	ldd	r23, Y+50	; 0x32
    29a2:	8b a9       	ldd	r24, Y+51	; 0x33
    29a4:	9c a9       	ldd	r25, Y+52	; 0x34
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	98 ab       	std	Y+48, r25	; 0x30
    29b0:	8f a7       	std	Y+47, r24	; 0x2f
    29b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b4:	98 a9       	ldd	r25, Y+48	; 0x30
    29b6:	9c a7       	std	Y+44, r25	; 0x2c
    29b8:	8b a7       	std	Y+43, r24	; 0x2b
    29ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    29bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <HSSD_vCountDown+0x230>
    29c2:	9c a7       	std	Y+44, r25	; 0x2c
    29c4:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    29c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	8c af       	std	Y+60, r24	; 0x3c
    29cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    29ce:	88 23       	and	r24, r24
    29d0:	0c f0       	brlt	.+2      	; 0x29d4 <HSSD_vCountDown+0x246>
    29d2:	6e cf       	rjmp	.-292    	; 0x28b0 <HSSD_vCountDown+0x122>
    29d4:	ca c1       	rjmp	.+916    	; 0x2d6a <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    29d6:	fe 01       	movw	r30, r28
    29d8:	e8 5b       	subi	r30, 0xB8	; 184
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	8b af       	std	Y+59, r24	; 0x3b
    29e0:	8e c0       	rjmp	.+284    	; 0x2afe <HSSD_vCountDown+0x370>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    29e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    29e4:	28 2f       	mov	r18, r24
    29e6:	33 27       	eor	r19, r19
    29e8:	27 fd       	sbrc	r18, 7
    29ea:	30 95       	com	r19
    29ec:	ce 01       	movw	r24, r28
    29ee:	cd 96       	adiw	r24, 0x3d	; 61
    29f0:	fc 01       	movw	r30, r24
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	90 81       	ld	r25, Z
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	69 2f       	mov	r22, r25
    29fc:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 5b       	subi	r30, 0xB7	; 183
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	cc 01       	movw	r24, r24
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8f a3       	std	Y+39, r24	; 0x27
    2a1e:	98 a7       	std	Y+40, r25	; 0x28
    2a20:	a9 a7       	std	Y+41, r26	; 0x29
    2a22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	6f a1       	ldd	r22, Y+39	; 0x27
    2a26:	78 a5       	ldd	r23, Y+40	; 0x28
    2a28:	89 a5       	ldd	r24, Y+41	; 0x29
    2a2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a ef       	ldi	r20, 0xFA	; 250
    2a32:	54 e4       	ldi	r21, 0x44	; 68
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	8b a3       	std	Y+35, r24	; 0x23
    2a3e:	9c a3       	std	Y+36, r25	; 0x24
    2a40:	ad a3       	std	Y+37, r26	; 0x25
    2a42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a44:	6b a1       	ldd	r22, Y+35	; 0x23
    2a46:	7c a1       	ldd	r23, Y+36	; 0x24
    2a48:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <HSSD_vCountDown+0x2d8>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9a a3       	std	Y+34, r25	; 0x22
    2a62:	89 a3       	std	Y+33, r24	; 0x21
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <HSSD_vCountDown+0x356>
	else if (__tmp > 65535)
    2a66:	6b a1       	ldd	r22, Y+35	; 0x23
    2a68:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <HSSD_vCountDown+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a80:	78 a5       	ldd	r23, Y+40	; 0x28
    2a82:	89 a5       	ldd	r24, Y+41	; 0x29
    2a84:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9a a3       	std	Y+34, r25	; 0x22
    2aa4:	89 a3       	std	Y+33, r24	; 0x21
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <HSSD_vCountDown+0x338>
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	98 a3       	std	Y+32, r25	; 0x20
    2aae:	8f 8f       	std	Y+31, r24	; 0x1f
    2ab0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <HSSD_vCountDown+0x326>
    2ab8:	98 a3       	std	Y+32, r25	; 0x20
    2aba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	89 a1       	ldd	r24, Y+33	; 0x21
    2abe:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9a a3       	std	Y+34, r25	; 0x22
    2ac4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <HSSD_vCountDown+0x31a>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <HSSD_vCountDown+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9a a3       	std	Y+34, r25	; 0x22
    2ae2:	89 a3       	std	Y+33, r24	; 0x21
    2ae4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aea:	8d 8f       	std	Y+29, r24	; 0x1d
    2aec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <HSSD_vCountDown+0x362>
    2af4:	9e 8f       	std	Y+30, r25	; 0x1e
    2af6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2af8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2afa:	81 50       	subi	r24, 0x01	; 1
    2afc:	8b af       	std	Y+59, r24	; 0x3b
    2afe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b00:	88 23       	and	r24, r24
    2b02:	0c f0       	brlt	.+2      	; 0x2b06 <HSSD_vCountDown+0x378>
    2b04:	6e cf       	rjmp	.-292    	; 0x29e2 <HSSD_vCountDown+0x254>
    2b06:	31 c1       	rjmp	.+610    	; 0x2d6a <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e8 5b       	subi	r30, 0xB8	; 184
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	8a af       	std	Y+58, r24	; 0x3a
    2b12:	8e c0       	rjmp	.+284    	; 0x2c30 <HSSD_vCountDown+0x4a2>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2b14:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b16:	28 2f       	mov	r18, r24
    2b18:	33 27       	eor	r19, r19
    2b1a:	27 fd       	sbrc	r18, 7
    2b1c:	30 95       	com	r19
    2b1e:	ce 01       	movw	r24, r28
    2b20:	cd 96       	adiw	r24, 0x3d	; 61
    2b22:	fc 01       	movw	r30, r24
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	90 81       	ld	r25, Z
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	69 2f       	mov	r22, r25
    2b2e:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2b32:	fe 01       	movw	r30, r28
    2b34:	e7 5b       	subi	r30, 0xB7	; 183
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	cc 01       	movw	r24, r24
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	bc 01       	movw	r22, r24
    2b44:	cd 01       	movw	r24, r26
    2b46:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	89 8f       	std	Y+25, r24	; 0x19
    2b50:	9a 8f       	std	Y+26, r25	; 0x1a
    2b52:	ab 8f       	std	Y+27, r26	; 0x1b
    2b54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	69 8d       	ldd	r22, Y+25	; 0x19
    2b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8d 8b       	std	Y+21, r24	; 0x15
    2b70:	9e 8b       	std	Y+22, r25	; 0x16
    2b72:	af 8b       	std	Y+23, r26	; 0x17
    2b74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <HSSD_vCountDown+0x40a>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <HSSD_vCountDown+0x488>
	else if (__tmp > 65535)
    2b98:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <HSSD_vCountDown+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <HSSD_vCountDown+0x46a>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9a 8b       	std	Y+18, r25	; 0x12
    2be0:	89 8b       	std	Y+17, r24	; 0x11
    2be2:	89 89       	ldd	r24, Y+17	; 0x11
    2be4:	9a 89       	ldd	r25, Y+18	; 0x12
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <HSSD_vCountDown+0x458>
    2bea:	9a 8b       	std	Y+18, r25	; 0x12
    2bec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <HSSD_vCountDown+0x44c>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <HSSD_vCountDown+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6d 89       	ldd	r22, Y+21	; 0x15
    2c04:	7e 89       	ldd	r23, Y+22	; 0x16
    2c06:	8f 89       	ldd	r24, Y+23	; 0x17
    2c08:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9c 8b       	std	Y+20, r25	; 0x14
    2c14:	8b 8b       	std	Y+19, r24	; 0x13
    2c16:	8b 89       	ldd	r24, Y+19	; 0x13
    2c18:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1a:	98 8b       	std	Y+16, r25	; 0x10
    2c1c:	8f 87       	std	Y+15, r24	; 0x0f
    2c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c20:	98 89       	ldd	r25, Y+16	; 0x10
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <HSSD_vCountDown+0x494>
    2c26:	98 8b       	std	Y+16, r25	; 0x10
    2c28:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2c2a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c2c:	81 50       	subi	r24, 0x01	; 1
    2c2e:	8a af       	std	Y+58, r24	; 0x3a
    2c30:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c32:	88 23       	and	r24, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <HSSD_vCountDown+0x4aa>
    2c36:	6e cf       	rjmp	.-292    	; 0x2b14 <HSSD_vCountDown+0x386>
    2c38:	98 c0       	rjmp	.+304    	; 0x2d6a <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e8 5b       	subi	r30, 0xB8	; 184
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	89 af       	std	Y+57, r24	; 0x39
    2c44:	8e c0       	rjmp	.+284    	; 0x2d62 <HSSD_vCountDown+0x5d4>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    2c46:	89 ad       	ldd	r24, Y+57	; 0x39
    2c48:	28 2f       	mov	r18, r24
    2c4a:	33 27       	eor	r19, r19
    2c4c:	27 fd       	sbrc	r18, 7
    2c4e:	30 95       	com	r19
    2c50:	ce 01       	movw	r24, r28
    2c52:	cd 96       	adiw	r24, 0x3d	; 61
    2c54:	fc 01       	movw	r30, r24
    2c56:	e2 0f       	add	r30, r18
    2c58:	f3 1f       	adc	r31, r19
    2c5a:	90 81       	ld	r25, Z
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	69 2f       	mov	r22, r25
    2c60:	0e 94 a7 10 	call	0x214e	; 0x214e <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 5b       	subi	r30, 0xB7	; 183
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	cc 01       	movw	r24, r24
    2c70:	a0 e0       	ldi	r26, 0x00	; 0
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8b 87       	std	Y+11, r24	; 0x0b
    2c82:	9c 87       	std	Y+12, r25	; 0x0c
    2c84:	ad 87       	std	Y+13, r26	; 0x0d
    2c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a ef       	ldi	r20, 0xFA	; 250
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8f 83       	std	Y+7, r24	; 0x07
    2ca2:	98 87       	std	Y+8, r25	; 0x08
    2ca4:	a9 87       	std	Y+9, r26	; 0x09
    2ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <HSSD_vCountDown+0x53c>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <HSSD_vCountDown+0x5ba>
	else if (__tmp > 65535)
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <HSSD_vCountDown+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <HSSD_vCountDown+0x59c>
    2d0c:	88 ec       	ldi	r24, 0xC8	; 200
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <HSSD_vCountDown+0x58a>
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <HSSD_vCountDown+0x57e>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <HSSD_vCountDown+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6f 81       	ldd	r22, Y+7	; 0x07
    2d36:	78 85       	ldd	r23, Y+8	; 0x08
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	9a 81       	ldd	r25, Y+2	; 0x02
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <HSSD_vCountDown+0x5c6>
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2d5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d5e:	81 50       	subi	r24, 0x01	; 1
    2d60:	89 af       	std	Y+57, r24	; 0x39
    2d62:	89 ad       	ldd	r24, Y+57	; 0x39
    2d64:	88 23       	and	r24, r24
    2d66:	0c f0       	brlt	.+2      	; 0x2d6a <HSSD_vCountDown+0x5dc>
    2d68:	6e cf       	rjmp	.-292    	; 0x2c46 <HSSD_vCountDown+0x4b8>
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
		MDIO_vSetPortVal(A_PortID , 0xFF);
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e9 5b       	subi	r30, 0xB9	; 185
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
	}
}
    2d78:	cf 5a       	subi	r28, 0xAF	; 175
    2d7a:	df 4f       	sbci	r29, 0xFF	; 255
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <HSSD_vTurnOFF>:

void HSSD_vTurnOFF(DIO_PORT_e A_PortID)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	0f 92       	push	r0
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortVal(A_PortID , 0xFF);
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	6f ef       	ldi	r22, 0xFF	; 255
    2d9c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
}
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	62 e0       	ldi	r22, 0x02	; 2
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	6f ef       	ldi	r22, 0xFF	; 255
    2dd2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
}
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	2f 97       	sbiw	r28, 0x0f	; 15
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	61 e0       	ldi	r22, 0x01	; 1
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e0a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	a0 e8       	ldi	r26, 0x80	; 128
    2e1e:	bf e3       	ldi	r27, 0x3F	; 63
    2e20:	8b 87       	std	Y+11, r24	; 0x0b
    2e22:	9c 87       	std	Y+12, r25	; 0x0c
    2e24:	ad 87       	std	Y+13, r26	; 0x0d
    2e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4a ef       	ldi	r20, 0xFA	; 250
    2e36:	54 e4       	ldi	r21, 0x44	; 68
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	8f 83       	std	Y+7, r24	; 0x07
    2e42:	98 87       	std	Y+8, r25	; 0x08
    2e44:	a9 87       	std	Y+9, r26	; 0x09
    2e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e48:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4a:	78 85       	ldd	r23, Y+8	; 0x08
    2e4c:	89 85       	ldd	r24, Y+9	; 0x09
    2e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e5c:	88 23       	and	r24, r24
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <LCD_SendCommand+0x8e>
		__ticks = 1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
    2e68:	3f c0       	rjmp	.+126    	; 0x2ee8 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    2e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6c:	78 85       	ldd	r23, Y+8	; 0x08
    2e6e:	89 85       	ldd	r24, Y+9	; 0x09
    2e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e7e:	18 16       	cp	r1, r24
    2e80:	4c f5       	brge	.+82     	; 0x2ed4 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <LCD_SendCommand+0xee>
    2eac:	88 ec       	ldi	r24, 0xC8	; 200
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <LCD_SendCommand+0xdc>
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	69 f7       	brne	.-38     	; 0x2eac <LCD_SendCommand+0xd0>
    2ed2:	14 c0       	rjmp	.+40     	; 0x2efc <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <LCD_SendCommand+0x118>
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	62 e0       	ldi	r22, 0x02	; 2
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>

}
    2f06:	2f 96       	adiw	r28, 0x0f	; 15
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	2f 97       	sbiw	r28, 0x0f	; 15
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	41 e0       	ldi	r20, 0x01	; 1
    2f34:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f46:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	62 e0       	ldi	r22, 0x02	; 2
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	8b 87       	std	Y+11, r24	; 0x0b
    2f5e:	9c 87       	std	Y+12, r25	; 0x0c
    2f60:	ad 87       	std	Y+13, r26	; 0x0d
    2f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8f 83       	std	Y+7, r24	; 0x07
    2f7e:	98 87       	std	Y+8, r25	; 0x08
    2f80:	a9 87       	std	Y+9, r26	; 0x09
    2f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f84:	6f 81       	ldd	r22, Y+7	; 0x07
    2f86:	78 85       	ldd	r23, Y+8	; 0x08
    2f88:	89 85       	ldd	r24, Y+9	; 0x09
    2f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_SendData+0x8e>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_SendData+0xee>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_SendData+0xdc>
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9e 83       	std	Y+6, r25	; 0x06
    3004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_SendData+0xd0>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_SendData+0x118>
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	62 e0       	ldi	r22, 0x02	; 2
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>
}
    3042:	2f 96       	adiw	r28, 0x0f	; 15
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <LCD_Init>:

void LCD_Init(void)
{
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	c6 54       	subi	r28, 0x46	; 70
    3062:	d0 40       	sbci	r29, 0x00	; 0
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	fe 01       	movw	r30, r28
    3070:	ed 5b       	subi	r30, 0xBD	; 189
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e2       	ldi	r26, 0x20	; 32
    307a:	b2 e4       	ldi	r27, 0x42	; 66
    307c:	80 83       	st	Z, r24
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	a2 83       	std	Z+2, r26	; 0x02
    3082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3084:	8e 01       	movw	r16, r28
    3086:	01 5c       	subi	r16, 0xC1	; 193
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	fe 01       	movw	r30, r28
    308c:	ed 5b       	subi	r30, 0xBD	; 189
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 83       	st	Z, r24
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	a2 83       	std	Z+2, r26	; 0x02
    30b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b2:	fe 01       	movw	r30, r28
    30b4:	ff 96       	adiw	r30, 0x3f	; 63
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <LCD_Init+0x84>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9e af       	std	Y+62, r25	; 0x3e
    30d4:	8d af       	std	Y+61, r24	; 0x3d
    30d6:	46 c0       	rjmp	.+140    	; 0x3164 <LCD_Init+0x110>
	else if (__tmp > 65535)
    30d8:	fe 01       	movw	r30, r28
    30da:	ff 96       	adiw	r30, 0x3f	; 63
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	3f ef       	ldi	r19, 0xFF	; 255
    30e8:	4f e7       	ldi	r20, 0x7F	; 127
    30ea:	57 e4       	ldi	r21, 0x47	; 71
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	64 f5       	brge	.+88     	; 0x314c <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f4:	fe 01       	movw	r30, r28
    30f6:	ed 5b       	subi	r30, 0xBD	; 189
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9e af       	std	Y+62, r25	; 0x3e
    3120:	8d af       	std	Y+61, r24	; 0x3d
    3122:	0f c0       	rjmp	.+30     	; 0x3142 <LCD_Init+0xee>
    3124:	88 ec       	ldi	r24, 0xC8	; 200
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9c af       	std	Y+60, r25	; 0x3c
    312a:	8b af       	std	Y+59, r24	; 0x3b
    312c:	8b ad       	ldd	r24, Y+59	; 0x3b
    312e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_Init+0xdc>
    3134:	9c af       	std	Y+60, r25	; 0x3c
    3136:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8d ad       	ldd	r24, Y+61	; 0x3d
    313a:	9e ad       	ldd	r25, Y+62	; 0x3e
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9e af       	std	Y+62, r25	; 0x3e
    3140:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8d ad       	ldd	r24, Y+61	; 0x3d
    3144:	9e ad       	ldd	r25, Y+62	; 0x3e
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f7       	brne	.-38     	; 0x3124 <LCD_Init+0xd0>
    314a:	16 c0       	rjmp	.+44     	; 0x3178 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	fe 01       	movw	r30, r28
    314e:	ff 96       	adiw	r30, 0x3f	; 63
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9e af       	std	Y+62, r25	; 0x3e
    3162:	8d af       	std	Y+61, r24	; 0x3d
    3164:	8d ad       	ldd	r24, Y+61	; 0x3d
    3166:	9e ad       	ldd	r25, Y+62	; 0x3e
    3168:	9a af       	std	Y+58, r25	; 0x3a
    316a:	89 af       	std	Y+57, r24	; 0x39
    316c:	89 ad       	ldd	r24, Y+57	; 0x39
    316e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_Init+0x11c>
    3174:	9a af       	std	Y+58, r25	; 0x3a
    3176:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    3178:	88 e3       	ldi	r24, 0x38	; 56
    317a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a0 e8       	ldi	r26, 0x80	; 128
    3184:	bf e3       	ldi	r27, 0x3F	; 63
    3186:	8d ab       	std	Y+53, r24	; 0x35
    3188:	9e ab       	std	Y+54, r25	; 0x36
    318a:	af ab       	std	Y+55, r26	; 0x37
    318c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318e:	6d a9       	ldd	r22, Y+53	; 0x35
    3190:	7e a9       	ldd	r23, Y+54	; 0x36
    3192:	8f a9       	ldd	r24, Y+55	; 0x37
    3194:	98 ad       	ldd	r25, Y+56	; 0x38
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4a ef       	ldi	r20, 0xFA	; 250
    319c:	54 e4       	ldi	r21, 0x44	; 68
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	89 ab       	std	Y+49, r24	; 0x31
    31a8:	9a ab       	std	Y+50, r25	; 0x32
    31aa:	ab ab       	std	Y+51, r26	; 0x33
    31ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31ae:	69 a9       	ldd	r22, Y+49	; 0x31
    31b0:	7a a9       	ldd	r23, Y+50	; 0x32
    31b2:	8b a9       	ldd	r24, Y+51	; 0x33
    31b4:	9c a9       	ldd	r25, Y+52	; 0x34
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	5f e3       	ldi	r21, 0x3F	; 63
    31be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c2:	88 23       	and	r24, r24
    31c4:	2c f4       	brge	.+10     	; 0x31d0 <LCD_Init+0x17c>
		__ticks = 1;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	98 ab       	std	Y+48, r25	; 0x30
    31cc:	8f a7       	std	Y+47, r24	; 0x2f
    31ce:	3f c0       	rjmp	.+126    	; 0x324e <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    31d0:	69 a9       	ldd	r22, Y+49	; 0x31
    31d2:	7a a9       	ldd	r23, Y+50	; 0x32
    31d4:	8b a9       	ldd	r24, Y+51	; 0x33
    31d6:	9c a9       	ldd	r25, Y+52	; 0x34
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	3f ef       	ldi	r19, 0xFF	; 255
    31dc:	4f e7       	ldi	r20, 0x7F	; 127
    31de:	57 e4       	ldi	r21, 0x47	; 71
    31e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e4:	18 16       	cp	r1, r24
    31e6:	4c f5       	brge	.+82     	; 0x323a <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e8:	6d a9       	ldd	r22, Y+53	; 0x35
    31ea:	7e a9       	ldd	r23, Y+54	; 0x36
    31ec:	8f a9       	ldd	r24, Y+55	; 0x37
    31ee:	98 ad       	ldd	r25, Y+56	; 0x38
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e2       	ldi	r20, 0x20	; 32
    31f6:	51 e4       	ldi	r21, 0x41	; 65
    31f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	98 ab       	std	Y+48, r25	; 0x30
    320e:	8f a7       	std	Y+47, r24	; 0x2f
    3210:	0f c0       	rjmp	.+30     	; 0x3230 <LCD_Init+0x1dc>
    3212:	88 ec       	ldi	r24, 0xC8	; 200
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e a7       	std	Y+46, r25	; 0x2e
    3218:	8d a7       	std	Y+45, r24	; 0x2d
    321a:	8d a5       	ldd	r24, Y+45	; 0x2d
    321c:	9e a5       	ldd	r25, Y+46	; 0x2e
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_Init+0x1ca>
    3222:	9e a7       	std	Y+46, r25	; 0x2e
    3224:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3226:	8f a5       	ldd	r24, Y+47	; 0x2f
    3228:	98 a9       	ldd	r25, Y+48	; 0x30
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	98 ab       	std	Y+48, r25	; 0x30
    322e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3230:	8f a5       	ldd	r24, Y+47	; 0x2f
    3232:	98 a9       	ldd	r25, Y+48	; 0x30
    3234:	00 97       	sbiw	r24, 0x00	; 0
    3236:	69 f7       	brne	.-38     	; 0x3212 <LCD_Init+0x1be>
    3238:	14 c0       	rjmp	.+40     	; 0x3262 <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323a:	69 a9       	ldd	r22, Y+49	; 0x31
    323c:	7a a9       	ldd	r23, Y+50	; 0x32
    323e:	8b a9       	ldd	r24, Y+51	; 0x33
    3240:	9c a9       	ldd	r25, Y+52	; 0x34
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	98 ab       	std	Y+48, r25	; 0x30
    324c:	8f a7       	std	Y+47, r24	; 0x2f
    324e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3250:	98 a9       	ldd	r25, Y+48	; 0x30
    3252:	9c a7       	std	Y+44, r25	; 0x2c
    3254:	8b a7       	std	Y+43, r24	; 0x2b
    3256:	8b a5       	ldd	r24, Y+43	; 0x2b
    3258:	9c a5       	ldd	r25, Y+44	; 0x2c
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <LCD_Init+0x206>
    325e:	9c a7       	std	Y+44, r25	; 0x2c
    3260:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    3262:	8c e0       	ldi	r24, 0x0C	; 12
    3264:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a0 e8       	ldi	r26, 0x80	; 128
    326e:	bf e3       	ldi	r27, 0x3F	; 63
    3270:	8f a3       	std	Y+39, r24	; 0x27
    3272:	98 a7       	std	Y+40, r25	; 0x28
    3274:	a9 a7       	std	Y+41, r26	; 0x29
    3276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3278:	6f a1       	ldd	r22, Y+39	; 0x27
    327a:	78 a5       	ldd	r23, Y+40	; 0x28
    327c:	89 a5       	ldd	r24, Y+41	; 0x29
    327e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	4a ef       	ldi	r20, 0xFA	; 250
    3286:	54 e4       	ldi	r21, 0x44	; 68
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	8b a3       	std	Y+35, r24	; 0x23
    3292:	9c a3       	std	Y+36, r25	; 0x24
    3294:	ad a3       	std	Y+37, r26	; 0x25
    3296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3298:	6b a1       	ldd	r22, Y+35	; 0x23
    329a:	7c a1       	ldd	r23, Y+36	; 0x24
    329c:	8d a1       	ldd	r24, Y+37	; 0x25
    329e:	9e a1       	ldd	r25, Y+38	; 0x26
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e8       	ldi	r20, 0x80	; 128
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ac:	88 23       	and	r24, r24
    32ae:	2c f4       	brge	.+10     	; 0x32ba <LCD_Init+0x266>
		__ticks = 1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9a a3       	std	Y+34, r25	; 0x22
    32b6:	89 a3       	std	Y+33, r24	; 0x21
    32b8:	3f c0       	rjmp	.+126    	; 0x3338 <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    32ba:	6b a1       	ldd	r22, Y+35	; 0x23
    32bc:	7c a1       	ldd	r23, Y+36	; 0x24
    32be:	8d a1       	ldd	r24, Y+37	; 0x25
    32c0:	9e a1       	ldd	r25, Y+38	; 0x26
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	3f ef       	ldi	r19, 0xFF	; 255
    32c6:	4f e7       	ldi	r20, 0x7F	; 127
    32c8:	57 e4       	ldi	r21, 0x47	; 71
    32ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ce:	18 16       	cp	r1, r24
    32d0:	4c f5       	brge	.+82     	; 0x3324 <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d2:	6f a1       	ldd	r22, Y+39	; 0x27
    32d4:	78 a5       	ldd	r23, Y+40	; 0x28
    32d6:	89 a5       	ldd	r24, Y+41	; 0x29
    32d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e2       	ldi	r20, 0x20	; 32
    32e0:	51 e4       	ldi	r21, 0x41	; 65
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9a a3       	std	Y+34, r25	; 0x22
    32f8:	89 a3       	std	Y+33, r24	; 0x21
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <LCD_Init+0x2c6>
    32fc:	88 ec       	ldi	r24, 0xC8	; 200
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	98 a3       	std	Y+32, r25	; 0x20
    3302:	8f 8f       	std	Y+31, r24	; 0x1f
    3304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3306:	98 a1       	ldd	r25, Y+32	; 0x20
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <LCD_Init+0x2b4>
    330c:	98 a3       	std	Y+32, r25	; 0x20
    330e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3310:	89 a1       	ldd	r24, Y+33	; 0x21
    3312:	9a a1       	ldd	r25, Y+34	; 0x22
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	9a a3       	std	Y+34, r25	; 0x22
    3318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331a:	89 a1       	ldd	r24, Y+33	; 0x21
    331c:	9a a1       	ldd	r25, Y+34	; 0x22
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	69 f7       	brne	.-38     	; 0x32fc <LCD_Init+0x2a8>
    3322:	14 c0       	rjmp	.+40     	; 0x334c <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3324:	6b a1       	ldd	r22, Y+35	; 0x23
    3326:	7c a1       	ldd	r23, Y+36	; 0x24
    3328:	8d a1       	ldd	r24, Y+37	; 0x25
    332a:	9e a1       	ldd	r25, Y+38	; 0x26
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	9a a3       	std	Y+34, r25	; 0x22
    3336:	89 a3       	std	Y+33, r24	; 0x21
    3338:	89 a1       	ldd	r24, Y+33	; 0x21
    333a:	9a a1       	ldd	r25, Y+34	; 0x22
    333c:	9e 8f       	std	Y+30, r25	; 0x1e
    333e:	8d 8f       	std	Y+29, r24	; 0x1d
    3340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_Init+0x2f0>
    3348:	9e 8f       	std	Y+30, r25	; 0x1e
    334a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a0 e0       	ldi	r26, 0x00	; 0
    3358:	b0 e4       	ldi	r27, 0x40	; 64
    335a:	89 8f       	std	Y+25, r24	; 0x19
    335c:	9a 8f       	std	Y+26, r25	; 0x1a
    335e:	ab 8f       	std	Y+27, r26	; 0x1b
    3360:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3362:	69 8d       	ldd	r22, Y+25	; 0x19
    3364:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3366:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3368:	9c 8d       	ldd	r25, Y+28	; 0x1c
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	4a ef       	ldi	r20, 0xFA	; 250
    3370:	54 e4       	ldi	r21, 0x44	; 68
    3372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	8d 8b       	std	Y+21, r24	; 0x15
    337c:	9e 8b       	std	Y+22, r25	; 0x16
    337e:	af 8b       	std	Y+23, r26	; 0x17
    3380:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3382:	6d 89       	ldd	r22, Y+21	; 0x15
    3384:	7e 89       	ldd	r23, Y+22	; 0x16
    3386:	8f 89       	ldd	r24, Y+23	; 0x17
    3388:	98 8d       	ldd	r25, Y+24	; 0x18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e8       	ldi	r20, 0x80	; 128
    3390:	5f e3       	ldi	r21, 0x3F	; 63
    3392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3396:	88 23       	and	r24, r24
    3398:	2c f4       	brge	.+10     	; 0x33a4 <LCD_Init+0x350>
		__ticks = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	3f c0       	rjmp	.+126    	; 0x3422 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    33a4:	6d 89       	ldd	r22, Y+21	; 0x15
    33a6:	7e 89       	ldd	r23, Y+22	; 0x16
    33a8:	8f 89       	ldd	r24, Y+23	; 0x17
    33aa:	98 8d       	ldd	r25, Y+24	; 0x18
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	3f ef       	ldi	r19, 0xFF	; 255
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	57 e4       	ldi	r21, 0x47	; 71
    33b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b8:	18 16       	cp	r1, r24
    33ba:	4c f5       	brge	.+82     	; 0x340e <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33bc:	69 8d       	ldd	r22, Y+25	; 0x19
    33be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e2       	ldi	r20, 0x20	; 32
    33ca:	51 e4       	ldi	r21, 0x41	; 65
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	9c 8b       	std	Y+20, r25	; 0x14
    33e2:	8b 8b       	std	Y+19, r24	; 0x13
    33e4:	0f c0       	rjmp	.+30     	; 0x3404 <LCD_Init+0x3b0>
    33e6:	88 ec       	ldi	r24, 0xC8	; 200
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	9a 8b       	std	Y+18, r25	; 0x12
    33ec:	89 8b       	std	Y+17, r24	; 0x11
    33ee:	89 89       	ldd	r24, Y+17	; 0x11
    33f0:	9a 89       	ldd	r25, Y+18	; 0x12
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <LCD_Init+0x39e>
    33f6:	9a 8b       	std	Y+18, r25	; 0x12
    33f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	8b 89       	ldd	r24, Y+19	; 0x13
    33fc:	9c 89       	ldd	r25, Y+20	; 0x14
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	9c 8b       	std	Y+20, r25	; 0x14
    3402:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	8b 89       	ldd	r24, Y+19	; 0x13
    3406:	9c 89       	ldd	r25, Y+20	; 0x14
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	69 f7       	brne	.-38     	; 0x33e6 <LCD_Init+0x392>
    340c:	14 c0       	rjmp	.+40     	; 0x3436 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340e:	6d 89       	ldd	r22, Y+21	; 0x15
    3410:	7e 89       	ldd	r23, Y+22	; 0x16
    3412:	8f 89       	ldd	r24, Y+23	; 0x17
    3414:	98 8d       	ldd	r25, Y+24	; 0x18
    3416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	9c 8b       	std	Y+20, r25	; 0x14
    3420:	8b 8b       	std	Y+19, r24	; 0x13
    3422:	8b 89       	ldd	r24, Y+19	; 0x13
    3424:	9c 89       	ldd	r25, Y+20	; 0x14
    3426:	98 8b       	std	Y+16, r25	; 0x10
    3428:	8f 87       	std	Y+15, r24	; 0x0f
    342a:	8f 85       	ldd	r24, Y+15	; 0x0f
    342c:	98 89       	ldd	r25, Y+16	; 0x10
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <LCD_Init+0x3da>
    3432:	98 8b       	std	Y+16, r25	; 0x10
    3434:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    3436:	86 e0       	ldi	r24, 0x06	; 6
    3438:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e8       	ldi	r26, 0x80	; 128
    3442:	bf e3       	ldi	r27, 0x3F	; 63
    3444:	8b 87       	std	Y+11, r24	; 0x0b
    3446:	9c 87       	std	Y+12, r25	; 0x0c
    3448:	ad 87       	std	Y+13, r26	; 0x0d
    344a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344c:	6b 85       	ldd	r22, Y+11	; 0x0b
    344e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3450:	8d 85       	ldd	r24, Y+13	; 0x0d
    3452:	9e 85       	ldd	r25, Y+14	; 0x0e
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8f 83       	std	Y+7, r24	; 0x07
    3466:	98 87       	std	Y+8, r25	; 0x08
    3468:	a9 87       	std	Y+9, r26	; 0x09
    346a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5f e3       	ldi	r21, 0x3F	; 63
    347c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3480:	88 23       	and	r24, r24
    3482:	2c f4       	brge	.+10     	; 0x348e <LCD_Init+0x43a>
		__ticks = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9e 83       	std	Y+6, r25	; 0x06
    348a:	8d 83       	std	Y+5, r24	; 0x05
    348c:	3f c0       	rjmp	.+126    	; 0x350c <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    348e:	6f 81       	ldd	r22, Y+7	; 0x07
    3490:	78 85       	ldd	r23, Y+8	; 0x08
    3492:	89 85       	ldd	r24, Y+9	; 0x09
    3494:	9a 85       	ldd	r25, Y+10	; 0x0a
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	3f ef       	ldi	r19, 0xFF	; 255
    349a:	4f e7       	ldi	r20, 0x7F	; 127
    349c:	57 e4       	ldi	r21, 0x47	; 71
    349e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a2:	18 16       	cp	r1, r24
    34a4:	4c f5       	brge	.+82     	; 0x34f8 <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e2       	ldi	r20, 0x20	; 32
    34b4:	51 e4       	ldi	r21, 0x41	; 65
    34b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	9e 83       	std	Y+6, r25	; 0x06
    34cc:	8d 83       	std	Y+5, r24	; 0x05
    34ce:	0f c0       	rjmp	.+30     	; 0x34ee <LCD_Init+0x49a>
    34d0:	88 ec       	ldi	r24, 0xC8	; 200
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9c 83       	std	Y+4, r25	; 0x04
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <LCD_Init+0x488>
    34e0:	9c 83       	std	Y+4, r25	; 0x04
    34e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	69 f7       	brne	.-38     	; 0x34d0 <LCD_Init+0x47c>
    34f6:	14 c0       	rjmp	.+40     	; 0x3520 <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	9a 81       	ldd	r25, Y+2	; 0x02
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <LCD_Init+0x4c4>
    351c:	9a 83       	std	Y+2, r25	; 0x02
    351e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3520:	ca 5b       	subi	r28, 0xBA	; 186
    3522:	df 4f       	sbci	r29, 0xFF	; 255
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	08 95       	ret

00003538 <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	00 d0       	rcall	.+0      	; 0x353e <LCD_SendString+0x6>
    353e:	0f 92       	push	r0
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	9b 83       	std	Y+3, r25	; 0x03
    3546:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	0e c0       	rjmp	.+28     	; 0x3568 <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	9b 81       	ldd	r25, Y+3	; 0x03
    3556:	fc 01       	movw	r30, r24
    3558:	e2 0f       	add	r30, r18
    355a:	f3 1f       	adc	r31, r19
    355c:	80 81       	ld	r24, Z
    355e:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_SendData>
		Counter++;
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	fc 01       	movw	r30, r24
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	80 81       	ld	r24, Z
    357a:	88 23       	and	r24, r24
    357c:	39 f7       	brne	.-50     	; 0x354c <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	00 d0       	rcall	.+0      	; 0x3590 <LCD_GoToXY+0x6>
    3590:	00 d0       	rcall	.+0      	; 0x3592 <LCD_GoToXY+0x8>
    3592:	0f 92       	push	r0
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	8a 83       	std	Y+2, r24	; 0x02
    359a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	88 23       	and	r24, r24
    35a0:	19 f0       	breq	.+6      	; 0x35a8 <LCD_GoToXY+0x1e>
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	e1 f4       	brne	.+56     	; 0x35e0 <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	80 31       	cpi	r24, 0x10	; 16
    35ac:	a8 f4       	brcc	.+42     	; 0x35d8 <LCD_GoToXY+0x4e>
		{
			switch(Row)
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	3d 83       	std	Y+5, r19	; 0x05
    35b6:	2c 83       	std	Y+4, r18	; 0x04
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	9d 81       	ldd	r25, Y+5	; 0x05
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	31 f0       	breq	.+12     	; 0x35cc <LCD_GoToXY+0x42>
    35c0:	2c 81       	ldd	r18, Y+4	; 0x04
    35c2:	3d 81       	ldd	r19, Y+5	; 0x05
    35c4:	21 30       	cpi	r18, 0x01	; 1
    35c6:	31 05       	cpc	r19, r1
    35c8:	21 f0       	breq	.+8      	; 0x35d2 <LCD_GoToXY+0x48>
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	80 5c       	subi	r24, 0xC0	; 192
    35d6:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	80 58       	subi	r24, 0x80	; 128
    35dc:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
	}
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	08 95       	ret

000035f0 <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	2e 97       	sbiw	r28, 0x0e	; 14
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_SendCommand>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a0 e0       	ldi	r26, 0x00	; 0
    3610:	b0 e4       	ldi	r27, 0x40	; 64
    3612:	8b 87       	std	Y+11, r24	; 0x0b
    3614:	9c 87       	std	Y+12, r25	; 0x0c
    3616:	ad 87       	std	Y+13, r26	; 0x0d
    3618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361a:	6b 85       	ldd	r22, Y+11	; 0x0b
    361c:	7c 85       	ldd	r23, Y+12	; 0x0c
    361e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3620:	9e 85       	ldd	r25, Y+14	; 0x0e
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a ef       	ldi	r20, 0xFA	; 250
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	8f 83       	std	Y+7, r24	; 0x07
    3634:	98 87       	std	Y+8, r25	; 0x08
    3636:	a9 87       	std	Y+9, r26	; 0x09
    3638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    363a:	6f 81       	ldd	r22, Y+7	; 0x07
    363c:	78 85       	ldd	r23, Y+8	; 0x08
    363e:	89 85       	ldd	r24, Y+9	; 0x09
    3640:	9a 85       	ldd	r25, Y+10	; 0x0a
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e8       	ldi	r20, 0x80	; 128
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364e:	88 23       	and	r24, r24
    3650:	2c f4       	brge	.+10     	; 0x365c <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	3f c0       	rjmp	.+126    	; 0x36da <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    365c:	6f 81       	ldd	r22, Y+7	; 0x07
    365e:	78 85       	ldd	r23, Y+8	; 0x08
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	3f ef       	ldi	r19, 0xFF	; 255
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	57 e4       	ldi	r21, 0x47	; 71
    366c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3670:	18 16       	cp	r1, r24
    3672:	4c f5       	brge	.+82     	; 0x36c6 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	6b 85       	ldd	r22, Y+11	; 0x0b
    3676:	7c 85       	ldd	r23, Y+12	; 0x0c
    3678:	8d 85       	ldd	r24, Y+13	; 0x0d
    367a:	9e 85       	ldd	r25, Y+14	; 0x0e
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	9e 83       	std	Y+6, r25	; 0x06
    369a:	8d 83       	std	Y+5, r24	; 0x05
    369c:	0f c0       	rjmp	.+30     	; 0x36bc <LCD_ClearDisplay+0xcc>
    369e:	88 ec       	ldi	r24, 0xC8	; 200
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <LCD_ClearDisplay+0xba>
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	69 f7       	brne	.-38     	; 0x369e <LCD_ClearDisplay+0xae>
    36c4:	14 c0       	rjmp	.+40     	; 0x36ee <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c6:	6f 81       	ldd	r22, Y+7	; 0x07
    36c8:	78 85       	ldd	r23, Y+8	; 0x08
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	9a 81       	ldd	r25, Y+2	; 0x02
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <LCD_ClearDisplay+0xf6>
    36ea:	9a 83       	std	Y+2, r25	; 0x02
    36ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    36ee:	2e 96       	adiw	r28, 0x0e	; 14
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <LCD_DisplayNumber>:

void LCD_DisplayNumber(u32 Number)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <LCD_DisplayNumber+0x6>
    3706:	00 d0       	rcall	.+0      	; 0x3708 <LCD_DisplayNumber+0x8>
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	9c 83       	std	Y+4, r25	; 0x04
    370e:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9a 83       	std	Y+2, r25	; 0x02
    3716:	89 83       	std	Y+1, r24	; 0x01
	if(Number == 0)
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	9c 81       	ldd	r25, Y+4	; 0x04
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	31 f5       	brne	.+76     	; 0x376c <LCD_DisplayNumber+0x6c>
	{
		LCD_SendData('0');
    3720:	80 e3       	ldi	r24, 0x30	; 48
    3722:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_SendData>
    3726:	22 c0       	rjmp	.+68     	; 0x376c <LCD_DisplayNumber+0x6c>
	}

	while(Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	9c 01       	movw	r18, r24
    372e:	22 0f       	add	r18, r18
    3730:	33 1f       	adc	r19, r19
    3732:	c9 01       	movw	r24, r18
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	f9 01       	movw	r30, r18
    373e:	e8 0f       	add	r30, r24
    3740:	f9 1f       	adc	r31, r25
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	2a e0       	ldi	r18, 0x0A	; 10
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	b9 01       	movw	r22, r18
    374c:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__udivmodhi4>
    3750:	8e 0f       	add	r24, r30
    3752:	9f 1f       	adc	r25, r31
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
		Number = Number /10;
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	9c 81       	ldd	r25, Y+4	; 0x04
    375c:	2a e0       	ldi	r18, 0x0A	; 10
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	b9 01       	movw	r22, r18
    3762:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__udivmodhi4>
    3766:	cb 01       	movw	r24, r22
    3768:	9c 83       	std	Y+4, r25	; 0x04
    376a:	8b 83       	std	Y+3, r24	; 0x03
	if(Number == 0)
	{
		LCD_SendData('0');
	}

	while(Number != 0)
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	9c 81       	ldd	r25, Y+4	; 0x04
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	d1 f6       	brne	.-76     	; 0x3728 <LCD_DisplayNumber+0x28>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <LCD_DisplayNumber+0x9e>
		Number = Number /10;
	}

	while(ReversedNum != 1)
	{
		LCD_SendData( (ReversedNum%10) + 48);
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	9a 81       	ldd	r25, Y+2	; 0x02
    377a:	2a e0       	ldi	r18, 0x0A	; 10
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	b9 01       	movw	r22, r18
    3780:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__udivmodhi4>
    3784:	80 5d       	subi	r24, 0xD0	; 208
    3786:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_SendData>
		ReversedNum= ReversedNum/10;
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	2a e0       	ldi	r18, 0x0A	; 10
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	b9 01       	movw	r22, r18
    3794:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__udivmodhi4>
    3798:	cb 01       	movw	r24, r22
    379a:	9a 83       	std	Y+2, r25	; 0x02
    379c:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
		Number = Number /10;
	}

	while(ReversedNum != 1)
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	9a 81       	ldd	r25, Y+2	; 0x02
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	91 05       	cpc	r25, r1
    37a6:	39 f7       	brne	.-50     	; 0x3776 <LCD_DisplayNumber+0x76>
	{
		LCD_SendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <Keypad_Init>:
						{'C',0,'=','#'}
					  };


u8 Keypad_Init()
{
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	0f 92       	push	r0
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT , 0xF0);
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	60 ef       	ldi	r22, 0xF0	; 240
    37c4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	6f ef       	ldi	r22, 0xFF	; 255
    37cc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MDIO_vSetPortVal>
}
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <KeypadGetKey>:

u8 KeypadGetKey()
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	6f 97       	sbiw	r28, 0x1f	; 31
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
	for(u8 Col=0; Col <COLs_NO; Col++)
    37ec:	1e 8e       	std	Y+30, r1	; 0x1e
    37ee:	28 c1       	rjmp	.+592    	; 0x3a40 <KeypadGetKey+0x268>
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    37f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37f2:	98 2f       	mov	r25, r24
    37f4:	9c 5f       	subi	r25, 0xFC	; 252
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	69 2f       	mov	r22, r25
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3800:	1d 8e       	std	Y+29, r1	; 0x1d
    3802:	0f c1       	rjmp	.+542    	; 0x3a22 <KeypadGetKey+0x24a>
		{
			if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0 )
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3808:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <MDIO_GetPinVal>
    380c:	88 23       	and	r24, r24
    380e:	09 f0       	breq	.+2      	; 0x3812 <KeypadGetKey+0x3a>
    3810:	05 c1       	rjmp	.+522    	; 0x3a1c <KeypadGetKey+0x244>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a8 e4       	ldi	r26, 0x48	; 72
    3818:	b2 e4       	ldi	r27, 0x42	; 66
    381a:	89 8f       	std	Y+25, r24	; 0x19
    381c:	9a 8f       	std	Y+26, r25	; 0x1a
    381e:	ab 8f       	std	Y+27, r26	; 0x1b
    3820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3822:	69 8d       	ldd	r22, Y+25	; 0x19
    3824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	4a ef       	ldi	r20, 0xFA	; 250
    3830:	54 e4       	ldi	r21, 0x44	; 68
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	8d 8b       	std	Y+21, r24	; 0x15
    383c:	9e 8b       	std	Y+22, r25	; 0x16
    383e:	af 8b       	std	Y+23, r26	; 0x17
    3840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3842:	6d 89       	ldd	r22, Y+21	; 0x15
    3844:	7e 89       	ldd	r23, Y+22	; 0x16
    3846:	8f 89       	ldd	r24, Y+23	; 0x17
    3848:	98 8d       	ldd	r25, Y+24	; 0x18
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e8       	ldi	r20, 0x80	; 128
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3856:	88 23       	and	r24, r24
    3858:	2c f4       	brge	.+10     	; 0x3864 <KeypadGetKey+0x8c>
		__ticks = 1;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 8b       	std	Y+20, r25	; 0x14
    3860:	8b 8b       	std	Y+19, r24	; 0x13
    3862:	3f c0       	rjmp	.+126    	; 0x38e2 <KeypadGetKey+0x10a>
	else if (__tmp > 65535)
    3864:	6d 89       	ldd	r22, Y+21	; 0x15
    3866:	7e 89       	ldd	r23, Y+22	; 0x16
    3868:	8f 89       	ldd	r24, Y+23	; 0x17
    386a:	98 8d       	ldd	r25, Y+24	; 0x18
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	3f ef       	ldi	r19, 0xFF	; 255
    3870:	4f e7       	ldi	r20, 0x7F	; 127
    3872:	57 e4       	ldi	r21, 0x47	; 71
    3874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3878:	18 16       	cp	r1, r24
    387a:	4c f5       	brge	.+82     	; 0x38ce <KeypadGetKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387c:	69 8d       	ldd	r22, Y+25	; 0x19
    387e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e2       	ldi	r20, 0x20	; 32
    388a:	51 e4       	ldi	r21, 0x41	; 65
    388c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9c 8b       	std	Y+20, r25	; 0x14
    38a2:	8b 8b       	std	Y+19, r24	; 0x13
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <KeypadGetKey+0xec>
    38a6:	88 ec       	ldi	r24, 0xC8	; 200
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9a 8b       	std	Y+18, r25	; 0x12
    38ac:	89 8b       	std	Y+17, r24	; 0x11
    38ae:	89 89       	ldd	r24, Y+17	; 0x11
    38b0:	9a 89       	ldd	r25, Y+18	; 0x12
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <KeypadGetKey+0xda>
    38b6:	9a 8b       	std	Y+18, r25	; 0x12
    38b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ba:	8b 89       	ldd	r24, Y+19	; 0x13
    38bc:	9c 89       	ldd	r25, Y+20	; 0x14
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	9c 8b       	std	Y+20, r25	; 0x14
    38c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	8b 89       	ldd	r24, Y+19	; 0x13
    38c6:	9c 89       	ldd	r25, Y+20	; 0x14
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	69 f7       	brne	.-38     	; 0x38a6 <KeypadGetKey+0xce>
    38cc:	14 c0       	rjmp	.+40     	; 0x38f6 <KeypadGetKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ce:	6d 89       	ldd	r22, Y+21	; 0x15
    38d0:	7e 89       	ldd	r23, Y+22	; 0x16
    38d2:	8f 89       	ldd	r24, Y+23	; 0x17
    38d4:	98 8d       	ldd	r25, Y+24	; 0x18
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9c 8b       	std	Y+20, r25	; 0x14
    38e0:	8b 8b       	std	Y+19, r24	; 0x13
    38e2:	8b 89       	ldd	r24, Y+19	; 0x13
    38e4:	9c 89       	ldd	r25, Y+20	; 0x14
    38e6:	98 8b       	std	Y+16, r25	; 0x10
    38e8:	8f 87       	std	Y+15, r24	; 0x0f
    38ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ec:	98 89       	ldd	r25, Y+16	; 0x10
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <KeypadGetKey+0x116>
    38f2:	98 8b       	std	Y+16, r25	; 0x10
    38f4:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50);
				if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38fa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <MDIO_GetPinVal>
    38fe:	88 23       	and	r24, r24
    3900:	09 f0       	breq	.+2      	; 0x3904 <KeypadGetKey+0x12c>
    3902:	8c c0       	rjmp	.+280    	; 0x3a1c <KeypadGetKey+0x244>
				{
					while(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3908:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <MDIO_GetPinVal>
    390c:	88 23       	and	r24, r24
    390e:	09 f0       	breq	.+2      	; 0x3912 <KeypadGetKey+0x13a>
    3910:	85 c0       	rjmp	.+266    	; 0x3a1c <KeypadGetKey+0x244>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	a8 e4       	ldi	r26, 0x48	; 72
    3918:	b2 e4       	ldi	r27, 0x42	; 66
    391a:	8b 87       	std	Y+11, r24	; 0x0b
    391c:	9c 87       	std	Y+12, r25	; 0x0c
    391e:	ad 87       	std	Y+13, r26	; 0x0d
    3920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3922:	6b 85       	ldd	r22, Y+11	; 0x0b
    3924:	7c 85       	ldd	r23, Y+12	; 0x0c
    3926:	8d 85       	ldd	r24, Y+13	; 0x0d
    3928:	9e 85       	ldd	r25, Y+14	; 0x0e
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	4a ef       	ldi	r20, 0xFA	; 250
    3930:	54 e4       	ldi	r21, 0x44	; 68
    3932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	8f 83       	std	Y+7, r24	; 0x07
    393c:	98 87       	std	Y+8, r25	; 0x08
    393e:	a9 87       	std	Y+9, r26	; 0x09
    3940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3942:	6f 81       	ldd	r22, Y+7	; 0x07
    3944:	78 85       	ldd	r23, Y+8	; 0x08
    3946:	89 85       	ldd	r24, Y+9	; 0x09
    3948:	9a 85       	ldd	r25, Y+10	; 0x0a
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e8       	ldi	r20, 0x80	; 128
    3950:	5f e3       	ldi	r21, 0x3F	; 63
    3952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3956:	88 23       	and	r24, r24
    3958:	2c f4       	brge	.+10     	; 0x3964 <KeypadGetKey+0x18c>
		__ticks = 1;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	3f c0       	rjmp	.+126    	; 0x39e2 <KeypadGetKey+0x20a>
	else if (__tmp > 65535)
    3964:	6f 81       	ldd	r22, Y+7	; 0x07
    3966:	78 85       	ldd	r23, Y+8	; 0x08
    3968:	89 85       	ldd	r24, Y+9	; 0x09
    396a:	9a 85       	ldd	r25, Y+10	; 0x0a
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	3f ef       	ldi	r19, 0xFF	; 255
    3970:	4f e7       	ldi	r20, 0x7F	; 127
    3972:	57 e4       	ldi	r21, 0x47	; 71
    3974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3978:	18 16       	cp	r1, r24
    397a:	4c f5       	brge	.+82     	; 0x39ce <KeypadGetKey+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397c:	6b 85       	ldd	r22, Y+11	; 0x0b
    397e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3980:	8d 85       	ldd	r24, Y+13	; 0x0d
    3982:	9e 85       	ldd	r25, Y+14	; 0x0e
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e2       	ldi	r20, 0x20	; 32
    398a:	51 e4       	ldi	r21, 0x41	; 65
    398c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9e 83       	std	Y+6, r25	; 0x06
    39a2:	8d 83       	std	Y+5, r24	; 0x05
    39a4:	0f c0       	rjmp	.+30     	; 0x39c4 <KeypadGetKey+0x1ec>
    39a6:	88 ec       	ldi	r24, 0xC8	; 200
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	9c 83       	std	Y+4, r25	; 0x04
    39ac:	8b 83       	std	Y+3, r24	; 0x03
    39ae:	8b 81       	ldd	r24, Y+3	; 0x03
    39b0:	9c 81       	ldd	r25, Y+4	; 0x04
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <KeypadGetKey+0x1da>
    39b6:	9c 83       	std	Y+4, r25	; 0x04
    39b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	9e 83       	std	Y+6, r25	; 0x06
    39c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c4:	8d 81       	ldd	r24, Y+5	; 0x05
    39c6:	9e 81       	ldd	r25, Y+6	; 0x06
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	69 f7       	brne	.-38     	; 0x39a6 <KeypadGetKey+0x1ce>
    39cc:	14 c0       	rjmp	.+40     	; 0x39f6 <KeypadGetKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ce:	6f 81       	ldd	r22, Y+7	; 0x07
    39d0:	78 85       	ldd	r23, Y+8	; 0x08
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	9e 83       	std	Y+6, r25	; 0x06
    39e0:	8d 83       	std	Y+5, r24	; 0x05
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	9a 83       	std	Y+2, r25	; 0x02
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	9a 81       	ldd	r25, Y+2	; 0x02
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <KeypadGetKey+0x216>
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						return KeypadMap[Row][Col];
    39f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f8:	48 2f       	mov	r20, r24
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	ca 01       	movw	r24, r20
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	82 0f       	add	r24, r18
    3a0e:	93 1f       	adc	r25, r19
    3a10:	fc 01       	movw	r30, r24
    3a12:	e8 59       	subi	r30, 0x98	; 152
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	80 81       	ld	r24, Z
    3a18:	8f 8f       	std	Y+31, r24	; 0x1f
    3a1a:	18 c0       	rjmp	.+48     	; 0x3a4c <KeypadGetKey+0x274>
	for(u8 Col=0; Col <COLs_NO; Col++)
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	8d 8f       	std	Y+29, r24	; 0x1d
    3a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a24:	84 30       	cpi	r24, 0x04	; 4
    3a26:	08 f4       	brcc	.+2      	; 0x3a2a <KeypadGetKey+0x252>
    3a28:	ed ce       	rjmp	.-550    	; 0x3804 <KeypadGetKey+0x2c>
				}
//				return KeypadMap[Row][Col];
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    3a2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a2c:	98 2f       	mov	r25, r24
    3a2e:	9c 5f       	subi	r25, 0xFC	; 252
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	69 2f       	mov	r22, r25
    3a34:	41 e0       	ldi	r20, 0x01	; 1
    3a36:	0e 94 80 0c 	call	0x1900	; 0x1900 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
}

u8 KeypadGetKey()
{
	for(u8 Col=0; Col <COLs_NO; Col++)
    3a3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a3c:	8f 5f       	subi	r24, 0xFF	; 255
    3a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    3a40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a42:	84 30       	cpi	r24, 0x04	; 4
    3a44:	08 f4       	brcc	.+2      	; 0x3a48 <KeypadGetKey+0x270>
    3a46:	d4 ce       	rjmp	.-600    	; 0x37f0 <KeypadGetKey+0x18>
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return NO_KEY_PRESSED;
    3a48:	8f ef       	ldi	r24, 0xFF	; 255
    3a4a:	8f 8f       	std	Y+31, r24	; 0x1f
    3a4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3a4e:	6f 96       	adiw	r28, 0x1f	; 31
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	f8 94       	cli
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	0f be       	out	0x3f, r0	; 63
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <__udivmodhi4>:
    3a60:	aa 1b       	sub	r26, r26
    3a62:	bb 1b       	sub	r27, r27
    3a64:	51 e1       	ldi	r21, 0x11	; 17
    3a66:	07 c0       	rjmp	.+14     	; 0x3a76 <__udivmodhi4_ep>

00003a68 <__udivmodhi4_loop>:
    3a68:	aa 1f       	adc	r26, r26
    3a6a:	bb 1f       	adc	r27, r27
    3a6c:	a6 17       	cp	r26, r22
    3a6e:	b7 07       	cpc	r27, r23
    3a70:	10 f0       	brcs	.+4      	; 0x3a76 <__udivmodhi4_ep>
    3a72:	a6 1b       	sub	r26, r22
    3a74:	b7 0b       	sbc	r27, r23

00003a76 <__udivmodhi4_ep>:
    3a76:	88 1f       	adc	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	5a 95       	dec	r21
    3a7c:	a9 f7       	brne	.-22     	; 0x3a68 <__udivmodhi4_loop>
    3a7e:	80 95       	com	r24
    3a80:	90 95       	com	r25
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	08 95       	ret

00003a88 <__prologue_saves__>:
    3a88:	2f 92       	push	r2
    3a8a:	3f 92       	push	r3
    3a8c:	4f 92       	push	r4
    3a8e:	5f 92       	push	r5
    3a90:	6f 92       	push	r6
    3a92:	7f 92       	push	r7
    3a94:	8f 92       	push	r8
    3a96:	9f 92       	push	r9
    3a98:	af 92       	push	r10
    3a9a:	bf 92       	push	r11
    3a9c:	cf 92       	push	r12
    3a9e:	df 92       	push	r13
    3aa0:	ef 92       	push	r14
    3aa2:	ff 92       	push	r15
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	ca 1b       	sub	r28, r26
    3ab2:	db 0b       	sbc	r29, r27
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	09 94       	ijmp

00003ac0 <__epilogue_restores__>:
    3ac0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ac2:	39 88       	ldd	r3, Y+17	; 0x11
    3ac4:	48 88       	ldd	r4, Y+16	; 0x10
    3ac6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ac8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aca:	7d 84       	ldd	r7, Y+13	; 0x0d
    3acc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ace:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ad0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ad2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ad4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ad6:	df 80       	ldd	r13, Y+7	; 0x07
    3ad8:	ee 80       	ldd	r14, Y+6	; 0x06
    3ada:	fd 80       	ldd	r15, Y+5	; 0x05
    3adc:	0c 81       	ldd	r16, Y+4	; 0x04
    3ade:	1b 81       	ldd	r17, Y+3	; 0x03
    3ae0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ae2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ae4:	ce 0f       	add	r28, r30
    3ae6:	d1 1d       	adc	r29, r1
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	ed 01       	movw	r28, r26
    3af4:	08 95       	ret

00003af6 <_exit>:
    3af6:	f8 94       	cli

00003af8 <__stop_program>:
    3af8:	ff cf       	rjmp	.-2      	; 0x3af8 <__stop_program>

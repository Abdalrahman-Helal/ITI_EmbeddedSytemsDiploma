
ITI_Day21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003ed4  00003f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080018c  0080018c  00004094  2**0
                  ALLOC
  3 .stab         000044dc  00000000  00000000  00004094  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c4c  00000000  00000000  00008570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000a50f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000c51e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000d68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e690  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000e830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_10>
      2c:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:

#define F_CPU 8000000UL


void main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data = 0;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	MDIO_vSetPinDir(DIO_PORTC , PIN0 , DIO_OUTPUT);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC , PIN1 , DIO_OUTPUT);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTA , PIN0 , DIO_OUTPUT);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>

	EEPROM_vWriteDataByte(125,0,0);
     d00:	8d e7       	ldi	r24, 0x7D	; 125
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <EEPROM_vWriteDataByte>
	local_u8Data = EEPROM_vReadDataByte(0,0);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <EEPROM_vReadDataByte>
     d12:	89 83       	std	Y+1, r24	; 0x01

	if(local_u8Data == 125)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	8d 37       	cpi	r24, 0x7D	; 125
     d18:	29 f4       	brne	.+10     	; 0xd24 <main+0x4e>
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN0 , DIO_HIGH);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
     d24:	ff cf       	rjmp	.-2      	; 0xd24 <main+0x4e>

00000d26 <WDT_vEnable>:
#include "MCAL/WDT/WDT_Interface.h"
#include "MCAL/WDT/WDT_Private.h"
#include "MCAL/WDT/WDT_Cfg.h"

void WDT_vEnable(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR , WDTCR_WDE);
     d2e:	a1 e4       	ldi	r26, 0x41	; 65
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e1 e4       	ldi	r30, 0x41	; 65
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <WDT_vDisable>:

void WDT_vDisable(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
     d4a:	e1 e4       	ldi	r30, 0x41	; 65
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	88 e1       	ldi	r24, 0x18	; 24
     d50:	80 83       	st	Z, r24
	WDTCR = 0;
     d52:	e1 e4       	ldi	r30, 0x41	; 65
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	10 82       	st	Z, r1
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <WDT_vSleep>:

void WDT_vSleep(u8 Copy_u8SleepCycle)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepCycle < 8)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	88 30       	cpi	r24, 0x08	; 8
     d6e:	78 f4       	brcc	.+30     	; 0xd8e <WDT_vSleep+0x30>
	{
		WDTCR &=11111000;
     d70:	a1 e4       	ldi	r26, 0x41	; 65
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e1 e4       	ldi	r30, 0x41	; 65
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 75       	andi	r24, 0x58	; 88
     d7c:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepCycle;
     d7e:	a1 e4       	ldi	r26, 0x41	; 65
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e4       	ldi	r30, 0x41	; 65
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	90 81       	ld	r25, Z
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	89 2b       	or	r24, r25
     d8c:	8c 93       	st	X, r24

	}
}
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <USART_vInit>:
#include "MCAL/UART/UART_Private.h"
#include "MCAL/UART/UART_Cfg.h"


void USART_vInit(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62

	u8 Local_UCSRC=0;
     da0:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_URSEL);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == Asynchronous
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMSEL);
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	8f 7b       	andi	r24, 0xBF	; 191
     dac:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Wrong Config of UART_MODE"
#endif

#if USART_PARITY_MODE == EVEN_PARITY
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UPM1);
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 62       	ori	r24, 0x20	; 32
     db2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	8f 7e       	andi	r24, 0xEF	; 239
     db8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
#else
#endif

#if USART_STOP_MODE == STOP_1BIT
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_USBS);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	89 83       	std	Y+1, r24	; 0x01

#else
#endif

	// Set Character Frame Size to 8 bit
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ0);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ1);
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	89 83       	std	Y+1, r24	; 0x01

	UCSRC_UBRRH = Local_UCSRC;
     dcc:	e0 e4       	ldi	r30, 0x40	; 64
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	80 83       	st	Z, r24

	// Set Baud Rate 9600
	UBRRL = BAUD_RATE_9600;
     dd4:	e9 e2       	ldi	r30, 0x29	; 41
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	83 e3       	ldi	r24, 0x33	; 51
     dda:	80 83       	st	Z, r24

	SET_BIT(UCSRB , UCSRB_RXEN);
     ddc:	aa e2       	ldi	r26, 0x2A	; 42
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e2       	ldi	r30, 0x2A	; 42
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
     dea:	aa e2       	ldi	r26, 0x2A	; 42
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e2       	ldi	r30, 0x2A	; 42
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	8c 93       	st	X, r24

}
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <USART_POLL_vSendData>:
void USART_POLL_vSendData(const u8 Data)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
	// Send 1 Byte of data == 8 Bit
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     e0c:	eb e2       	ldi	r30, 0x2B	; 43
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	82 95       	swap	r24
     e14:	86 95       	lsr	r24
     e16:	87 70       	andi	r24, 0x07	; 7
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	81 70       	andi	r24, 0x01	; 1
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	a1 f3       	breq	.-24     	; 0xe0c <USART_POLL_vSendData+0xc>
	UDR = Data;
     e24:	ec e2       	ldi	r30, 0x2C	; 44
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	80 83       	st	Z, r24

}
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <USART_POLL_vSendString>:
void USART_POLL_vSendString(const u8* Data)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <USART_POLL_vSendString+0x6>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <USART_POLL_vSendString+0x26>
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
	{
		USART_POLL_vSendData(*Data++);
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	20 81       	ld	r18, Z
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	82 2f       	mov	r24, r18
     e56:	0e 94 00 07 	call	0xe00	; 0xe00 <USART_POLL_vSendData>
	//	while(Data[Counter] != '\0')
	//	{
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	80 81       	ld	r24, Z
     e60:	88 23       	and	r24, r24
     e62:	81 f7       	brne	.-32     	; 0xe44 <USART_POLL_vSendString+0x10>
	{
		USART_POLL_vSendData(*Data++);
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <USART_POLL_vReceiveData>:
u8 USART_POLL_vReceiveData(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
     e76:	eb e2       	ldi	r30, 0x2B	; 43
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	dc f7       	brge	.-10     	; 0xe76 <USART_POLL_vReceiveData+0x8>
	return UDR;
     e80:	ec e2       	ldi	r30, 0x2C	; 44
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z

}
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <USART_POLL_vReceiveString>:
void USART_POLL_vReceiveString(u8 Counter , u8* Data)
{
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <USART_POLL_vReceiveString+0xa>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <USART_POLL_vReceiveString+0xc>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	7c 83       	std	Y+4, r23	; 0x04
     ea0:	6b 83       	std	Y+3, r22	; 0x03
	//	{
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
     ea2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ;i < Counter;i++)
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <USART_POLL_vReceiveString+0x3a>
	{
		Data[i] = USART_POLL_vReceiveData();
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	8c 01       	movw	r16, r24
     eb4:	02 0f       	add	r16, r18
     eb6:	13 1f       	adc	r17, r19
     eb8:	0e 94 37 07 	call	0xe6e	; 0xe6e <USART_POLL_vReceiveData>
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
	for(i=0 ;i < Counter;i++)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	99 81       	ldd	r25, Y+1	; 0x01
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	98 17       	cp	r25, r24
     ecc:	68 f3       	brcs	.-38     	; 0xea8 <USART_POLL_vReceiveString+0x1c>
	{
		Data[i] = USART_POLL_vReceiveData();
	}
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <TWI_vMasterInit>:
#include "TWI_Cfg.h"



void TWI_vMasterInit(void)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	// Set the Clock
	CLR_BIT(TWSR , TWSR_TWPS0);
     ee8:	a1 e2       	ldi	r26, 0x21	; 33
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e2       	ldi	r30, 0x21	; 33
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8e 7f       	andi	r24, 0xFE	; 254
     ef4:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
     ef6:	a1 e2       	ldi	r26, 0x21	; 33
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e2       	ldi	r30, 0x21	; 33
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	8c 93       	st	X, r24
	TWBR =20;
     f04:	e0 e2       	ldi	r30, 0x20	; 32
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	84 e1       	ldi	r24, 0x14	; 20
     f0a:	80 83       	st	Z, r24

	// Enable TWI
	SET_BIT(TWCR , TWCR_TWEN);
     f0c:	a6 e5       	ldi	r26, 0x56	; 86
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e5       	ldi	r30, 0x56	; 86
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	84 60       	ori	r24, 0x04	; 4
     f18:	8c 93       	st	X, r24
};
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TWI_vSlaveInit>:
void TWI_vSlaveInit(u8 Copy_u8SlaveAddress)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
	TWAR = Copy_u8SlaveAddress << 1;
     f2c:	e2 e2       	ldi	r30, 0x22	; 34
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	88 0f       	add	r24, r24
     f34:	80 83       	st	Z, r24

	// Enable TWI
	SET_BIT(TWCR , TWCR_TWEN);
     f36:	a6 e5       	ldi	r26, 0x56	; 86
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e5       	ldi	r30, 0x56	; 86
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	8c 93       	st	X, r24
}
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <TWI_u8StartCondition>:
u8 TWI_u8StartCondition(void)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <TWI_u8StartCondition+0x6>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Error = no_error ;
     f56:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
     f58:	a6 e5       	ldi	r26, 0x56	; 86
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e6 e5       	ldi	r30, 0x56	; 86
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	8c 93       	st	X, r24

	// Repeat Start Condition
	SET_BIT(TWCR , TWCR_TWSTA);
     f66:	a6 e5       	ldi	r26, 0x56	; 86
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e6 e5       	ldi	r30, 0x56	; 86
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 62       	ori	r24, 0x20	; 32
     f72:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	88 23       	and	r24, r24
     f7c:	dc f7       	brge	.-10     	; 0xf74 <TWI_u8StartCondition+0x28>

	if(TWSR & 0b11111000 == REP_START_ACK)
     f7e:	e1 e2       	ldi	r30, 0x21	; 33
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = repeat_start_cond_error;
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <TWI_u8RepeatStartCondition>:
u8 TWI_u8RepeatStartCondition(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62

}
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <TWI_u8SendSlaveAddressWrite>:
u8 TWI_u8SendSlaveAddressWrite(u8 Copy_u8SlaveAddress)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <TWI_u8SendSlaveAddressWrite+0x6>
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
     fb4:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
     fb6:	a6 e5       	ldi	r26, 0x56	; 86
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	8c 93       	st	X, r24

	//Clear Start
	CLR_BIT(TWCR , TWCR_TWSTA);
     fc4:	a6 e5       	ldi	r26, 0x56	; 86
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 7d       	andi	r24, 0xDF	; 223
     fd0:	8c 93       	st	X, r24
	TWDR = Copy_u8SlaveAddress << 1;
     fd2:	e3 e2       	ldi	r30, 0x23	; 35
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 0f       	add	r24, r24
     fda:	80 83       	st	Z, r24
	CLR_BIT(TWDR , 0);
     fdc:	a3 e2       	ldi	r26, 0x23	; 35
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e2       	ldi	r30, 0x23	; 35
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
     fea:	e6 e5       	ldi	r30, 0x56	; 86
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 23       	and	r24, r24
     ff2:	dc f7       	brge	.-10     	; 0xfea <TWI_u8SendSlaveAddressWrite+0x44>

	if(TWSR & 0b11111000 == SLAVE_ADD_AND_WR_ACK)
     ff4:	e1 e2       	ldi	r30, 0x21	; 33
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = slave_Address_write_error;
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <TWI_u8SendSlaveAddressRead>:

u8 TWI_u8SendSlaveAddressRead(u8 Copy_u8SlaveAddress)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <TWI_u8SendSlaveAddressRead+0x6>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    101a:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    101c:	a6 e5       	ldi	r26, 0x56	; 86
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 68       	ori	r24, 0x80	; 128
    1028:	8c 93       	st	X, r24

	//Clear Start
	CLR_BIT(TWCR , TWCR_TWSTA);
    102a:	a6 e5       	ldi	r26, 0x56	; 86
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e6 e5       	ldi	r30, 0x56	; 86
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8f 7d       	andi	r24, 0xDF	; 223
    1036:	8c 93       	st	X, r24
	TWDR = Copy_u8SlaveAddress << 1;
    1038:	e3 e2       	ldi	r30, 0x23	; 35
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	88 0f       	add	r24, r24
    1040:	80 83       	st	Z, r24
	CLR_BIT(TWDR , 0);
    1042:	a3 e2       	ldi	r26, 0x23	; 35
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e3 e2       	ldi	r30, 0x23	; 35
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    1050:	e6 e5       	ldi	r30, 0x56	; 86
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	dc f7       	brge	.-10     	; 0x1050 <TWI_u8SendSlaveAddressRead+0x44>

	if(TWSR & 0b11111000 == SLAVE_ADD_AND_RD_ACK)
    105a:	e1 e2       	ldi	r30, 0x21	; 33
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = slave_Address_read_error;
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    1064:	89 81       	ldd	r24, Y+1	; 0x01

}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <TWI_u8MasterWriteData>:
u8 TWI_u8MasterWriteData(u8 Copy_u8Data)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <TWI_u8MasterWriteData+0x6>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    1080:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    1082:	a6 e5       	ldi	r26, 0x56	; 86
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e6 e5       	ldi	r30, 0x56	; 86
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	8c 93       	st	X, r24

	TWDR = Copy_u8Data;
    1090:	e3 e2       	ldi	r30, 0x23	; 35
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	dc f7       	brge	.-10     	; 0x1098 <TWI_u8MasterWriteData+0x26>

	if(TWSR & 0b11111000 == MSTR_WR_BYTE_ACK)
    10a2:	e1 e2       	ldi	r30, 0x21	; 33
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = master_write_data_error;
    10a8:	85 e0       	ldi	r24, 0x05	; 5
    10aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <TWI_u8MasterReadData>:

u8 TWI_u8MasterReadData(u8 * Copy_pu8Data)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <TWI_u8MasterReadData+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <TWI_u8MasterReadData+0x8>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    10ca:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    10cc:	a6 e5       	ldi	r26, 0x56	; 86
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e6 e5       	ldi	r30, 0x56	; 86
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	88 23       	and	r24, r24
    10e2:	dc f7       	brge	.-10     	; 0x10da <TWI_u8MasterReadData+0x20>

	if(TWSR & 0b11111000 == MSTR_RD_BYTE_WITH_ACK)
    10e4:	e1 e2       	ldi	r30, 0x21	; 33
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
	{
		*Copy_pu8Data = TWDR;
	}
	else
	{
		Local_u8Error = master_read_data_error;
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TWI_vStopCondition>:
u8 TWI_vStopCondition(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    1108:	a6 e5       	ldi	r26, 0x56	; 86
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e5       	ldi	r30, 0x56	; 86
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 68       	ori	r24, 0x80	; 128
    1114:	8c 93       	st	X, r24

	// Stop Condition
	SET_BIT(TWCR , TWCR_TWSTO);
    1116:	a6 e5       	ldi	r26, 0x56	; 86
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e6 e5       	ldi	r30, 0x56	; 86
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	80 61       	ori	r24, 0x10	; 16
    1122:	8c 93       	st	X, r24
}
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TIMER0_vInit>:

static void(*Global_pvOVFIntFunc)(void)= NULL;
static void(*Global_pvCTCIntFunc)(void)= NULL;

void TIMER0_vInit(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
	SET_BIT(TCCR0 , TCCR0_WGM01);

#elif TIMER0_MODE == FAST_PWM_MODE
	SET_BIT(TCCR0 , TCCR0_WGM00);
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	8c 93       	st	X, r24

	// clear on compare set on top
	CLR_BIT(TCCR0 , TCCR0_COM00);
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7e       	andi	r24, 0xEF	; 239
    115c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01);
    115e:	a3 e5       	ldi	r26, 0x53	; 83
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e5       	ldi	r30, 0x53	; 83
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	8c 93       	st	X, r24

#error "Select The Timer Mode "

#endif
	// Set Prescaler
	TCCR0 &=0b11111000; //Bit Clearing
    116c:	a3 e5       	ldi	r26, 0x53	; 83
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 7f       	andi	r24, 0xF8	; 248
    1178:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_PRESCALER;
    117a:	a3 e5       	ldi	r26, 0x53	; 83
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 e5       	ldi	r30, 0x53	; 83
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	82 60       	ori	r24, 0x02	; 2
    1186:	8c 93       	st	X, r24

}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <TIMER0_vDeinit>:

void TIMER0_vDeinit(void)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	10 82       	st	Z, r1
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <TIMER0_u8SetOVFCallBack>:

u8 TIMER0_u8SetOVFCallBack(void (*pvCallBackFunc)(void))
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <TIMER0_u8SetOVFCallBack+0x6>
    11a8:	0f 92       	push	r0
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status = OK;
    11b2:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	39 f0       	breq	.+14     	; 0x11ca <TIMER0_u8SetOVFCallBack+0x28>
	{
		Global_pvOVFIntFunc=pvCallBackFunc;
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	90 93 8d 01 	sts	0x018D, r25
    11c4:	80 93 8c 01 	sts	0x018C, r24
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <TIMER0_u8SetOVFCallBack+0x2c>
	}
	else
	{
		Local_Status = NOK;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	Global_pvCTCIntFunc();
    1206:	e0 91 8e 01 	lds	r30, 0x018E
    120a:	f0 91 8f 01 	lds	r31, 0x018F
    120e:	09 95       	icall
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	Global_pvOVFIntFunc();
    1260:	e0 91 8c 01 	lds	r30, 0x018C
    1264:	f0 91 8d 01 	lds	r31, 0x018D
    1268:	09 95       	icall
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <TIMER0_vSetTimerValue>:

void TIMER0_vSetTimerValue(u8 Copy_u8Value)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    129c:	e2 e5       	ldi	r30, 0x52	; 82
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	80 83       	st	Z, r24
}
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <TIMER0_vCTCTimerValue>:


void TIMER0_vCTCTimerValue(u8 Copy_u8Value)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Value;
    12b8:	ec e5       	ldi	r30, 0x5C	; 92
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	80 83       	st	Z, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <TIMER0_vOVFIntEnableDisable>:

void TIMER0_vOVFIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <TIMER0_vOVFIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_TOIE0);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	8c 93       	st	X, r24
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <TIMER0_vOVFIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_TOIE0);
    12ea:	a9 e5       	ldi	r26, 0x59	; 89
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 e5       	ldi	r30, 0x59	; 89
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	8c 93       	st	X, r24
	}
}
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TIMER0_vCTCIntEnableDisable>:
void TIMER0_vCTCIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	41 f4       	brne	.+16     	; 0x1322 <TIMER0_vCTCIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_OCIE0);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	8c 93       	st	X, r24
    1320:	07 c0       	rjmp	.+14     	; 0x1330 <TIMER0_vCTCIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_OCIE0);
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
	}
}
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <TIMER0_u8SetCTCCallBack>:
u8 TIMER0_u8SetCTCCallBack(void (*pvCallBackFunc)(void))
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <TIMER0_u8SetCTCCallBack+0x6>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status=OK;
    1348:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	41 f0       	breq	.+16     	; 0x1362 <TIMER0_u8SetCTCCallBack+0x2a>
	{
		Global_pvCTCIntFunc = pvCallBackFunc;
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	90 93 8f 01 	sts	0x018F, r25
    135a:	80 93 8e 01 	sts	0x018E, r24
		Local_Status=OK;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <TIMER0_u8SetCTCCallBack+0x2e>
	}
	else
	{
		Local_Status =NOK;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <TIMER1_vInit>:

void TIMER1_vInit(void)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    137c:	af e4       	ldi	r26, 0x4F	; 79
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ef e4       	ldi	r30, 0x4F	; 79
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8e 7f       	andi	r24, 0xFE	; 254
    1388:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
    138a:	af e4       	ldi	r26, 0x4F	; 79
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e4       	ldi	r30, 0x4F	; 79
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	82 60       	ori	r24, 0x02	; 2
    1396:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
    1398:	ae e4       	ldi	r26, 0x4E	; 78
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ee e4       	ldi	r30, 0x4E	; 78
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 60       	ori	r24, 0x08	; 8
    13a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
    13a6:	ae e4       	ldi	r26, 0x4E	; 78
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ee e4       	ldi	r30, 0x4E	; 78
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 61       	ori	r24, 0x10	; 16
    13b2:	8c 93       	st	X, r24

	// Set on Top , Clear on CTC
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    13b4:	af e4       	ldi	r26, 0x4F	; 79
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef e4       	ldi	r30, 0x4F	; 79
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7b       	andi	r24, 0xBF	; 191
    13c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
    13c2:	af e4       	ldi	r26, 0x4F	; 79
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e4       	ldi	r30, 0x4F	; 79
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 7f       	andi	r24, 0xF8	; 248
    13dc:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    13de:	ae e4       	ldi	r26, 0x4E	; 78
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ee e4       	ldi	r30, 0x4E	; 78
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	82 60       	ori	r24, 0x02	; 2
    13ea:	8c 93       	st	X, r24

	// Disable INT
	TIMSK &=0b110000011;
    13ec:	a9 e5       	ldi	r26, 0x59	; 89
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e9 e5       	ldi	r30, 0x59	; 89
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	83 78       	andi	r24, 0x83	; 131
    13f8:	8c 93       	st	X, r24
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMER1_vICUInit>:

void TIMER1_vICUInit(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	// Normal Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    1408:	af e4       	ldi	r26, 0x4F	; 79
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ef e4       	ldi	r30, 0x4F	; 79
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    1416:	af e4       	ldi	r26, 0x4F	; 79
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e4       	ldi	r30, 0x4F	; 79
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    1424:	ae e4       	ldi	r26, 0x4E	; 78
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ee e4       	ldi	r30, 0x4E	; 78
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	87 7f       	andi	r24, 0xF7	; 247
    1430:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    1432:	ae e4       	ldi	r26, 0x4E	; 78
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ee e4       	ldi	r30, 0x4E	; 78
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 7e       	andi	r24, 0xEF	; 239
    143e:	8c 93       	st	X, r24

	// Noise Cancel;
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    1440:	ae e4       	ldi	r26, 0x4E	; 78
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ee e4       	ldi	r30, 0x4E	; 78
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	8c 93       	st	X, r24

	// Select ICU Edge
	SET_BIT(TCCR1B , TCCR1B_ICES1);
    144e:	ae e4       	ldi	r26, 0x4E	; 78
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ee e4       	ldi	r30, 0x4E	; 78
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 64       	ori	r24, 0x40	; 64
    145a:	8c 93       	st	X, r24

	// ICU Interrupt
	SET_BIT(TIMSK, TIMSK_TICIE1);
    145c:	a9 e5       	ldi	r26, 0x59	; 89
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e9 e5       	ldi	r30, 0x59	; 89
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 62       	ori	r24, 0x20	; 32
    1468:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    146a:	ae e4       	ldi	r26, 0x4E	; 78
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ee e4       	ldi	r30, 0x4E	; 78
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	88 7f       	andi	r24, 0xF8	; 248
    1476:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    1478:	ae e4       	ldi	r26, 0x4E	; 78
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ee e4       	ldi	r30, 0x4E	; 78
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	82 60       	ori	r24, 0x02	; 2
    1484:	8c 93       	st	X, r24
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TIMER1_u16ICRRead>:

u16 TIMER1_u16ICRRead(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1494:	e6 e4       	ldi	r30, 0x46	; 70
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TIMER1_vSetTop>:

void TIMER1_vSetTop(u16 Copy_u16TopValue)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <TIMER1_vSetTop+0x6>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    14b0:	e6 e4       	ldi	r30, 0x46	; 70
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <TIMER1_vSetCTC_A_value>:

void TIMER1_vSetCTC_A_value(u16 Copy_u16CTCValue)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <TIMER1_vSetCTC_A_value+0x6>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCValue;
    14d4:	ea e4       	ldi	r30, 0x4A	; 74
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <TIMER1_vICUSelectingEdge>:

void TIMER1_vICUSelectingEdge(u8 Copy_u8EdgeValue)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8EdgeValue == ICU_RISING_EDGE)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	41 f4       	brne	.+16     	; 0x150c <TIMER1_vICUSelectingEdge+0x22>
	{
		// Select ICU Rising Edge
		SET_BIT(TCCR1B , TCCR1B_ICES1);
    14fc:	ae e4       	ldi	r26, 0x4E	; 78
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ee e4       	ldi	r30, 0x4E	; 78
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	8c 93       	st	X, r24
    150a:	07 c0       	rjmp	.+14     	; 0x151a <TIMER1_vICUSelectingEdge+0x30>
	}
	else
	{
		// Select ICU Falling Edge
		CLR_BIT(TCCR1B , TCCR1B_ICES1);
    150c:	ae e4       	ldi	r26, 0x4E	; 78
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ee e4       	ldi	r30, 0x4E	; 78
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 7b       	andi	r24, 0xBF	; 191
    1518:	8c 93       	st	X, r24
	}
}
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <TIMER1_vICUDeinit>:

void TIMER1_vICUDeinit(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    152a:	ef e4       	ldi	r30, 0x4F	; 79
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1530:	ee e4       	ldi	r30, 0x4E	; 78
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	10 82       	st	Z, r1
	TIMSK = 0;
    1536:	e9 e5       	ldi	r30, 0x59	; 89
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	10 82       	st	Z, r1
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <SPI_vInit>:
#include "SPI_Interface.h"
#include "SPI_Private.h"


void SPI_vInit(u8 Copy_u8SPIMode)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SPIMode == SPI_MASTER_MODE)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	88 23       	and	r24, r24
    1552:	91 f5       	brne	.+100    	; 0x15b8 <SPI_vInit+0x76>
	{
		// Set in Master Mode
		SET_BIT(SPCR , SPCR_MSTR);
    1554:	ad e2       	ldi	r26, 0x2D	; 45
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ed e2       	ldi	r30, 0x2D	; 45
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 61       	ori	r24, 0x10	; 16
    1560:	8c 93       	st	X, r24

		// Clock Polarity -> Rising
		CLR_BIT(SPCR , SPCR_CPOL);
    1562:	ad e2       	ldi	r26, 0x2D	; 45
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ed e2       	ldi	r30, 0x2D	; 45
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	87 7f       	andi	r24, 0xF7	; 247
    156e:	8c 93       	st	X, r24

		// Clock Phase -> Sample
		CLR_BIT(SPCR , SPCR_CPHA);
    1570:	ad e2       	ldi	r26, 0x2D	; 45
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ed e2       	ldi	r30, 0x2D	; 45
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8b 7f       	andi	r24, 0xFB	; 251
    157c:	8c 93       	st	X, r24

		// Set Clock Prescaler -> 64
		CLR_BIT(SPCR , SPCR_SPR0);
    157e:	ad e2       	ldi	r26, 0x2D	; 45
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ed e2       	ldi	r30, 0x2D	; 45
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8e 7f       	andi	r24, 0xFE	; 254
    158a:	8c 93       	st	X, r24
		SET_BIT(SPCR , SPCR_SPR1);
    158c:	ad e2       	ldi	r26, 0x2D	; 45
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ed e2       	ldi	r30, 0x2D	; 45
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X);
    159a:	ae e2       	ldi	r26, 0x2E	; 46
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e2       	ldi	r30, 0x2E	; 46
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8e 7f       	andi	r24, 0xFE	; 254
    15a6:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    15a8:	ad e2       	ldi	r26, 0x2D	; 45
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ed e2       	ldi	r30, 0x2D	; 45
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 64       	ori	r24, 0x40	; 64
    15b4:	8c 93       	st	X, r24
    15b6:	11 c0       	rjmp	.+34     	; 0x15da <SPI_vInit+0x98>
	}

	else if(Copy_u8SPIMode == SPI_SLAVE_MODE )
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	71 f4       	brne	.+28     	; 0x15da <SPI_vInit+0x98>
	{
		// Set in Slave Mode
		CLR_BIT( SPCR , SPCR_MSTR);
    15be:	ad e2       	ldi	r26, 0x2D	; 45
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ed e2       	ldi	r30, 0x2D	; 45
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 7e       	andi	r24, 0xEF	; 239
    15ca:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    15cc:	ad e2       	ldi	r26, 0x2D	; 45
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ed e2       	ldi	r30, 0x2D	; 45
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	80 64       	ori	r24, 0x40	; 64
    15d8:	8c 93       	st	X, r24
	}
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <SPI_u8DataSendReceive>:

u8 SPI_u8DataSendReceive(u8 Copy_u8Data)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    15ee:	ef e2       	ldi	r30, 0x2F	; 47
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	80 83       	st	Z, r24

	while(GET_BIT(SPSR , SPSR_SPIF) == 0 );
    15f6:	ee e2       	ldi	r30, 0x2E	; 46
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	dc f7       	brge	.-10     	; 0x15f6 <SPI_u8DataSendReceive+0x14>
	return SPDR;
    1600:	ef e2       	ldi	r30, 0x2F	; 47
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
}
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    1616:	af e5       	ldi	r26, 0x5F	; 95
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e5       	ldi	r30, 0x5F	; 95
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <GIE_Disable>:
void GIE_Disable(void)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    1632:	af e5       	ldi	r26, 0x5F	; 95
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e5       	ldi	r30, 0x5F	; 95
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 77       	andi	r24, 0x7F	; 127
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <EXTI_EnableDisable+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <EXTI_EnableDisable+0x8>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	01 f1       	breq	.+64     	; 0x16aa <EXTI_EnableDisable+0x64>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	89 f1       	breq	.+98     	; 0x16d6 <EXTI_EnableDisable+0x90>
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	09 f0       	breq	.+2      	; 0x167e <EXTI_EnableDisable+0x38>
    167c:	41 c0       	rjmp	.+130    	; 0x1700 <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	41 f4       	brne	.+16     	; 0x1694 <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    1684:	ab e5       	ldi	r26, 0x5B	; 91
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e5       	ldi	r30, 0x5B	; 91
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	8c 93       	st	X, r24
    1692:	36 c0       	rjmp	.+108    	; 0x1700 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	88 23       	and	r24, r24
    1698:	99 f5       	brne	.+102    	; 0x1700 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    169a:	ab e5       	ldi	r26, 0x5B	; 91
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e5       	ldi	r30, 0x5B	; 91
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7b       	andi	r24, 0xBF	; 191
    16a6:	8c 93       	st	X, r24
    16a8:	2b c0       	rjmp	.+86     	; 0x1700 <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    16b0:	ab e5       	ldi	r26, 0x5B	; 91
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	eb e5       	ldi	r30, 0x5B	; 91
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 68       	ori	r24, 0x80	; 128
    16bc:	8c 93       	st	X, r24
    16be:	20 c0       	rjmp	.+64     	; 0x1700 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 23       	and	r24, r24
    16c4:	e9 f4       	brne	.+58     	; 0x1700 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    16c6:	ab e5       	ldi	r26, 0x5B	; 91
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e5       	ldi	r30, 0x5B	; 91
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 77       	andi	r24, 0x7F	; 127
    16d2:	8c 93       	st	X, r24
    16d4:	15 c0       	rjmp	.+42     	; 0x1700 <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	41 f4       	brne	.+16     	; 0x16ec <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    16dc:	ab e5       	ldi	r26, 0x5B	; 91
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	eb e5       	ldi	r30, 0x5B	; 91
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 62       	ori	r24, 0x20	; 32
    16e8:	8c 93       	st	X, r24
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 23       	and	r24, r24
    16f0:	39 f4       	brne	.+14     	; 0x1700 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    16f2:	ab e5       	ldi	r26, 0x5B	; 91
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	eb e5       	ldi	r30, 0x5B	; 91
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7d       	andi	r24, 0xDF	; 223
    16fe:	8c 93       	st	X, r24
		}
		break;
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	2a 97       	sbiw	r28, 0x0a	; 10
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3a 87       	std	Y+10, r19	; 0x0a
    172e:	29 87       	std	Y+9, r18	; 0x09
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <EXTI_SetSenstivity+0x2e>
    173a:	66 c0       	rjmp	.+204    	; 0x1808 <EXTI_SetSenstivity+0xfa>
    173c:	29 85       	ldd	r18, Y+9	; 0x09
    173e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <EXTI_SetSenstivity+0x3a>
    1746:	bb c0       	rjmp	.+374    	; 0x18be <EXTI_SetSenstivity+0x1b0>
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	09 f0       	breq	.+2      	; 0x1752 <EXTI_SetSenstivity+0x44>
    1750:	d5 c0       	rjmp	.+426    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	38 87       	std	Y+8, r19	; 0x08
    175a:	2f 83       	std	Y+7, r18	; 0x07
    175c:	8f 81       	ldd	r24, Y+7	; 0x07
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	21 f1       	breq	.+72     	; 0x17ae <EXTI_SetSenstivity+0xa0>
    1766:	2f 81       	ldd	r18, Y+7	; 0x07
    1768:	38 85       	ldd	r19, Y+8	; 0x08
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <EXTI_SetSenstivity+0x6c>
    1770:	8f 81       	ldd	r24, Y+7	; 0x07
    1772:	98 85       	ldd	r25, Y+8	; 0x08
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	61 f0       	breq	.+24     	; 0x1790 <EXTI_SetSenstivity+0x82>
    1778:	c1 c0       	rjmp	.+386    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
    177a:	2f 81       	ldd	r18, Y+7	; 0x07
    177c:	38 85       	ldd	r19, Y+8	; 0x08
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	21 f1       	breq	.+72     	; 0x17cc <EXTI_SetSenstivity+0xbe>
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	71 f1       	breq	.+92     	; 0x17ea <EXTI_SetSenstivity+0xdc>
    178e:	b6 c0       	rjmp	.+364    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1790:	a5 e5       	ldi	r26, 0x55	; 85
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e5       	ldi	r30, 0x55	; 85
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8e 7f       	andi	r24, 0xFE	; 254
    179c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    179e:	a5 e5       	ldi	r26, 0x55	; 85
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 e5       	ldi	r30, 0x55	; 85
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 7f       	andi	r24, 0xFD	; 253
    17aa:	8c 93       	st	X, r24
    17ac:	a7 c0       	rjmp	.+334    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    17ae:	a5 e5       	ldi	r26, 0x55	; 85
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e5       	ldi	r30, 0x55	; 85
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    17bc:	a5 e5       	ldi	r26, 0x55	; 85
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e5       	ldi	r30, 0x55	; 85
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8d 7f       	andi	r24, 0xFD	; 253
    17c8:	8c 93       	st	X, r24
    17ca:	98 c0       	rjmp	.+304    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    17cc:	a5 e5       	ldi	r26, 0x55	; 85
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e5       	ldi	r30, 0x55	; 85
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8e 7f       	andi	r24, 0xFE	; 254
    17d8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    17da:	a5 e5       	ldi	r26, 0x55	; 85
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e5       	ldi	r30, 0x55	; 85
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	82 60       	ori	r24, 0x02	; 2
    17e6:	8c 93       	st	X, r24
    17e8:	89 c0       	rjmp	.+274    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    17ea:	a5 e5       	ldi	r26, 0x55	; 85
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e5       	ldi	r30, 0x55	; 85
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    17f8:	a5 e5       	ldi	r26, 0x55	; 85
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e5       	ldi	r30, 0x55	; 85
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	82 60       	ori	r24, 0x02	; 2
    1804:	8c 93       	st	X, r24
    1806:	7a c0       	rjmp	.+244    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3e 83       	std	Y+6, r19	; 0x06
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	21 f1       	breq	.+72     	; 0x1864 <EXTI_SetSenstivity+0x156>
    181c:	2d 81       	ldd	r18, Y+5	; 0x05
    181e:	3e 81       	ldd	r19, Y+6	; 0x06
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	2c f4       	brge	.+10     	; 0x1830 <EXTI_SetSenstivity+0x122>
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	61 f0       	breq	.+24     	; 0x1846 <EXTI_SetSenstivity+0x138>
    182e:	66 c0       	rjmp	.+204    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
    1830:	2d 81       	ldd	r18, Y+5	; 0x05
    1832:	3e 81       	ldd	r19, Y+6	; 0x06
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	21 f1       	breq	.+72     	; 0x1882 <EXTI_SetSenstivity+0x174>
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	91 05       	cpc	r25, r1
    1842:	71 f1       	breq	.+92     	; 0x18a0 <EXTI_SetSenstivity+0x192>
    1844:	5b c0       	rjmp	.+182    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    1846:	a5 e5       	ldi	r26, 0x55	; 85
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e5       	ldi	r30, 0x55	; 85
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8b 7f       	andi	r24, 0xFB	; 251
    1852:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1854:	a5 e5       	ldi	r26, 0x55	; 85
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e5       	ldi	r30, 0x55	; 85
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	87 7f       	andi	r24, 0xF7	; 247
    1860:	8c 93       	st	X, r24
    1862:	4c c0       	rjmp	.+152    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1864:	a5 e5       	ldi	r26, 0x55	; 85
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e5       	ldi	r30, 0x55	; 85
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	84 60       	ori	r24, 0x04	; 4
    1870:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1872:	a5 e5       	ldi	r26, 0x55	; 85
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e5 e5       	ldi	r30, 0x55	; 85
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	87 7f       	andi	r24, 0xF7	; 247
    187e:	8c 93       	st	X, r24
    1880:	3d c0       	rjmp	.+122    	; 0x18fc <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    1882:	a5 e5       	ldi	r26, 0x55	; 85
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e5       	ldi	r30, 0x55	; 85
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8b 7f       	andi	r24, 0xFB	; 251
    188e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    1890:	a5 e5       	ldi	r26, 0x55	; 85
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e5       	ldi	r30, 0x55	; 85
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	88 60       	ori	r24, 0x08	; 8
    189c:	8c 93       	st	X, r24
    189e:	2e c0       	rjmp	.+92     	; 0x18fc <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    18a0:	a5 e5       	ldi	r26, 0x55	; 85
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e5       	ldi	r30, 0x55	; 85
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	84 60       	ori	r24, 0x04	; 4
    18ac:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    18ae:	a5 e5       	ldi	r26, 0x55	; 85
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e5 e5       	ldi	r30, 0x55	; 85
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	88 60       	ori	r24, 0x08	; 8
    18ba:	8c 93       	st	X, r24
    18bc:	1f c0       	rjmp	.+62     	; 0x18fc <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3c 83       	std	Y+4, r19	; 0x04
    18c6:	2b 83       	std	Y+3, r18	; 0x03
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	91 05       	cpc	r25, r1
    18d0:	31 f0       	breq	.+12     	; 0x18de <EXTI_SetSenstivity+0x1d0>
    18d2:	2b 81       	ldd	r18, Y+3	; 0x03
    18d4:	3c 81       	ldd	r19, Y+4	; 0x04
    18d6:	23 30       	cpi	r18, 0x03	; 3
    18d8:	31 05       	cpc	r19, r1
    18da:	49 f0       	breq	.+18     	; 0x18ee <EXTI_SetSenstivity+0x1e0>
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    18de:	a4 e5       	ldi	r26, 0x54	; 84
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e4 e5       	ldi	r30, 0x54	; 84
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 64       	ori	r24, 0x40	; 64
    18ea:	8c 93       	st	X, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    18ee:	a4 e5       	ldi	r26, 0x54	; 84
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e4 e5       	ldi	r30, 0x54	; 84
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7b       	andi	r24, 0xBF	; 191
    18fa:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    18fc:	2a 96       	adiw	r28, 0x0a	; 10
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	2d 97       	sbiw	r28, 0x0d	; 13
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
    1926:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	08 f0       	brcs	.+2      	; 0x1930 <MDIO_vSetPinDir+0x22>
    192e:	09 c1       	rjmp	.+530    	; 0x1b42 <MDIO_vSetPinDir+0x234>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	08 f0       	brcs	.+2      	; 0x1938 <MDIO_vSetPinDir+0x2a>
    1936:	05 c1       	rjmp	.+522    	; 0x1b42 <MDIO_vSetPinDir+0x234>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	08 f0       	brcs	.+2      	; 0x1940 <MDIO_vSetPinDir+0x32>
    193e:	01 c1       	rjmp	.+514    	; 0x1b42 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3d 87       	std	Y+13, r19	; 0x0d
    1948:	2c 87       	std	Y+12, r18	; 0x0c
    194a:	8c 85       	ldd	r24, Y+12	; 0x0c
    194c:	9d 85       	ldd	r25, Y+13	; 0x0d
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <MDIO_vSetPinDir+0x48>
    1954:	4f c0       	rjmp	.+158    	; 0x19f4 <MDIO_vSetPinDir+0xe6>
    1956:	2c 85       	ldd	r18, Y+12	; 0x0c
    1958:	3d 85       	ldd	r19, Y+13	; 0x0d
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <MDIO_vSetPinDir+0x5c>
    1960:	8c 85       	ldd	r24, Y+12	; 0x0c
    1962:	9d 85       	ldd	r25, Y+13	; 0x0d
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	71 f0       	breq	.+28     	; 0x1984 <MDIO_vSetPinDir+0x76>
    1968:	ec c0       	rjmp	.+472    	; 0x1b42 <MDIO_vSetPinDir+0x234>
    196a:	2c 85       	ldd	r18, Y+12	; 0x0c
    196c:	3d 85       	ldd	r19, Y+13	; 0x0d
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <MDIO_vSetPinDir+0x68>
    1974:	77 c0       	rjmp	.+238    	; 0x1a64 <MDIO_vSetPinDir+0x156>
    1976:	8c 85       	ldd	r24, Y+12	; 0x0c
    1978:	9d 85       	ldd	r25, Y+13	; 0x0d
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <MDIO_vSetPinDir+0x74>
    1980:	a9 c0       	rjmp	.+338    	; 0x1ad4 <MDIO_vSetPinDir+0x1c6>
    1982:	df c0       	rjmp	.+446    	; 0x1b42 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3b 87       	std	Y+11, r19	; 0x0b
    198c:	2a 87       	std	Y+10, r18	; 0x0a
    198e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1990:	9b 85       	ldd	r25, Y+11	; 0x0b
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	31 f0       	breq	.+12     	; 0x19a2 <MDIO_vSetPinDir+0x94>
    1996:	2a 85       	ldd	r18, Y+10	; 0x0a
    1998:	3b 85       	ldd	r19, Y+11	; 0x0b
    199a:	21 30       	cpi	r18, 0x01	; 1
    199c:	31 05       	cpc	r19, r1
    199e:	b1 f0       	breq	.+44     	; 0x19cc <MDIO_vSetPinDir+0xbe>
    19a0:	d0 c0       	rjmp	.+416    	; 0x1b42 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    19a2:	aa e3       	ldi	r26, 0x3A	; 58
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ea e3       	ldi	r30, 0x3A	; 58
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <MDIO_vSetPinDir+0xb2>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <MDIO_vSetPinDir+0xae>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	bb c0       	rjmp	.+374    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    19cc:	aa e3       	ldi	r26, 0x3A	; 58
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ea e3       	ldi	r30, 0x3A	; 58
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <MDIO_vSetPinDir+0xdc>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <MDIO_vSetPinDir+0xd8>
    19ee:	84 2b       	or	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	a7 c0       	rjmp	.+334    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	39 87       	std	Y+9, r19	; 0x09
    19fc:	28 87       	std	Y+8, r18	; 0x08
    19fe:	88 85       	ldd	r24, Y+8	; 0x08
    1a00:	99 85       	ldd	r25, Y+9	; 0x09
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	31 f0       	breq	.+12     	; 0x1a12 <MDIO_vSetPinDir+0x104>
    1a06:	28 85       	ldd	r18, Y+8	; 0x08
    1a08:	39 85       	ldd	r19, Y+9	; 0x09
    1a0a:	21 30       	cpi	r18, 0x01	; 1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	b1 f0       	breq	.+44     	; 0x1a3c <MDIO_vSetPinDir+0x12e>
    1a10:	98 c0       	rjmp	.+304    	; 0x1b42 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    1a12:	a7 e3       	ldi	r26, 0x37	; 55
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e7 e3       	ldi	r30, 0x37	; 55
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <MDIO_vSetPinDir+0x122>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <MDIO_vSetPinDir+0x11e>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	83 c0       	rjmp	.+262    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    1a3c:	a7 e3       	ldi	r26, 0x37	; 55
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e7 e3       	ldi	r30, 0x37	; 55
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <MDIO_vSetPinDir+0x14c>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <MDIO_vSetPinDir+0x148>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	6f c0       	rjmp	.+222    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	3f 83       	std	Y+7, r19	; 0x07
    1a6c:	2e 83       	std	Y+6, r18	; 0x06
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	31 f0       	breq	.+12     	; 0x1a82 <MDIO_vSetPinDir+0x174>
    1a76:	2e 81       	ldd	r18, Y+6	; 0x06
    1a78:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7a:	21 30       	cpi	r18, 0x01	; 1
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	b1 f0       	breq	.+44     	; 0x1aac <MDIO_vSetPinDir+0x19e>
    1a80:	60 c0       	rjmp	.+192    	; 0x1b42 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    1a82:	a4 e3       	ldi	r26, 0x34	; 52
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e4 e3       	ldi	r30, 0x34	; 52
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <MDIO_vSetPinDir+0x192>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <MDIO_vSetPinDir+0x18e>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	4b c0       	rjmp	.+150    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    1aac:	a4 e3       	ldi	r26, 0x34	; 52
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e4 e3       	ldi	r30, 0x34	; 52
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <MDIO_vSetPinDir+0x1bc>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <MDIO_vSetPinDir+0x1b8>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	37 c0       	rjmp	.+110    	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3d 83       	std	Y+5, r19	; 0x05
    1adc:	2c 83       	std	Y+4, r18	; 0x04
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	31 f0       	breq	.+12     	; 0x1af2 <MDIO_vSetPinDir+0x1e4>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aea:	21 30       	cpi	r18, 0x01	; 1
    1aec:	31 05       	cpc	r19, r1
    1aee:	b1 f0       	breq	.+44     	; 0x1b1c <MDIO_vSetPinDir+0x20e>
    1af0:	28 c0       	rjmp	.+80     	; 0x1b42 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    1af2:	a1 e3       	ldi	r26, 0x31	; 49
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e1 e3       	ldi	r30, 0x31	; 49
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <MDIO_vSetPinDir+0x202>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <MDIO_vSetPinDir+0x1fe>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    1b1c:	a1 e3       	ldi	r26, 0x31	; 49
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e1 e3       	ldi	r30, 0x31	; 49
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <MDIO_vSetPinDir+0x22c>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <MDIO_vSetPinDir+0x228>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1b42:	2d 96       	adiw	r28, 0x0d	; 13
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	2d 97       	sbiw	r28, 0x0d	; 13
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
    1b6c:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	84 30       	cpi	r24, 0x04	; 4
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <MDIO_vSetPinVal+0x22>
    1b74:	09 c1       	rjmp	.+530    	; 0x1d88 <MDIO_vSetPinVal+0x234>
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	88 30       	cpi	r24, 0x08	; 8
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <MDIO_vSetPinVal+0x2a>
    1b7c:	05 c1       	rjmp	.+522    	; 0x1d88 <MDIO_vSetPinVal+0x234>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <MDIO_vSetPinVal+0x32>
    1b84:	01 c1       	rjmp	.+514    	; 0x1d88 <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3d 87       	std	Y+13, r19	; 0x0d
    1b8e:	2c 87       	std	Y+12, r18	; 0x0c
    1b90:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b92:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <MDIO_vSetPinVal+0x48>
    1b9a:	4f c0       	rjmp	.+158    	; 0x1c3a <MDIO_vSetPinVal+0xe6>
    1b9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <MDIO_vSetPinVal+0x5c>
    1ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	71 f0       	breq	.+28     	; 0x1bca <MDIO_vSetPinVal+0x76>
    1bae:	ec c0       	rjmp	.+472    	; 0x1d88 <MDIO_vSetPinVal+0x234>
    1bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <MDIO_vSetPinVal+0x68>
    1bba:	77 c0       	rjmp	.+238    	; 0x1caa <MDIO_vSetPinVal+0x156>
    1bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <MDIO_vSetPinVal+0x74>
    1bc6:	a9 c0       	rjmp	.+338    	; 0x1d1a <MDIO_vSetPinVal+0x1c6>
    1bc8:	df c0       	rjmp	.+446    	; 0x1d88 <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3b 87       	std	Y+11, r19	; 0x0b
    1bd2:	2a 87       	std	Y+10, r18	; 0x0a
    1bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <MDIO_vSetPinVal+0x94>
    1bdc:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bde:	3b 85       	ldd	r19, Y+11	; 0x0b
    1be0:	21 30       	cpi	r18, 0x01	; 1
    1be2:	31 05       	cpc	r19, r1
    1be4:	b1 f0       	breq	.+44     	; 0x1c12 <MDIO_vSetPinVal+0xbe>
    1be6:	d0 c0       	rjmp	.+416    	; 0x1d88 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    1be8:	ab e3       	ldi	r26, 0x3B	; 59
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <MDIO_vSetPinVal+0xb2>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <MDIO_vSetPinVal+0xae>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	bb c0       	rjmp	.+374    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    1c12:	ab e3       	ldi	r26, 0x3B	; 59
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	eb e3       	ldi	r30, 0x3B	; 59
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <MDIO_vSetPinVal+0xdc>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <MDIO_vSetPinVal+0xd8>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	a7 c0       	rjmp	.+334    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	39 87       	std	Y+9, r19	; 0x09
    1c42:	28 87       	std	Y+8, r18	; 0x08
    1c44:	88 85       	ldd	r24, Y+8	; 0x08
    1c46:	99 85       	ldd	r25, Y+9	; 0x09
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	31 f0       	breq	.+12     	; 0x1c58 <MDIO_vSetPinVal+0x104>
    1c4c:	28 85       	ldd	r18, Y+8	; 0x08
    1c4e:	39 85       	ldd	r19, Y+9	; 0x09
    1c50:	21 30       	cpi	r18, 0x01	; 1
    1c52:	31 05       	cpc	r19, r1
    1c54:	b1 f0       	breq	.+44     	; 0x1c82 <MDIO_vSetPinVal+0x12e>
    1c56:	98 c0       	rjmp	.+304    	; 0x1d88 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    1c58:	a8 e3       	ldi	r26, 0x38	; 56
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <MDIO_vSetPinVal+0x122>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <MDIO_vSetPinVal+0x11e>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	83 c0       	rjmp	.+262    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1c82:	a8 e3       	ldi	r26, 0x38	; 56
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e8 e3       	ldi	r30, 0x38	; 56
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <MDIO_vSetPinVal+0x14c>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <MDIO_vSetPinVal+0x148>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	6f c0       	rjmp	.+222    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3f 83       	std	Y+7, r19	; 0x07
    1cb2:	2e 83       	std	Y+6, r18	; 0x06
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <MDIO_vSetPinVal+0x174>
    1cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc0:	21 30       	cpi	r18, 0x01	; 1
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	b1 f0       	breq	.+44     	; 0x1cf2 <MDIO_vSetPinVal+0x19e>
    1cc6:	60 c0       	rjmp	.+192    	; 0x1d88 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    1cc8:	a5 e3       	ldi	r26, 0x35	; 53
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e3       	ldi	r30, 0x35	; 53
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <MDIO_vSetPinVal+0x192>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <MDIO_vSetPinVal+0x18e>
    1cea:	80 95       	com	r24
    1cec:	84 23       	and	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	4b c0       	rjmp	.+150    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    1cf2:	a5 e3       	ldi	r26, 0x35	; 53
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e3       	ldi	r30, 0x35	; 53
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <MDIO_vSetPinVal+0x1bc>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <MDIO_vSetPinVal+0x1b8>
    1d14:	84 2b       	or	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	37 c0       	rjmp	.+110    	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3d 83       	std	Y+5, r19	; 0x05
    1d22:	2c 83       	std	Y+4, r18	; 0x04
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	31 f0       	breq	.+12     	; 0x1d38 <MDIO_vSetPinVal+0x1e4>
    1d2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d30:	21 30       	cpi	r18, 0x01	; 1
    1d32:	31 05       	cpc	r19, r1
    1d34:	b1 f0       	breq	.+44     	; 0x1d62 <MDIO_vSetPinVal+0x20e>
    1d36:	28 c0       	rjmp	.+80     	; 0x1d88 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    1d38:	a2 e3       	ldi	r26, 0x32	; 50
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 e3       	ldi	r30, 0x32	; 50
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <MDIO_vSetPinVal+0x202>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <MDIO_vSetPinVal+0x1fe>
    1d5a:	80 95       	com	r24
    1d5c:	84 23       	and	r24, r20
    1d5e:	8c 93       	st	X, r24
    1d60:	13 c0       	rjmp	.+38     	; 0x1d88 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    1d62:	a2 e3       	ldi	r26, 0x32	; 50
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e2 e3       	ldi	r30, 0x32	; 50
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <MDIO_vSetPinVal+0x22c>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <MDIO_vSetPinVal+0x228>
    1d84:	84 2b       	or	r24, r20
    1d86:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d88:	2d 96       	adiw	r28, 0x0d	; 13
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <MDIO_GetPinVal+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <MDIO_GetPinVal+0x8>
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
    1daa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	08 f0       	brcs	.+2      	; 0x1db4 <MDIO_GetPinVal+0x1a>
    1db2:	6b c0       	rjmp	.+214    	; 0x1e8a <MDIO_GetPinVal+0xf0>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	88 30       	cpi	r24, 0x08	; 8
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <MDIO_GetPinVal+0x22>
    1dba:	67 c0       	rjmp	.+206    	; 0x1e8a <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	3d 83       	std	Y+5, r19	; 0x05
    1dc4:	2c 83       	std	Y+4, r18	; 0x04
    1dc6:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc8:	5d 81       	ldd	r21, Y+5	; 0x05
    1dca:	41 30       	cpi	r20, 0x01	; 1
    1dcc:	51 05       	cpc	r21, r1
    1dce:	41 f1       	breq	.+80     	; 0x1e20 <MDIO_GetPinVal+0x86>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	34 f4       	brge	.+12     	; 0x1de6 <MDIO_GetPinVal+0x4c>
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	21 15       	cp	r18, r1
    1de0:	31 05       	cpc	r19, r1
    1de2:	61 f0       	breq	.+24     	; 0x1dfc <MDIO_GetPinVal+0x62>
    1de4:	52 c0       	rjmp	.+164    	; 0x1e8a <MDIO_GetPinVal+0xf0>
    1de6:	4c 81       	ldd	r20, Y+4	; 0x04
    1de8:	5d 81       	ldd	r21, Y+5	; 0x05
    1dea:	42 30       	cpi	r20, 0x02	; 2
    1dec:	51 05       	cpc	r21, r1
    1dee:	51 f1       	breq	.+84     	; 0x1e44 <MDIO_GetPinVal+0xaa>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	91 05       	cpc	r25, r1
    1df8:	b9 f1       	breq	.+110    	; 0x1e68 <MDIO_GetPinVal+0xce>
    1dfa:	47 c0       	rjmp	.+142    	; 0x1e8a <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1dfc:	e9 e3       	ldi	r30, 0x39	; 57
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a9 01       	movw	r20, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <MDIO_GetPinVal+0x7a>
    1e10:	55 95       	asr	r21
    1e12:	47 95       	ror	r20
    1e14:	8a 95       	dec	r24
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <MDIO_GetPinVal+0x76>
    1e18:	ca 01       	movw	r24, r20
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	35 c0       	rjmp	.+106    	; 0x1e8a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1e20:	e6 e3       	ldi	r30, 0x36	; 54
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a9 01       	movw	r20, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <MDIO_GetPinVal+0x9e>
    1e34:	55 95       	asr	r21
    1e36:	47 95       	ror	r20
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <MDIO_GetPinVal+0x9a>
    1e3c:	ca 01       	movw	r24, r20
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	23 c0       	rjmp	.+70     	; 0x1e8a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1e44:	e3 e3       	ldi	r30, 0x33	; 51
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <MDIO_GetPinVal+0xc2>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <MDIO_GetPinVal+0xbe>
    1e60:	ca 01       	movw	r24, r20
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	11 c0       	rjmp	.+34     	; 0x1e8a <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1e68:	e0 e3       	ldi	r30, 0x30	; 48
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <MDIO_GetPinVal+0xe6>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <MDIO_GetPinVal+0xe2>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <MDIO_vTogglePinVal+0x6>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <MDIO_vTogglePinVal+0x8>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	08 f0       	brcs	.+2      	; 0x1eb4 <MDIO_vTogglePinVal+0x18>
    1eb2:	72 c0       	rjmp	.+228    	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	88 30       	cpi	r24, 0x08	; 8
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <MDIO_vTogglePinVal+0x20>
    1eba:	6e c0       	rjmp	.+220    	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3c 83       	std	Y+4, r19	; 0x04
    1ec4:	2b 83       	std	Y+3, r18	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	49 f1       	breq	.+82     	; 0x1f22 <MDIO_vTogglePinVal+0x86>
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <MDIO_vTogglePinVal+0x48>
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <MDIO_vTogglePinVal+0x5e>
    1ee2:	5a c0       	rjmp	.+180    	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	71 f1       	breq	.+92     	; 0x1f4a <MDIO_vTogglePinVal+0xae>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	e9 f1       	breq	.+122    	; 0x1f72 <MDIO_vTogglePinVal+0xd6>
    1ef8:	4f c0       	rjmp	.+158    	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1efa:	ab e3       	ldi	r26, 0x3B	; 59
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	eb e3       	ldi	r30, 0x3B	; 59
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	48 2f       	mov	r20, r24
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 2e       	mov	r0, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <MDIO_vTogglePinVal+0x7c>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	0a 94       	dec	r0
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <MDIO_vTogglePinVal+0x78>
    1f1c:	84 27       	eor	r24, r20
    1f1e:	8c 93       	st	X, r24
    1f20:	3b c0       	rjmp	.+118    	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1f22:	a8 e3       	ldi	r26, 0x38	; 56
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e8 e3       	ldi	r30, 0x38	; 56
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <MDIO_vTogglePinVal+0xa4>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <MDIO_vTogglePinVal+0xa0>
    1f44:	84 27       	eor	r24, r20
    1f46:	8c 93       	st	X, r24
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1f4a:	a5 e3       	ldi	r26, 0x35	; 53
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e5 e3       	ldi	r30, 0x35	; 53
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <MDIO_vTogglePinVal+0xcc>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <MDIO_vTogglePinVal+0xc8>
    1f6c:	84 27       	eor	r24, r20
    1f6e:	8c 93       	st	X, r24
    1f70:	13 c0       	rjmp	.+38     	; 0x1f98 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1f72:	a2 e3       	ldi	r26, 0x32	; 50
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e2 e3       	ldi	r30, 0x32	; 50
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <MDIO_vTogglePinVal+0xf4>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <MDIO_vTogglePinVal+0xf0>
    1f94:	84 27       	eor	r24, r20
    1f96:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <MDIO_vSetPortDir+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <MDIO_vSetPortDir+0x8>
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	90 f5       	brcc	.+100    	; 0x2020 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3c 83       	std	Y+4, r19	; 0x04
    1fc4:	2b 83       	std	Y+3, r18	; 0x03
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	d1 f0       	breq	.+52     	; 0x2004 <MDIO_vSetPortDir+0x5e>
    1fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <MDIO_vSetPortDir+0x3e>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	61 f0       	breq	.+24     	; 0x1ffa <MDIO_vSetPortDir+0x54>
    1fe2:	1e c0       	rjmp	.+60     	; 0x2020 <MDIO_vSetPortDir+0x7a>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	81 f0       	breq	.+32     	; 0x200e <MDIO_vSetPortDir+0x68>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	83 30       	cpi	r24, 0x03	; 3
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	81 f0       	breq	.+32     	; 0x2018 <MDIO_vSetPortDir+0x72>
    1ff8:	13 c0       	rjmp	.+38     	; 0x2020 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1ffa:	ea e3       	ldi	r30, 0x3A	; 58
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	80 83       	st	Z, r24
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    2004:	e7 e3       	ldi	r30, 0x37	; 55
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	80 83       	st	Z, r24
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    200e:	e4 e3       	ldi	r30, 0x34	; 52
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 83       	st	Z, r24
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    2018:	e1 e3       	ldi	r30, 0x31	; 49
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <MDIO_vSetPortVal+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <MDIO_vSetPortVal+0x8>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	84 30       	cpi	r24, 0x04	; 4
    2042:	90 f5       	brcc	.+100    	; 0x20a8 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	3c 83       	std	Y+4, r19	; 0x04
    204c:	2b 83       	std	Y+3, r18	; 0x03
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	91 05       	cpc	r25, r1
    2056:	d1 f0       	breq	.+52     	; 0x208c <MDIO_vSetPortVal+0x5e>
    2058:	2b 81       	ldd	r18, Y+3	; 0x03
    205a:	3c 81       	ldd	r19, Y+4	; 0x04
    205c:	22 30       	cpi	r18, 0x02	; 2
    205e:	31 05       	cpc	r19, r1
    2060:	2c f4       	brge	.+10     	; 0x206c <MDIO_vSetPortVal+0x3e>
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	61 f0       	breq	.+24     	; 0x2082 <MDIO_vSetPortVal+0x54>
    206a:	1e c0       	rjmp	.+60     	; 0x20a8 <MDIO_vSetPortVal+0x7a>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	81 f0       	breq	.+32     	; 0x2096 <MDIO_vSetPortVal+0x68>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	83 30       	cpi	r24, 0x03	; 3
    207c:	91 05       	cpc	r25, r1
    207e:	81 f0       	breq	.+32     	; 0x20a0 <MDIO_vSetPortVal+0x72>
    2080:	13 c0       	rjmp	.+38     	; 0x20a8 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    2082:	eb e3       	ldi	r30, 0x3B	; 59
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 83       	st	Z, r24
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    208c:	e8 e3       	ldi	r30, 0x38	; 56
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	80 83       	st	Z, r24
    2094:	09 c0       	rjmp	.+18     	; 0x20a8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    2096:	e5 e3       	ldi	r30, 0x35	; 53
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    20a0:	e2 e3       	ldi	r30, 0x32	; 50
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <MDIO_vInit>:


void MDIO_vInit()
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    20be:	ea e3       	ldi	r30, 0x3A	; 58
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    20c4:	e7 e3       	ldi	r30, 0x37	; 55
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    20ca:	e4 e3       	ldi	r30, 0x34	; 52
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	87 e0       	ldi	r24, 0x07	; 7
    20d0:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    20d2:	e1 e3       	ldi	r30, 0x31	; 49
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    20da:	eb e3       	ldi	r30, 0x3B	; 59
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    20e0:	e8 e3       	ldi	r30, 0x38	; 56
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	84 e0       	ldi	r24, 0x04	; 4
    20e6:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    20e8:	e5 e3       	ldi	r30, 0x35	; 53
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
    2102:	a6 e2       	ldi	r26, 0x26	; 38
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e6 e2       	ldi	r30, 0x26	; 38
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	87 7f       	andi	r24, 0xF7	; 247
    210e:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
    2110:	a7 e2       	ldi	r26, 0x27	; 39
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e7 e2       	ldi	r30, 0x27	; 39
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 64       	ori	r24, 0x40	; 64
    211c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    211e:	a7 e2       	ldi	r26, 0x27	; 39
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e7 e2       	ldi	r30, 0x27	; 39
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8f 77       	andi	r24, 0x7F	; 127
    212a:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
    212c:	a6 e2       	ldi	r26, 0x26	; 38
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e6 e2       	ldi	r30, 0x26	; 38
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    213a:	a6 e2       	ldi	r26, 0x26	; 38
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e6 e2       	ldi	r30, 0x26	; 38
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
    2156:	a6 e2       	ldi	r26, 0x26	; 38
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e6 e2       	ldi	r30, 0x26	; 38
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 68       	ori	r24, 0x80	; 128
    2162:	8c 93       	st	X, r24
}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <ADC_StartConvertPolling+0x6>
    2170:	0f 92       	push	r0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
    2178:	1a 82       	std	Y+2, r1	; 0x02
    217a:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
    217c:	a7 e2       	ldi	r26, 0x27	; 39
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e7 e2       	ldi	r30, 0x27	; 39
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 7e       	andi	r24, 0xE0	; 224
    2188:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
    218a:	a7 e2       	ldi	r26, 0x27	; 39
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e7 e2       	ldi	r30, 0x27	; 39
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	90 81       	ld	r25, Z
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	89 2b       	or	r24, r25
    2198:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
    219a:	a6 e2       	ldi	r26, 0x26	; 38
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e6 e2       	ldi	r30, 0x26	; 38
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	80 64       	ori	r24, 0x40	; 64
    21a6:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
    21a8:	e6 e2       	ldi	r30, 0x26	; 38
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	82 95       	swap	r24
    21b0:	8f 70       	andi	r24, 0x0F	; 15
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	81 70       	andi	r24, 0x01	; 1
    21b8:	90 70       	andi	r25, 0x00	; 0
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	a9 f3       	breq	.-22     	; 0x21a8 <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
    21be:	e4 e2       	ldi	r30, 0x24	; 36
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
    21ca:	a6 e2       	ldi	r26, 0x26	; 38
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e6 e2       	ldi	r30, 0x26	; 38
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 61       	ori	r24, 0x10	; 16
    21d6:	8c 93       	st	X, r24
	return ADC_read;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <ADC_StartConvertInt+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <ADC_StartConvertInt+0x8>
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <ADC_StartConvertInt+0xa>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	7c 83       	std	Y+4, r23	; 0x04
    21fa:	6b 83       	std	Y+3, r22	; 0x03
    21fc:	5e 83       	std	Y+6, r21	; 0x06
    21fe:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
    2200:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
    2202:	80 91 94 01 	lds	r24, 0x0194
    2206:	88 23       	and	r24, r24
    2208:	69 f5       	brne	.+90     	; 0x2264 <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 94 01 	sts	0x0194, r24
			Global_ptr=pu16Reading;
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	90 93 91 01 	sts	0x0191, r25
    2218:	80 93 90 01 	sts	0x0190, r24
			GlobalPtrFunc = PtrFunc;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	90 93 93 01 	sts	0x0193, r25
    2224:	80 93 92 01 	sts	0x0192, r24

			ADMUX &=0b11100000;
    2228:	a7 e2       	ldi	r26, 0x27	; 39
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e7 e2       	ldi	r30, 0x27	; 39
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 7e       	andi	r24, 0xE0	; 224
    2234:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
    2236:	a7 e2       	ldi	r26, 0x27	; 39
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e7 e2       	ldi	r30, 0x27	; 39
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	90 81       	ld	r25, Z
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	89 2b       	or	r24, r25
    2244:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
    2246:	a6 e2       	ldi	r26, 0x26	; 38
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e6 e2       	ldi	r30, 0x26	; 38
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
    2254:	a6 e2       	ldi	r26, 0x26	; 38
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e6 e2       	ldi	r30, 0x26	; 38
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 64       	ori	r24, 0x40	; 64
    2260:	8c 93       	st	X, r24
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    2268:	89 81       	ldd	r24, Y+1	; 0x01
}
    226a:	26 96       	adiw	r28, 0x06	; 6
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	2f 93       	push	r18
    2288:	3f 93       	push	r19
    228a:	4f 93       	push	r20
    228c:	5f 93       	push	r21
    228e:	6f 93       	push	r22
    2290:	7f 93       	push	r23
    2292:	8f 93       	push	r24
    2294:	9f 93       	push	r25
    2296:	af 93       	push	r26
    2298:	bf 93       	push	r27
    229a:	ef 93       	push	r30
    229c:	ff 93       	push	r31
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
    22a6:	a0 91 90 01 	lds	r26, 0x0190
    22aa:	b0 91 91 01 	lds	r27, 0x0191
    22ae:	e4 e2       	ldi	r30, 0x24	; 36
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	8d 93       	st	X+, r24
    22b8:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
    22ba:	e0 91 92 01 	lds	r30, 0x0192
    22be:	f0 91 93 01 	lds	r31, 0x0193
    22c2:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
    22c4:	a6 e2       	ldi	r26, 0x26	; 38
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e6 e2       	ldi	r30, 0x26	; 38
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	87 7f       	andi	r24, 0xF7	; 247
    22d0:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
    22d2:	10 92 94 01 	sts	0x0194, r1



}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	7f 91       	pop	r23
    22e8:	6f 91       	pop	r22
    22ea:	5f 91       	pop	r21
    22ec:	4f 91       	pop	r20
    22ee:	3f 91       	pop	r19
    22f0:	2f 91       	pop	r18
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti

000022fc <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <HSSD_vInit+0x6>
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	08 f0       	brcs	.+2      	; 0x2312 <HSSD_vInit+0x16>
    2310:	42 c0       	rjmp	.+132    	; 0x2396 <HSSD_vInit+0x9a>
	{
		switch(A_PortID)
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	3b 83       	std	Y+3, r19	; 0x03
    231a:	2a 83       	std	Y+2, r18	; 0x02
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	91 05       	cpc	r25, r1
    2324:	f1 f0       	breq	.+60     	; 0x2362 <HSSD_vInit+0x66>
    2326:	2a 81       	ldd	r18, Y+2	; 0x02
    2328:	3b 81       	ldd	r19, Y+3	; 0x03
    232a:	22 30       	cpi	r18, 0x02	; 2
    232c:	31 05       	cpc	r19, r1
    232e:	2c f4       	brge	.+10     	; 0x233a <HSSD_vInit+0x3e>
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	61 f0       	breq	.+24     	; 0x2350 <HSSD_vInit+0x54>
    2338:	2e c0       	rjmp	.+92     	; 0x2396 <HSSD_vInit+0x9a>
    233a:	2a 81       	ldd	r18, Y+2	; 0x02
    233c:	3b 81       	ldd	r19, Y+3	; 0x03
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	31 05       	cpc	r19, r1
    2342:	c1 f0       	breq	.+48     	; 0x2374 <HSSD_vInit+0x78>
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	91 05       	cpc	r25, r1
    234c:	e1 f0       	breq	.+56     	; 0x2386 <HSSD_vInit+0x8a>
    234e:	23 c0       	rjmp	.+70     	; 0x2396 <HSSD_vInit+0x9a>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	6f ef       	ldi	r22, 0xFF	; 255
    2354:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	6f ef       	ldi	r22, 0xFF	; 255
    235c:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    2360:	1a c0       	rjmp	.+52     	; 0x2396 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	6f ef       	ldi	r22, 0xFF	; 255
    2366:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	6f ef       	ldi	r22, 0xFF	; 255
    236e:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    2372:	11 c0       	rjmp	.+34     	; 0x2396 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	6f ef       	ldi	r22, 0xFF	; 255
    2378:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	6f ef       	ldi	r22, 0xFF	; 255
    2380:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <HSSD_vInit+0x9a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	6f ef       	ldi	r22, 0xFF	; 255
    238a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
			MDIO_vSetPortVal(A_PortID , 0xFF);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	6f ef       	ldi	r22, 0xFF	; 255
    2392:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
			break;
		}
	}
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <HSSD_vDisplayNumber+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <HSSD_vDisplayNumber+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	90 f5       	brcc	.+100    	; 0x241c <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3c 83       	std	Y+4, r19	; 0x04
    23c0:	2b 83       	std	Y+3, r18	; 0x03
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	d1 f0       	breq	.+52     	; 0x2400 <HSSD_vDisplayNumber+0x5e>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	31 05       	cpc	r19, r1
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <HSSD_vDisplayNumber+0x3e>
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 f0       	breq	.+24     	; 0x23f6 <HSSD_vDisplayNumber+0x54>
    23de:	1e c0       	rjmp	.+60     	; 0x241c <HSSD_vDisplayNumber+0x7a>
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	3c 81       	ldd	r19, Y+4	; 0x04
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <HSSD_vDisplayNumber+0x68>
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	83 30       	cpi	r24, 0x03	; 3
    23f0:	91 05       	cpc	r25, r1
    23f2:	81 f0       	breq	.+32     	; 0x2414 <HSSD_vDisplayNumber+0x72>
    23f4:	13 c0       	rjmp	.+38     	; 0x241c <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	6a 81       	ldd	r22, Y+2	; 0x02
    23fa:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	6a 81       	ldd	r22, Y+2	; 0x02
    2404:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    2408:	09 c0       	rjmp	.+18     	; 0x241c <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	6a 81       	ldd	r22, Y+2	; 0x02
    240e:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
    2412:	04 c0       	rjmp	.+8      	; 0x241c <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	6a 81       	ldd	r22, Y+2	; 0x02
    2418:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
			break;
		}
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	c0 55       	subi	r28, 0x50	; 80
    2434:	d0 40       	sbci	r29, 0x00	; 0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	fe 01       	movw	r30, r28
    2442:	e9 5b       	subi	r30, 0xB9	; 185
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 83       	st	Z, r24
    2448:	fe 01       	movw	r30, r28
    244a:	e8 5b       	subi	r30, 0xB8	; 184
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	71 83       	std	Z+1, r23	; 0x01
    2450:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2452:	9e 01       	movw	r18, r28
    2454:	23 5c       	subi	r18, 0xC3	; 195
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	2e 96       	adiw	r28, 0x0e	; 14
    245a:	3f af       	std	Y+63, r19	; 0x3f
    245c:	2e af       	std	Y+62, r18	; 0x3e
    245e:	2e 97       	sbiw	r28, 0x0e	; 14
    2460:	88 e7       	ldi	r24, 0x78	; 120
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	60 96       	adiw	r28, 0x10	; 16
    2466:	9f af       	std	Y+63, r25	; 0x3f
    2468:	8e af       	std	Y+62, r24	; 0x3e
    246a:	60 97       	sbiw	r28, 0x10	; 16
    246c:	9a e0       	ldi	r25, 0x0A	; 10
    246e:	61 96       	adiw	r28, 0x11	; 17
    2470:	9f af       	std	Y+63, r25	; 0x3f
    2472:	61 97       	sbiw	r28, 0x11	; 17
    2474:	60 96       	adiw	r28, 0x10	; 16
    2476:	ee ad       	ldd	r30, Y+62	; 0x3e
    2478:	ff ad       	ldd	r31, Y+63	; 0x3f
    247a:	60 97       	sbiw	r28, 0x10	; 16
    247c:	00 80       	ld	r0, Z
    247e:	60 96       	adiw	r28, 0x10	; 16
    2480:	2e ad       	ldd	r18, Y+62	; 0x3e
    2482:	3f ad       	ldd	r19, Y+63	; 0x3f
    2484:	60 97       	sbiw	r28, 0x10	; 16
    2486:	2f 5f       	subi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	60 96       	adiw	r28, 0x10	; 16
    248c:	3f af       	std	Y+63, r19	; 0x3f
    248e:	2e af       	std	Y+62, r18	; 0x3e
    2490:	60 97       	sbiw	r28, 0x10	; 16
    2492:	2e 96       	adiw	r28, 0x0e	; 14
    2494:	ee ad       	ldd	r30, Y+62	; 0x3e
    2496:	ff ad       	ldd	r31, Y+63	; 0x3f
    2498:	2e 97       	sbiw	r28, 0x0e	; 14
    249a:	00 82       	st	Z, r0
    249c:	2e 96       	adiw	r28, 0x0e	; 14
    249e:	2e ad       	ldd	r18, Y+62	; 0x3e
    24a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    24a2:	2e 97       	sbiw	r28, 0x0e	; 14
    24a4:	2f 5f       	subi	r18, 0xFF	; 255
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	2e 96       	adiw	r28, 0x0e	; 14
    24aa:	3f af       	std	Y+63, r19	; 0x3f
    24ac:	2e af       	std	Y+62, r18	; 0x3e
    24ae:	2e 97       	sbiw	r28, 0x0e	; 14
    24b0:	61 96       	adiw	r28, 0x11	; 17
    24b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    24b4:	61 97       	sbiw	r28, 0x11	; 17
    24b6:	31 50       	subi	r19, 0x01	; 1
    24b8:	61 96       	adiw	r28, 0x11	; 17
    24ba:	3f af       	std	Y+63, r19	; 0x3f
    24bc:	61 97       	sbiw	r28, 0x11	; 17
    24be:	61 96       	adiw	r28, 0x11	; 17
    24c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    24c2:	61 97       	sbiw	r28, 0x11	; 17
    24c4:	88 23       	and	r24, r24
    24c6:	b1 f6       	brne	.-84     	; 0x2474 <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    24c8:	fe 01       	movw	r30, r28
    24ca:	e9 5b       	subi	r30, 0xB9	; 185
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	84 30       	cpi	r24, 0x04	; 4
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <HSSD_vDisplayNumberAscending+0xac>
    24d4:	7c c2       	rjmp	.+1272   	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    24d6:	fe 01       	movw	r30, r28
    24d8:	e9 5b       	subi	r30, 0xB9	; 185
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	e8 2f       	mov	r30, r24
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	2c 96       	adiw	r28, 0x0c	; 12
    24e4:	ff af       	std	Y+63, r31	; 0x3f
    24e6:	ee af       	std	Y+62, r30	; 0x3e
    24e8:	2c 97       	sbiw	r28, 0x0c	; 12
    24ea:	2c 96       	adiw	r28, 0x0c	; 12
    24ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    24ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    24f0:	2c 97       	sbiw	r28, 0x0c	; 12
    24f2:	21 30       	cpi	r18, 0x01	; 1
    24f4:	31 05       	cpc	r19, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <HSSD_vDisplayNumberAscending+0xd0>
    24f8:	b2 c0       	rjmp	.+356    	; 0x265e <HSSD_vDisplayNumberAscending+0x234>
    24fa:	2c 96       	adiw	r28, 0x0c	; 12
    24fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    24fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2500:	2c 97       	sbiw	r28, 0x0c	; 12
    2502:	82 30       	cpi	r24, 0x02	; 2
    2504:	91 05       	cpc	r25, r1
    2506:	3c f4       	brge	.+14     	; 0x2516 <HSSD_vDisplayNumberAscending+0xec>
    2508:	2c 96       	adiw	r28, 0x0c	; 12
    250a:	ee ad       	ldd	r30, Y+62	; 0x3e
    250c:	ff ad       	ldd	r31, Y+63	; 0x3f
    250e:	2c 97       	sbiw	r28, 0x0c	; 12
    2510:	30 97       	sbiw	r30, 0x00	; 0
    2512:	91 f0       	breq	.+36     	; 0x2538 <HSSD_vDisplayNumberAscending+0x10e>
    2514:	5c c2       	rjmp	.+1208   	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
    2516:	2c 96       	adiw	r28, 0x0c	; 12
    2518:	2e ad       	ldd	r18, Y+62	; 0x3e
    251a:	3f ad       	ldd	r19, Y+63	; 0x3f
    251c:	2c 97       	sbiw	r28, 0x0c	; 12
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	31 05       	cpc	r19, r1
    2522:	09 f4       	brne	.+2      	; 0x2526 <HSSD_vDisplayNumberAscending+0xfc>
    2524:	2f c1       	rjmp	.+606    	; 0x2784 <HSSD_vDisplayNumberAscending+0x35a>
    2526:	2c 96       	adiw	r28, 0x0c	; 12
    2528:	8e ad       	ldd	r24, Y+62	; 0x3e
    252a:	9f ad       	ldd	r25, Y+63	; 0x3f
    252c:	2c 97       	sbiw	r28, 0x0c	; 12
    252e:	83 30       	cpi	r24, 0x03	; 3
    2530:	91 05       	cpc	r25, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <HSSD_vDisplayNumberAscending+0x10c>
    2534:	ba c1       	rjmp	.+884    	; 0x28aa <HSSD_vDisplayNumberAscending+0x480>
    2536:	4b c2       	rjmp	.+1174   	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    2538:	1c ae       	std	Y+60, r1	; 0x3c
    253a:	8c c0       	rjmp	.+280    	; 0x2654 <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    253c:	8c ad       	ldd	r24, Y+60	; 0x3c
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	ce 01       	movw	r24, r28
    2544:	cd 96       	adiw	r24, 0x3d	; 61
    2546:	fc 01       	movw	r30, r24
    2548:	e2 0f       	add	r30, r18
    254a:	f3 1f       	adc	r31, r19
    254c:	90 81       	ld	r25, Z
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	69 2f       	mov	r22, r25
    2552:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2556:	fe 01       	movw	r30, r28
    2558:	e8 5b       	subi	r30, 0xB8	; 184
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	cc 01       	movw	r24, r24
    2562:	a0 e0       	ldi	r26, 0x00	; 0
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8d ab       	std	Y+53, r24	; 0x35
    2574:	9e ab       	std	Y+54, r25	; 0x36
    2576:	af ab       	std	Y+55, r26	; 0x37
    2578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6d a9       	ldd	r22, Y+53	; 0x35
    257c:	7e a9       	ldd	r23, Y+54	; 0x36
    257e:	8f a9       	ldd	r24, Y+55	; 0x37
    2580:	98 ad       	ldd	r25, Y+56	; 0x38
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a ef       	ldi	r20, 0xFA	; 250
    2588:	54 e4       	ldi	r21, 0x44	; 68
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	89 ab       	std	Y+49, r24	; 0x31
    2594:	9a ab       	std	Y+50, r25	; 0x32
    2596:	ab ab       	std	Y+51, r26	; 0x33
    2598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    259a:	69 a9       	ldd	r22, Y+49	; 0x31
    259c:	7a a9       	ldd	r23, Y+50	; 0x32
    259e:	8b a9       	ldd	r24, Y+51	; 0x33
    25a0:	9c a9       	ldd	r25, Y+52	; 0x34
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	7a a9       	ldd	r23, Y+50	; 0x32
    25c0:	8b a9       	ldd	r24, Y+51	; 0x33
    25c2:	9c a9       	ldd	r25, Y+52	; 0x34
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6d a9       	ldd	r22, Y+53	; 0x35
    25d6:	7e a9       	ldd	r23, Y+54	; 0x36
    25d8:	8f a9       	ldd	r24, Y+55	; 0x37
    25da:	98 ad       	ldd	r25, Y+56	; 0x38
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	98 ab       	std	Y+48, r25	; 0x30
    25fa:	8f a7       	std	Y+47, r24	; 0x2f
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <HSSD_vDisplayNumberAscending+0x1f2>
    25fe:	88 ec       	ldi	r24, 0xC8	; 200
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e a7       	std	Y+46, r25	; 0x2e
    2604:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2606:	8d a5       	ldd	r24, Y+45	; 0x2d
    2608:	9e a5       	ldd	r25, Y+46	; 0x2e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <HSSD_vDisplayNumberAscending+0x1e0>
    260e:	9e a7       	std	Y+46, r25	; 0x2e
    2610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	8f a5       	ldd	r24, Y+47	; 0x2f
    2614:	98 a9       	ldd	r25, Y+48	; 0x30
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <HSSD_vDisplayNumberAscending+0x1d4>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	69 a9       	ldd	r22, Y+49	; 0x31
    2628:	7a a9       	ldd	r23, Y+50	; 0x32
    262a:	8b a9       	ldd	r24, Y+51	; 0x33
    262c:	9c a9       	ldd	r25, Y+52	; 0x34
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	98 ab       	std	Y+48, r25	; 0x30
    2638:	8f a7       	std	Y+47, r24	; 0x2f
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	9c a7       	std	Y+44, r25	; 0x2c
    2640:	8b a7       	std	Y+43, r24	; 0x2b
    2642:	8b a5       	ldd	r24, Y+43	; 0x2b
    2644:	9c a5       	ldd	r25, Y+44	; 0x2c
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <HSSD_vDisplayNumberAscending+0x21c>
    264a:	9c a7       	std	Y+44, r25	; 0x2c
    264c:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    264e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	8c af       	std	Y+60, r24	; 0x3c
    2654:	8c ad       	ldd	r24, Y+60	; 0x3c
    2656:	8a 30       	cpi	r24, 0x0A	; 10
    2658:	08 f4       	brcc	.+2      	; 0x265c <HSSD_vDisplayNumberAscending+0x232>
    265a:	70 cf       	rjmp	.-288    	; 0x253c <HSSD_vDisplayNumberAscending+0x112>
    265c:	b8 c1       	rjmp	.+880    	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    265e:	1b ae       	std	Y+59, r1	; 0x3b
    2660:	8c c0       	rjmp	.+280    	; 0x277a <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    2662:	8b ad       	ldd	r24, Y+59	; 0x3b
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	ce 01       	movw	r24, r28
    266a:	cd 96       	adiw	r24, 0x3d	; 61
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	90 81       	ld	r25, Z
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	69 2f       	mov	r22, r25
    2678:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    267c:	fe 01       	movw	r30, r28
    267e:	e8 5b       	subi	r30, 0xB8	; 184
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	91 81       	ldd	r25, Z+1	; 0x01
    2686:	cc 01       	movw	r24, r24
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8f a3       	std	Y+39, r24	; 0x27
    269a:	98 a7       	std	Y+40, r25	; 0x28
    269c:	a9 a7       	std	Y+41, r26	; 0x29
    269e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6f a1       	ldd	r22, Y+39	; 0x27
    26a2:	78 a5       	ldd	r23, Y+40	; 0x28
    26a4:	89 a5       	ldd	r24, Y+41	; 0x29
    26a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a ef       	ldi	r20, 0xFA	; 250
    26ae:	54 e4       	ldi	r21, 0x44	; 68
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8b a3       	std	Y+35, r24	; 0x23
    26ba:	9c a3       	std	Y+36, r25	; 0x24
    26bc:	ad a3       	std	Y+37, r26	; 0x25
    26be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9a a3       	std	Y+34, r25	; 0x22
    26de:	89 a3       	std	Y+33, r24	; 0x21
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6f a1       	ldd	r22, Y+39	; 0x27
    26fc:	78 a5       	ldd	r23, Y+40	; 0x28
    26fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2700:	9a a5       	ldd	r25, Y+42	; 0x2a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <HSSD_vDisplayNumberAscending+0x318>
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	98 a3       	std	Y+32, r25	; 0x20
    272a:	8f 8f       	std	Y+31, r24	; 0x1f
    272c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272e:	98 a1       	ldd	r25, Y+32	; 0x20
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <HSSD_vDisplayNumberAscending+0x306>
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <HSSD_vDisplayNumberAscending+0x2fa>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	89 a1       	ldd	r24, Y+33	; 0x21
    2762:	9a a1       	ldd	r25, Y+34	; 0x22
    2764:	9e 8f       	std	Y+30, r25	; 0x1e
    2766:	8d 8f       	std	Y+29, r24	; 0x1d
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <HSSD_vDisplayNumberAscending+0x342>
    2770:	9e 8f       	std	Y+30, r25	; 0x1e
    2772:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    2774:	8b ad       	ldd	r24, Y+59	; 0x3b
    2776:	8f 5f       	subi	r24, 0xFF	; 255
    2778:	8b af       	std	Y+59, r24	; 0x3b
    277a:	8b ad       	ldd	r24, Y+59	; 0x3b
    277c:	8a 30       	cpi	r24, 0x0A	; 10
    277e:	08 f4       	brcc	.+2      	; 0x2782 <HSSD_vDisplayNumberAscending+0x358>
    2780:	70 cf       	rjmp	.-288    	; 0x2662 <HSSD_vDisplayNumberAscending+0x238>
    2782:	25 c1       	rjmp	.+586    	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2784:	1a ae       	std	Y+58, r1	; 0x3a
    2786:	8c c0       	rjmp	.+280    	; 0x28a0 <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2788:	8a ad       	ldd	r24, Y+58	; 0x3a
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	ce 01       	movw	r24, r28
    2790:	cd 96       	adiw	r24, 0x3d	; 61
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	90 81       	ld	r25, Z
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	69 2f       	mov	r22, r25
    279e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    27a2:	fe 01       	movw	r30, r28
    27a4:	e8 5b       	subi	r30, 0xB8	; 184
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	cc 01       	movw	r24, r24
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	89 8f       	std	Y+25, r24	; 0x19
    27c0:	9a 8f       	std	Y+26, r25	; 0x1a
    27c2:	ab 8f       	std	Y+27, r26	; 0x1b
    27c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8d 8b       	std	Y+21, r24	; 0x15
    27e0:	9e 8b       	std	Y+22, r25	; 0x16
    27e2:	af 8b       	std	Y+23, r26	; 0x17
    27e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	69 8d       	ldd	r22, Y+25	; 0x19
    2822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <HSSD_vDisplayNumberAscending+0x43e>
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
    2852:	89 89       	ldd	r24, Y+17	; 0x11
    2854:	9a 89       	ldd	r25, Y+18	; 0x12
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <HSSD_vDisplayNumberAscending+0x42c>
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <HSSD_vDisplayNumberAscending+0x420>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	8b 89       	ldd	r24, Y+19	; 0x13
    2888:	9c 89       	ldd	r25, Y+20	; 0x14
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
    288e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2890:	98 89       	ldd	r25, Y+16	; 0x10
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <HSSD_vDisplayNumberAscending+0x468>
    2896:	98 8b       	std	Y+16, r25	; 0x10
    2898:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    289a:	8a ad       	ldd	r24, Y+58	; 0x3a
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	8a af       	std	Y+58, r24	; 0x3a
    28a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	08 f4       	brcc	.+2      	; 0x28a8 <HSSD_vDisplayNumberAscending+0x47e>
    28a6:	70 cf       	rjmp	.-288    	; 0x2788 <HSSD_vDisplayNumberAscending+0x35e>
    28a8:	92 c0       	rjmp	.+292    	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    28aa:	19 ae       	std	Y+57, r1	; 0x39
    28ac:	8c c0       	rjmp	.+280    	; 0x29c6 <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    28ae:	89 ad       	ldd	r24, Y+57	; 0x39
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	ce 01       	movw	r24, r28
    28b6:	cd 96       	adiw	r24, 0x3d	; 61
    28b8:	fc 01       	movw	r30, r24
    28ba:	e2 0f       	add	r30, r18
    28bc:	f3 1f       	adc	r31, r19
    28be:	90 81       	ld	r25, Z
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	69 2f       	mov	r22, r25
    28c4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    28c8:	fe 01       	movw	r30, r28
    28ca:	e8 5b       	subi	r30, 0xB8	; 184
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	cc 01       	movw	r24, r24
    28d4:	a0 e0       	ldi	r26, 0x00	; 0
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8b 87       	std	Y+11, r24	; 0x0b
    28e6:	9c 87       	std	Y+12, r25	; 0x0c
    28e8:	ad 87       	std	Y+13, r26	; 0x0d
    28ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a ef       	ldi	r20, 0xFA	; 250
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8f 83       	std	Y+7, r24	; 0x07
    2906:	98 87       	std	Y+8, r25	; 0x08
    2908:	a9 87       	std	Y+9, r26	; 0x09
    290a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	3f c0       	rjmp	.+126    	; 0x29ac <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	4c f5       	brge	.+82     	; 0x2998 <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	0f c0       	rjmp	.+30     	; 0x298e <HSSD_vDisplayNumberAscending+0x564>
    2970:	88 ec       	ldi	r24, 0xC8	; 200
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <HSSD_vDisplayNumberAscending+0x552>
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <HSSD_vDisplayNumberAscending+0x546>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <HSSD_vDisplayNumberAscending+0x58e>
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    29c0:	89 ad       	ldd	r24, Y+57	; 0x39
    29c2:	8f 5f       	subi	r24, 0xFF	; 255
    29c4:	89 af       	std	Y+57, r24	; 0x39
    29c6:	89 ad       	ldd	r24, Y+57	; 0x39
    29c8:	8a 30       	cpi	r24, 0x0A	; 10
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <HSSD_vDisplayNumberAscending+0x5a4>
    29cc:	70 cf       	rjmp	.-288    	; 0x28ae <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    29ce:	c0 5b       	subi	r28, 0xB0	; 176
    29d0:	df 4f       	sbci	r29, 0xFF	; 255
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,s8 A_u8Time , u16 A_u16TimetoWait)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	c1 55       	subi	r28, 0x51	; 81
    29ec:	d0 40       	sbci	r29, 0x00	; 0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	fe 01       	movw	r30, r28
    29fa:	e9 5b       	subi	r30, 0xB9	; 185
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 83       	st	Z, r24
    2a00:	fe 01       	movw	r30, r28
    2a02:	e8 5b       	subi	r30, 0xB8	; 184
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 83       	st	Z, r22
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e7 5b       	subi	r30, 0xB7	; 183
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	51 83       	std	Z+1, r21	; 0x01
    2a10:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    2a12:	9e 01       	movw	r18, r28
    2a14:	23 5c       	subi	r18, 0xC3	; 195
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	2f 96       	adiw	r28, 0x0f	; 15
    2a1a:	3f af       	std	Y+63, r19	; 0x3f
    2a1c:	2e af       	std	Y+62, r18	; 0x3e
    2a1e:	2f 97       	sbiw	r28, 0x0f	; 15
    2a20:	82 e8       	ldi	r24, 0x82	; 130
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	61 96       	adiw	r28, 0x11	; 17
    2a26:	9f af       	std	Y+63, r25	; 0x3f
    2a28:	8e af       	std	Y+62, r24	; 0x3e
    2a2a:	61 97       	sbiw	r28, 0x11	; 17
    2a2c:	9a e0       	ldi	r25, 0x0A	; 10
    2a2e:	62 96       	adiw	r28, 0x12	; 18
    2a30:	9f af       	std	Y+63, r25	; 0x3f
    2a32:	62 97       	sbiw	r28, 0x12	; 18
    2a34:	61 96       	adiw	r28, 0x11	; 17
    2a36:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a38:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a3a:	61 97       	sbiw	r28, 0x11	; 17
    2a3c:	00 80       	ld	r0, Z
    2a3e:	61 96       	adiw	r28, 0x11	; 17
    2a40:	2e ad       	ldd	r18, Y+62	; 0x3e
    2a42:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a44:	61 97       	sbiw	r28, 0x11	; 17
    2a46:	2f 5f       	subi	r18, 0xFF	; 255
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	61 96       	adiw	r28, 0x11	; 17
    2a4c:	3f af       	std	Y+63, r19	; 0x3f
    2a4e:	2e af       	std	Y+62, r18	; 0x3e
    2a50:	61 97       	sbiw	r28, 0x11	; 17
    2a52:	2f 96       	adiw	r28, 0x0f	; 15
    2a54:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a56:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a58:	2f 97       	sbiw	r28, 0x0f	; 15
    2a5a:	00 82       	st	Z, r0
    2a5c:	2f 96       	adiw	r28, 0x0f	; 15
    2a5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2a60:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a62:	2f 97       	sbiw	r28, 0x0f	; 15
    2a64:	2f 5f       	subi	r18, 0xFF	; 255
    2a66:	3f 4f       	sbci	r19, 0xFF	; 255
    2a68:	2f 96       	adiw	r28, 0x0f	; 15
    2a6a:	3f af       	std	Y+63, r19	; 0x3f
    2a6c:	2e af       	std	Y+62, r18	; 0x3e
    2a6e:	2f 97       	sbiw	r28, 0x0f	; 15
    2a70:	62 96       	adiw	r28, 0x12	; 18
    2a72:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a74:	62 97       	sbiw	r28, 0x12	; 18
    2a76:	31 50       	subi	r19, 0x01	; 1
    2a78:	62 96       	adiw	r28, 0x12	; 18
    2a7a:	3f af       	std	Y+63, r19	; 0x3f
    2a7c:	62 97       	sbiw	r28, 0x12	; 18
    2a7e:	62 96       	adiw	r28, 0x12	; 18
    2a80:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a82:	62 97       	sbiw	r28, 0x12	; 18
    2a84:	88 23       	and	r24, r24
    2a86:	b1 f6       	brne	.-84     	; 0x2a34 <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e9 5b       	subi	r30, 0xB9	; 185
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	84 30       	cpi	r24, 0x04	; 4
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <HSSD_vCountDown+0xb4>
    2a94:	9b c2       	rjmp	.+1334   	; 0x2fcc <HSSD_vCountDown+0x5ea>
	{
		switch(A_PortID)
    2a96:	fe 01       	movw	r30, r28
    2a98:	e9 5b       	subi	r30, 0xB9	; 185
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	e8 2f       	mov	r30, r24
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	2d 96       	adiw	r28, 0x0d	; 13
    2aa4:	ff af       	std	Y+63, r31	; 0x3f
    2aa6:	ee af       	std	Y+62, r30	; 0x3e
    2aa8:	2d 97       	sbiw	r28, 0x0d	; 13
    2aaa:	2d 96       	adiw	r28, 0x0d	; 13
    2aac:	2e ad       	ldd	r18, Y+62	; 0x3e
    2aae:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ab0:	2d 97       	sbiw	r28, 0x0d	; 13
    2ab2:	21 30       	cpi	r18, 0x01	; 1
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <HSSD_vCountDown+0xd8>
    2ab8:	b8 c0       	rjmp	.+368    	; 0x2c2a <HSSD_vCountDown+0x248>
    2aba:	2d 96       	adiw	r28, 0x0d	; 13
    2abc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2abe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ac0:	2d 97       	sbiw	r28, 0x0d	; 13
    2ac2:	82 30       	cpi	r24, 0x02	; 2
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	3c f4       	brge	.+14     	; 0x2ad6 <HSSD_vCountDown+0xf4>
    2ac8:	2d 96       	adiw	r28, 0x0d	; 13
    2aca:	ee ad       	ldd	r30, Y+62	; 0x3e
    2acc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ace:	2d 97       	sbiw	r28, 0x0d	; 13
    2ad0:	30 97       	sbiw	r30, 0x00	; 0
    2ad2:	91 f0       	breq	.+36     	; 0x2af8 <HSSD_vCountDown+0x116>
    2ad4:	74 c2       	rjmp	.+1256   	; 0x2fbe <HSSD_vCountDown+0x5dc>
    2ad6:	2d 96       	adiw	r28, 0x0d	; 13
    2ad8:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ada:	3f ad       	ldd	r19, Y+63	; 0x3f
    2adc:	2d 97       	sbiw	r28, 0x0d	; 13
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <HSSD_vCountDown+0x104>
    2ae4:	3b c1       	rjmp	.+630    	; 0x2d5c <HSSD_vCountDown+0x37a>
    2ae6:	2d 96       	adiw	r28, 0x0d	; 13
    2ae8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aec:	2d 97       	sbiw	r28, 0x0d	; 13
    2aee:	83 30       	cpi	r24, 0x03	; 3
    2af0:	91 05       	cpc	r25, r1
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <HSSD_vCountDown+0x114>
    2af4:	cc c1       	rjmp	.+920    	; 0x2e8e <HSSD_vCountDown+0x4ac>
    2af6:	63 c2       	rjmp	.+1222   	; 0x2fbe <HSSD_vCountDown+0x5dc>
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e8 5b       	subi	r30, 0xB8	; 184
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	8c af       	std	Y+60, r24	; 0x3c
    2b02:	8e c0       	rjmp	.+284    	; 0x2c20 <HSSD_vCountDown+0x23e>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    2b04:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b06:	28 2f       	mov	r18, r24
    2b08:	33 27       	eor	r19, r19
    2b0a:	27 fd       	sbrc	r18, 7
    2b0c:	30 95       	com	r19
    2b0e:	ce 01       	movw	r24, r28
    2b10:	cd 96       	adiw	r24, 0x3d	; 61
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	90 81       	ld	r25, Z
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	69 2f       	mov	r22, r25
    2b1e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2b22:	fe 01       	movw	r30, r28
    2b24:	e7 5b       	subi	r30, 0xB7	; 183
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	cc 01       	movw	r24, r24
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8d ab       	std	Y+53, r24	; 0x35
    2b40:	9e ab       	std	Y+54, r25	; 0x36
    2b42:	af ab       	std	Y+55, r26	; 0x37
    2b44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6d a9       	ldd	r22, Y+53	; 0x35
    2b48:	7e a9       	ldd	r23, Y+54	; 0x36
    2b4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	89 ab       	std	Y+49, r24	; 0x31
    2b60:	9a ab       	std	Y+50, r25	; 0x32
    2b62:	ab ab       	std	Y+51, r26	; 0x33
    2b64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b66:	69 a9       	ldd	r22, Y+49	; 0x31
    2b68:	7a a9       	ldd	r23, Y+50	; 0x32
    2b6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <HSSD_vCountDown+0x1a6>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	98 ab       	std	Y+48, r25	; 0x30
    2b84:	8f a7       	std	Y+47, r24	; 0x2f
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <HSSD_vCountDown+0x224>
	else if (__tmp > 65535)
    2b88:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <HSSD_vCountDown+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	98 ab       	std	Y+48, r25	; 0x30
    2bc6:	8f a7       	std	Y+47, r24	; 0x2f
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <HSSD_vCountDown+0x206>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9e a7       	std	Y+46, r25	; 0x2e
    2bd0:	8d a7       	std	Y+45, r24	; 0x2d
    2bd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <HSSD_vCountDown+0x1f4>
    2bda:	9e a7       	std	Y+46, r25	; 0x2e
    2bdc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be0:	98 a9       	ldd	r25, Y+48	; 0x30
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	98 ab       	std	Y+48, r25	; 0x30
    2be6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bea:	98 a9       	ldd	r25, Y+48	; 0x30
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <HSSD_vCountDown+0x1e8>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <HSSD_vCountDown+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	98 ab       	std	Y+48, r25	; 0x30
    2c04:	8f a7       	std	Y+47, r24	; 0x2f
    2c06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c08:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0a:	9c a7       	std	Y+44, r25	; 0x2c
    2c0c:	8b a7       	std	Y+43, r24	; 0x2b
    2c0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <HSSD_vCountDown+0x230>
    2c16:	9c a7       	std	Y+44, r25	; 0x2c
    2c18:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(s8 i=A_u8Time; i >= 0; i--)
    2c1a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c1c:	81 50       	subi	r24, 0x01	; 1
    2c1e:	8c af       	std	Y+60, r24	; 0x3c
    2c20:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c22:	88 23       	and	r24, r24
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <HSSD_vCountDown+0x246>
    2c26:	6e cf       	rjmp	.-292    	; 0x2b04 <HSSD_vCountDown+0x122>
    2c28:	ca c1       	rjmp	.+916    	; 0x2fbe <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e8 5b       	subi	r30, 0xB8	; 184
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	8b af       	std	Y+59, r24	; 0x3b
    2c34:	8e c0       	rjmp	.+284    	; 0x2d52 <HSSD_vCountDown+0x370>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    2c36:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c38:	28 2f       	mov	r18, r24
    2c3a:	33 27       	eor	r19, r19
    2c3c:	27 fd       	sbrc	r18, 7
    2c3e:	30 95       	com	r19
    2c40:	ce 01       	movw	r24, r28
    2c42:	cd 96       	adiw	r24, 0x3d	; 61
    2c44:	fc 01       	movw	r30, r24
    2c46:	e2 0f       	add	r30, r18
    2c48:	f3 1f       	adc	r31, r19
    2c4a:	90 81       	ld	r25, Z
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	69 2f       	mov	r22, r25
    2c50:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2c54:	fe 01       	movw	r30, r28
    2c56:	e7 5b       	subi	r30, 0xB7	; 183
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	cc 01       	movw	r24, r24
    2c60:	a0 e0       	ldi	r26, 0x00	; 0
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8f a3       	std	Y+39, r24	; 0x27
    2c72:	98 a7       	std	Y+40, r25	; 0x28
    2c74:	a9 a7       	std	Y+41, r26	; 0x29
    2c76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c78:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4a ef       	ldi	r20, 0xFA	; 250
    2c86:	54 e4       	ldi	r21, 0x44	; 68
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	8b a3       	std	Y+35, r24	; 0x23
    2c92:	9c a3       	std	Y+36, r25	; 0x24
    2c94:	ad a3       	std	Y+37, r26	; 0x25
    2c96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c98:	6b a1       	ldd	r22, Y+35	; 0x23
    2c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	2c f4       	brge	.+10     	; 0x2cba <HSSD_vCountDown+0x2d8>
		__ticks = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9a a3       	std	Y+34, r25	; 0x22
    2cb6:	89 a3       	std	Y+33, r24	; 0x21
    2cb8:	3f c0       	rjmp	.+126    	; 0x2d38 <HSSD_vCountDown+0x356>
	else if (__tmp > 65535)
    2cba:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	3f ef       	ldi	r19, 0xFF	; 255
    2cc6:	4f e7       	ldi	r20, 0x7F	; 127
    2cc8:	57 e4       	ldi	r21, 0x47	; 71
    2cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cce:	18 16       	cp	r1, r24
    2cd0:	4c f5       	brge	.+82     	; 0x2d24 <HSSD_vCountDown+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e2       	ldi	r20, 0x20	; 32
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9a a3       	std	Y+34, r25	; 0x22
    2cf8:	89 a3       	std	Y+33, r24	; 0x21
    2cfa:	0f c0       	rjmp	.+30     	; 0x2d1a <HSSD_vCountDown+0x338>
    2cfc:	88 ec       	ldi	r24, 0xC8	; 200
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	98 a3       	std	Y+32, r25	; 0x20
    2d02:	8f 8f       	std	Y+31, r24	; 0x1f
    2d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d06:	98 a1       	ldd	r25, Y+32	; 0x20
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <HSSD_vCountDown+0x326>
    2d0c:	98 a3       	std	Y+32, r25	; 0x20
    2d0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d10:	89 a1       	ldd	r24, Y+33	; 0x21
    2d12:	9a a1       	ldd	r25, Y+34	; 0x22
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	9a a3       	std	Y+34, r25	; 0x22
    2d18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	69 f7       	brne	.-38     	; 0x2cfc <HSSD_vCountDown+0x31a>
    2d22:	14 c0       	rjmp	.+40     	; 0x2d4c <HSSD_vCountDown+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d24:	6b a1       	ldd	r22, Y+35	; 0x23
    2d26:	7c a1       	ldd	r23, Y+36	; 0x24
    2d28:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9a a3       	std	Y+34, r25	; 0x22
    2d36:	89 a3       	std	Y+33, r24	; 0x21
    2d38:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <HSSD_vCountDown+0x362>
    2d48:	9e 8f       	std	Y+30, r25	; 0x1e
    2d4a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTB:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2d4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	8b af       	std	Y+59, r24	; 0x3b
    2d52:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d54:	88 23       	and	r24, r24
    2d56:	0c f0       	brlt	.+2      	; 0x2d5a <HSSD_vCountDown+0x378>
    2d58:	6e cf       	rjmp	.-292    	; 0x2c36 <HSSD_vCountDown+0x254>
    2d5a:	31 c1       	rjmp	.+610    	; 0x2fbe <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e8 5b       	subi	r30, 0xB8	; 184
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	80 81       	ld	r24, Z
    2d64:	8a af       	std	Y+58, r24	; 0x3a
    2d66:	8e c0       	rjmp	.+284    	; 0x2e84 <HSSD_vCountDown+0x4a2>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2d68:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	33 27       	eor	r19, r19
    2d6e:	27 fd       	sbrc	r18, 7
    2d70:	30 95       	com	r19
    2d72:	ce 01       	movw	r24, r28
    2d74:	cd 96       	adiw	r24, 0x3d	; 61
    2d76:	fc 01       	movw	r30, r24
    2d78:	e2 0f       	add	r30, r18
    2d7a:	f3 1f       	adc	r31, r19
    2d7c:	90 81       	ld	r25, Z
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	69 2f       	mov	r22, r25
    2d82:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2d86:	fe 01       	movw	r30, r28
    2d88:	e7 5b       	subi	r30, 0xB7	; 183
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	cc 01       	movw	r24, r24
    2d92:	a0 e0       	ldi	r26, 0x00	; 0
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	89 8f       	std	Y+25, r24	; 0x19
    2da4:	9a 8f       	std	Y+26, r25	; 0x1a
    2da6:	ab 8f       	std	Y+27, r26	; 0x1b
    2da8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2daa:	69 8d       	ldd	r22, Y+25	; 0x19
    2dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	8d 8b       	std	Y+21, r24	; 0x15
    2dc4:	9e 8b       	std	Y+22, r25	; 0x16
    2dc6:	af 8b       	std	Y+23, r26	; 0x17
    2dc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dca:	6d 89       	ldd	r22, Y+21	; 0x15
    2dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dce:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	2c f4       	brge	.+10     	; 0x2dec <HSSD_vCountDown+0x40a>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	9c 8b       	std	Y+20, r25	; 0x14
    2de8:	8b 8b       	std	Y+19, r24	; 0x13
    2dea:	3f c0       	rjmp	.+126    	; 0x2e6a <HSSD_vCountDown+0x488>
	else if (__tmp > 65535)
    2dec:	6d 89       	ldd	r22, Y+21	; 0x15
    2dee:	7e 89       	ldd	r23, Y+22	; 0x16
    2df0:	8f 89       	ldd	r24, Y+23	; 0x17
    2df2:	98 8d       	ldd	r25, Y+24	; 0x18
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	4c f5       	brge	.+82     	; 0x2e56 <HSSD_vCountDown+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	69 8d       	ldd	r22, Y+25	; 0x19
    2e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9c 8b       	std	Y+20, r25	; 0x14
    2e2a:	8b 8b       	std	Y+19, r24	; 0x13
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <HSSD_vCountDown+0x46a>
    2e2e:	88 ec       	ldi	r24, 0xC8	; 200
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9a 8b       	std	Y+18, r25	; 0x12
    2e34:	89 8b       	std	Y+17, r24	; 0x11
    2e36:	89 89       	ldd	r24, Y+17	; 0x11
    2e38:	9a 89       	ldd	r25, Y+18	; 0x12
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <HSSD_vCountDown+0x458>
    2e3e:	9a 8b       	std	Y+18, r25	; 0x12
    2e40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	8b 89       	ldd	r24, Y+19	; 0x13
    2e44:	9c 89       	ldd	r25, Y+20	; 0x14
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <HSSD_vCountDown+0x44c>
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <HSSD_vCountDown+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	6d 89       	ldd	r22, Y+21	; 0x15
    2e58:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9c 8b       	std	Y+20, r25	; 0x14
    2e68:	8b 8b       	std	Y+19, r24	; 0x13
    2e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6e:	98 8b       	std	Y+16, r25	; 0x10
    2e70:	8f 87       	std	Y+15, r24	; 0x0f
    2e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e74:	98 89       	ldd	r25, Y+16	; 0x10
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <HSSD_vCountDown+0x494>
    2e7a:	98 8b       	std	Y+16, r25	; 0x10
    2e7c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTC:
			for(s8 i =A_u8Time  ; i >= 0; i--)
    2e7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e80:	81 50       	subi	r24, 0x01	; 1
    2e82:	8a af       	std	Y+58, r24	; 0x3a
    2e84:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e86:	88 23       	and	r24, r24
    2e88:	0c f0       	brlt	.+2      	; 0x2e8c <HSSD_vCountDown+0x4aa>
    2e8a:	6e cf       	rjmp	.-292    	; 0x2d68 <HSSD_vCountDown+0x386>
    2e8c:	98 c0       	rjmp	.+304    	; 0x2fbe <HSSD_vCountDown+0x5dc>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e8 5b       	subi	r30, 0xB8	; 184
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	89 af       	std	Y+57, r24	; 0x39
    2e98:	8e c0       	rjmp	.+284    	; 0x2fb6 <HSSD_vCountDown+0x5d4>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    2e9a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	33 27       	eor	r19, r19
    2ea0:	27 fd       	sbrc	r18, 7
    2ea2:	30 95       	com	r19
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	cd 96       	adiw	r24, 0x3d	; 61
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	e2 0f       	add	r30, r18
    2eac:	f3 1f       	adc	r31, r19
    2eae:	90 81       	ld	r25, Z
    2eb0:	83 e0       	ldi	r24, 0x03	; 3
    2eb2:	69 2f       	mov	r22, r25
    2eb4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e7 5b       	subi	r30, 0xB7	; 183
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	cc 01       	movw	r24, r24
    2ec4:	a0 e0       	ldi	r26, 0x00	; 0
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	8b 87       	std	Y+11, r24	; 0x0b
    2ed6:	9c 87       	std	Y+12, r25	; 0x0c
    2ed8:	ad 87       	std	Y+13, r26	; 0x0d
    2eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	4a ef       	ldi	r20, 0xFA	; 250
    2eea:	54 e4       	ldi	r21, 0x44	; 68
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8f 83       	std	Y+7, r24	; 0x07
    2ef6:	98 87       	std	Y+8, r25	; 0x08
    2ef8:	a9 87       	std	Y+9, r26	; 0x09
    2efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efc:	6f 81       	ldd	r22, Y+7	; 0x07
    2efe:	78 85       	ldd	r23, Y+8	; 0x08
    2f00:	89 85       	ldd	r24, Y+9	; 0x09
    2f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e8       	ldi	r20, 0x80	; 128
    2f0a:	5f e3       	ldi	r21, 0x3F	; 63
    2f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f10:	88 23       	and	r24, r24
    2f12:	2c f4       	brge	.+10     	; 0x2f1e <HSSD_vCountDown+0x53c>
		__ticks = 1;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	3f c0       	rjmp	.+126    	; 0x2f9c <HSSD_vCountDown+0x5ba>
	else if (__tmp > 65535)
    2f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f20:	78 85       	ldd	r23, Y+8	; 0x08
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	3f ef       	ldi	r19, 0xFF	; 255
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	57 e4       	ldi	r21, 0x47	; 71
    2f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	4c f5       	brge	.+82     	; 0x2f88 <HSSD_vCountDown+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e2       	ldi	r20, 0x20	; 32
    2f44:	51 e4       	ldi	r21, 0x41	; 65
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <HSSD_vCountDown+0x59c>
    2f60:	88 ec       	ldi	r24, 0xC8	; 200
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	8b 83       	std	Y+3, r24	; 0x03
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <HSSD_vCountDown+0x58a>
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	9e 81       	ldd	r25, Y+6	; 0x06
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	69 f7       	brne	.-38     	; 0x2f60 <HSSD_vCountDown+0x57e>
    2f86:	14 c0       	rjmp	.+40     	; 0x2fb0 <HSSD_vCountDown+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f88:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8a:	78 85       	ldd	r23, Y+8	; 0x08
    2f8c:	89 85       	ldd	r24, Y+9	; 0x09
    2f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <HSSD_vCountDown+0x5c6>
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(s8 i=A_u8Time ; i >= 0; i--)
    2fb0:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb2:	81 50       	subi	r24, 0x01	; 1
    2fb4:	89 af       	std	Y+57, r24	; 0x39
    2fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb8:	88 23       	and	r24, r24
    2fba:	0c f0       	brlt	.+2      	; 0x2fbe <HSSD_vCountDown+0x5dc>
    2fbc:	6e cf       	rjmp	.-292    	; 0x2e9a <HSSD_vCountDown+0x4b8>
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
		MDIO_vSetPortVal(A_PortID , 0xFF);
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e9 5b       	subi	r30, 0xB9	; 185
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	80 81       	ld	r24, Z
    2fc6:	6f ef       	ldi	r22, 0xFF	; 255
    2fc8:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
	}
}
    2fcc:	cf 5a       	subi	r28, 0xAF	; 175
    2fce:	df 4f       	sbci	r29, 0xFF	; 255
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <HSSD_vTurnOFF>:

void HSSD_vTurnOFF(DIO_PORT_e A_PortID)
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	0f 92       	push	r0
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortVal(A_PortID , 0xFF);
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	6f ef       	ldi	r22, 0xFF	; 255
    2ff0:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
}
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	62 e0       	ldi	r22, 0x02	; 2
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 87 0c 	call	0x190e	; 0x190e <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	6f ef       	ldi	r22, 0xFF	; 255
    3026:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	2f 97       	sbiw	r28, 0x0f	; 15
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	6f 85       	ldd	r22, Y+15	; 0x0f
    305e:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	62 e0       	ldi	r22, 0x02	; 2
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e8       	ldi	r26, 0x80	; 128
    3072:	bf e3       	ldi	r27, 0x3F	; 63
    3074:	8b 87       	std	Y+11, r24	; 0x0b
    3076:	9c 87       	std	Y+12, r25	; 0x0c
    3078:	ad 87       	std	Y+13, r26	; 0x0d
    307a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307c:	6b 85       	ldd	r22, Y+11	; 0x0b
    307e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3080:	8d 85       	ldd	r24, Y+13	; 0x0d
    3082:	9e 85       	ldd	r25, Y+14	; 0x0e
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	4a ef       	ldi	r20, 0xFA	; 250
    308a:	54 e4       	ldi	r21, 0x44	; 68
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	8f 83       	std	Y+7, r24	; 0x07
    3096:	98 87       	std	Y+8, r25	; 0x08
    3098:	a9 87       	std	Y+9, r26	; 0x09
    309a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    309c:	6f 81       	ldd	r22, Y+7	; 0x07
    309e:	78 85       	ldd	r23, Y+8	; 0x08
    30a0:	89 85       	ldd	r24, Y+9	; 0x09
    30a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e8       	ldi	r20, 0x80	; 128
    30aa:	5f e3       	ldi	r21, 0x3F	; 63
    30ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b0:	88 23       	and	r24, r24
    30b2:	2c f4       	brge	.+10     	; 0x30be <LCD_SendCommand+0x8e>
		__ticks = 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	3f c0       	rjmp	.+126    	; 0x313c <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	4c f5       	brge	.+82     	; 0x3128 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30da:	8d 85       	ldd	r24, Y+13	; 0x0d
    30dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e2       	ldi	r20, 0x20	; 32
    30e4:	51 e4       	ldi	r21, 0x41	; 65
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <LCD_SendCommand+0xee>
    3100:	88 ec       	ldi	r24, 0xC8	; 200
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <LCD_SendCommand+0xdc>
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	69 f7       	brne	.-38     	; 0x3100 <LCD_SendCommand+0xd0>
    3126:	14 c0       	rjmp	.+40     	; 0x3150 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <LCD_SendCommand+0x118>
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	62 e0       	ldi	r22, 0x02	; 2
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>

}
    315a:	2f 96       	adiw	r28, 0x0f	; 15
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	2f 97       	sbiw	r28, 0x0f	; 15
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	40 e0       	ldi	r20, 0x00	; 0
    3192:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	6f 85       	ldd	r22, Y+15	; 0x0f
    319a:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	62 e0       	ldi	r22, 0x02	; 2
    31a2:	41 e0       	ldi	r20, 0x01	; 1
    31a4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a0 e8       	ldi	r26, 0x80	; 128
    31ae:	bf e3       	ldi	r27, 0x3F	; 63
    31b0:	8b 87       	std	Y+11, r24	; 0x0b
    31b2:	9c 87       	std	Y+12, r25	; 0x0c
    31b4:	ad 87       	std	Y+13, r26	; 0x0d
    31b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    31bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31be:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a ef       	ldi	r20, 0xFA	; 250
    31c6:	54 e4       	ldi	r21, 0x44	; 68
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	8f 83       	std	Y+7, r24	; 0x07
    31d2:	98 87       	std	Y+8, r25	; 0x08
    31d4:	a9 87       	std	Y+9, r26	; 0x09
    31d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d8:	6f 81       	ldd	r22, Y+7	; 0x07
    31da:	78 85       	ldd	r23, Y+8	; 0x08
    31dc:	89 85       	ldd	r24, Y+9	; 0x09
    31de:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <LCD_SendData+0x8e>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	0f c0       	rjmp	.+30     	; 0x325a <LCD_SendData+0xee>
    323c:	88 ec       	ldi	r24, 0xC8	; 200
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_SendData+0xdc>
    324c:	9c 83       	std	Y+4, r25	; 0x04
    324e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	8d 81       	ldd	r24, Y+5	; 0x05
    3252:	9e 81       	ldd	r25, Y+6	; 0x06
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <LCD_SendData+0xd0>
    3262:	14 c0       	rjmp	.+40     	; 0x328c <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	6f 81       	ldd	r22, Y+7	; 0x07
    3266:	78 85       	ldd	r23, Y+8	; 0x08
    3268:	89 85       	ldd	r24, Y+9	; 0x09
    326a:	9a 85       	ldd	r25, Y+10	; 0x0a
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	9a 81       	ldd	r25, Y+2	; 0x02
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <LCD_SendData+0x118>
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	62 e0       	ldi	r22, 0x02	; 2
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
}
    3296:	2f 96       	adiw	r28, 0x0f	; 15
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <LCD_Init>:

void LCD_Init(void)
{
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	c6 54       	subi	r28, 0x46	; 70
    32b6:	d0 40       	sbci	r29, 0x00	; 0
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	fe 01       	movw	r30, r28
    32c4:	ed 5b       	subi	r30, 0xBD	; 189
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	a0 e2       	ldi	r26, 0x20	; 32
    32ce:	b2 e4       	ldi	r27, 0x42	; 66
    32d0:	80 83       	st	Z, r24
    32d2:	91 83       	std	Z+1, r25	; 0x01
    32d4:	a2 83       	std	Z+2, r26	; 0x02
    32d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d8:	8e 01       	movw	r16, r28
    32da:	01 5c       	subi	r16, 0xC1	; 193
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	fe 01       	movw	r30, r28
    32e0:	ed 5b       	subi	r30, 0xBD	; 189
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a ef       	ldi	r20, 0xFA	; 250
    32f2:	54 e4       	ldi	r21, 0x44	; 68
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	f8 01       	movw	r30, r16
    32fe:	80 83       	st	Z, r24
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	a2 83       	std	Z+2, r26	; 0x02
    3304:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3306:	fe 01       	movw	r30, r28
    3308:	ff 96       	adiw	r30, 0x3f	; 63
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	2c f4       	brge	.+10     	; 0x332c <LCD_Init+0x84>
		__ticks = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9e af       	std	Y+62, r25	; 0x3e
    3328:	8d af       	std	Y+61, r24	; 0x3d
    332a:	46 c0       	rjmp	.+140    	; 0x33b8 <LCD_Init+0x110>
	else if (__tmp > 65535)
    332c:	fe 01       	movw	r30, r28
    332e:	ff 96       	adiw	r30, 0x3f	; 63
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	4f e7       	ldi	r20, 0x7F	; 127
    333e:	57 e4       	ldi	r21, 0x47	; 71
    3340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3344:	18 16       	cp	r1, r24
    3346:	64 f5       	brge	.+88     	; 0x33a0 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3348:	fe 01       	movw	r30, r28
    334a:	ed 5b       	subi	r30, 0xBD	; 189
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	60 81       	ld	r22, Z
    3350:	71 81       	ldd	r23, Z+1	; 0x01
    3352:	82 81       	ldd	r24, Z+2	; 0x02
    3354:	93 81       	ldd	r25, Z+3	; 0x03
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9e af       	std	Y+62, r25	; 0x3e
    3374:	8d af       	std	Y+61, r24	; 0x3d
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <LCD_Init+0xee>
    3378:	88 ec       	ldi	r24, 0xC8	; 200
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9c af       	std	Y+60, r25	; 0x3c
    337e:	8b af       	std	Y+59, r24	; 0x3b
    3380:	8b ad       	ldd	r24, Y+59	; 0x3b
    3382:	9c ad       	ldd	r25, Y+60	; 0x3c
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_Init+0xdc>
    3388:	9c af       	std	Y+60, r25	; 0x3c
    338a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	8d ad       	ldd	r24, Y+61	; 0x3d
    338e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9e af       	std	Y+62, r25	; 0x3e
    3394:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	8d ad       	ldd	r24, Y+61	; 0x3d
    3398:	9e ad       	ldd	r25, Y+62	; 0x3e
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <LCD_Init+0xd0>
    339e:	16 c0       	rjmp	.+44     	; 0x33cc <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	fe 01       	movw	r30, r28
    33a2:	ff 96       	adiw	r30, 0x3f	; 63
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9e af       	std	Y+62, r25	; 0x3e
    33b6:	8d af       	std	Y+61, r24	; 0x3d
    33b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    33bc:	9a af       	std	Y+58, r25	; 0x3a
    33be:	89 af       	std	Y+57, r24	; 0x39
    33c0:	89 ad       	ldd	r24, Y+57	; 0x39
    33c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <LCD_Init+0x11c>
    33c8:	9a af       	std	Y+58, r25	; 0x3a
    33ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    33cc:	88 e3       	ldi	r24, 0x38	; 56
    33ce:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	a0 e8       	ldi	r26, 0x80	; 128
    33d8:	bf e3       	ldi	r27, 0x3F	; 63
    33da:	8d ab       	std	Y+53, r24	; 0x35
    33dc:	9e ab       	std	Y+54, r25	; 0x36
    33de:	af ab       	std	Y+55, r26	; 0x37
    33e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e2:	6d a9       	ldd	r22, Y+53	; 0x35
    33e4:	7e a9       	ldd	r23, Y+54	; 0x36
    33e6:	8f a9       	ldd	r24, Y+55	; 0x37
    33e8:	98 ad       	ldd	r25, Y+56	; 0x38
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a ef       	ldi	r20, 0xFA	; 250
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	89 ab       	std	Y+49, r24	; 0x31
    33fc:	9a ab       	std	Y+50, r25	; 0x32
    33fe:	ab ab       	std	Y+51, r26	; 0x33
    3400:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3402:	69 a9       	ldd	r22, Y+49	; 0x31
    3404:	7a a9       	ldd	r23, Y+50	; 0x32
    3406:	8b a9       	ldd	r24, Y+51	; 0x33
    3408:	9c a9       	ldd	r25, Y+52	; 0x34
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	2c f4       	brge	.+10     	; 0x3424 <LCD_Init+0x17c>
		__ticks = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	98 ab       	std	Y+48, r25	; 0x30
    3420:	8f a7       	std	Y+47, r24	; 0x2f
    3422:	3f c0       	rjmp	.+126    	; 0x34a2 <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    3424:	69 a9       	ldd	r22, Y+49	; 0x31
    3426:	7a a9       	ldd	r23, Y+50	; 0x32
    3428:	8b a9       	ldd	r24, Y+51	; 0x33
    342a:	9c a9       	ldd	r25, Y+52	; 0x34
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	3f ef       	ldi	r19, 0xFF	; 255
    3430:	4f e7       	ldi	r20, 0x7F	; 127
    3432:	57 e4       	ldi	r21, 0x47	; 71
    3434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3438:	18 16       	cp	r1, r24
    343a:	4c f5       	brge	.+82     	; 0x348e <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343c:	6d a9       	ldd	r22, Y+53	; 0x35
    343e:	7e a9       	ldd	r23, Y+54	; 0x36
    3440:	8f a9       	ldd	r24, Y+55	; 0x37
    3442:	98 ad       	ldd	r25, Y+56	; 0x38
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e2       	ldi	r20, 0x20	; 32
    344a:	51 e4       	ldi	r21, 0x41	; 65
    344c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	98 ab       	std	Y+48, r25	; 0x30
    3462:	8f a7       	std	Y+47, r24	; 0x2f
    3464:	0f c0       	rjmp	.+30     	; 0x3484 <LCD_Init+0x1dc>
    3466:	88 ec       	ldi	r24, 0xC8	; 200
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9e a7       	std	Y+46, r25	; 0x2e
    346c:	8d a7       	std	Y+45, r24	; 0x2d
    346e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3470:	9e a5       	ldd	r25, Y+46	; 0x2e
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <LCD_Init+0x1ca>
    3476:	9e a7       	std	Y+46, r25	; 0x2e
    3478:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347a:	8f a5       	ldd	r24, Y+47	; 0x2f
    347c:	98 a9       	ldd	r25, Y+48	; 0x30
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	98 ab       	std	Y+48, r25	; 0x30
    3482:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3484:	8f a5       	ldd	r24, Y+47	; 0x2f
    3486:	98 a9       	ldd	r25, Y+48	; 0x30
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	69 f7       	brne	.-38     	; 0x3466 <LCD_Init+0x1be>
    348c:	14 c0       	rjmp	.+40     	; 0x34b6 <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348e:	69 a9       	ldd	r22, Y+49	; 0x31
    3490:	7a a9       	ldd	r23, Y+50	; 0x32
    3492:	8b a9       	ldd	r24, Y+51	; 0x33
    3494:	9c a9       	ldd	r25, Y+52	; 0x34
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	98 ab       	std	Y+48, r25	; 0x30
    34a0:	8f a7       	std	Y+47, r24	; 0x2f
    34a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a4:	98 a9       	ldd	r25, Y+48	; 0x30
    34a6:	9c a7       	std	Y+44, r25	; 0x2c
    34a8:	8b a7       	std	Y+43, r24	; 0x2b
    34aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <LCD_Init+0x206>
    34b2:	9c a7       	std	Y+44, r25	; 0x2c
    34b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    34b6:	8c e0       	ldi	r24, 0x0C	; 12
    34b8:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e8       	ldi	r26, 0x80	; 128
    34c2:	bf e3       	ldi	r27, 0x3F	; 63
    34c4:	8f a3       	std	Y+39, r24	; 0x27
    34c6:	98 a7       	std	Y+40, r25	; 0x28
    34c8:	a9 a7       	std	Y+41, r26	; 0x29
    34ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34cc:	6f a1       	ldd	r22, Y+39	; 0x27
    34ce:	78 a5       	ldd	r23, Y+40	; 0x28
    34d0:	89 a5       	ldd	r24, Y+41	; 0x29
    34d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	4a ef       	ldi	r20, 0xFA	; 250
    34da:	54 e4       	ldi	r21, 0x44	; 68
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8b a3       	std	Y+35, r24	; 0x23
    34e6:	9c a3       	std	Y+36, r25	; 0x24
    34e8:	ad a3       	std	Y+37, r26	; 0x25
    34ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ec:	6b a1       	ldd	r22, Y+35	; 0x23
    34ee:	7c a1       	ldd	r23, Y+36	; 0x24
    34f0:	8d a1       	ldd	r24, Y+37	; 0x25
    34f2:	9e a1       	ldd	r25, Y+38	; 0x26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	2c f4       	brge	.+10     	; 0x350e <LCD_Init+0x266>
		__ticks = 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9a a3       	std	Y+34, r25	; 0x22
    350a:	89 a3       	std	Y+33, r24	; 0x21
    350c:	3f c0       	rjmp	.+126    	; 0x358c <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    350e:	6b a1       	ldd	r22, Y+35	; 0x23
    3510:	7c a1       	ldd	r23, Y+36	; 0x24
    3512:	8d a1       	ldd	r24, Y+37	; 0x25
    3514:	9e a1       	ldd	r25, Y+38	; 0x26
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	4c f5       	brge	.+82     	; 0x3578 <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	6f a1       	ldd	r22, Y+39	; 0x27
    3528:	78 a5       	ldd	r23, Y+40	; 0x28
    352a:	89 a5       	ldd	r24, Y+41	; 0x29
    352c:	9a a5       	ldd	r25, Y+42	; 0x2a
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9a a3       	std	Y+34, r25	; 0x22
    354c:	89 a3       	std	Y+33, r24	; 0x21
    354e:	0f c0       	rjmp	.+30     	; 0x356e <LCD_Init+0x2c6>
    3550:	88 ec       	ldi	r24, 0xC8	; 200
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	98 a3       	std	Y+32, r25	; 0x20
    3556:	8f 8f       	std	Y+31, r24	; 0x1f
    3558:	8f 8d       	ldd	r24, Y+31	; 0x1f
    355a:	98 a1       	ldd	r25, Y+32	; 0x20
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_Init+0x2b4>
    3560:	98 a3       	std	Y+32, r25	; 0x20
    3562:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3564:	89 a1       	ldd	r24, Y+33	; 0x21
    3566:	9a a1       	ldd	r25, Y+34	; 0x22
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9a a3       	std	Y+34, r25	; 0x22
    356c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	89 a1       	ldd	r24, Y+33	; 0x21
    3570:	9a a1       	ldd	r25, Y+34	; 0x22
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <LCD_Init+0x2a8>
    3576:	14 c0       	rjmp	.+40     	; 0x35a0 <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3578:	6b a1       	ldd	r22, Y+35	; 0x23
    357a:	7c a1       	ldd	r23, Y+36	; 0x24
    357c:	8d a1       	ldd	r24, Y+37	; 0x25
    357e:	9e a1       	ldd	r25, Y+38	; 0x26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	9e 8f       	std	Y+30, r25	; 0x1e
    3592:	8d 8f       	std	Y+29, r24	; 0x1d
    3594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <LCD_Init+0x2f0>
    359c:	9e 8f       	std	Y+30, r25	; 0x1e
    359e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	a0 e0       	ldi	r26, 0x00	; 0
    35ac:	b0 e4       	ldi	r27, 0x40	; 64
    35ae:	89 8f       	std	Y+25, r24	; 0x19
    35b0:	9a 8f       	std	Y+26, r25	; 0x1a
    35b2:	ab 8f       	std	Y+27, r26	; 0x1b
    35b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b6:	69 8d       	ldd	r22, Y+25	; 0x19
    35b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a ef       	ldi	r20, 0xFA	; 250
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	8d 8b       	std	Y+21, r24	; 0x15
    35d0:	9e 8b       	std	Y+22, r25	; 0x16
    35d2:	af 8b       	std	Y+23, r26	; 0x17
    35d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35d6:	6d 89       	ldd	r22, Y+21	; 0x15
    35d8:	7e 89       	ldd	r23, Y+22	; 0x16
    35da:	8f 89       	ldd	r24, Y+23	; 0x17
    35dc:	98 8d       	ldd	r25, Y+24	; 0x18
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e8       	ldi	r20, 0x80	; 128
    35e4:	5f e3       	ldi	r21, 0x3F	; 63
    35e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ea:	88 23       	and	r24, r24
    35ec:	2c f4       	brge	.+10     	; 0x35f8 <LCD_Init+0x350>
		__ticks = 1;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9c 8b       	std	Y+20, r25	; 0x14
    35f4:	8b 8b       	std	Y+19, r24	; 0x13
    35f6:	3f c0       	rjmp	.+126    	; 0x3676 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    35f8:	6d 89       	ldd	r22, Y+21	; 0x15
    35fa:	7e 89       	ldd	r23, Y+22	; 0x16
    35fc:	8f 89       	ldd	r24, Y+23	; 0x17
    35fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	3f ef       	ldi	r19, 0xFF	; 255
    3604:	4f e7       	ldi	r20, 0x7F	; 127
    3606:	57 e4       	ldi	r21, 0x47	; 71
    3608:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    360c:	18 16       	cp	r1, r24
    360e:	4c f5       	brge	.+82     	; 0x3662 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3610:	69 8d       	ldd	r22, Y+25	; 0x19
    3612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e2       	ldi	r20, 0x20	; 32
    361e:	51 e4       	ldi	r21, 0x41	; 65
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	9c 8b       	std	Y+20, r25	; 0x14
    3636:	8b 8b       	std	Y+19, r24	; 0x13
    3638:	0f c0       	rjmp	.+30     	; 0x3658 <LCD_Init+0x3b0>
    363a:	88 ec       	ldi	r24, 0xC8	; 200
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9a 8b       	std	Y+18, r25	; 0x12
    3640:	89 8b       	std	Y+17, r24	; 0x11
    3642:	89 89       	ldd	r24, Y+17	; 0x11
    3644:	9a 89       	ldd	r25, Y+18	; 0x12
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <LCD_Init+0x39e>
    364a:	9a 8b       	std	Y+18, r25	; 0x12
    364c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364e:	8b 89       	ldd	r24, Y+19	; 0x13
    3650:	9c 89       	ldd	r25, Y+20	; 0x14
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	9c 8b       	std	Y+20, r25	; 0x14
    3656:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3658:	8b 89       	ldd	r24, Y+19	; 0x13
    365a:	9c 89       	ldd	r25, Y+20	; 0x14
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	69 f7       	brne	.-38     	; 0x363a <LCD_Init+0x392>
    3660:	14 c0       	rjmp	.+40     	; 0x368a <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3662:	6d 89       	ldd	r22, Y+21	; 0x15
    3664:	7e 89       	ldd	r23, Y+22	; 0x16
    3666:	8f 89       	ldd	r24, Y+23	; 0x17
    3668:	98 8d       	ldd	r25, Y+24	; 0x18
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9c 8b       	std	Y+20, r25	; 0x14
    3674:	8b 8b       	std	Y+19, r24	; 0x13
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	98 8b       	std	Y+16, r25	; 0x10
    367c:	8f 87       	std	Y+15, r24	; 0x0f
    367e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3680:	98 89       	ldd	r25, Y+16	; 0x10
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <LCD_Init+0x3da>
    3686:	98 8b       	std	Y+16, r25	; 0x10
    3688:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    368a:	86 e0       	ldi	r24, 0x06	; 6
    368c:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	a0 e8       	ldi	r26, 0x80	; 128
    3696:	bf e3       	ldi	r27, 0x3F	; 63
    3698:	8b 87       	std	Y+11, r24	; 0x0b
    369a:	9c 87       	std	Y+12, r25	; 0x0c
    369c:	ad 87       	std	Y+13, r26	; 0x0d
    369e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	4a ef       	ldi	r20, 0xFA	; 250
    36ae:	54 e4       	ldi	r21, 0x44	; 68
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8f 83       	std	Y+7, r24	; 0x07
    36ba:	98 87       	std	Y+8, r25	; 0x08
    36bc:	a9 87       	std	Y+9, r26	; 0x09
    36be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c0:	6f 81       	ldd	r22, Y+7	; 0x07
    36c2:	78 85       	ldd	r23, Y+8	; 0x08
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e8       	ldi	r20, 0x80	; 128
    36ce:	5f e3       	ldi	r21, 0x3F	; 63
    36d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d4:	88 23       	and	r24, r24
    36d6:	2c f4       	brge	.+10     	; 0x36e2 <LCD_Init+0x43a>
		__ticks = 1;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
    36e0:	3f c0       	rjmp	.+126    	; 0x3760 <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    36e2:	6f 81       	ldd	r22, Y+7	; 0x07
    36e4:	78 85       	ldd	r23, Y+8	; 0x08
    36e6:	89 85       	ldd	r24, Y+9	; 0x09
    36e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	3f ef       	ldi	r19, 0xFF	; 255
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	57 e4       	ldi	r21, 0x47	; 71
    36f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	4c f5       	brge	.+82     	; 0x374c <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3700:	9e 85       	ldd	r25, Y+14	; 0x0e
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e2       	ldi	r20, 0x20	; 32
    3708:	51 e4       	ldi	r21, 0x41	; 65
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <LCD_Init+0x49a>
    3724:	88 ec       	ldi	r24, 0xC8	; 200
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	9c 83       	std	Y+4, r25	; 0x04
    372a:	8b 83       	std	Y+3, r24	; 0x03
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	9c 81       	ldd	r25, Y+4	; 0x04
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <LCD_Init+0x488>
    3734:	9c 83       	std	Y+4, r25	; 0x04
    3736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	8d 81       	ldd	r24, Y+5	; 0x05
    3744:	9e 81       	ldd	r25, Y+6	; 0x06
    3746:	00 97       	sbiw	r24, 0x00	; 0
    3748:	69 f7       	brne	.-38     	; 0x3724 <LCD_Init+0x47c>
    374a:	14 c0       	rjmp	.+40     	; 0x3774 <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	9e 83       	std	Y+6, r25	; 0x06
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	8d 81       	ldd	r24, Y+5	; 0x05
    3762:	9e 81       	ldd	r25, Y+6	; 0x06
    3764:	9a 83       	std	Y+2, r25	; 0x02
    3766:	89 83       	std	Y+1, r24	; 0x01
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	9a 81       	ldd	r25, Y+2	; 0x02
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <LCD_Init+0x4c4>
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3774:	ca 5b       	subi	r28, 0xBA	; 186
    3776:	df 4f       	sbci	r29, 0xFF	; 255
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	08 95       	ret

0000378c <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	00 d0       	rcall	.+0      	; 0x3792 <LCD_SendString+0x6>
    3792:	0f 92       	push	r0
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	9b 83       	std	Y+3, r25	; 0x03
    379a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    379c:	19 82       	std	Y+1, r1	; 0x01
    379e:	0e c0       	rjmp	.+28     	; 0x37bc <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	fc 01       	movw	r30, r24
    37ac:	e2 0f       	add	r30, r18
    37ae:	f3 1f       	adc	r31, r19
    37b0:	80 81       	ld	r24, Z
    37b2:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_SendData>
		Counter++;
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	8f 5f       	subi	r24, 0xFF	; 255
    37ba:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	9b 81       	ldd	r25, Y+3	; 0x03
    37c6:	fc 01       	movw	r30, r24
    37c8:	e2 0f       	add	r30, r18
    37ca:	f3 1f       	adc	r31, r19
    37cc:	80 81       	ld	r24, Z
    37ce:	88 23       	and	r24, r24
    37d0:	39 f7       	brne	.-50     	; 0x37a0 <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	00 d0       	rcall	.+0      	; 0x37e4 <LCD_GoToXY+0x6>
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <LCD_GoToXY+0x8>
    37e6:	0f 92       	push	r0
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	8a 83       	std	Y+2, r24	; 0x02
    37ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    37f0:	8a 81       	ldd	r24, Y+2	; 0x02
    37f2:	88 23       	and	r24, r24
    37f4:	19 f0       	breq	.+6      	; 0x37fc <LCD_GoToXY+0x1e>
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	81 30       	cpi	r24, 0x01	; 1
    37fa:	e1 f4       	brne	.+56     	; 0x3834 <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	80 31       	cpi	r24, 0x10	; 16
    3800:	a8 f4       	brcc	.+42     	; 0x382c <LCD_GoToXY+0x4e>
		{
			switch(Row)
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	28 2f       	mov	r18, r24
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	3d 83       	std	Y+5, r19	; 0x05
    380a:	2c 83       	std	Y+4, r18	; 0x04
    380c:	8c 81       	ldd	r24, Y+4	; 0x04
    380e:	9d 81       	ldd	r25, Y+5	; 0x05
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	31 f0       	breq	.+12     	; 0x3820 <LCD_GoToXY+0x42>
    3814:	2c 81       	ldd	r18, Y+4	; 0x04
    3816:	3d 81       	ldd	r19, Y+5	; 0x05
    3818:	21 30       	cpi	r18, 0x01	; 1
    381a:	31 05       	cpc	r19, r1
    381c:	21 f0       	breq	.+8      	; 0x3826 <LCD_GoToXY+0x48>
    381e:	06 c0       	rjmp	.+12     	; 0x382c <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	89 83       	std	Y+1, r24	; 0x01
    3824:	03 c0       	rjmp	.+6      	; 0x382c <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    3826:	8b 81       	ldd	r24, Y+3	; 0x03
    3828:	80 5c       	subi	r24, 0xC0	; 192
    382a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	80 58       	subi	r24, 0x80	; 128
    3830:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
	}
}
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	2e 97       	sbiw	r28, 0x0e	; 14
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_SendCommand>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	a0 e0       	ldi	r26, 0x00	; 0
    3864:	b0 e4       	ldi	r27, 0x40	; 64
    3866:	8b 87       	std	Y+11, r24	; 0x0b
    3868:	9c 87       	std	Y+12, r25	; 0x0c
    386a:	ad 87       	std	Y+13, r26	; 0x0d
    386c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3870:	7c 85       	ldd	r23, Y+12	; 0x0c
    3872:	8d 85       	ldd	r24, Y+13	; 0x0d
    3874:	9e 85       	ldd	r25, Y+14	; 0x0e
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	4a ef       	ldi	r20, 0xFA	; 250
    387c:	54 e4       	ldi	r21, 0x44	; 68
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	8f 83       	std	Y+7, r24	; 0x07
    3888:	98 87       	std	Y+8, r25	; 0x08
    388a:	a9 87       	std	Y+9, r26	; 0x09
    388c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388e:	6f 81       	ldd	r22, Y+7	; 0x07
    3890:	78 85       	ldd	r23, Y+8	; 0x08
    3892:	89 85       	ldd	r24, Y+9	; 0x09
    3894:	9a 85       	ldd	r25, Y+10	; 0x0a
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	5f e3       	ldi	r21, 0x3F	; 63
    389e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a2:	88 23       	and	r24, r24
    38a4:	2c f4       	brge	.+10     	; 0x38b0 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9e 83       	std	Y+6, r25	; 0x06
    38ac:	8d 83       	std	Y+5, r24	; 0x05
    38ae:	3f c0       	rjmp	.+126    	; 0x392e <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    38b0:	6f 81       	ldd	r22, Y+7	; 0x07
    38b2:	78 85       	ldd	r23, Y+8	; 0x08
    38b4:	89 85       	ldd	r24, Y+9	; 0x09
    38b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	3f ef       	ldi	r19, 0xFF	; 255
    38bc:	4f e7       	ldi	r20, 0x7F	; 127
    38be:	57 e4       	ldi	r21, 0x47	; 71
    38c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c4:	18 16       	cp	r1, r24
    38c6:	4c f5       	brge	.+82     	; 0x391a <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    38cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e2       	ldi	r20, 0x20	; 32
    38d6:	51 e4       	ldi	r21, 0x41	; 65
    38d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
    38f0:	0f c0       	rjmp	.+30     	; 0x3910 <LCD_ClearDisplay+0xcc>
    38f2:	88 ec       	ldi	r24, 0xC8	; 200
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9c 83       	std	Y+4, r25	; 0x04
    38f8:	8b 83       	std	Y+3, r24	; 0x03
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	9c 81       	ldd	r25, Y+4	; 0x04
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <LCD_ClearDisplay+0xba>
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	9e 83       	std	Y+6, r25	; 0x06
    390e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	9e 81       	ldd	r25, Y+6	; 0x06
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	69 f7       	brne	.-38     	; 0x38f2 <LCD_ClearDisplay+0xae>
    3918:	14 c0       	rjmp	.+40     	; 0x3942 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391a:	6f 81       	ldd	r22, Y+7	; 0x07
    391c:	78 85       	ldd	r23, Y+8	; 0x08
    391e:	89 85       	ldd	r24, Y+9	; 0x09
    3920:	9a 85       	ldd	r25, Y+10	; 0x0a
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9e 83       	std	Y+6, r25	; 0x06
    392c:	8d 83       	std	Y+5, r24	; 0x05
    392e:	8d 81       	ldd	r24, Y+5	; 0x05
    3930:	9e 81       	ldd	r25, Y+6	; 0x06
    3932:	9a 83       	std	Y+2, r25	; 0x02
    3934:	89 83       	std	Y+1, r24	; 0x01
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	9a 81       	ldd	r25, Y+2	; 0x02
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	f1 f7       	brne	.-4      	; 0x393a <LCD_ClearDisplay+0xf6>
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3942:	2e 96       	adiw	r28, 0x0e	; 14
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <LCD_DisplayNumber>:

void LCD_DisplayNumber(u32 Number)
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	00 d0       	rcall	.+0      	; 0x395a <LCD_DisplayNumber+0x6>
    395a:	00 d0       	rcall	.+0      	; 0x395c <LCD_DisplayNumber+0x8>
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
    3960:	9c 83       	std	Y+4, r25	; 0x04
    3962:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
	if(Number == 0)
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	31 f5       	brne	.+76     	; 0x39c0 <LCD_DisplayNumber+0x6c>
	{
		LCD_SendData('0');
    3974:	80 e3       	ldi	r24, 0x30	; 48
    3976:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_SendData>
    397a:	22 c0       	rjmp	.+68     	; 0x39c0 <LCD_DisplayNumber+0x6c>
	}

	while(Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	9c 01       	movw	r18, r24
    3982:	22 0f       	add	r18, r18
    3984:	33 1f       	adc	r19, r19
    3986:	c9 01       	movw	r24, r18
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	f9 01       	movw	r30, r18
    3992:	e8 0f       	add	r30, r24
    3994:	f9 1f       	adc	r31, r25
    3996:	8b 81       	ldd	r24, Y+3	; 0x03
    3998:	9c 81       	ldd	r25, Y+4	; 0x04
    399a:	2a e0       	ldi	r18, 0x0A	; 10
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	b9 01       	movw	r22, r18
    39a0:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__udivmodhi4>
    39a4:	8e 0f       	add	r24, r30
    39a6:	9f 1f       	adc	r25, r31
    39a8:	9a 83       	std	Y+2, r25	; 0x02
    39aa:	89 83       	std	Y+1, r24	; 0x01
		Number = Number /10;
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	9c 81       	ldd	r25, Y+4	; 0x04
    39b0:	2a e0       	ldi	r18, 0x0A	; 10
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	b9 01       	movw	r22, r18
    39b6:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__udivmodhi4>
    39ba:	cb 01       	movw	r24, r22
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
	if(Number == 0)
	{
		LCD_SendData('0');
	}

	while(Number != 0)
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	9c 81       	ldd	r25, Y+4	; 0x04
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	d1 f6       	brne	.-76     	; 0x397c <LCD_DisplayNumber+0x28>
    39c8:	14 c0       	rjmp	.+40     	; 0x39f2 <LCD_DisplayNumber+0x9e>
		Number = Number /10;
	}

	while(ReversedNum != 1)
	{
		LCD_SendData( (ReversedNum%10) + 48);
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
    39ce:	2a e0       	ldi	r18, 0x0A	; 10
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	b9 01       	movw	r22, r18
    39d4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__udivmodhi4>
    39d8:	80 5d       	subi	r24, 0xD0	; 208
    39da:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_SendData>
		ReversedNum= ReversedNum/10;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	2a e0       	ldi	r18, 0x0A	; 10
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	b9 01       	movw	r22, r18
    39e8:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__udivmodhi4>
    39ec:	cb 01       	movw	r24, r22
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
		Number = Number /10;
	}

	while(ReversedNum != 1)
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	81 30       	cpi	r24, 0x01	; 1
    39f8:	91 05       	cpc	r25, r1
    39fa:	39 f7       	brne	.-50     	; 0x39ca <LCD_DisplayNumber+0x76>
	{
		LCD_SendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	cf 91       	pop	r28
    3a06:	df 91       	pop	r29
    3a08:	08 95       	ret

00003a0a <Keypad_Init>:
						{'C',0,'=','#'}
					  };


u8 Keypad_Init()
{
    3a0a:	df 93       	push	r29
    3a0c:	cf 93       	push	r28
    3a0e:	0f 92       	push	r0
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT , 0xF0);
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	60 ef       	ldi	r22, 0xF0	; 240
    3a18:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	6f ef       	ldi	r22, 0xFF	; 255
    3a20:	0e 94 17 10 	call	0x202e	; 0x202e <MDIO_vSetPortVal>
}
    3a24:	0f 90       	pop	r0
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <KeypadGetKey>:

u8 KeypadGetKey()
{
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	6f 97       	sbiw	r28, 0x1f	; 31
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
	for(u8 Col=0; Col <COLs_NO; Col++)
    3a40:	1e 8e       	std	Y+30, r1	; 0x1e
    3a42:	28 c1       	rjmp	.+592    	; 0x3c94 <KeypadGetKey+0x268>
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    3a44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a46:	98 2f       	mov	r25, r24
    3a48:	9c 5f       	subi	r25, 0xFC	; 252
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	69 2f       	mov	r22, r25
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3a54:	1d 8e       	std	Y+29, r1	; 0x1d
    3a56:	0f c1       	rjmp	.+542    	; 0x3c76 <KeypadGetKey+0x24a>
		{
			if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0 )
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a5c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <MDIO_GetPinVal>
    3a60:	88 23       	and	r24, r24
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <KeypadGetKey+0x3a>
    3a64:	05 c1       	rjmp	.+522    	; 0x3c70 <KeypadGetKey+0x244>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	a8 e4       	ldi	r26, 0x48	; 72
    3a6c:	b2 e4       	ldi	r27, 0x42	; 66
    3a6e:	89 8f       	std	Y+25, r24	; 0x19
    3a70:	9a 8f       	std	Y+26, r25	; 0x1a
    3a72:	ab 8f       	std	Y+27, r26	; 0x1b
    3a74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a76:	69 8d       	ldd	r22, Y+25	; 0x19
    3a78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	4a ef       	ldi	r20, 0xFA	; 250
    3a84:	54 e4       	ldi	r21, 0x44	; 68
    3a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	8d 8b       	std	Y+21, r24	; 0x15
    3a90:	9e 8b       	std	Y+22, r25	; 0x16
    3a92:	af 8b       	std	Y+23, r26	; 0x17
    3a94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a96:	6d 89       	ldd	r22, Y+21	; 0x15
    3a98:	7e 89       	ldd	r23, Y+22	; 0x16
    3a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e8       	ldi	r20, 0x80	; 128
    3aa4:	5f e3       	ldi	r21, 0x3F	; 63
    3aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aaa:	88 23       	and	r24, r24
    3aac:	2c f4       	brge	.+10     	; 0x3ab8 <KeypadGetKey+0x8c>
		__ticks = 1;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9c 8b       	std	Y+20, r25	; 0x14
    3ab4:	8b 8b       	std	Y+19, r24	; 0x13
    3ab6:	3f c0       	rjmp	.+126    	; 0x3b36 <KeypadGetKey+0x10a>
	else if (__tmp > 65535)
    3ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aba:	7e 89       	ldd	r23, Y+22	; 0x16
    3abc:	8f 89       	ldd	r24, Y+23	; 0x17
    3abe:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	3f ef       	ldi	r19, 0xFF	; 255
    3ac4:	4f e7       	ldi	r20, 0x7F	; 127
    3ac6:	57 e4       	ldi	r21, 0x47	; 71
    3ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3acc:	18 16       	cp	r1, r24
    3ace:	4c f5       	brge	.+82     	; 0x3b22 <KeypadGetKey+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e2       	ldi	r20, 0x20	; 32
    3ade:	51 e4       	ldi	r21, 0x41	; 65
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	bc 01       	movw	r22, r24
    3aea:	cd 01       	movw	r24, r26
    3aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	9c 8b       	std	Y+20, r25	; 0x14
    3af6:	8b 8b       	std	Y+19, r24	; 0x13
    3af8:	0f c0       	rjmp	.+30     	; 0x3b18 <KeypadGetKey+0xec>
    3afa:	88 ec       	ldi	r24, 0xC8	; 200
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	9a 8b       	std	Y+18, r25	; 0x12
    3b00:	89 8b       	std	Y+17, r24	; 0x11
    3b02:	89 89       	ldd	r24, Y+17	; 0x11
    3b04:	9a 89       	ldd	r25, Y+18	; 0x12
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <KeypadGetKey+0xda>
    3b0a:	9a 8b       	std	Y+18, r25	; 0x12
    3b0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b10:	9c 89       	ldd	r25, Y+20	; 0x14
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	9c 8b       	std	Y+20, r25	; 0x14
    3b16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b18:	8b 89       	ldd	r24, Y+19	; 0x13
    3b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b1c:	00 97       	sbiw	r24, 0x00	; 0
    3b1e:	69 f7       	brne	.-38     	; 0x3afa <KeypadGetKey+0xce>
    3b20:	14 c0       	rjmp	.+40     	; 0x3b4a <KeypadGetKey+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b22:	6d 89       	ldd	r22, Y+21	; 0x15
    3b24:	7e 89       	ldd	r23, Y+22	; 0x16
    3b26:	8f 89       	ldd	r24, Y+23	; 0x17
    3b28:	98 8d       	ldd	r25, Y+24	; 0x18
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	9c 8b       	std	Y+20, r25	; 0x14
    3b34:	8b 8b       	std	Y+19, r24	; 0x13
    3b36:	8b 89       	ldd	r24, Y+19	; 0x13
    3b38:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3a:	98 8b       	std	Y+16, r25	; 0x10
    3b3c:	8f 87       	std	Y+15, r24	; 0x0f
    3b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b40:	98 89       	ldd	r25, Y+16	; 0x10
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <KeypadGetKey+0x116>
    3b46:	98 8b       	std	Y+16, r25	; 0x10
    3b48:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50);
				if(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b4e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <MDIO_GetPinVal>
    3b52:	88 23       	and	r24, r24
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <KeypadGetKey+0x12c>
    3b56:	8c c0       	rjmp	.+280    	; 0x3c70 <KeypadGetKey+0x244>
				{
					while(MDIO_GetPinVal(KEYPAD_PORT,Row) == 0)
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b5c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <MDIO_GetPinVal>
    3b60:	88 23       	and	r24, r24
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <KeypadGetKey+0x13a>
    3b64:	85 c0       	rjmp	.+266    	; 0x3c70 <KeypadGetKey+0x244>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	a8 e4       	ldi	r26, 0x48	; 72
    3b6c:	b2 e4       	ldi	r27, 0x42	; 66
    3b6e:	8b 87       	std	Y+11, r24	; 0x0b
    3b70:	9c 87       	std	Y+12, r25	; 0x0c
    3b72:	ad 87       	std	Y+13, r26	; 0x0d
    3b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	4a ef       	ldi	r20, 0xFA	; 250
    3b84:	54 e4       	ldi	r21, 0x44	; 68
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	8f 83       	std	Y+7, r24	; 0x07
    3b90:	98 87       	std	Y+8, r25	; 0x08
    3b92:	a9 87       	std	Y+9, r26	; 0x09
    3b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b96:	6f 81       	ldd	r22, Y+7	; 0x07
    3b98:	78 85       	ldd	r23, Y+8	; 0x08
    3b9a:	89 85       	ldd	r24, Y+9	; 0x09
    3b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	2c f4       	brge	.+10     	; 0x3bb8 <KeypadGetKey+0x18c>
		__ticks = 1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	3f c0       	rjmp	.+126    	; 0x3c36 <KeypadGetKey+0x20a>
	else if (__tmp > 65535)
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	3f ef       	ldi	r19, 0xFF	; 255
    3bc4:	4f e7       	ldi	r20, 0x7F	; 127
    3bc6:	57 e4       	ldi	r21, 0x47	; 71
    3bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bcc:	18 16       	cp	r1, r24
    3bce:	4c f5       	brge	.+82     	; 0x3c22 <KeypadGetKey+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	9e 83       	std	Y+6, r25	; 0x06
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	0f c0       	rjmp	.+30     	; 0x3c18 <KeypadGetKey+0x1ec>
    3bfa:	88 ec       	ldi	r24, 0xC8	; 200
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	9c 83       	std	Y+4, r25	; 0x04
    3c00:	8b 83       	std	Y+3, r24	; 0x03
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	9c 81       	ldd	r25, Y+4	; 0x04
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <KeypadGetKey+0x1da>
    3c0a:	9c 83       	std	Y+4, r25	; 0x04
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c18:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	69 f7       	brne	.-38     	; 0x3bfa <KeypadGetKey+0x1ce>
    3c20:	14 c0       	rjmp	.+40     	; 0x3c4a <KeypadGetKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	6f 81       	ldd	r22, Y+7	; 0x07
    3c24:	78 85       	ldd	r23, Y+8	; 0x08
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <KeypadGetKey+0x216>
    3c46:	9a 83       	std	Y+2, r25	; 0x02
    3c48:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						return KeypadMap[Row][Col];
    3c4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c4c:	48 2f       	mov	r20, r24
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c52:	28 2f       	mov	r18, r24
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	ca 01       	movw	r24, r20
    3c58:	88 0f       	add	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	fc 01       	movw	r30, r24
    3c66:	e8 59       	subi	r30, 0x98	; 152
    3c68:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6a:	80 81       	ld	r24, Z
    3c6c:	8f 8f       	std	Y+31, r24	; 0x1f
    3c6e:	18 c0       	rjmp	.+48     	; 0x3ca0 <KeypadGetKey+0x274>
	for(u8 Col=0; Col <COLs_NO; Col++)
	{
		// Set Col Low
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);

		for(u8 Row=0; Row <ROWs_NO; Row++)
    3c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c72:	8f 5f       	subi	r24, 0xFF	; 255
    3c74:	8d 8f       	std	Y+29, r24	; 0x1d
    3c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	08 f4       	brcc	.+2      	; 0x3c7e <KeypadGetKey+0x252>
    3c7c:	ed ce       	rjmp	.-550    	; 0x3a58 <KeypadGetKey+0x2c>
				}
//				return KeypadMap[Row][Col];
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    3c7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c80:	98 2f       	mov	r25, r24
    3c82:	9c 5f       	subi	r25, 0xFC	; 252
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	69 2f       	mov	r22, r25
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
}

u8 KeypadGetKey()
{
	for(u8 Col=0; Col <COLs_NO; Col++)
    3c8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c90:	8f 5f       	subi	r24, 0xFF	; 255
    3c92:	8e 8f       	std	Y+30, r24	; 0x1e
    3c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c96:	84 30       	cpi	r24, 0x04	; 4
    3c98:	08 f4       	brcc	.+2      	; 0x3c9c <KeypadGetKey+0x270>
    3c9a:	d4 ce       	rjmp	.-600    	; 0x3a44 <KeypadGetKey+0x18>
			}
		}
		// Set Col High
		MDIO_vSetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return NO_KEY_PRESSED;
    3c9c:	8f ef       	ldi	r24, 0xFF	; 255
    3c9e:	8f 8f       	std	Y+31, r24	; 0x1f
    3ca0:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3ca2:	6f 96       	adiw	r28, 0x1f	; 31
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <EEPROM_vWriteDataByte>:
#include "util/delay.h"

#include "MCAL/TWI_Driver/TWI_Interface.h"

void EEPROM_vWriteDataByte(u8 Copy_u8Data , u8 Copy_u8Location , u8 Copy_u8BlockNum)
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	62 97       	sbiw	r28, 0x12	; 18
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	88 8b       	std	Y+16, r24	; 0x10
    3cca:	69 8b       	std	Y+17, r22	; 0x11
    3ccc:	4a 8b       	std	Y+18, r20	; 0x12
	u8 Local_u8SlaveAddress = 0b01010100 | Copy_u8BlockNum ;
    3cce:	8a 89       	ldd	r24, Y+18	; 0x12
    3cd0:	84 65       	ori	r24, 0x54	; 84
    3cd2:	8f 87       	std	Y+15, r24	; 0x0f

	TWI_vMasterInit();
    3cd4:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_vMasterInit>
	TWI_u8StartCondition();
    3cd8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_u8StartCondition>
	TWI_u8SendSlaveAddressWrite(Local_u8SlaveAddress);
    3cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cde:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TWI_u8SendSlaveAddressWrite>
	TWI_u8MasterWriteData(Copy_u8Data);
    3ce2:	88 89       	ldd	r24, Y+16	; 0x10
    3ce4:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_u8MasterWriteData>
	TWI_u8MasterWriteData(Copy_u8Location);
    3ce8:	89 89       	ldd	r24, Y+17	; 0x11
    3cea:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_u8MasterWriteData>
	TWI_vStopCondition();
    3cee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <TWI_vStopCondition>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	a0 e2       	ldi	r26, 0x20	; 32
    3cf8:	b1 e4       	ldi	r27, 0x41	; 65
    3cfa:	8b 87       	std	Y+11, r24	; 0x0b
    3cfc:	9c 87       	std	Y+12, r25	; 0x0c
    3cfe:	ad 87       	std	Y+13, r26	; 0x0d
    3d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	4a ef       	ldi	r20, 0xFA	; 250
    3d10:	54 e4       	ldi	r21, 0x44	; 68
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8f 83       	std	Y+7, r24	; 0x07
    3d1c:	98 87       	std	Y+8, r25	; 0x08
    3d1e:	a9 87       	std	Y+9, r26	; 0x09
    3d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	2c f4       	brge	.+10     	; 0x3d44 <EEPROM_vWriteDataByte+0x90>
		__ticks = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	3f c0       	rjmp	.+126    	; 0x3dc2 <EEPROM_vWriteDataByte+0x10e>
	else if (__tmp > 65535)
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	4f e7       	ldi	r20, 0x7F	; 127
    3d52:	57 e4       	ldi	r21, 0x47	; 71
    3d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d58:	18 16       	cp	r1, r24
    3d5a:	4c f5       	brge	.+82     	; 0x3dae <EEPROM_vWriteDataByte+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <EEPROM_vWriteDataByte+0xf0>
    3d86:	88 ec       	ldi	r24, 0xC8	; 200
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	9c 83       	std	Y+4, r25	; 0x04
    3d8c:	8b 83       	std	Y+3, r24	; 0x03
    3d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d90:	9c 81       	ldd	r25, Y+4	; 0x04
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <EEPROM_vWriteDataByte+0xde>
    3d96:	9c 83       	std	Y+4, r25	; 0x04
    3d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <EEPROM_vWriteDataByte+0xd2>
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <EEPROM_vWriteDataByte+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dae:	6f 81       	ldd	r22, Y+7	; 0x07
    3db0:	78 85       	ldd	r23, Y+8	; 0x08
    3db2:	89 85       	ldd	r24, Y+9	; 0x09
    3db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	9a 83       	std	Y+2, r25	; 0x02
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <EEPROM_vWriteDataByte+0x11a>
    3dd2:	9a 83       	std	Y+2, r25	; 0x02
    3dd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3dd6:	62 96       	adiw	r28, 0x12	; 18
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	08 95       	ret

00003de8 <EEPROM_vReadDataByte>:

u8 EEPROM_vReadDataByte(u8 Copy_u8Location , u8 Copy_u8BlockNum)
{
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <EEPROM_vReadDataByte+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <EEPROM_vReadDataByte+0x8>
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	8b 83       	std	Y+3, r24	; 0x03
    3df6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Data=0, Local_u8SlaveAddress = (0b01010100 | Copy_u8BlockNum) ;
    3df8:	1a 82       	std	Y+2, r1	; 0x02
    3dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfc:	84 65       	ori	r24, 0x54	; 84
    3dfe:	89 83       	std	Y+1, r24	; 0x01

	TWI_vMasterInit();
    3e00:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_vMasterInit>
	TWI_u8StartCondition();
    3e04:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_u8StartCondition>
	TWI_u8SendSlaveAddressWrite(Local_u8SlaveAddress);
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TWI_u8SendSlaveAddressWrite>
	TWI_u8MasterWriteData(Copy_u8Location);
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_u8MasterWriteData>
	TWI_u8StartCondition();
    3e14:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_u8StartCondition>
	TWI_u8SendSlaveAddressRead(Local_u8SlaveAddress);
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	0e 94 06 08 	call	0x100c	; 0x100c <TWI_u8SendSlaveAddressRead>
	TWI_u8MasterReadData(&Local_u8Data);
    3e1e:	ce 01       	movw	r24, r28
    3e20:	02 96       	adiw	r24, 0x02	; 2
    3e22:	0e 94 5d 08 	call	0x10ba	; 0x10ba <TWI_u8MasterReadData>
	TWI_vStopCondition();
    3e26:	0e 94 7f 08 	call	0x10fe	; 0x10fe <TWI_vStopCondition>
	return Local_u8Data;
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <__udivmodhi4>:
    3e3a:	aa 1b       	sub	r26, r26
    3e3c:	bb 1b       	sub	r27, r27
    3e3e:	51 e1       	ldi	r21, 0x11	; 17
    3e40:	07 c0       	rjmp	.+14     	; 0x3e50 <__udivmodhi4_ep>

00003e42 <__udivmodhi4_loop>:
    3e42:	aa 1f       	adc	r26, r26
    3e44:	bb 1f       	adc	r27, r27
    3e46:	a6 17       	cp	r26, r22
    3e48:	b7 07       	cpc	r27, r23
    3e4a:	10 f0       	brcs	.+4      	; 0x3e50 <__udivmodhi4_ep>
    3e4c:	a6 1b       	sub	r26, r22
    3e4e:	b7 0b       	sbc	r27, r23

00003e50 <__udivmodhi4_ep>:
    3e50:	88 1f       	adc	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	5a 95       	dec	r21
    3e56:	a9 f7       	brne	.-22     	; 0x3e42 <__udivmodhi4_loop>
    3e58:	80 95       	com	r24
    3e5a:	90 95       	com	r25
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	08 95       	ret

00003e62 <__prologue_saves__>:
    3e62:	2f 92       	push	r2
    3e64:	3f 92       	push	r3
    3e66:	4f 92       	push	r4
    3e68:	5f 92       	push	r5
    3e6a:	6f 92       	push	r6
    3e6c:	7f 92       	push	r7
    3e6e:	8f 92       	push	r8
    3e70:	9f 92       	push	r9
    3e72:	af 92       	push	r10
    3e74:	bf 92       	push	r11
    3e76:	cf 92       	push	r12
    3e78:	df 92       	push	r13
    3e7a:	ef 92       	push	r14
    3e7c:	ff 92       	push	r15
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	ca 1b       	sub	r28, r26
    3e8c:	db 0b       	sbc	r29, r27
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	09 94       	ijmp

00003e9a <__epilogue_restores__>:
    3e9a:	2a 88       	ldd	r2, Y+18	; 0x12
    3e9c:	39 88       	ldd	r3, Y+17	; 0x11
    3e9e:	48 88       	ldd	r4, Y+16	; 0x10
    3ea0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ea2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ea4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ea6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ea8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eac:	b9 84       	ldd	r11, Y+9	; 0x09
    3eae:	c8 84       	ldd	r12, Y+8	; 0x08
    3eb0:	df 80       	ldd	r13, Y+7	; 0x07
    3eb2:	ee 80       	ldd	r14, Y+6	; 0x06
    3eb4:	fd 80       	ldd	r15, Y+5	; 0x05
    3eb6:	0c 81       	ldd	r16, Y+4	; 0x04
    3eb8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eba:	aa 81       	ldd	r26, Y+2	; 0x02
    3ebc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ebe:	ce 0f       	add	r28, r30
    3ec0:	d1 1d       	adc	r29, r1
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	ed 01       	movw	r28, r26
    3ece:	08 95       	ret

00003ed0 <_exit>:
    3ed0:	f8 94       	cli

00003ed2 <__stop_program>:
    3ed2:	ff cf       	rjmp	.-2      	; 0x3ed2 <__stop_program>

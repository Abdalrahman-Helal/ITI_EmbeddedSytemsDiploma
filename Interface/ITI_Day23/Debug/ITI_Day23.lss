
ITI_Day23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002646  000026da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800068  00800068  000026e2  2**0
                  ALLOC
  3 .stab         00002be0  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001944  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000099ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_10>
      2c:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 38       	cpi	r26, 0x8C	; 140
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e4       	ldi	r30, 0x46	; 70
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 09 06 	call	0xc12	; 0xc12 <main>
      8a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 16 13 	jmp	0x262c	; 0x262c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Task1>:

#include "OS/RTOS_Interface.h"


void Task1(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static Flag=0;

	if(Flag == 0)
     b4e:	80 91 68 00 	lds	r24, 0x0068
     b52:	90 91 69 00 	lds	r25, 0x0069
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	61 f4       	brne	.+24     	; 0xb72 <Task1+0x2c>
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN0, DIO_HIGH);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 69 00 	sts	0x0069, r25
     b6c:	80 93 68 00 	sts	0x0068, r24
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <Task1+0x3e>

	}
	else
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN0, DIO_LOW);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 0;
     b7c:	10 92 69 00 	sts	0x0069, r1
     b80:	10 92 68 00 	sts	0x0068, r1
	}
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <Task2>:

void Task2(void)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	static Flag=0;

	if(Flag == 0)
     b92:	80 91 6a 00 	lds	r24, 0x006A
     b96:	90 91 6b 00 	lds	r25, 0x006B
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	61 f4       	brne	.+24     	; 0xbb6 <Task2+0x2c>
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN1, DIO_HIGH);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	90 93 6b 00 	sts	0x006B, r25
     bb0:	80 93 6a 00 	sts	0x006A, r24
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <Task2+0x3e>
	}
	else
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN1, DIO_LOW);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 0;
     bc0:	10 92 6b 00 	sts	0x006B, r1
     bc4:	10 92 6a 00 	sts	0x006A, r1
	}
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <Task3>:

void Task3(void)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	static Flag=0;

	if(Flag == 0)
     bd6:	80 91 6c 00 	lds	r24, 0x006C
     bda:	90 91 6d 00 	lds	r25, 0x006D
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	61 f4       	brne	.+24     	; 0xbfa <Task3+0x2c>
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN2, DIO_HIGH);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	62 e0       	ldi	r22, 0x02	; 2
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	90 93 6d 00 	sts	0x006D, r25
     bf4:	80 93 6c 00 	sts	0x006C, r24
     bf8:	09 c0       	rjmp	.+18     	; 0xc0c <Task3+0x3e>
	}
	else
	{
		MDIO_vSetPinVal(DIO_PORTA , PIN2, DIO_LOW);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	62 e0       	ldi	r22, 0x02	; 2
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <MDIO_vSetPinVal>
		Flag = 0;
     c04:	10 92 6d 00 	sts	0x006D, r1
     c08:	10 92 6c 00 	sts	0x006C, r1
	}
}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <main>:

#define F_CPU 8000000UL


void main(void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	2e 97       	sbiw	r28, 0x0e	; 14
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
	//LEDs Init
	MDIO_vSetPinDir(DIO_PORTA , PIN0, DIO_OUTPUT);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA , PIN1, DIO_OUTPUT);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA , PIN2, DIO_OUTPUT);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MDIO_vSetPinDir>

	//Create Tasks
	RTOS_vCreateTask(0,1000,Task1,0);
     c44:	23 ea       	ldi	r18, 0xA3	; 163
     c46:	35 e0       	ldi	r19, 0x05	; 5
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	68 ee       	ldi	r22, 0xE8	; 232
     c4c:	73 e0       	ldi	r23, 0x03	; 3
     c4e:	a9 01       	movw	r20, r18
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	0e 94 ca 06 	call	0xd94	; 0xd94 <RTOS_vCreateTask>
	RTOS_vCreateTask(1,1000,Task2,0);
     c58:	25 ec       	ldi	r18, 0xC5	; 197
     c5a:	35 e0       	ldi	r19, 0x05	; 5
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	68 ee       	ldi	r22, 0xE8	; 232
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	a9 01       	movw	r20, r18
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	0e 94 ca 06 	call	0xd94	; 0xd94 <RTOS_vCreateTask>
	RTOS_vCreateTask(2,1000,Task3,0);
     c6c:	27 ee       	ldi	r18, 0xE7	; 231
     c6e:	35 e0       	ldi	r19, 0x05	; 5
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	68 ee       	ldi	r22, 0xE8	; 232
     c74:	73 e0       	ldi	r23, 0x03	; 3
     c76:	a9 01       	movw	r20, r18
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	0e 94 ca 06 	call	0xd94	; 0xd94 <RTOS_vCreateTask>


	// RTOS Start
	RTOS_vStart();
     c80:	0e 94 b8 06 	call	0xd70	; 0xd70 <RTOS_vStart>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	aa ef       	ldi	r26, 0xFA	; 250
     c8a:	b4 e4       	ldi	r27, 0x44	; 68
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	9c 87       	std	Y+12, r25	; 0x0c
     c90:	ad 87       	std	Y+13, r26	; 0x0d
     c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c94:	6b 85       	ldd	r22, Y+11	; 0x0b
     c96:	7c 85       	ldd	r23, Y+12	; 0x0c
     c98:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a ef       	ldi	r20, 0xFA	; 250
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	98 87       	std	Y+8, r25	; 0x08
     cb0:	a9 87       	std	Y+9, r26	; 0x09
     cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb4:	6f 81       	ldd	r22, Y+7	; 0x07
     cb6:	78 85       	ldd	r23, Y+8	; 0x08
     cb8:	89 85       	ldd	r24, Y+9	; 0x09
     cba:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	2c f4       	brge	.+10     	; 0xcd6 <main+0xc4>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <main+0x142>
	else if (__tmp > 65535)
     cd6:	6f 81       	ldd	r22, Y+7	; 0x07
     cd8:	78 85       	ldd	r23, Y+8	; 0x08
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	4c f5       	brge	.+82     	; 0xd40 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <main+0x124>
     d18:	88 ec       	ldi	r24, 0xC8	; 200
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <main+0x112>
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9e 83       	std	Y+6, r25	; 0x06
     d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	69 f7       	brne	.-38     	; 0xd18 <main+0x106>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <main+0x14e>
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
     _delay_ms(2000);
     RTOS_vSuspendTask(1);
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <RTOS_vSuspendTask>
     d6e:	8a cf       	rjmp	.-236    	; 0xc84 <main+0x72>

00000d70 <RTOS_vStart>:
// Global Var
Task_t SystemTask[MAX_NUM_TASK];


void RTOS_vStart(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8SetOVFCallBack(RTOS_vScheduler);
     d78:	8d e2       	ldi	r24, 0x2D	; 45
     d7a:	97 e0       	ldi	r25, 0x07	; 7
     d7c:	0e 94 3d 0a 	call	0x147a	; 0x147a <TIMER0_u8SetOVFCallBack>
	GIE_Enable();
     d80:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <GIE_Enable>
	TIMER0_vInit();
     d84:	0e 94 10 0a 	call	0x1420	; 0x1420 <TIMER0_vInit>
	TIMER0_vOVFIntEnableDisable(TIMER0_INT_ENABLE);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <TIMER0_vOVFIntEnableDisable>

}
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <RTOS_vCreateTask>:

void RTOS_vCreateTask(u8 Copy_u8Priority ,u16 Copy_u16Peridoicty , void (*Copy_pvTaskFun)(void) , u16 Copy_u16FirstDelay)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	27 97       	sbiw	r28, 0x07	; 7
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	7b 83       	std	Y+3, r23	; 0x03
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	5d 83       	std	Y+5, r21	; 0x05
     db0:	4c 83       	std	Y+4, r20	; 0x04
     db2:	3f 83       	std	Y+7, r19	; 0x07
     db4:	2e 83       	std	Y+6, r18	; 0x06
	SystemTask[Copy_u8Priority].u16Priodicty = Copy_u16Peridoicty;
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	c9 01       	movw	r24, r18
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 1b       	sub	r24, r18
     dcc:	93 0b       	sbc	r25, r19
     dce:	fc 01       	movw	r30, r24
     dd0:	e8 58       	subi	r30, 0x88	; 136
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
	SystemTask[Copy_u8Priority].pvTaskFun = Copy_pvTaskFun;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	c9 01       	movw	r24, r18
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
     df4:	fc 01       	movw	r30, r24
     df6:	e4 58       	subi	r30, 0x84	; 132
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
	SystemTask[Copy_u8Priority].u16FirstDelay= Copy_u16FirstDelay;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	fc 01       	movw	r30, r24
     e1c:	e6 58       	subi	r30, 0x86	; 134
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
	SystemTask[Copy_u8Priority].TaskState=TASK_RESUMED;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	c9 01       	movw	r24, r18
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	82 1b       	sub	r24, r18
     e3e:	93 0b       	sbc	r25, r19
     e40:	fc 01       	movw	r30, r24
     e42:	e9 58       	subi	r30, 0x89	; 137
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	10 82       	st	Z, r1

}
     e48:	27 96       	adiw	r28, 0x07	; 7
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <RTOS_vScheduler>:

static void RTOS_vScheduler(void)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	for(u8 Local_Counter=0 ; Local_Counter<MAX_NUM_TASK; Local_Counter++)
     e64:	19 82       	std	Y+1, r1	; 0x01
     e66:	81 c0       	rjmp	.+258    	; 0xf6a <RTOS_vScheduler+0x110>
	{
		if(SystemTask[Local_Counter].TaskState == TASK_RESUMED)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	c9 01       	movw	r24, r18
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 1b       	sub	r24, r18
     e7e:	93 0b       	sbc	r25, r19
     e80:	fc 01       	movw	r30, r24
     e82:	e9 58       	subi	r30, 0x89	; 137
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	09 f0       	breq	.+2      	; 0xe8e <RTOS_vScheduler+0x34>
     e8c:	6b c0       	rjmp	.+214    	; 0xf64 <RTOS_vScheduler+0x10a>
		{

			if(SystemTask[Local_Counter].u16FirstDelay == 0)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	c9 01       	movw	r24, r18
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	82 1b       	sub	r24, r18
     ea4:	93 0b       	sbc	r25, r19
     ea6:	fc 01       	movw	r30, r24
     ea8:	e6 58       	subi	r30, 0x86	; 134
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	b1 f5       	brne	.+108    	; 0xf20 <RTOS_vScheduler+0xc6>
			{
				SystemTask[Local_Counter].pvTaskFun();
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 1b       	sub	r24, r18
     eca:	93 0b       	sbc	r25, r19
     ecc:	fc 01       	movw	r30, r24
     ece:	e4 58       	subi	r30, 0x84	; 132
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	01 90       	ld	r0, Z+
     ed4:	f0 81       	ld	r31, Z
     ed6:	e0 2d       	mov	r30, r0
     ed8:	09 95       	icall
				SystemTask[Local_Counter].u16FirstDelay = SystemTask[Local_Counter].u16Priodicty;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	48 2f       	mov	r20, r24
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	c9 01       	movw	r24, r18
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	82 1b       	sub	r24, r18
     ef6:	93 0b       	sbc	r25, r19
     ef8:	fc 01       	movw	r30, r24
     efa:	e8 58       	subi	r30, 0x88	; 136
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	20 81       	ld	r18, Z
     f00:	31 81       	ldd	r19, Z+1	; 0x01
     f02:	ca 01       	movw	r24, r20
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	84 1b       	sub	r24, r20
     f12:	95 0b       	sbc	r25, r21
     f14:	fc 01       	movw	r30, r24
     f16:	e6 58       	subi	r30, 0x86	; 134
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	31 83       	std	Z+1, r19	; 0x01
     f1c:	20 83       	st	Z, r18
     f1e:	22 c0       	rjmp	.+68     	; 0xf64 <RTOS_vScheduler+0x10a>

			}

			else
			{
				SystemTask[Local_Counter].u16FirstDelay--;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	c9 01       	movw	r24, r18
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	e6 58       	subi	r30, 0x86	; 134
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	ac 01       	movw	r20, r24
     f44:	41 50       	subi	r20, 0x01	; 1
     f46:	50 40       	sbci	r21, 0x00	; 0
     f48:	c9 01       	movw	r24, r18
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	82 1b       	sub	r24, r18
     f58:	93 0b       	sbc	r25, r19
     f5a:	fc 01       	movw	r30, r24
     f5c:	e6 58       	subi	r30, 0x86	; 134
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	51 83       	std	Z+1, r21	; 0x01
     f62:	40 83       	st	Z, r20

}

static void RTOS_vScheduler(void)
{
	for(u8 Local_Counter=0 ; Local_Counter<MAX_NUM_TASK; Local_Counter++)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <RTOS_vScheduler+0x118>
     f70:	7b cf       	rjmp	.-266    	; 0xe68 <RTOS_vScheduler+0xe>
				SystemTask[Local_Counter].u16FirstDelay--;
			}
		}

	}
}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <RTOS_vDeleteTask>:
void RTOS_vDeleteTask(u8 Copy_u8Priority)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
	SystemTask[Copy_u8Priority].pvTaskFun = NULL;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 1b       	sub	r24, r18
     f9c:	93 0b       	sbc	r25, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	e4 58       	subi	r30, 0x84	; 132
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	11 82       	std	Z+1, r1	; 0x01
     fa6:	10 82       	st	Z, r1
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <RTOS_vResumeTask>:

void RTOS_vResumeTask(u8 Copy_u8Priority)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
	SystemTask[Copy_u8Priority].TaskState = TASK_RESUMED;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	c9 01       	movw	r24, r18
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	82 1b       	sub	r24, r18
     fd2:	93 0b       	sbc	r25, r19
     fd4:	fc 01       	movw	r30, r24
     fd6:	e9 58       	subi	r30, 0x89	; 137
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	10 82       	st	Z, r1
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <RTOS_vSuspendTask>:

void RTOS_vSuspendTask(u8 Copy_u8Priority)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
	SystemTask[Copy_u8Priority].TaskState = TASK_SUSPENDED;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	c9 01       	movw	r24, r18
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	82 1b       	sub	r24, r18
    1006:	93 0b       	sbc	r25, r19
    1008:	fc 01       	movw	r30, r24
    100a:	e9 58       	subi	r30, 0x89	; 137
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 83       	st	Z, r24
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <WDT_vEnable>:
#include "MCAL/WDT/WDT_Interface.h"
#include "MCAL/WDT/WDT_Private.h"
#include "MCAL/WDT/WDT_Cfg.h"

void WDT_vEnable(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR , WDTCR_WDE);
    1022:	a1 e4       	ldi	r26, 0x41	; 65
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e1 e4       	ldi	r30, 0x41	; 65
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 60       	ori	r24, 0x08	; 8
    102e:	8c 93       	st	X, r24
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <WDT_vDisable>:

void WDT_vDisable(void)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
    103e:	e1 e4       	ldi	r30, 0x41	; 65
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	88 e1       	ldi	r24, 0x18	; 24
    1044:	80 83       	st	Z, r24
	WDTCR = 0;
    1046:	e1 e4       	ldi	r30, 0x41	; 65
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	10 82       	st	Z, r1
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <WDT_vSleep>:

void WDT_vSleep(u8 Copy_u8SleepCycle)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepCycle < 8)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	78 f4       	brcc	.+30     	; 0x1082 <WDT_vSleep+0x30>
	{
		WDTCR &=11111000;
    1064:	a1 e4       	ldi	r26, 0x41	; 65
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e4       	ldi	r30, 0x41	; 65
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 75       	andi	r24, 0x58	; 88
    1070:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepCycle;
    1072:	a1 e4       	ldi	r26, 0x41	; 65
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e1 e4       	ldi	r30, 0x41	; 65
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	90 81       	ld	r25, Z
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	89 2b       	or	r24, r25
    1080:	8c 93       	st	X, r24

	}
}
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <USART_vInit>:
#include "MCAL/UART/UART_Private.h"
#include "MCAL/UART/UART_Cfg.h"


void USART_vInit(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62

	u8 Local_UCSRC=0;
    1094:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_URSEL);
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == Asynchronous
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMSEL);
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	8f 7b       	andi	r24, 0xBF	; 191
    10a0:	89 83       	std	Y+1, r24	; 0x01
#else
#warning "Wrong Config of UART_MODE"
#endif

#if USART_PARITY_MODE == EVEN_PARITY
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UPM1);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	8f 7e       	andi	r24, 0xEF	; 239
    10ac:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UMP0);
#else
#endif

#if USART_STOP_MODE == STOP_1BIT
	CLR_BIT(Local_UCSRC , UCSRC_UBRRH_USBS);
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	89 83       	std	Y+1, r24	; 0x01

#else
#endif

	// Set Character Frame Size to 8 bit
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ0);
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC , UCSRC_UBRRH_UCSZ1);
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	89 83       	std	Y+1, r24	; 0x01

	UCSRC_UBRRH = Local_UCSRC;
    10c0:	e0 e4       	ldi	r30, 0x40	; 64
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	80 83       	st	Z, r24

	// Set Baud Rate 9600
	UBRRL = BAUD_RATE_9600;
    10c8:	e9 e2       	ldi	r30, 0x29	; 41
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	83 e3       	ldi	r24, 0x33	; 51
    10ce:	80 83       	st	Z, r24

	SET_BIT(UCSRB , UCSRB_RXEN);
    10d0:	aa e2       	ldi	r26, 0x2A	; 42
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e2       	ldi	r30, 0x2A	; 42
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 61       	ori	r24, 0x10	; 16
    10dc:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    10de:	aa e2       	ldi	r26, 0x2A	; 42
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ea e2       	ldi	r30, 0x2A	; 42
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	8c 93       	st	X, r24

}
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <USART_POLL_vSendData>:
void USART_POLL_vSendData(const u8 Data)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
	// Send 1 Byte of data == 8 Bit
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
    1100:	eb e2       	ldi	r30, 0x2B	; 43
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	82 95       	swap	r24
    1108:	86 95       	lsr	r24
    110a:	87 70       	andi	r24, 0x07	; 7
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	90 70       	andi	r25, 0x00	; 0
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	a1 f3       	breq	.-24     	; 0x1100 <USART_POLL_vSendData+0xc>
	UDR = Data;
    1118:	ec e2       	ldi	r30, 0x2C	; 44
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24

}
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <USART_POLL_vSendString>:
void USART_POLL_vSendString(const u8* Data)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <USART_POLL_vSendString+0x6>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	0b c0       	rjmp	.+22     	; 0x114e <USART_POLL_vSendString+0x26>
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
	{
		USART_POLL_vSendData(*Data++);
    1138:	e9 81       	ldd	r30, Y+1	; 0x01
    113a:	fa 81       	ldd	r31, Y+2	; 0x02
    113c:	20 81       	ld	r18, Z
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	82 2f       	mov	r24, r18
    114a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <USART_POLL_vSendData>
	//	while(Data[Counter] != '\0')
	//	{
	//		USART_POLL_vSendData(Data[Counter++]);
	//	}

	while(*Data != '\0')
    114e:	e9 81       	ldd	r30, Y+1	; 0x01
    1150:	fa 81       	ldd	r31, Y+2	; 0x02
    1152:	80 81       	ld	r24, Z
    1154:	88 23       	and	r24, r24
    1156:	81 f7       	brne	.-32     	; 0x1138 <USART_POLL_vSendString+0x10>
	{
		USART_POLL_vSendData(*Data++);
	}
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <USART_POLL_vReceiveData>:
u8 USART_POLL_vReceiveData(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
    116a:	eb e2       	ldi	r30, 0x2B	; 43
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	dc f7       	brge	.-10     	; 0x116a <USART_POLL_vReceiveData+0x8>
	return UDR;
    1174:	ec e2       	ldi	r30, 0x2C	; 44
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z

}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <USART_POLL_vReceiveString>:
void USART_POLL_vReceiveString(u8 Counter , u8* Data)
{
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <USART_POLL_vReceiveString+0xa>
    118a:	00 d0       	rcall	.+0      	; 0x118c <USART_POLL_vReceiveString+0xc>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	7c 83       	std	Y+4, r23	; 0x04
    1194:	6b 83       	std	Y+3, r22	; 0x03
	//	{
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
    1196:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ;i < Counter;i++)
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <USART_POLL_vReceiveString+0x3a>
	{
		Data[i] = USART_POLL_vReceiveData();
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	8c 01       	movw	r16, r24
    11a8:	02 0f       	add	r16, r18
    11aa:	13 1f       	adc	r17, r19
    11ac:	0e 94 b1 08 	call	0x1162	; 0x1162 <USART_POLL_vReceiveData>
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24
	//		*Data = USART_POLL_vReceiveData();
	//		Data++;
	//	}

	u8 i=0;
	for(i=0 ;i < Counter;i++)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	99 81       	ldd	r25, Y+1	; 0x01
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	98 17       	cp	r25, r24
    11c0:	68 f3       	brcs	.-38     	; 0x119c <USART_POLL_vReceiveString+0x1c>
	{
		Data[i] = USART_POLL_vReceiveData();
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <TWI_vMasterInit>:
#include "TWI_Cfg.h"



void TWI_vMasterInit(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	// Set the Clock
	CLR_BIT(TWSR , TWSR_TWPS0);
    11dc:	a1 e2       	ldi	r26, 0x21	; 33
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e1 e2       	ldi	r30, 0x21	; 33
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8e 7f       	andi	r24, 0xFE	; 254
    11e8:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    11ea:	a1 e2       	ldi	r26, 0x21	; 33
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e2       	ldi	r30, 0x21	; 33
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	8d 7f       	andi	r24, 0xFD	; 253
    11f6:	8c 93       	st	X, r24
	TWBR =20;
    11f8:	e0 e2       	ldi	r30, 0x20	; 32
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	84 e1       	ldi	r24, 0x14	; 20
    11fe:	80 83       	st	Z, r24

	// Enable TWI
	SET_BIT(TWCR , TWCR_TWEN);
    1200:	a6 e5       	ldi	r26, 0x56	; 86
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e5       	ldi	r30, 0x56	; 86
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	84 60       	ori	r24, 0x04	; 4
    120c:	8c 93       	st	X, r24
};
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <TWI_vSlaveInit>:
void TWI_vSlaveInit(u8 Copy_u8SlaveAddress)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
	TWAR = Copy_u8SlaveAddress << 1;
    1220:	e2 e2       	ldi	r30, 0x22	; 34
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	88 0f       	add	r24, r24
    1228:	80 83       	st	Z, r24

	// Enable TWI
	SET_BIT(TWCR , TWCR_TWEN);
    122a:	a6 e5       	ldi	r26, 0x56	; 86
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e6 e5       	ldi	r30, 0x56	; 86
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	8c 93       	st	X, r24
}
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TWI_u8StartCondition>:
u8 TWI_u8StartCondition(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TWI_u8StartCondition+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Error = no_error ;
    124a:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    124c:	a6 e5       	ldi	r26, 0x56	; 86
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e6 e5       	ldi	r30, 0x56	; 86
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	8c 93       	st	X, r24

	// Repeat Start Condition
	SET_BIT(TWCR , TWCR_TWSTA);
    125a:	a6 e5       	ldi	r26, 0x56	; 86
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    1268:	e6 e5       	ldi	r30, 0x56	; 86
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 23       	and	r24, r24
    1270:	dc f7       	brge	.-10     	; 0x1268 <TWI_u8StartCondition+0x28>

	if(TWSR & 0b11111000 == REP_START_ACK)
    1272:	e1 e2       	ldi	r30, 0x21	; 33
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = repeat_start_cond_error;
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TWI_u8RepeatStartCondition>:
u8 TWI_u8RepeatStartCondition(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62

}
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <TWI_u8SendSlaveAddressWrite>:
u8 TWI_u8SendSlaveAddressWrite(u8 Copy_u8SlaveAddress)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <TWI_u8SendSlaveAddressWrite+0x6>
    12a0:	0f 92       	push	r0
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    12a8:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    12aa:	a6 e5       	ldi	r26, 0x56	; 86
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e6 e5       	ldi	r30, 0x56	; 86
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	8c 93       	st	X, r24

	//Clear Start
	CLR_BIT(TWCR , TWCR_TWSTA);
    12b8:	a6 e5       	ldi	r26, 0x56	; 86
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e6 e5       	ldi	r30, 0x56	; 86
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7d       	andi	r24, 0xDF	; 223
    12c4:	8c 93       	st	X, r24
	TWDR = Copy_u8SlaveAddress << 1;
    12c6:	e3 e2       	ldi	r30, 0x23	; 35
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 0f       	add	r24, r24
    12ce:	80 83       	st	Z, r24
	CLR_BIT(TWDR , 0);
    12d0:	a3 e2       	ldi	r26, 0x23	; 35
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e3 e2       	ldi	r30, 0x23	; 35
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    12de:	e6 e5       	ldi	r30, 0x56	; 86
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 23       	and	r24, r24
    12e6:	dc f7       	brge	.-10     	; 0x12de <TWI_u8SendSlaveAddressWrite+0x44>

	if(TWSR & 0b11111000 == SLAVE_ADD_AND_WR_ACK)
    12e8:	e1 e2       	ldi	r30, 0x21	; 33
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = slave_Address_write_error;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TWI_u8SendSlaveAddressRead>:

u8 TWI_u8SendSlaveAddressRead(u8 Copy_u8SlaveAddress)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <TWI_u8SendSlaveAddressRead+0x6>
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    130e:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    1310:	a6 e5       	ldi	r26, 0x56	; 86
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e6 e5       	ldi	r30, 0x56	; 86
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 68       	ori	r24, 0x80	; 128
    131c:	8c 93       	st	X, r24

	//Clear Start
	CLR_BIT(TWCR , TWCR_TWSTA);
    131e:	a6 e5       	ldi	r26, 0x56	; 86
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e6 e5       	ldi	r30, 0x56	; 86
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8f 7d       	andi	r24, 0xDF	; 223
    132a:	8c 93       	st	X, r24
	TWDR = Copy_u8SlaveAddress << 1;
    132c:	e3 e2       	ldi	r30, 0x23	; 35
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	88 0f       	add	r24, r24
    1334:	80 83       	st	Z, r24
	CLR_BIT(TWDR , 0);
    1336:	a3 e2       	ldi	r26, 0x23	; 35
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e2       	ldi	r30, 0x23	; 35
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    1344:	e6 e5       	ldi	r30, 0x56	; 86
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	dc f7       	brge	.-10     	; 0x1344 <TWI_u8SendSlaveAddressRead+0x44>

	if(TWSR & 0b11111000 == SLAVE_ADD_AND_RD_ACK)
    134e:	e1 e2       	ldi	r30, 0x21	; 33
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = slave_Address_read_error;
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    1358:	89 81       	ldd	r24, Y+1	; 0x01

}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <TWI_u8MasterWriteData>:
u8 TWI_u8MasterWriteData(u8 Copy_u8Data)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <TWI_u8MasterWriteData+0x6>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    1374:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    1376:	a6 e5       	ldi	r26, 0x56	; 86
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e6 e5       	ldi	r30, 0x56	; 86
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 68       	ori	r24, 0x80	; 128
    1382:	8c 93       	st	X, r24

	TWDR = Copy_u8Data;
    1384:	e3 e2       	ldi	r30, 0x23	; 35
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    138c:	e6 e5       	ldi	r30, 0x56	; 86
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	88 23       	and	r24, r24
    1394:	dc f7       	brge	.-10     	; 0x138c <TWI_u8MasterWriteData+0x26>

	if(TWSR & 0b11111000 == MSTR_WR_BYTE_ACK)
    1396:	e1 e2       	ldi	r30, 0x21	; 33
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
	{

	}
	else
	{
		Local_u8Error = master_write_data_error;
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <TWI_u8MasterReadData>:

u8 TWI_u8MasterReadData(u8 * Copy_pu8Data)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <TWI_u8MasterReadData+0x6>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <TWI_u8MasterReadData+0x8>
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = no_error;
    13be:	19 82       	std	Y+1, r1	; 0x01

	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    13c0:	a6 e5       	ldi	r26, 0x56	; 86
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e6 e5       	ldi	r30, 0x56	; 86
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 68       	ori	r24, 0x80	; 128
    13cc:	8c 93       	st	X, r24

	// Polling on Flag
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	dc f7       	brge	.-10     	; 0x13ce <TWI_u8MasterReadData+0x20>

	if(TWSR & 0b11111000 == MSTR_RD_BYTE_WITH_ACK)
    13d8:	e1 e2       	ldi	r30, 0x21	; 33
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
	{
		*Copy_pu8Data = TWDR;
	}
	else
	{
		Local_u8Error = master_read_data_error;
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <TWI_vStopCondition>:
u8 TWI_vStopCondition(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	0f 92       	push	r0
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	// Clear Flag
	SET_BIT(TWCR , TWCR_TWINT);
    13fc:	a6 e5       	ldi	r26, 0x56	; 86
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e6 e5       	ldi	r30, 0x56	; 86
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	8c 93       	st	X, r24

	// Stop Condition
	SET_BIT(TWCR , TWCR_TWSTO);
    140a:	a6 e5       	ldi	r26, 0x56	; 86
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e6 e5       	ldi	r30, 0x56	; 86
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 61       	ori	r24, 0x10	; 16
    1416:	8c 93       	st	X, r24
}
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <TIMER0_vInit>:

static void(*Global_pvOVFIntFunc)(void)= NULL;
static void(*Global_pvCTCIntFunc)(void)= NULL;

void TIMER0_vInit(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0 , TCCR0_WGM00);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 7b       	andi	r24, 0xBF	; 191
    1434:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM01);
    1436:	a3 e5       	ldi	r26, 0x53	; 83
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e3 e5       	ldi	r30, 0x53	; 83
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	87 7f       	andi	r24, 0xF7	; 247
    1442:	8c 93       	st	X, r24

#error "Select The Timer Mode "

#endif
	// Set Prescaler
	TCCR0 &=0b11111000; //Bit Clearing
    1444:	a3 e5       	ldi	r26, 0x53	; 83
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e3 e5       	ldi	r30, 0x53	; 83
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 7f       	andi	r24, 0xF8	; 248
    1450:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_PRESCALER;
    1452:	a3 e5       	ldi	r26, 0x53	; 83
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e3 e5       	ldi	r30, 0x53	; 83
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	82 60       	ori	r24, 0x02	; 2
    145e:	8c 93       	st	X, r24

}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <TIMER0_vDeinit>:

void TIMER0_vDeinit(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    146e:	e3 e5       	ldi	r30, 0x53	; 83
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	10 82       	st	Z, r1
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <TIMER0_u8SetOVFCallBack>:

u8 TIMER0_u8SetOVFCallBack(void (*pvCallBackFunc)(void))
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <TIMER0_u8SetOVFCallBack+0x6>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9b 83       	std	Y+3, r25	; 0x03
    1488:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status = OK;
    148a:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	39 f0       	breq	.+14     	; 0x14a2 <TIMER0_u8SetOVFCallBack+0x28>
	{
		Global_pvOVFIntFunc=pvCallBackFunc;
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	90 93 6f 00 	sts	0x006F, r25
    149c:	80 93 6e 00 	sts	0x006E, r24
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <TIMER0_u8SetOVFCallBack+0x2c>
	}
	else
	{
		Local_Status = NOK;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
	Global_pvCTCIntFunc();
    14de:	e0 91 70 00 	lds	r30, 0x0070
    14e2:	f0 91 71 00 	lds	r31, 0x0071
    14e6:	09 95       	icall
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	Global_pvOVFIntFunc();
    1538:	e0 91 6e 00 	lds	r30, 0x006E
    153c:	f0 91 6f 00 	lds	r31, 0x006F
    1540:	09 95       	icall
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <TIMER0_vSetTimerValue>:

void TIMER0_vSetTimerValue(u8 Copy_u8Value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    1574:	e2 e5       	ldi	r30, 0x52	; 82
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	80 83       	st	Z, r24
}
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <TIMER0_vCTCTimerValue>:


void TIMER0_vCTCTimerValue(u8 Copy_u8Value)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Value;
    1590:	ec e5       	ldi	r30, 0x5C	; 92
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	80 83       	st	Z, r24
}
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <TIMER0_vOVFIntEnableDisable>:

void TIMER0_vOVFIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	41 f4       	brne	.+16     	; 0x15c2 <TIMER0_vOVFIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_TOIE0);
    15b2:	a9 e5       	ldi	r26, 0x59	; 89
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e9 e5       	ldi	r30, 0x59	; 89
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	81 60       	ori	r24, 0x01	; 1
    15be:	8c 93       	st	X, r24
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <TIMER0_vOVFIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_TOIE0);
    15c2:	a9 e5       	ldi	r26, 0x59	; 89
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e9 e5       	ldi	r30, 0x59	; 89
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	8c 93       	st	X, r24
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <TIMER0_vCTCIntEnableDisable>:
void TIMER0_vCTCIntEnableDisable(u8 Copy_u8TIMER0_INT_e )
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8TIMER0_INT_e == ENABLE)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	41 f4       	brne	.+16     	; 0x15fa <TIMER0_vCTCIntEnableDisable+0x22>
	{
		SET_BIT(TIMSK , TIMSK_OCIE0);
    15ea:	a9 e5       	ldi	r26, 0x59	; 89
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e9 e5       	ldi	r30, 0x59	; 89
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	8c 93       	st	X, r24
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <TIMER0_vCTCIntEnableDisable+0x30>
	}
	else
	{
		CLR_BIT(TIMSK , TIMSK_OCIE0);
    15fa:	a9 e5       	ldi	r26, 0x59	; 89
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 e5       	ldi	r30, 0x59	; 89
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8d 7f       	andi	r24, 0xFD	; 253
    1606:	8c 93       	st	X, r24
	}
}
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <TIMER0_u8SetCTCCallBack>:
u8 TIMER0_u8SetCTCCallBack(void (*pvCallBackFunc)(void))
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <TIMER0_u8SetCTCCallBack+0x6>
    1616:	0f 92       	push	r0
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9b 83       	std	Y+3, r25	; 0x03
    161e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Status=OK;
    1620:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBackFunc != NULL)
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	9b 81       	ldd	r25, Y+3	; 0x03
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f0       	breq	.+16     	; 0x163a <TIMER0_u8SetCTCCallBack+0x2a>
	{
		Global_pvCTCIntFunc = pvCallBackFunc;
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	90 93 71 00 	sts	0x0071, r25
    1632:	80 93 70 00 	sts	0x0070, r24
		Local_Status=OK;
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	02 c0       	rjmp	.+4      	; 0x163e <TIMER0_u8SetCTCCallBack+0x2e>
	}
	else
	{
		Local_Status =NOK;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Status;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <TIMER1_vInit>:

void TIMER1_vInit(void)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    1654:	af e4       	ldi	r26, 0x4F	; 79
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ef e4       	ldi	r30, 0x4F	; 79
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8e 7f       	andi	r24, 0xFE	; 254
    1660:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
    1662:	af e4       	ldi	r26, 0x4F	; 79
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e4       	ldi	r30, 0x4F	; 79
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	82 60       	ori	r24, 0x02	; 2
    166e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
    1670:	ae e4       	ldi	r26, 0x4E	; 78
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e4       	ldi	r30, 0x4E	; 78
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 60       	ori	r24, 0x08	; 8
    167c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
    167e:	ae e4       	ldi	r26, 0x4E	; 78
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ee e4       	ldi	r30, 0x4E	; 78
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 61       	ori	r24, 0x10	; 16
    168a:	8c 93       	st	X, r24

	// Set on Top , Clear on CTC
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
    168c:	af e4       	ldi	r26, 0x4F	; 79
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ef e4       	ldi	r30, 0x4F	; 79
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7b       	andi	r24, 0xBF	; 191
    1698:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
    169a:	af e4       	ldi	r26, 0x4F	; 79
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	ef e4       	ldi	r30, 0x4F	; 79
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 68       	ori	r24, 0x80	; 128
    16a6:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    16a8:	ae e4       	ldi	r26, 0x4E	; 78
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ee e4       	ldi	r30, 0x4E	; 78
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 7f       	andi	r24, 0xF8	; 248
    16b4:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    16b6:	ae e4       	ldi	r26, 0x4E	; 78
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ee e4       	ldi	r30, 0x4E	; 78
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	82 60       	ori	r24, 0x02	; 2
    16c2:	8c 93       	st	X, r24

	// Disable INT
	TIMSK &=0b110000011;
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	83 78       	andi	r24, 0x83	; 131
    16d0:	8c 93       	st	X, r24
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <TIMER1_vICUInit>:

void TIMER1_vICUInit(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	// Normal Mode
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    16e0:	af e4       	ldi	r26, 0x4F	; 79
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ef e4       	ldi	r30, 0x4F	; 79
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    16ee:	af e4       	ldi	r26, 0x4F	; 79
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8d 7f       	andi	r24, 0xFD	; 253
    16fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    16fc:	ae e4       	ldi	r26, 0x4E	; 78
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ee e4       	ldi	r30, 0x4E	; 78
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	87 7f       	andi	r24, 0xF7	; 247
    1708:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8f 7e       	andi	r24, 0xEF	; 239
    1716:	8c 93       	st	X, r24

	// Noise Cancel;
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8c 93       	st	X, r24

	// Select ICU Edge
	SET_BIT(TCCR1B , TCCR1B_ICES1);
    1726:	ae e4       	ldi	r26, 0x4E	; 78
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ee e4       	ldi	r30, 0x4E	; 78
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	8c 93       	st	X, r24

	// ICU Interrupt
	SET_BIT(TIMSK, TIMSK_TICIE1);
    1734:	a9 e5       	ldi	r26, 0x59	; 89
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e9 e5       	ldi	r30, 0x59	; 89
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 62       	ori	r24, 0x20	; 32
    1740:	8c 93       	st	X, r24

	// Set Prescaler ->  8
	TCCR1B &=0b11111000;
    1742:	ae e4       	ldi	r26, 0x4E	; 78
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ee e4       	ldi	r30, 0x4E	; 78
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	88 7f       	andi	r24, 0xF8	; 248
    174e:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_PRESCALER;
    1750:	ae e4       	ldi	r26, 0x4E	; 78
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ee e4       	ldi	r30, 0x4E	; 78
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	8c 93       	st	X, r24
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <TIMER1_u16ICRRead>:

u16 TIMER1_u16ICRRead(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    176c:	e6 e4       	ldi	r30, 0x46	; 70
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <TIMER1_vSetTop>:

void TIMER1_vSetTop(u16 Copy_u16TopValue)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <TIMER1_vSetTop+0x6>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    1788:	e6 e4       	ldi	r30, 0x46	; 70
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <TIMER1_vSetCTC_A_value>:

void TIMER1_vSetCTC_A_value(u16 Copy_u16CTCValue)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <TIMER1_vSetCTC_A_value+0x6>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCValue;
    17ac:	ea e4       	ldi	r30, 0x4A	; 74
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <TIMER1_vICUSelectingEdge>:

void TIMER1_vICUSelectingEdge(u8 Copy_u8EdgeValue)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8EdgeValue == ICU_RISING_EDGE)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	41 f4       	brne	.+16     	; 0x17e4 <TIMER1_vICUSelectingEdge+0x22>
	{
		// Select ICU Rising Edge
		SET_BIT(TCCR1B , TCCR1B_ICES1);
    17d4:	ae e4       	ldi	r26, 0x4E	; 78
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ee e4       	ldi	r30, 0x4E	; 78
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <TIMER1_vICUSelectingEdge+0x30>
	}
	else
	{
		// Select ICU Falling Edge
		CLR_BIT(TCCR1B , TCCR1B_ICES1);
    17e4:	ae e4       	ldi	r26, 0x4E	; 78
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	ee e4       	ldi	r30, 0x4E	; 78
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7b       	andi	r24, 0xBF	; 191
    17f0:	8c 93       	st	X, r24
	}
}
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <TIMER1_vICUDeinit>:

void TIMER1_vICUDeinit(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1802:	ef e4       	ldi	r30, 0x4F	; 79
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	10 82       	st	Z, r1
	TCCR1B = 0;
    1808:	ee e4       	ldi	r30, 0x4E	; 78
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
	TIMSK = 0;
    180e:	e9 e5       	ldi	r30, 0x59	; 89
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	10 82       	st	Z, r1
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <SPI_vInit>:
#include "SPI_Interface.h"
#include "SPI_Private.h"


void SPI_vInit(u8 Copy_u8SPIMode)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SPIMode == SPI_MASTER_MODE)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	88 23       	and	r24, r24
    182a:	91 f5       	brne	.+100    	; 0x1890 <SPI_vInit+0x76>
	{
		// Set in Master Mode
		SET_BIT(SPCR , SPCR_MSTR);
    182c:	ad e2       	ldi	r26, 0x2D	; 45
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ed e2       	ldi	r30, 0x2D	; 45
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 61       	ori	r24, 0x10	; 16
    1838:	8c 93       	st	X, r24

		// Clock Polarity -> Rising
		CLR_BIT(SPCR , SPCR_CPOL);
    183a:	ad e2       	ldi	r26, 0x2D	; 45
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ed e2       	ldi	r30, 0x2D	; 45
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	87 7f       	andi	r24, 0xF7	; 247
    1846:	8c 93       	st	X, r24

		// Clock Phase -> Sample
		CLR_BIT(SPCR , SPCR_CPHA);
    1848:	ad e2       	ldi	r26, 0x2D	; 45
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ed e2       	ldi	r30, 0x2D	; 45
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8b 7f       	andi	r24, 0xFB	; 251
    1854:	8c 93       	st	X, r24

		// Set Clock Prescaler -> 64
		CLR_BIT(SPCR , SPCR_SPR0);
    1856:	ad e2       	ldi	r26, 0x2D	; 45
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ed e2       	ldi	r30, 0x2D	; 45
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	8c 93       	st	X, r24
		SET_BIT(SPCR , SPCR_SPR1);
    1864:	ad e2       	ldi	r26, 0x2D	; 45
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ed e2       	ldi	r30, 0x2D	; 45
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	82 60       	ori	r24, 0x02	; 2
    1870:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X);
    1872:	ae e2       	ldi	r26, 0x2E	; 46
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ee e2       	ldi	r30, 0x2E	; 46
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8e 7f       	andi	r24, 0xFE	; 254
    187e:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    1880:	ad e2       	ldi	r26, 0x2D	; 45
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ed e2       	ldi	r30, 0x2D	; 45
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 64       	ori	r24, 0x40	; 64
    188c:	8c 93       	st	X, r24
    188e:	11 c0       	rjmp	.+34     	; 0x18b2 <SPI_vInit+0x98>
	}

	else if(Copy_u8SPIMode == SPI_SLAVE_MODE )
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	71 f4       	brne	.+28     	; 0x18b2 <SPI_vInit+0x98>
	{
		// Set in Slave Mode
		CLR_BIT( SPCR , SPCR_MSTR);
    1896:	ad e2       	ldi	r26, 0x2D	; 45
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ed e2       	ldi	r30, 0x2D	; 45
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8f 7e       	andi	r24, 0xEF	; 239
    18a2:	8c 93       	st	X, r24

		// SPI  -> Enable
		SET_BIT(SPCR , SPCR_SPE);
    18a4:	ad e2       	ldi	r26, 0x2D	; 45
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ed e2       	ldi	r30, 0x2D	; 45
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	8c 93       	st	X, r24
	}
}
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <SPI_u8DataSendReceive>:

u8 SPI_u8DataSendReceive(u8 Copy_u8Data)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    18c6:	ef e2       	ldi	r30, 0x2F	; 47
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	80 83       	st	Z, r24

	while(GET_BIT(SPSR , SPSR_SPIF) == 0 );
    18ce:	ee e2       	ldi	r30, 0x2E	; 46
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	dc f7       	brge	.-10     	; 0x18ce <SPI_u8DataSendReceive+0x14>
	return SPDR;
    18d8:	ef e2       	ldi	r30, 0x2F	; 47
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
}
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    18ee:	af e5       	ldi	r26, 0x5F	; 95
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e5       	ldi	r30, 0x5F	; 95
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8c 93       	st	X, r24
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <GIE_Disable>:
void GIE_Disable(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    190a:	af e5       	ldi	r26, 0x5F	; 95
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ef e5       	ldi	r30, 0x5F	; 95
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 77       	andi	r24, 0x7F	; 127
    1916:	8c 93       	st	X, r24
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <EXTI_EnableDisable>:

#include "EXTI_Interface.h"
#include "EXTI_Private.h"

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <EXTI_EnableDisable+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <EXTI_EnableDisable+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3c 83       	std	Y+4, r19	; 0x04
    1936:	2b 83       	std	Y+3, r18	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	91 05       	cpc	r25, r1
    1940:	01 f1       	breq	.+64     	; 0x1982 <EXTI_EnableDisable+0x64>
    1942:	2b 81       	ldd	r18, Y+3	; 0x03
    1944:	3c 81       	ldd	r19, Y+4	; 0x04
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	89 f1       	breq	.+98     	; 0x19ae <EXTI_EnableDisable+0x90>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	09 f0       	breq	.+2      	; 0x1956 <EXTI_EnableDisable+0x38>
    1954:	41 c0       	rjmp	.+130    	; 0x19d8 <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	41 f4       	brne	.+16     	; 0x196c <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    195c:	ab e5       	ldi	r26, 0x5B	; 91
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e5       	ldi	r30, 0x5B	; 91
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 64       	ori	r24, 0x40	; 64
    1968:	8c 93       	st	X, r24
    196a:	36 c0       	rjmp	.+108    	; 0x19d8 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	88 23       	and	r24, r24
    1970:	99 f5       	brne	.+102    	; 0x19d8 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    1972:	ab e5       	ldi	r26, 0x5B	; 91
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e5       	ldi	r30, 0x5B	; 91
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 7b       	andi	r24, 0xBF	; 191
    197e:	8c 93       	st	X, r24
    1980:	2b c0       	rjmp	.+86     	; 0x19d8 <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	41 f4       	brne	.+16     	; 0x1998 <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    1988:	ab e5       	ldi	r26, 0x5B	; 91
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	eb e5       	ldi	r30, 0x5B	; 91
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	8c 93       	st	X, r24
    1996:	20 c0       	rjmp	.+64     	; 0x19d8 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	88 23       	and	r24, r24
    199c:	e9 f4       	brne	.+58     	; 0x19d8 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    199e:	ab e5       	ldi	r26, 0x5B	; 91
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e5       	ldi	r30, 0x5B	; 91
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 77       	andi	r24, 0x7F	; 127
    19aa:	8c 93       	st	X, r24
    19ac:	15 c0       	rjmp	.+42     	; 0x19d8 <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	41 f4       	brne	.+16     	; 0x19c4 <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    19b4:	ab e5       	ldi	r26, 0x5B	; 91
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	eb e5       	ldi	r30, 0x5B	; 91
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 62       	ori	r24, 0x20	; 32
    19c0:	8c 93       	st	X, r24
    19c2:	0a c0       	rjmp	.+20     	; 0x19d8 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	88 23       	and	r24, r24
    19c8:	39 f4       	brne	.+14     	; 0x19d8 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    19ca:	ab e5       	ldi	r26, 0x5B	; 91
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb e5       	ldi	r30, 0x5B	; 91
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7d       	andi	r24, 0xDF	; 223
    19d6:	8c 93       	st	X, r24
		}
		break;
	}
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2a 97       	sbiw	r28, 0x0a	; 10
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3a 87       	std	Y+10, r19	; 0x0a
    1a06:	29 87       	std	Y+9, r18	; 0x09
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <EXTI_SetSenstivity+0x2e>
    1a12:	66 c0       	rjmp	.+204    	; 0x1ae0 <EXTI_SetSenstivity+0xfa>
    1a14:	29 85       	ldd	r18, Y+9	; 0x09
    1a16:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <EXTI_SetSenstivity+0x3a>
    1a1e:	bb c0       	rjmp	.+374    	; 0x1b96 <EXTI_SetSenstivity+0x1b0>
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <EXTI_SetSenstivity+0x44>
    1a28:	d5 c0       	rjmp	.+426    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	38 87       	std	Y+8, r19	; 0x08
    1a32:	2f 83       	std	Y+7, r18	; 0x07
    1a34:	8f 81       	ldd	r24, Y+7	; 0x07
    1a36:	98 85       	ldd	r25, Y+8	; 0x08
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	21 f1       	breq	.+72     	; 0x1a86 <EXTI_SetSenstivity+0xa0>
    1a3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a40:	38 85       	ldd	r19, Y+8	; 0x08
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <EXTI_SetSenstivity+0x6c>
    1a48:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4a:	98 85       	ldd	r25, Y+8	; 0x08
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <EXTI_SetSenstivity+0x82>
    1a50:	c1 c0       	rjmp	.+386    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
    1a52:	2f 81       	ldd	r18, Y+7	; 0x07
    1a54:	38 85       	ldd	r19, Y+8	; 0x08
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	21 f1       	breq	.+72     	; 0x1aa4 <EXTI_SetSenstivity+0xbe>
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	98 85       	ldd	r25, Y+8	; 0x08
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	91 05       	cpc	r25, r1
    1a64:	71 f1       	breq	.+92     	; 0x1ac2 <EXTI_SetSenstivity+0xdc>
    1a66:	b6 c0       	rjmp	.+364    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8e 7f       	andi	r24, 0xFE	; 254
    1a74:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1a76:	a5 e5       	ldi	r26, 0x55	; 85
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e5       	ldi	r30, 0x55	; 85
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8d 7f       	andi	r24, 0xFD	; 253
    1a82:	8c 93       	st	X, r24
    1a84:	a7 c0       	rjmp	.+334    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1a94:	a5 e5       	ldi	r26, 0x55	; 85
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e5       	ldi	r30, 0x55	; 85
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8d 7f       	andi	r24, 0xFD	; 253
    1aa0:	8c 93       	st	X, r24
    1aa2:	98 c0       	rjmp	.+304    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1aa4:	a5 e5       	ldi	r26, 0x55	; 85
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e5       	ldi	r30, 0x55	; 85
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1ab2:	a5 e5       	ldi	r26, 0x55	; 85
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e5       	ldi	r30, 0x55	; 85
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	82 60       	ori	r24, 0x02	; 2
    1abe:	8c 93       	st	X, r24
    1ac0:	89 c0       	rjmp	.+274    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1ad0:	a5 e5       	ldi	r26, 0x55	; 85
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e5       	ldi	r30, 0x55	; 85
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	82 60       	ori	r24, 0x02	; 2
    1adc:	8c 93       	st	X, r24
    1ade:	7a c0       	rjmp	.+244    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	3e 83       	std	Y+6, r19	; 0x06
    1ae8:	2d 83       	std	Y+5, r18	; 0x05
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	91 05       	cpc	r25, r1
    1af2:	21 f1       	breq	.+72     	; 0x1b3c <EXTI_SetSenstivity+0x156>
    1af4:	2d 81       	ldd	r18, Y+5	; 0x05
    1af6:	3e 81       	ldd	r19, Y+6	; 0x06
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <EXTI_SetSenstivity+0x122>
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <EXTI_SetSenstivity+0x138>
    1b06:	66 c0       	rjmp	.+204    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
    1b08:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	21 f1       	breq	.+72     	; 0x1b5a <EXTI_SetSenstivity+0x174>
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	71 f1       	breq	.+92     	; 0x1b78 <EXTI_SetSenstivity+0x192>
    1b1c:	5b c0       	rjmp	.+182    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8b 7f       	andi	r24, 0xFB	; 251
    1b2a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1b2c:	a5 e5       	ldi	r26, 0x55	; 85
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e5 e5       	ldi	r30, 0x55	; 85
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	87 7f       	andi	r24, 0xF7	; 247
    1b38:	8c 93       	st	X, r24
    1b3a:	4c c0       	rjmp	.+152    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1b3c:	a5 e5       	ldi	r26, 0x55	; 85
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e5       	ldi	r30, 0x55	; 85
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	84 60       	ori	r24, 0x04	; 4
    1b48:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    1b4a:	a5 e5       	ldi	r26, 0x55	; 85
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e5       	ldi	r30, 0x55	; 85
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	87 7f       	andi	r24, 0xF7	; 247
    1b56:	8c 93       	st	X, r24
    1b58:	3d c0       	rjmp	.+122    	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    1b5a:	a5 e5       	ldi	r26, 0x55	; 85
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e5       	ldi	r30, 0x55	; 85
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8b 7f       	andi	r24, 0xFB	; 251
    1b66:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    1b68:	a5 e5       	ldi	r26, 0x55	; 85
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e5 e5       	ldi	r30, 0x55	; 85
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	88 60       	ori	r24, 0x08	; 8
    1b74:	8c 93       	st	X, r24
    1b76:	2e c0       	rjmp	.+92     	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    1b78:	a5 e5       	ldi	r26, 0x55	; 85
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e5       	ldi	r30, 0x55	; 85
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	84 60       	ori	r24, 0x04	; 4
    1b84:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    1b86:	a5 e5       	ldi	r26, 0x55	; 85
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e5       	ldi	r30, 0x55	; 85
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 60       	ori	r24, 0x08	; 8
    1b92:	8c 93       	st	X, r24
    1b94:	1f c0       	rjmp	.+62     	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3c 83       	std	Y+4, r19	; 0x04
    1b9e:	2b 83       	std	Y+3, r18	; 0x03
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <EXTI_SetSenstivity+0x1d0>
    1baa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bac:	3c 81       	ldd	r19, Y+4	; 0x04
    1bae:	23 30       	cpi	r18, 0x03	; 3
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	49 f0       	breq	.+18     	; 0x1bc6 <EXTI_SetSenstivity+0x1e0>
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    1bb6:	a4 e5       	ldi	r26, 0x54	; 84
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e4 e5       	ldi	r30, 0x54	; 84
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 64       	ori	r24, 0x40	; 64
    1bc2:	8c 93       	st	X, r24
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    1bc6:	a4 e5       	ldi	r26, 0x54	; 84
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e4 e5       	ldi	r30, 0x54	; 84
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 7b       	andi	r24, 0xBF	; 191
    1bd2:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    1bd4:	2a 96       	adiw	r28, 0x0a	; 10
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	2d 97       	sbiw	r28, 0x0d	; 13
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	6a 83       	std	Y+2, r22	; 0x02
    1bfe:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <MDIO_vSetPinDir+0x22>
    1c06:	09 c1       	rjmp	.+530    	; 0x1e1a <MDIO_vSetPinDir+0x234>
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	88 30       	cpi	r24, 0x08	; 8
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <MDIO_vSetPinDir+0x2a>
    1c0e:	05 c1       	rjmp	.+522    	; 0x1e1a <MDIO_vSetPinDir+0x234>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	08 f0       	brcs	.+2      	; 0x1c18 <MDIO_vSetPinDir+0x32>
    1c16:	01 c1       	rjmp	.+514    	; 0x1e1a <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3d 87       	std	Y+13, r19	; 0x0d
    1c20:	2c 87       	std	Y+12, r18	; 0x0c
    1c22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <MDIO_vSetPinDir+0x48>
    1c2c:	4f c0       	rjmp	.+158    	; 0x1ccc <MDIO_vSetPinDir+0xe6>
    1c2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c30:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <MDIO_vSetPinDir+0x5c>
    1c38:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	71 f0       	breq	.+28     	; 0x1c5c <MDIO_vSetPinDir+0x76>
    1c40:	ec c0       	rjmp	.+472    	; 0x1e1a <MDIO_vSetPinDir+0x234>
    1c42:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c44:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <MDIO_vSetPinDir+0x68>
    1c4c:	77 c0       	rjmp	.+238    	; 0x1d3c <MDIO_vSetPinDir+0x156>
    1c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c50:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <MDIO_vSetPinDir+0x74>
    1c58:	a9 c0       	rjmp	.+338    	; 0x1dac <MDIO_vSetPinDir+0x1c6>
    1c5a:	df c0       	rjmp	.+446    	; 0x1e1a <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3b 87       	std	Y+11, r19	; 0x0b
    1c64:	2a 87       	std	Y+10, r18	; 0x0a
    1c66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <MDIO_vSetPinDir+0x94>
    1c6e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c70:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c72:	21 30       	cpi	r18, 0x01	; 1
    1c74:	31 05       	cpc	r19, r1
    1c76:	b1 f0       	breq	.+44     	; 0x1ca4 <MDIO_vSetPinDir+0xbe>
    1c78:	d0 c0       	rjmp	.+416    	; 0x1e1a <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    1c7a:	aa e3       	ldi	r26, 0x3A	; 58
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	ea e3       	ldi	r30, 0x3A	; 58
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <MDIO_vSetPinDir+0xb2>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <MDIO_vSetPinDir+0xae>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	bb c0       	rjmp	.+374    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    1ca4:	aa e3       	ldi	r26, 0x3A	; 58
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	ea e3       	ldi	r30, 0x3A	; 58
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <MDIO_vSetPinDir+0xdc>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <MDIO_vSetPinDir+0xd8>
    1cc6:	84 2b       	or	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	a7 c0       	rjmp	.+334    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	39 87       	std	Y+9, r19	; 0x09
    1cd4:	28 87       	std	Y+8, r18	; 0x08
    1cd6:	88 85       	ldd	r24, Y+8	; 0x08
    1cd8:	99 85       	ldd	r25, Y+9	; 0x09
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	31 f0       	breq	.+12     	; 0x1cea <MDIO_vSetPinDir+0x104>
    1cde:	28 85       	ldd	r18, Y+8	; 0x08
    1ce0:	39 85       	ldd	r19, Y+9	; 0x09
    1ce2:	21 30       	cpi	r18, 0x01	; 1
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	b1 f0       	breq	.+44     	; 0x1d14 <MDIO_vSetPinDir+0x12e>
    1ce8:	98 c0       	rjmp	.+304    	; 0x1e1a <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    1cea:	a7 e3       	ldi	r26, 0x37	; 55
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e7 e3       	ldi	r30, 0x37	; 55
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <MDIO_vSetPinDir+0x122>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <MDIO_vSetPinDir+0x11e>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	83 c0       	rjmp	.+262    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    1d14:	a7 e3       	ldi	r26, 0x37	; 55
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e7 e3       	ldi	r30, 0x37	; 55
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <MDIO_vSetPinDir+0x14c>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <MDIO_vSetPinDir+0x148>
    1d36:	84 2b       	or	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	6f c0       	rjmp	.+222    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3f 83       	std	Y+7, r19	; 0x07
    1d44:	2e 83       	std	Y+6, r18	; 0x06
    1d46:	8e 81       	ldd	r24, Y+6	; 0x06
    1d48:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	31 f0       	breq	.+12     	; 0x1d5a <MDIO_vSetPinDir+0x174>
    1d4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d50:	3f 81       	ldd	r19, Y+7	; 0x07
    1d52:	21 30       	cpi	r18, 0x01	; 1
    1d54:	31 05       	cpc	r19, r1
    1d56:	b1 f0       	breq	.+44     	; 0x1d84 <MDIO_vSetPinDir+0x19e>
    1d58:	60 c0       	rjmp	.+192    	; 0x1e1a <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    1d5a:	a4 e3       	ldi	r26, 0x34	; 52
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e4 e3       	ldi	r30, 0x34	; 52
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <MDIO_vSetPinDir+0x192>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <MDIO_vSetPinDir+0x18e>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	4b c0       	rjmp	.+150    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    1d84:	a4 e3       	ldi	r26, 0x34	; 52
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e4 e3       	ldi	r30, 0x34	; 52
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <MDIO_vSetPinDir+0x1bc>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <MDIO_vSetPinDir+0x1b8>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	37 c0       	rjmp	.+110    	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3d 83       	std	Y+5, r19	; 0x05
    1db4:	2c 83       	std	Y+4, r18	; 0x04
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	31 f0       	breq	.+12     	; 0x1dca <MDIO_vSetPinDir+0x1e4>
    1dbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc2:	21 30       	cpi	r18, 0x01	; 1
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	b1 f0       	breq	.+44     	; 0x1df4 <MDIO_vSetPinDir+0x20e>
    1dc8:	28 c0       	rjmp	.+80     	; 0x1e1a <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    1dca:	a1 e3       	ldi	r26, 0x31	; 49
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e1 e3       	ldi	r30, 0x31	; 49
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <MDIO_vSetPinDir+0x202>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <MDIO_vSetPinDir+0x1fe>
    1dec:	80 95       	com	r24
    1dee:	84 23       	and	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	13 c0       	rjmp	.+38     	; 0x1e1a <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    1df4:	a1 e3       	ldi	r26, 0x31	; 49
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e1 e3       	ldi	r30, 0x31	; 49
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <MDIO_vSetPinDir+0x22c>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <MDIO_vSetPinDir+0x228>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1e1a:	2d 96       	adiw	r28, 0x0d	; 13
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	2d 97       	sbiw	r28, 0x0d	; 13
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	6a 83       	std	Y+2, r22	; 0x02
    1e44:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <MDIO_vSetPinVal+0x22>
    1e4c:	09 c1       	rjmp	.+530    	; 0x2060 <MDIO_vSetPinVal+0x234>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	88 30       	cpi	r24, 0x08	; 8
    1e52:	08 f0       	brcs	.+2      	; 0x1e56 <MDIO_vSetPinVal+0x2a>
    1e54:	05 c1       	rjmp	.+522    	; 0x2060 <MDIO_vSetPinVal+0x234>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <MDIO_vSetPinVal+0x32>
    1e5c:	01 c1       	rjmp	.+514    	; 0x2060 <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3d 87       	std	Y+13, r19	; 0x0d
    1e66:	2c 87       	std	Y+12, r18	; 0x0c
    1e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 05       	cpc	r25, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <MDIO_vSetPinVal+0x48>
    1e72:	4f c0       	rjmp	.+158    	; 0x1f12 <MDIO_vSetPinVal+0xe6>
    1e74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e76:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <MDIO_vSetPinVal+0x5c>
    1e7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e80:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <MDIO_vSetPinVal+0x76>
    1e86:	ec c0       	rjmp	.+472    	; 0x2060 <MDIO_vSetPinVal+0x234>
    1e88:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e8a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <MDIO_vSetPinVal+0x68>
    1e92:	77 c0       	rjmp	.+238    	; 0x1f82 <MDIO_vSetPinVal+0x156>
    1e94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e98:	83 30       	cpi	r24, 0x03	; 3
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <MDIO_vSetPinVal+0x74>
    1e9e:	a9 c0       	rjmp	.+338    	; 0x1ff2 <MDIO_vSetPinVal+0x1c6>
    1ea0:	df c0       	rjmp	.+446    	; 0x2060 <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3b 87       	std	Y+11, r19	; 0x0b
    1eaa:	2a 87       	std	Y+10, r18	; 0x0a
    1eac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <MDIO_vSetPinVal+0x94>
    1eb4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1eb6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1eb8:	21 30       	cpi	r18, 0x01	; 1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	b1 f0       	breq	.+44     	; 0x1eea <MDIO_vSetPinVal+0xbe>
    1ebe:	d0 c0       	rjmp	.+416    	; 0x2060 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    1ec0:	ab e3       	ldi	r26, 0x3B	; 59
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	eb e3       	ldi	r30, 0x3B	; 59
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <MDIO_vSetPinVal+0xb2>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <MDIO_vSetPinVal+0xae>
    1ee2:	80 95       	com	r24
    1ee4:	84 23       	and	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	bb c0       	rjmp	.+374    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    1eea:	ab e3       	ldi	r26, 0x3B	; 59
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e3       	ldi	r30, 0x3B	; 59
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <MDIO_vSetPinVal+0xdc>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <MDIO_vSetPinVal+0xd8>
    1f0c:	84 2b       	or	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	a7 c0       	rjmp	.+334    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	39 87       	std	Y+9, r19	; 0x09
    1f1a:	28 87       	std	Y+8, r18	; 0x08
    1f1c:	88 85       	ldd	r24, Y+8	; 0x08
    1f1e:	99 85       	ldd	r25, Y+9	; 0x09
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	31 f0       	breq	.+12     	; 0x1f30 <MDIO_vSetPinVal+0x104>
    1f24:	28 85       	ldd	r18, Y+8	; 0x08
    1f26:	39 85       	ldd	r19, Y+9	; 0x09
    1f28:	21 30       	cpi	r18, 0x01	; 1
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	b1 f0       	breq	.+44     	; 0x1f5a <MDIO_vSetPinVal+0x12e>
    1f2e:	98 c0       	rjmp	.+304    	; 0x2060 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <MDIO_vSetPinVal+0x122>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <MDIO_vSetPinVal+0x11e>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	83 c0       	rjmp	.+262    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1f5a:	a8 e3       	ldi	r26, 0x38	; 56
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e8 e3       	ldi	r30, 0x38	; 56
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 2e       	mov	r0, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <MDIO_vSetPinVal+0x14c>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	0a 94       	dec	r0
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <MDIO_vSetPinVal+0x148>
    1f7c:	84 2b       	or	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	6f c0       	rjmp	.+222    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	3f 83       	std	Y+7, r19	; 0x07
    1f8a:	2e 83       	std	Y+6, r18	; 0x06
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	31 f0       	breq	.+12     	; 0x1fa0 <MDIO_vSetPinVal+0x174>
    1f94:	2e 81       	ldd	r18, Y+6	; 0x06
    1f96:	3f 81       	ldd	r19, Y+7	; 0x07
    1f98:	21 30       	cpi	r18, 0x01	; 1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	b1 f0       	breq	.+44     	; 0x1fca <MDIO_vSetPinVal+0x19e>
    1f9e:	60 c0       	rjmp	.+192    	; 0x2060 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    1fa0:	a5 e3       	ldi	r26, 0x35	; 53
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e3       	ldi	r30, 0x35	; 53
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	02 2e       	mov	r0, r18
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <MDIO_vSetPinVal+0x192>
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	0a 94       	dec	r0
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <MDIO_vSetPinVal+0x18e>
    1fc2:	80 95       	com	r24
    1fc4:	84 23       	and	r24, r20
    1fc6:	8c 93       	st	X, r24
    1fc8:	4b c0       	rjmp	.+150    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    1fca:	a5 e3       	ldi	r26, 0x35	; 53
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e3       	ldi	r30, 0x35	; 53
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	48 2f       	mov	r20, r24
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	02 2e       	mov	r0, r18
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <MDIO_vSetPinVal+0x1bc>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	0a 94       	dec	r0
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <MDIO_vSetPinVal+0x1b8>
    1fec:	84 2b       	or	r24, r20
    1fee:	8c 93       	st	X, r24
    1ff0:	37 c0       	rjmp	.+110    	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	3d 83       	std	Y+5, r19	; 0x05
    1ffa:	2c 83       	std	Y+4, r18	; 0x04
    1ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	31 f0       	breq	.+12     	; 0x2010 <MDIO_vSetPinVal+0x1e4>
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	21 30       	cpi	r18, 0x01	; 1
    200a:	31 05       	cpc	r19, r1
    200c:	b1 f0       	breq	.+44     	; 0x203a <MDIO_vSetPinVal+0x20e>
    200e:	28 c0       	rjmp	.+80     	; 0x2060 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    2010:	a2 e3       	ldi	r26, 0x32	; 50
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e2 e3       	ldi	r30, 0x32	; 50
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <MDIO_vSetPinVal+0x202>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <MDIO_vSetPinVal+0x1fe>
    2032:	80 95       	com	r24
    2034:	84 23       	and	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	13 c0       	rjmp	.+38     	; 0x2060 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    203a:	a2 e3       	ldi	r26, 0x32	; 50
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e2 e3       	ldi	r30, 0x32	; 50
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <MDIO_vSetPinVal+0x22c>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <MDIO_vSetPinVal+0x228>
    205c:	84 2b       	or	r24, r20
    205e:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    2060:	2d 96       	adiw	r28, 0x0d	; 13
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <MDIO_GetPinVal+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <MDIO_GetPinVal+0x8>
    207a:	0f 92       	push	r0
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	84 30       	cpi	r24, 0x04	; 4
    2088:	08 f0       	brcs	.+2      	; 0x208c <MDIO_GetPinVal+0x1a>
    208a:	6b c0       	rjmp	.+214    	; 0x2162 <MDIO_GetPinVal+0xf0>
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	88 30       	cpi	r24, 0x08	; 8
    2090:	08 f0       	brcs	.+2      	; 0x2094 <MDIO_GetPinVal+0x22>
    2092:	67 c0       	rjmp	.+206    	; 0x2162 <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	3d 83       	std	Y+5, r19	; 0x05
    209c:	2c 83       	std	Y+4, r18	; 0x04
    209e:	4c 81       	ldd	r20, Y+4	; 0x04
    20a0:	5d 81       	ldd	r21, Y+5	; 0x05
    20a2:	41 30       	cpi	r20, 0x01	; 1
    20a4:	51 05       	cpc	r21, r1
    20a6:	41 f1       	breq	.+80     	; 0x20f8 <MDIO_GetPinVal+0x86>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	82 30       	cpi	r24, 0x02	; 2
    20ae:	91 05       	cpc	r25, r1
    20b0:	34 f4       	brge	.+12     	; 0x20be <MDIO_GetPinVal+0x4c>
    20b2:	2c 81       	ldd	r18, Y+4	; 0x04
    20b4:	3d 81       	ldd	r19, Y+5	; 0x05
    20b6:	21 15       	cp	r18, r1
    20b8:	31 05       	cpc	r19, r1
    20ba:	61 f0       	breq	.+24     	; 0x20d4 <MDIO_GetPinVal+0x62>
    20bc:	52 c0       	rjmp	.+164    	; 0x2162 <MDIO_GetPinVal+0xf0>
    20be:	4c 81       	ldd	r20, Y+4	; 0x04
    20c0:	5d 81       	ldd	r21, Y+5	; 0x05
    20c2:	42 30       	cpi	r20, 0x02	; 2
    20c4:	51 05       	cpc	r21, r1
    20c6:	51 f1       	breq	.+84     	; 0x211c <MDIO_GetPinVal+0xaa>
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	9d 81       	ldd	r25, Y+5	; 0x05
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	91 05       	cpc	r25, r1
    20d0:	b9 f1       	breq	.+110    	; 0x2140 <MDIO_GetPinVal+0xce>
    20d2:	47 c0       	rjmp	.+142    	; 0x2162 <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    20d4:	e9 e3       	ldi	r30, 0x39	; 57
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a9 01       	movw	r20, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <MDIO_GetPinVal+0x7a>
    20e8:	55 95       	asr	r21
    20ea:	47 95       	ror	r20
    20ec:	8a 95       	dec	r24
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <MDIO_GetPinVal+0x76>
    20f0:	ca 01       	movw	r24, r20
    20f2:	81 70       	andi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	35 c0       	rjmp	.+106    	; 0x2162 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    20f8:	e6 e3       	ldi	r30, 0x36	; 54
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a9 01       	movw	r20, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <MDIO_GetPinVal+0x9e>
    210c:	55 95       	asr	r21
    210e:	47 95       	ror	r20
    2110:	8a 95       	dec	r24
    2112:	e2 f7       	brpl	.-8      	; 0x210c <MDIO_GetPinVal+0x9a>
    2114:	ca 01       	movw	r24, r20
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	23 c0       	rjmp	.+70     	; 0x2162 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    211c:	e3 e3       	ldi	r30, 0x33	; 51
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <MDIO_GetPinVal+0xc2>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <MDIO_GetPinVal+0xbe>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	11 c0       	rjmp	.+34     	; 0x2162 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    2140:	e0 e3       	ldi	r30, 0x30	; 48
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a9 01       	movw	r20, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <MDIO_GetPinVal+0xe6>
    2154:	55 95       	asr	r21
    2156:	47 95       	ror	r20
    2158:	8a 95       	dec	r24
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <MDIO_GetPinVal+0xe2>
    215c:	ca 01       	movw	r24, r20
    215e:	81 70       	andi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	00 d0       	rcall	.+0      	; 0x217a <MDIO_vTogglePinVal+0x6>
    217a:	00 d0       	rcall	.+0      	; 0x217c <MDIO_vTogglePinVal+0x8>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	84 30       	cpi	r24, 0x04	; 4
    2188:	08 f0       	brcs	.+2      	; 0x218c <MDIO_vTogglePinVal+0x18>
    218a:	72 c0       	rjmp	.+228    	; 0x2270 <MDIO_vTogglePinVal+0xfc>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	88 30       	cpi	r24, 0x08	; 8
    2190:	08 f0       	brcs	.+2      	; 0x2194 <MDIO_vTogglePinVal+0x20>
    2192:	6e c0       	rjmp	.+220    	; 0x2270 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	3c 83       	std	Y+4, r19	; 0x04
    219c:	2b 83       	std	Y+3, r18	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	91 05       	cpc	r25, r1
    21a6:	49 f1       	breq	.+82     	; 0x21fa <MDIO_vTogglePinVal+0x86>
    21a8:	2b 81       	ldd	r18, Y+3	; 0x03
    21aa:	3c 81       	ldd	r19, Y+4	; 0x04
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	2c f4       	brge	.+10     	; 0x21bc <MDIO_vTogglePinVal+0x48>
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	61 f0       	breq	.+24     	; 0x21d2 <MDIO_vTogglePinVal+0x5e>
    21ba:	5a c0       	rjmp	.+180    	; 0x2270 <MDIO_vTogglePinVal+0xfc>
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	71 f1       	breq	.+92     	; 0x2222 <MDIO_vTogglePinVal+0xae>
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	83 30       	cpi	r24, 0x03	; 3
    21cc:	91 05       	cpc	r25, r1
    21ce:	e9 f1       	breq	.+122    	; 0x224a <MDIO_vTogglePinVal+0xd6>
    21d0:	4f c0       	rjmp	.+158    	; 0x2270 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    21d2:	ab e3       	ldi	r26, 0x3B	; 59
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	eb e3       	ldi	r30, 0x3B	; 59
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <MDIO_vTogglePinVal+0x7c>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <MDIO_vTogglePinVal+0x78>
    21f4:	84 27       	eor	r24, r20
    21f6:	8c 93       	st	X, r24
    21f8:	3b c0       	rjmp	.+118    	; 0x2270 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    21fa:	a8 e3       	ldi	r26, 0x38	; 56
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e8 e3       	ldi	r30, 0x38	; 56
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <MDIO_vTogglePinVal+0xa4>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <MDIO_vTogglePinVal+0xa0>
    221c:	84 27       	eor	r24, r20
    221e:	8c 93       	st	X, r24
    2220:	27 c0       	rjmp	.+78     	; 0x2270 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    2222:	a5 e3       	ldi	r26, 0x35	; 53
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e5 e3       	ldi	r30, 0x35	; 53
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <MDIO_vTogglePinVal+0xcc>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <MDIO_vTogglePinVal+0xc8>
    2244:	84 27       	eor	r24, r20
    2246:	8c 93       	st	X, r24
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    224a:	a2 e3       	ldi	r26, 0x32	; 50
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e2 e3       	ldi	r30, 0x32	; 50
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	48 2f       	mov	r20, r24
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <MDIO_vTogglePinVal+0xf4>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <MDIO_vTogglePinVal+0xf0>
    226c:	84 27       	eor	r24, r20
    226e:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <MDIO_vSetPortDir+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <MDIO_vSetPortDir+0x8>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	90 f5       	brcc	.+100    	; 0x22f8 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	3c 83       	std	Y+4, r19	; 0x04
    229c:	2b 83       	std	Y+3, r18	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	d1 f0       	breq	.+52     	; 0x22dc <MDIO_vSetPortDir+0x5e>
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	2c f4       	brge	.+10     	; 0x22bc <MDIO_vSetPortDir+0x3e>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	61 f0       	breq	.+24     	; 0x22d2 <MDIO_vSetPortDir+0x54>
    22ba:	1e c0       	rjmp	.+60     	; 0x22f8 <MDIO_vSetPortDir+0x7a>
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	81 f0       	breq	.+32     	; 0x22e6 <MDIO_vSetPortDir+0x68>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	81 f0       	breq	.+32     	; 0x22f0 <MDIO_vSetPortDir+0x72>
    22d0:	13 c0       	rjmp	.+38     	; 0x22f8 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    22d2:	ea e3       	ldi	r30, 0x3A	; 58
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	80 83       	st	Z, r24
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    22dc:	e7 e3       	ldi	r30, 0x37	; 55
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	80 83       	st	Z, r24
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    22e6:	e4 e3       	ldi	r30, 0x34	; 52
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	80 83       	st	Z, r24
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    22f0:	e1 e3       	ldi	r30, 0x31	; 49
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <MDIO_vSetPortVal+0x6>
    230c:	00 d0       	rcall	.+0      	; 0x230e <MDIO_vSetPortVal+0x8>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	84 30       	cpi	r24, 0x04	; 4
    231a:	90 f5       	brcc	.+100    	; 0x2380 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	3c 83       	std	Y+4, r19	; 0x04
    2324:	2b 83       	std	Y+3, r18	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	91 05       	cpc	r25, r1
    232e:	d1 f0       	breq	.+52     	; 0x2364 <MDIO_vSetPortVal+0x5e>
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	2c f4       	brge	.+10     	; 0x2344 <MDIO_vSetPortVal+0x3e>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 f0       	breq	.+24     	; 0x235a <MDIO_vSetPortVal+0x54>
    2342:	1e c0       	rjmp	.+60     	; 0x2380 <MDIO_vSetPortVal+0x7a>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	81 f0       	breq	.+32     	; 0x236e <MDIO_vSetPortVal+0x68>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	91 05       	cpc	r25, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <MDIO_vSetPortVal+0x72>
    2358:	13 c0       	rjmp	.+38     	; 0x2380 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    235a:	eb e3       	ldi	r30, 0x3B	; 59
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	80 83       	st	Z, r24
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    2364:	e8 e3       	ldi	r30, 0x38	; 56
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	80 83       	st	Z, r24
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    236e:	e5 e3       	ldi	r30, 0x35	; 53
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 83       	st	Z, r24
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    2378:	e2 e3       	ldi	r30, 0x32	; 50
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <MDIO_vInit>:


void MDIO_vInit()
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    2396:	ea e3       	ldi	r30, 0x3A	; 58
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    239c:	e7 e3       	ldi	r30, 0x37	; 55
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    23a2:	e4 e3       	ldi	r30, 0x34	; 52
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	87 e0       	ldi	r24, 0x07	; 7
    23a8:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    23aa:	e1 e3       	ldi	r30, 0x31	; 49
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	8f ef       	ldi	r24, 0xFF	; 255
    23b0:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    23b2:	eb e3       	ldi	r30, 0x3B	; 59
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    23b8:	e8 e3       	ldi	r30, 0x38	; 56
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	84 e0       	ldi	r24, 0x04	; 4
    23be:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    23c0:	e5 e3       	ldi	r30, 0x35	; 53
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    23c6:	e2 e3       	ldi	r30, 0x32	; 50
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <ADC_Init>:
static u16 *Global_ptr =0;
static void (*GlobalPtrFunc)(void)=NULL;
static u8 ADC_STATE=IDLE;

void ADC_Init(void)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	 // No interrupt
	CLR_BIT(ADCSRA , ADIE);
    23da:	a6 e2       	ldi	r26, 0x26	; 38
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e6 e2       	ldi	r30, 0x26	; 38
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	87 7f       	andi	r24, 0xF7	; 247
    23e6:	8c 93       	st	X, r24

	// REF -> AVCC
	SET_BIT(ADMUX , REFS0);
    23e8:	a7 e2       	ldi	r26, 0x27	; 39
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e7 e2       	ldi	r30, 0x27	; 39
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 64       	ori	r24, 0x40	; 64
    23f4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    23f6:	a7 e2       	ldi	r26, 0x27	; 39
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e7 e2       	ldi	r30, 0x27	; 39
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 77       	andi	r24, 0x7F	; 127
    2402:	8c 93       	st	X, r24

	// Set Prescaler -> 128
	SET_BIT(ADCSRA , ADPS0);
    2404:	a6 e2       	ldi	r26, 0x26	; 38
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e6 e2       	ldi	r30, 0x26	; 38
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    2412:	a6 e2       	ldi	r26, 0x26	; 38
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e6 e2       	ldi	r30, 0x26	; 38
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	82 60       	ori	r24, 0x02	; 2
    241e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS2);
    2420:	a6 e2       	ldi	r26, 0x26	; 38
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e6 e2       	ldi	r30, 0x26	; 38
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	84 60       	ori	r24, 0x04	; 4
    242c:	8c 93       	st	X, r24

	// ADC Enable
	SET_BIT(ADCSRA , ADEN);
    242e:	a6 e2       	ldi	r26, 0x26	; 38
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e6 e2       	ldi	r30, 0x26	; 38
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	8c 93       	st	X, r24
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <ADC_StartConvertPolling>:

u16 ADC_StartConvertPolling(u8 Copy_u8Channel)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <ADC_StartConvertPolling+0x6>
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_read=0;
    2450:	1a 82       	std	Y+2, r1	; 0x02
    2452:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &=0b11100000;
    2454:	a7 e2       	ldi	r26, 0x27	; 39
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e7 e2       	ldi	r30, 0x27	; 39
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	80 7e       	andi	r24, 0xE0	; 224
    2460:	8c 93       	st	X, r24
	ADMUX |=Copy_u8Channel;
    2462:	a7 e2       	ldi	r26, 0x27	; 39
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e2       	ldi	r30, 0x27	; 39
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	90 81       	ld	r25, Z
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	89 2b       	or	r24, r25
    2470:	8c 93       	st	X, r24

	// Start Conversion

	SET_BIT(ADCSRA , ADSC);
    2472:	a6 e2       	ldi	r26, 0x26	; 38
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e6 e2       	ldi	r30, 0x26	; 38
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	80 64       	ori	r24, 0x40	; 64
    247e:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , ADIF) == 0)
    2480:	e6 e2       	ldi	r30, 0x26	; 38
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	82 95       	swap	r24
    2488:	8f 70       	andi	r24, 0x0F	; 15
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	81 70       	andi	r24, 0x01	; 1
    2490:	90 70       	andi	r25, 0x00	; 0
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	a9 f3       	breq	.-22     	; 0x2480 <ADC_StartConvertPolling+0x3e>
	{

	}
	ADC_read = ADCLH;
    2496:	e4 e2       	ldi	r30, 0x24	; 36
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA , ADIF);
    24a2:	a6 e2       	ldi	r26, 0x26	; 38
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e6 e2       	ldi	r30, 0x26	; 38
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 61       	ori	r24, 0x10	; 16
    24ae:	8c 93       	st	X, r24
	return ADC_read;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <ADC_StartConvertInt>:

u8 ADC_StartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*PtrFunc)(void))
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <ADC_StartConvertInt+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <ADC_StartConvertInt+0x8>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <ADC_StartConvertInt+0xa>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	8a 83       	std	Y+2, r24	; 0x02
    24d0:	7c 83       	std	Y+4, r23	; 0x04
    24d2:	6b 83       	std	Y+3, r22	; 0x03
    24d4:	5e 83       	std	Y+6, r21	; 0x06
    24d6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = OK;
    24d8:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_STATE == IDLE)
    24da:	80 91 76 00 	lds	r24, 0x0076
    24de:	88 23       	and	r24, r24
    24e0:	69 f5       	brne	.+90     	; 0x253c <ADC_StartConvertInt+0x7c>
	{
		if((NULL != pu16Reading)&& (NULL != PtrFunc) );\
		{
			ADC_STATE = BUSY;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 76 00 	sts	0x0076, r24
			Global_ptr=pu16Reading;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	90 93 73 00 	sts	0x0073, r25
    24f0:	80 93 72 00 	sts	0x0072, r24
			GlobalPtrFunc = PtrFunc;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	90 93 75 00 	sts	0x0075, r25
    24fc:	80 93 74 00 	sts	0x0074, r24

			ADMUX &=0b11100000;
    2500:	a7 e2       	ldi	r26, 0x27	; 39
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e7 e2       	ldi	r30, 0x27	; 39
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	80 7e       	andi	r24, 0xE0	; 224
    250c:	8c 93       	st	X, r24
			ADMUX |=Copy_u8Channel;
    250e:	a7 e2       	ldi	r26, 0x27	; 39
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e7 e2       	ldi	r30, 0x27	; 39
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	90 81       	ld	r25, Z
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	89 2b       	or	r24, r25
    251c:	8c 93       	st	X, r24
			// Enable ADC Interrupt
			SET_BIT(ADCSRA , ADIE);
    251e:	a6 e2       	ldi	r26, 0x26	; 38
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e6 e2       	ldi	r30, 0x26	; 38
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	88 60       	ori	r24, 0x08	; 8
    252a:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA , ADSC);
    252c:	a6 e2       	ldi	r26, 0x26	; 38
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e6 e2       	ldi	r30, 0x26	; 38
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	80 64       	ori	r24, 0x40	; 64
    2538:	8c 93       	st	X, r24
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <ADC_StartConvertInt+0x80>
		}
	}
	else
	{
		Local_u8Error = NOK;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
}
    2542:	26 96       	adiw	r28, 0x06	; 6
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	0f 92       	push	r0
    255c:	11 24       	eor	r1, r1
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	// Return Reading
	*Global_ptr =ADCLH;
    257e:	a0 91 72 00 	lds	r26, 0x0072
    2582:	b0 91 73 00 	lds	r27, 0x0073
    2586:	e4 e2       	ldi	r30, 0x24	; 36
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	8d 93       	st	X+, r24
    2590:	9c 93       	st	X, r25

	// exe function
	GlobalPtrFunc();
    2592:	e0 91 74 00 	lds	r30, 0x0074
    2596:	f0 91 75 00 	lds	r31, 0x0075
    259a:	09 95       	icall

	//Interrutpt Disable
	CLR_BIT(ADCSRA , ADIE);
    259c:	a6 e2       	ldi	r26, 0x26	; 38
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e6 e2       	ldi	r30, 0x26	; 38
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	87 7f       	andi	r24, 0xF7	; 247
    25a8:	8c 93       	st	X, r24

	// Change the State
	ADC_STATE = IDLE;
    25aa:	10 92 76 00 	sts	0x0076, r1



}
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	ff 91       	pop	r31
    25b4:	ef 91       	pop	r30
    25b6:	bf 91       	pop	r27
    25b8:	af 91       	pop	r26
    25ba:	9f 91       	pop	r25
    25bc:	8f 91       	pop	r24
    25be:	7f 91       	pop	r23
    25c0:	6f 91       	pop	r22
    25c2:	5f 91       	pop	r21
    25c4:	4f 91       	pop	r20
    25c6:	3f 91       	pop	r19
    25c8:	2f 91       	pop	r18
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__prologue_saves__>:
    25d4:	2f 92       	push	r2
    25d6:	3f 92       	push	r3
    25d8:	4f 92       	push	r4
    25da:	5f 92       	push	r5
    25dc:	6f 92       	push	r6
    25de:	7f 92       	push	r7
    25e0:	8f 92       	push	r8
    25e2:	9f 92       	push	r9
    25e4:	af 92       	push	r10
    25e6:	bf 92       	push	r11
    25e8:	cf 92       	push	r12
    25ea:	df 92       	push	r13
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	ca 1b       	sub	r28, r26
    25fe:	db 0b       	sbc	r29, r27
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	09 94       	ijmp

0000260c <__epilogue_restores__>:
    260c:	2a 88       	ldd	r2, Y+18	; 0x12
    260e:	39 88       	ldd	r3, Y+17	; 0x11
    2610:	48 88       	ldd	r4, Y+16	; 0x10
    2612:	5f 84       	ldd	r5, Y+15	; 0x0f
    2614:	6e 84       	ldd	r6, Y+14	; 0x0e
    2616:	7d 84       	ldd	r7, Y+13	; 0x0d
    2618:	8c 84       	ldd	r8, Y+12	; 0x0c
    261a:	9b 84       	ldd	r9, Y+11	; 0x0b
    261c:	aa 84       	ldd	r10, Y+10	; 0x0a
    261e:	b9 84       	ldd	r11, Y+9	; 0x09
    2620:	c8 84       	ldd	r12, Y+8	; 0x08
    2622:	df 80       	ldd	r13, Y+7	; 0x07
    2624:	ee 80       	ldd	r14, Y+6	; 0x06
    2626:	fd 80       	ldd	r15, Y+5	; 0x05
    2628:	0c 81       	ldd	r16, Y+4	; 0x04
    262a:	1b 81       	ldd	r17, Y+3	; 0x03
    262c:	aa 81       	ldd	r26, Y+2	; 0x02
    262e:	b9 81       	ldd	r27, Y+1	; 0x01
    2630:	ce 0f       	add	r28, r30
    2632:	d1 1d       	adc	r29, r1
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	ed 01       	movw	r28, r26
    2640:	08 95       	ret

00002642 <_exit>:
    2642:	f8 94       	cli

00002644 <__stop_program>:
    2644:	ff cf       	rjmp	.-2      	; 0x2644 <__stop_program>


ITI_Day24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00005efe  00005f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000464  00800080  00800080  00005fb2  2**0
                  ALLOC
  3 .stab         00008634  00000000  00000000  00005fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005b38  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00014120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00014260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000143d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00016019  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00016f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00017cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00017e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000180a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001886f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 05 	call	0xb96	; 0xb96 <main>
      8a:	0c 94 7d 2f 	jmp	0x5efa	; 0x5efa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 2f 	jmp	0x5e7a	; 0x5e7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 2f 	jmp	0x5e7a	; 0x5e7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Task1>:

SemaphoreHandle_t xSemaphore;


void Task1(void *pvParameters)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Task1+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		// wait for the semaphore
		if(xSemaphoreTake(xSemaphore,portMAX_DELAY)==pdTRUE)
     b54:	80 91 e2 04 	lds	r24, 0x04E2
     b58:	90 91 e3 04 	lds	r25, 0x04E3
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	7f ef       	ldi	r23, 0xFF	; 255
     b60:	0e 94 01 11 	call	0x2202	; 0x2202 <xQueueSemaphoreTake>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	b1 f7       	brne	.-20     	; 0xb54 <Task1+0xe>
		{
			LCD_SendString("Button is Pressed");
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <LCD_SendString>
     b70:	ff cf       	rjmp	.-2      	; 0xb70 <Task1+0x2a>

00000b72 <ISR_Handler>:
	}
}


void ISR_Handler(void)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	xSemaphoreGive(xSemaphore);
     b7a:	80 91 e2 04 	lds	r24, 0x04E2
     b7e:	90 91 e3 04 	lds	r25, 0x04E3
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xQueueGenericSend>
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <main>:



void main(void)
{
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DIO_PORTA , PIN0 , DIO_OUTPUT);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA , PIN1 , DIO_OUTPUT);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTD , PIN2 , DIO_INPUT);
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	62 e0       	ldi	r22, 0x02	; 2
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>

	LCD_InitPortDir();
     bc2:	0e 94 22 2a 	call	0x5444	; 0x5444 <LCD_InitPortDir>
	LCD_Init();
     bc6:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <LCD_Init>
	MDIO_vSetPinVal(DIO_PORTD ,PIN2 , DIO_HIGH);
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	62 e0       	ldi	r22, 0x02	; 2
     bce:	41 e0       	ldi	r20, 0x01	; 1
     bd0:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>
	EXTI_vSetCallBack(EXTI_INT_0 , ISR_Handler);
     bd4:	29 eb       	ldi	r18, 0xB9	; 185
     bd6:	35 e0       	ldi	r19, 0x05	; 5
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <EXTI_vSetCallBack>
	EXTI_SetSenstivity(EXTI_INT_0 , EXTI_FAILLING_EDGE);
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	62 e0       	ldi	r22, 0x02	; 2
     be4:	0e 94 b3 24 	call	0x4966	; 0x4966 <EXTI_SetSenstivity>

	// Create Tasks

	xTaskCreate(Task1 , NULL , 100 , NULL , 0, NULL );
     be8:	83 ea       	ldi	r24, 0xA3	; 163
     bea:	95 e0       	ldi	r25, 0x05	; 5
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	44 e6       	ldi	r20, 0x64	; 100
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	ee 24       	eor	r14, r14
     bfc:	ff 24       	eor	r15, r15
     bfe:	0e 94 11 15 	call	0x2a22	; 0x2a22 <xTaskCreate>

	xSemaphore = xSemaphoreCreateBinary();
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	43 e0       	ldi	r20, 0x03	; 3
     c08:	0e 94 77 0e 	call	0x1cee	; 0x1cee <xQueueGenericCreate>
     c0c:	90 93 e3 04 	sts	0x04E3, r25
     c10:	80 93 e2 04 	sts	0x04E2, r24

//	vSemaphoreCreateBinary(xSemaphore);
	xSemaphoreGive(xSemaphore);
     c14:	80 91 e2 04 	lds	r24, 0x04E2
     c18:	90 91 e3 04 	lds	r25, 0x04E3
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xQueueGenericSend>
	xSemaphoreTake(xSemaphore , portMAX_DELAY);
     c2a:	80 91 e2 04 	lds	r24, 0x04E2
     c2e:	90 91 e3 04 	lds	r25, 0x04E3
     c32:	6f ef       	ldi	r22, 0xFF	; 255
     c34:	7f ef       	ldi	r23, 0xFF	; 255
     c36:	0e 94 01 11 	call	0x2202	; 0x2202 <xQueueSemaphoreTake>


	EXTI_EnableDisable(EXTI_INT_0 , EXTI_ENABLE );
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	0e 94 4f 24 	call	0x489e	; 0x489e <EXTI_EnableDisable>
	GIE_Enable();
     c42:	0e 94 33 24 	call	0x4866	; 0x4866 <GIE_Enable>
	vTaskStartScheduler();
     c46:	0e 94 4e 1a 	call	0x349c	; 0x349c <vTaskStartScheduler>
     c4a:	ff cf       	rjmp	.-2      	; 0xc4a <main+0xb4>

00000c4c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <xEventGroupCreate+0x6>
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
     c56:	8b e0       	ldi	r24, 0x0B	; 11
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <pvPortMalloc>
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	49 f0       	breq	.+18     	; 0xc7c <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
     c6a:	e9 81       	ldd	r30, Y+1	; 0x01
     c6c:	fa 81       	ldd	r31, Y+2	; 0x02
     c6e:	11 82       	std	Z+1, r1	; 0x01
     c70:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	02 96       	adiw	r24, 0x02	; 2
     c78:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	60 97       	sbiw	r28, 0x10	; 16
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	9a 87       	std	Y+10, r25	; 0x0a
     ca0:	89 87       	std	Y+9, r24	; 0x09
     ca2:	7c 87       	std	Y+12, r23	; 0x0c
     ca4:	6b 87       	std	Y+11, r22	; 0x0b
     ca6:	5e 87       	std	Y+14, r21	; 0x0e
     ca8:	4d 87       	std	Y+13, r20	; 0x0d
     caa:	38 8b       	std	Y+16, r19	; 0x10
     cac:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
     cae:	89 85       	ldd	r24, Y+9	; 0x09
     cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb2:	9c 83       	std	Y+4, r25	; 0x04
     cb4:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     cb6:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     cb8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     cbc:	eb 81       	ldd	r30, Y+3	; 0x03
     cbe:	fc 81       	ldd	r31, Y+4	; 0x04
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	98 87       	std	Y+8, r25	; 0x08
     cc6:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	2b 85       	ldd	r18, Y+11	; 0x0b
     cce:	3c 85       	ldd	r19, Y+12	; 0x0c
     cd0:	b9 01       	movw	r22, r18
     cd2:	0e 94 1c 08 	call	0x1038	; 0x1038 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     cd6:	2f 81       	ldd	r18, Y+7	; 0x07
     cd8:	38 85       	ldd	r19, Y+8	; 0x08
     cda:	8b 85       	ldd	r24, Y+11	; 0x0b
     cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cde:	28 2b       	or	r18, r24
     ce0:	39 2b       	or	r19, r25
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	28 23       	and	r18, r24
     ce8:	39 23       	and	r19, r25
     cea:	8d 85       	ldd	r24, Y+13	; 0x0d
     cec:	9e 85       	ldd	r25, Y+14	; 0x0e
     cee:	28 17       	cp	r18, r24
     cf0:	39 07       	cpc	r19, r25
     cf2:	c9 f4       	brne	.+50     	; 0xd26 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     cf4:	2f 81       	ldd	r18, Y+7	; 0x07
     cf6:	38 85       	ldd	r19, Y+8	; 0x08
     cf8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cfa:	9c 85       	ldd	r25, Y+12	; 0x0c
     cfc:	82 2b       	or	r24, r18
     cfe:	93 2b       	or	r25, r19
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     d04:	eb 81       	ldd	r30, Y+3	; 0x03
     d06:	fc 81       	ldd	r31, Y+4	; 0x04
     d08:	20 81       	ld	r18, Z
     d0a:	31 81       	ldd	r19, Z+1	; 0x01
     d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d10:	80 95       	com	r24
     d12:	90 95       	com	r25
     d14:	82 23       	and	r24, r18
     d16:	93 23       	and	r25, r19
     d18:	eb 81       	ldd	r30, Y+3	; 0x03
     d1a:	fc 81       	ldd	r31, Y+4	; 0x04
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24

			xTicksToWait = 0;
     d20:	18 8a       	std	Y+16, r1	; 0x10
     d22:	1f 86       	std	Y+15, r1	; 0x0f
     d24:	1e c0       	rjmp	.+60     	; 0xd62 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     d26:	8f 85       	ldd	r24, Y+15	; 0x0f
     d28:	98 89       	ldd	r25, Y+16	; 0x10
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	91 f0       	breq	.+36     	; 0xd52 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	bc 01       	movw	r22, r24
     d34:	6e 5f       	subi	r22, 0xFE	; 254
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3c:	9c 01       	movw	r18, r24
     d3e:	35 60       	ori	r19, 0x05	; 5
     d40:	4f 85       	ldd	r20, Y+15	; 0x0f
     d42:	58 89       	ldd	r21, Y+16	; 0x10
     d44:	cb 01       	movw	r24, r22
     d46:	b9 01       	movw	r22, r18
     d48:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     d4c:	1e 82       	std	Y+6, r1	; 0x06
     d4e:	1d 82       	std	Y+5, r1	; 0x05
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     d52:	eb 81       	ldd	r30, Y+3	; 0x03
     d54:	fc 81       	ldd	r31, Y+4	; 0x04
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     d62:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
     d66:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
     d68:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6a:	98 89       	ldd	r25, Y+16	; 0x10
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	09 f4       	brne	.+2      	; 0xd72 <xEventGroupSync+0xe8>
     d70:	3a c0       	rjmp	.+116    	; 0xde6 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	88 23       	and	r24, r24
     d76:	11 f4       	brne	.+4      	; 0xd7c <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
     d78:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     d7c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <uxTaskResetEventItemValue>
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	80 70       	andi	r24, 0x00	; 0
     d8a:	92 70       	andi	r25, 0x02	; 2
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	31 f5       	brne	.+76     	; 0xddc <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     d96:	eb 81       	ldd	r30, Y+3	; 0x03
     d98:	fc 81       	ldd	r31, Y+4	; 0x04
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	8d 85       	ldd	r24, Y+13	; 0x0d
     da8:	9e 85       	ldd	r25, Y+14	; 0x0e
     daa:	28 23       	and	r18, r24
     dac:	39 23       	and	r19, r25
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	71 f4       	brne	.+28     	; 0xdd4 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     db8:	eb 81       	ldd	r30, Y+3	; 0x03
     dba:	fc 81       	ldd	r31, Y+4	; 0x04
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc4:	80 95       	com	r24
     dc6:	90 95       	com	r25
     dc8:	82 23       	and	r24, r18
     dca:	93 23       	and	r25, r19
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
}
     dea:	60 96       	adiw	r28, 0x10	; 16
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	63 97       	sbiw	r28, 0x13	; 19
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	9d 87       	std	Y+13, r25	; 0x0d
     e16:	8c 87       	std	Y+12, r24	; 0x0c
     e18:	7f 87       	std	Y+15, r23	; 0x0f
     e1a:	6e 87       	std	Y+14, r22	; 0x0e
     e1c:	48 8b       	std	Y+16, r20	; 0x10
     e1e:	29 8b       	std	Y+17, r18	; 0x11
     e20:	1b 8b       	std	Y+19, r17	; 0x13
     e22:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
     e24:	8c 85       	ldd	r24, Y+12	; 0x0c
     e26:	9d 85       	ldd	r25, Y+13	; 0x0d
     e28:	9b 87       	std	Y+11, r25	; 0x0b
     e2a:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
     e2c:	1f 82       	std	Y+7, r1	; 0x07
     e2e:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     e30:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     e32:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     e36:	ea 85       	ldd	r30, Y+10	; 0x0a
     e38:	fb 85       	ldd	r31, Y+11	; 0x0b
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	2e 85       	ldd	r18, Y+14	; 0x0e
     e48:	3f 85       	ldd	r19, Y+15	; 0x0f
     e4a:	b9 01       	movw	r22, r18
     e4c:	49 89       	ldd	r20, Y+17	; 0x11
     e4e:	0e 94 39 09 	call	0x1272	; 0x1272 <prvTestWaitCondition>
     e52:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	88 23       	and	r24, r24
     e58:	c1 f0       	breq	.+48     	; 0xe8a <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	99 87       	std	Y+9, r25	; 0x09
     e60:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
     e62:	1b 8a       	std	Y+19, r1	; 0x13
     e64:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     e66:	88 89       	ldd	r24, Y+16	; 0x10
     e68:	88 23       	and	r24, r24
     e6a:	e9 f1       	breq	.+122    	; 0xee6 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     e6c:	ea 85       	ldd	r30, Y+10	; 0x0a
     e6e:	fb 85       	ldd	r31, Y+11	; 0x0b
     e70:	20 81       	ld	r18, Z
     e72:	31 81       	ldd	r19, Z+1	; 0x01
     e74:	8e 85       	ldd	r24, Y+14	; 0x0e
     e76:	9f 85       	ldd	r25, Y+15	; 0x0f
     e78:	80 95       	com	r24
     e7a:	90 95       	com	r25
     e7c:	82 23       	and	r24, r18
     e7e:	93 23       	and	r25, r19
     e80:	ea 85       	ldd	r30, Y+10	; 0x0a
     e82:	fb 85       	ldd	r31, Y+11	; 0x0b
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
     e88:	2e c0       	rjmp	.+92     	; 0xee6 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     e8a:	8a 89       	ldd	r24, Y+18	; 0x12
     e8c:	9b 89       	ldd	r25, Y+19	; 0x13
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	39 f4       	brne	.+14     	; 0xea0 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	99 87       	std	Y+9, r25	; 0x09
     e98:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	23 c0       	rjmp	.+70     	; 0xee6 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     ea0:	88 89       	ldd	r24, Y+16	; 0x10
     ea2:	88 23       	and	r24, r24
     ea4:	29 f0       	breq	.+10     	; 0xeb0 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	9f 81       	ldd	r25, Y+7	; 0x07
     eaa:	91 60       	ori	r25, 0x01	; 1
     eac:	9f 83       	std	Y+7, r25	; 0x07
     eae:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     eb0:	89 89       	ldd	r24, Y+17	; 0x11
     eb2:	88 23       	and	r24, r24
     eb4:	29 f0       	breq	.+10     	; 0xec0 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	9f 81       	ldd	r25, Y+7	; 0x07
     eba:	94 60       	ori	r25, 0x04	; 4
     ebc:	9f 83       	std	Y+7, r25	; 0x07
     ebe:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ec4:	bc 01       	movw	r22, r24
     ec6:	6e 5f       	subi	r22, 0xFE	; 254
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	2e 85       	ldd	r18, Y+14	; 0x0e
     ecc:	3f 85       	ldd	r19, Y+15	; 0x0f
     ece:	8e 81       	ldd	r24, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	28 2b       	or	r18, r24
     ed4:	39 2b       	or	r19, r25
     ed6:	4a 89       	ldd	r20, Y+18	; 0x12
     ed8:	5b 89       	ldd	r21, Y+19	; 0x13
     eda:	cb 01       	movw	r24, r22
     edc:	b9 01       	movw	r22, r18
     ede:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     ee2:	19 86       	std	Y+9, r1	; 0x09
     ee4:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     ee6:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
     eea:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
     eec:	8a 89       	ldd	r24, Y+18	; 0x12
     eee:	9b 89       	ldd	r25, Y+19	; 0x13
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	09 f4       	brne	.+2      	; 0xef6 <xEventGroupWaitBits+0xfa>
     ef4:	3c c0       	rjmp	.+120    	; 0xf6e <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	88 23       	and	r24, r24
     efa:	11 f4       	brne	.+4      	; 0xf00 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
     efc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     f00:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <uxTaskResetEventItemValue>
     f04:	99 87       	std	Y+9, r25	; 0x09
     f06:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     f08:	88 85       	ldd	r24, Y+8	; 0x08
     f0a:	99 85       	ldd	r25, Y+9	; 0x09
     f0c:	80 70       	andi	r24, 0x00	; 0
     f0e:	92 70       	andi	r25, 0x02	; 2
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	41 f5       	brne	.+80     	; 0xf64 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     f1a:	ea 85       	ldd	r30, Y+10	; 0x0a
     f1c:	fb 85       	ldd	r31, Y+11	; 0x0b
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	99 87       	std	Y+9, r25	; 0x09
     f24:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     f26:	88 85       	ldd	r24, Y+8	; 0x08
     f28:	99 85       	ldd	r25, Y+9	; 0x09
     f2a:	2e 85       	ldd	r18, Y+14	; 0x0e
     f2c:	3f 85       	ldd	r19, Y+15	; 0x0f
     f2e:	b9 01       	movw	r22, r18
     f30:	49 89       	ldd	r20, Y+17	; 0x11
     f32:	0e 94 39 09 	call	0x1272	; 0x1272 <prvTestWaitCondition>
     f36:	88 23       	and	r24, r24
     f38:	89 f0       	breq	.+34     	; 0xf5c <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
     f3a:	88 89       	ldd	r24, Y+16	; 0x10
     f3c:	88 23       	and	r24, r24
     f3e:	71 f0       	breq	.+28     	; 0xf5c <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     f40:	ea 85       	ldd	r30, Y+10	; 0x0a
     f42:	fb 85       	ldd	r31, Y+11	; 0x0b
     f44:	20 81       	ld	r18, Z
     f46:	31 81       	ldd	r19, Z+1	; 0x01
     f48:	8e 85       	ldd	r24, Y+14	; 0x0e
     f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4c:	80 95       	com	r24
     f4e:	90 95       	com	r25
     f50:	82 23       	and	r24, r18
     f52:	93 23       	and	r25, r19
     f54:	ea 85       	ldd	r30, Y+10	; 0x0a
     f56:	fb 85       	ldd	r31, Y+11	; 0x0b
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     f64:	88 85       	ldd	r24, Y+8	; 0x08
     f66:	99 85       	ldd	r25, Y+9	; 0x09
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	99 87       	std	Y+9, r25	; 0x09
     f6c:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
     f6e:	88 85       	ldd	r24, Y+8	; 0x08
     f70:	99 85       	ldd	r25, Y+9	; 0x09
}
     f72:	63 96       	adiw	r28, 0x13	; 19
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	28 97       	sbiw	r28, 0x08	; 8
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	78 87       	std	Y+8, r23	; 0x08
     fa2:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	9c 83       	std	Y+4, r25	; 0x04
     faa:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     fb2:	eb 81       	ldd	r30, Y+3	; 0x03
     fb4:	fc 81       	ldd	r31, Y+4	; 0x04
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	20 81       	ld	r18, Z
     fc4:	31 81       	ldd	r19, Z+1	; 0x01
     fc6:	8f 81       	ldd	r24, Y+7	; 0x07
     fc8:	98 85       	ldd	r25, Y+8	; 0x08
     fca:	80 95       	com	r24
     fcc:	90 95       	com	r25
     fce:	82 23       	and	r24, r18
     fd0:	93 23       	and	r25, r19
     fd2:	eb 81       	ldd	r30, Y+3	; 0x03
     fd4:	fc 81       	ldd	r31, Y+4	; 0x04
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fe2:	28 96       	adiw	r28, 0x08	; 8
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	27 97       	sbiw	r28, 0x07	; 7
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	9f 83       	std	Y+7, r25	; 0x07
    100a:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	9f 81       	ldd	r25, Y+7	; 0x07
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1014:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    1016:	eb 81       	ldd	r30, Y+3	; 0x03
    1018:	fc 81       	ldd	r31, Y+4	; 0x04
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1026:	27 96       	adiw	r28, 0x07	; 7
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	65 97       	sbiw	r28, 0x15	; 21
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	9b 8b       	std	Y+19, r25	; 0x13
    104e:	8a 8b       	std	Y+18, r24	; 0x12
    1050:	7d 8b       	std	Y+21, r23	; 0x15
    1052:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1054:	19 86       	std	Y+9, r1	; 0x09
    1056:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    1058:	8a 89       	ldd	r24, Y+18	; 0x12
    105a:	9b 89       	ldd	r25, Y+19	; 0x13
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    1060:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	02 96       	adiw	r24, 0x02	; 2
    1068:	9b 87       	std	Y+11, r25	; 0x0b
    106a:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    106c:	8a 85       	ldd	r24, Y+10	; 0x0a
    106e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1070:	03 96       	adiw	r24, 0x03	; 3
    1072:	9d 87       	std	Y+13, r25	; 0x0d
    1074:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1076:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    107a:	ea 85       	ldd	r30, Y+10	; 0x0a
    107c:	fb 85       	ldd	r31, Y+11	; 0x0b
    107e:	85 81       	ldd	r24, Z+5	; 0x05
    1080:	96 81       	ldd	r25, Z+6	; 0x06
    1082:	99 8b       	std	Y+17, r25	; 0x11
    1084:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1086:	ea 81       	ldd	r30, Y+2	; 0x02
    1088:	fb 81       	ldd	r31, Y+3	; 0x03
    108a:	20 81       	ld	r18, Z
    108c:	31 81       	ldd	r19, Z+1	; 0x01
    108e:	8c 89       	ldd	r24, Y+20	; 0x14
    1090:	9d 89       	ldd	r25, Y+21	; 0x15
    1092:	82 2b       	or	r24, r18
    1094:	93 2b       	or	r25, r19
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
    109e:	59 c0       	rjmp	.+178    	; 0x1152 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    10a0:	e8 89       	ldd	r30, Y+16	; 0x10
    10a2:	f9 89       	ldd	r31, Y+17	; 0x11
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	9f 87       	std	Y+15, r25	; 0x0f
    10aa:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10ac:	e8 89       	ldd	r30, Y+16	; 0x10
    10ae:	f9 89       	ldd	r31, Y+17	; 0x11
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	9f 83       	std	Y+7, r25	; 0x07
    10b6:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    10b8:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	80 70       	andi	r24, 0x00	; 0
    10c0:	9d 83       	std	Y+5, r25	; 0x05
    10c2:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	9f 81       	ldd	r25, Y+7	; 0x07
    10c8:	90 70       	andi	r25, 0x00	; 0
    10ca:	9f 83       	std	Y+7, r25	; 0x07
    10cc:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	80 70       	andi	r24, 0x00	; 0
    10d4:	94 70       	andi	r25, 0x04	; 4
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f4       	brne	.+26     	; 0x10f4 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    10da:	ea 81       	ldd	r30, Y+2	; 0x02
    10dc:	fb 81       	ldd	r31, Y+3	; 0x03
    10de:	20 81       	ld	r18, Z
    10e0:	31 81       	ldd	r19, Z+1	; 0x01
    10e2:	8e 81       	ldd	r24, Y+6	; 0x06
    10e4:	9f 81       	ldd	r25, Y+7	; 0x07
    10e6:	82 23       	and	r24, r18
    10e8:	93 23       	and	r25, r19
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	91 f0       	breq	.+36     	; 0x1112 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    10f4:	ea 81       	ldd	r30, Y+2	; 0x02
    10f6:	fb 81       	ldd	r31, Y+3	; 0x03
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	28 23       	and	r18, r24
    1102:	39 23       	and	r19, r25
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	9f 81       	ldd	r25, Y+7	; 0x07
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	11 f4       	brne	.+4      	; 0x1112 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	88 23       	and	r24, r24
    1116:	c9 f0       	breq	.+50     	; 0x114a <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	80 70       	andi	r24, 0x00	; 0
    111e:	91 70       	andi	r25, 0x01	; 1
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	41 f0       	breq	.+16     	; 0x1134 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1124:	88 85       	ldd	r24, Y+8	; 0x08
    1126:	99 85       	ldd	r25, Y+9	; 0x09
    1128:	2e 81       	ldd	r18, Y+6	; 0x06
    112a:	3f 81       	ldd	r19, Y+7	; 0x07
    112c:	82 2b       	or	r24, r18
    112e:	93 2b       	or	r25, r19
    1130:	99 87       	std	Y+9, r25	; 0x09
    1132:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	9c 01       	movw	r18, r24
    113e:	32 60       	ori	r19, 0x02	; 2
    1140:	88 89       	ldd	r24, Y+16	; 0x10
    1142:	99 89       	ldd	r25, Y+17	; 0x11
    1144:	b9 01       	movw	r22, r18
    1146:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    114a:	8e 85       	ldd	r24, Y+14	; 0x0e
    114c:	9f 85       	ldd	r25, Y+15	; 0x0f
    114e:	99 8b       	std	Y+17, r25	; 0x11
    1150:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    1152:	28 89       	ldd	r18, Y+16	; 0x10
    1154:	39 89       	ldd	r19, Y+17	; 0x11
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
    1158:	9d 85       	ldd	r25, Y+13	; 0x0d
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	09 f0       	breq	.+2      	; 0x1162 <xEventGroupSetBits+0x12a>
    1160:	9f cf       	rjmp	.-194    	; 0x10a0 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1162:	ea 81       	ldd	r30, Y+2	; 0x02
    1164:	fb 81       	ldd	r31, Y+3	; 0x03
    1166:	20 81       	ld	r18, Z
    1168:	31 81       	ldd	r19, Z+1	; 0x01
    116a:	88 85       	ldd	r24, Y+8	; 0x08
    116c:	99 85       	ldd	r25, Y+9	; 0x09
    116e:	80 95       	com	r24
    1170:	90 95       	com	r25
    1172:	82 23       	and	r24, r18
    1174:	93 23       	and	r25, r19
    1176:	ea 81       	ldd	r30, Y+2	; 0x02
    1178:	fb 81       	ldd	r31, Y+3	; 0x03
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    117e:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1182:	ea 81       	ldd	r30, Y+2	; 0x02
    1184:	fb 81       	ldd	r31, Y+3	; 0x03
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
}
    118a:	65 96       	adiw	r28, 0x15	; 21
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <vEventGroupDelete+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <vEventGroupDelete+0x8>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <vEventGroupDelete+0xa>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	02 96       	adiw	r24, 0x02	; 2
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    11c0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	85 81       	ldd	r24, Z+5	; 0x05
    11cc:	96 81       	ldd	r25, Z+6	; 0x06
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	72 e0       	ldi	r23, 0x02	; 2
    11d2:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	80 81       	ld	r24, Z
    11dc:	88 23       	and	r24, r24
    11de:	99 f7       	brne	.-26     	; 0x11c6 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	0e 94 c1 09 	call	0x1382	; 0x1382 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    11e8:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
}
    11ec:	26 96       	adiw	r28, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <vEventGroupSetBitsCallback+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <vEventGroupSetBitsCallback+0x8>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <vEventGroupSetBitsCallback+0xa>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	4b 83       	std	Y+3, r20	; 0x03
    1212:	5c 83       	std	Y+4, r21	; 0x04
    1214:	6d 83       	std	Y+5, r22	; 0x05
    1216:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	b9 01       	movw	r22, r18
    1222:	0e 94 1c 08 	call	0x1038	; 0x1038 <xEventGroupSetBits>
}
    1226:	26 96       	adiw	r28, 0x06	; 6
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <vEventGroupClearBitsCallback+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <vEventGroupClearBitsCallback+0x8>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <vEventGroupClearBitsCallback+0xa>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	4b 83       	std	Y+3, r20	; 0x03
    124c:	5c 83       	std	Y+4, r21	; 0x04
    124e:	6d 83       	std	Y+5, r22	; 0x05
    1250:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	b9 01       	movw	r22, r18
    125c:	0e 94 c4 07 	call	0xf88	; 0xf88 <xEventGroupClearBits>
}
    1260:	26 96       	adiw	r28, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <prvTestWaitCondition+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <prvTestWaitCondition+0x8>
    127a:	00 d0       	rcall	.+0      	; 0x127c <prvTestWaitCondition+0xa>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	9b 83       	std	Y+3, r25	; 0x03
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	7d 83       	std	Y+5, r23	; 0x05
    1286:	6c 83       	std	Y+4, r22	; 0x04
    1288:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    128a:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	88 23       	and	r24, r24
    1290:	59 f4       	brne	.+22     	; 0x12a8 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	82 23       	and	r24, r18
    129c:	93 23       	and	r25, r19
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    12a8:	2a 81       	ldd	r18, Y+2	; 0x02
    12aa:	3b 81       	ldd	r19, Y+3	; 0x03
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	28 23       	and	r18, r24
    12b2:	39 23       	and	r19, r25
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c4:	26 96       	adiw	r28, 0x06	; 6
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <pvPortMalloc+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <pvPortMalloc+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    12ea:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    12ee:	80 91 82 00 	lds	r24, 0x0082
    12f2:	90 91 83 00 	lds	r25, 0x0083
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	31 f4       	brne	.+12     	; 0x1306 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    12fa:	85 e8       	ldi	r24, 0x85	; 133
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	90 93 83 00 	sts	0x0083, r25
    1302:	80 93 82 00 	sts	0x0082, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1306:	80 91 80 00 	lds	r24, 0x0080
    130a:	90 91 81 00 	lds	r25, 0x0081
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	23 e0       	ldi	r18, 0x03	; 3
    1318:	87 3e       	cpi	r24, 0xE7	; 231
    131a:	92 07       	cpc	r25, r18
    131c:	38 f5       	brcc	.+78     	; 0x136c <pvPortMalloc+0x96>
    131e:	20 91 80 00 	lds	r18, 0x0080
    1322:	30 91 81 00 	lds	r19, 0x0081
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	28 0f       	add	r18, r24
    132c:	39 1f       	adc	r19, r25
    132e:	80 91 80 00 	lds	r24, 0x0080
    1332:	90 91 81 00 	lds	r25, 0x0081
    1336:	82 17       	cp	r24, r18
    1338:	93 07       	cpc	r25, r19
    133a:	c0 f4       	brcc	.+48     	; 0x136c <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    133c:	20 91 82 00 	lds	r18, 0x0082
    1340:	30 91 83 00 	lds	r19, 0x0083
    1344:	80 91 80 00 	lds	r24, 0x0080
    1348:	90 91 81 00 	lds	r25, 0x0081
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1354:	20 91 80 00 	lds	r18, 0x0080
    1358:	30 91 81 00 	lds	r19, 0x0081
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	90 93 81 00 	sts	0x0081, r25
    1368:	80 93 80 00 	sts	0x0080, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    136c:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <vPortFree+0x6>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    13a2:	10 92 81 00 	sts	0x0081, r1
    13a6:	10 92 80 00 	sts	0x0080, r1
}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    13b8:	20 91 80 00 	lds	r18, 0x0080
    13bc:	30 91 81 00 	lds	r19, 0x0081
    13c0:	87 ee       	ldi	r24, 0xE7	; 231
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	82 1b       	sub	r24, r18
    13c6:	93 0b       	sbc	r25, r19
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <vListInitialise+0x6>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	03 96       	adiw	r24, 0x03	; 3
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	92 83       	std	Z+2, r25	; 0x02
    13e8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	94 83       	std	Z+4, r25	; 0x04
    13f4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	03 96       	adiw	r24, 0x03	; 3
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	96 83       	std	Z+6, r25	; 0x06
    1402:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	03 96       	adiw	r24, 0x03	; 3
    140a:	e9 81       	ldd	r30, Y+1	; 0x01
    140c:	fa 81       	ldd	r31, Y+2	; 0x02
    140e:	90 87       	std	Z+8, r25	; 0x08
    1410:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <vListInitialiseItem+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	11 86       	std	Z+9, r1	; 0x09
    1436:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <vListInsertEnd+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <vListInsertEnd+0x8>
    144a:	00 d0       	rcall	.+0      	; 0x144c <vListInsertEnd+0xa>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	7e 83       	std	Y+6, r23	; 0x06
    1456:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1458:	eb 81       	ldd	r30, Y+3	; 0x03
    145a:	fc 81       	ldd	r31, Y+4	; 0x04
    145c:	81 81       	ldd	r24, Z+1	; 0x01
    145e:	92 81       	ldd	r25, Z+2	; 0x02
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1464:	ed 81       	ldd	r30, Y+5	; 0x05
    1466:	fe 81       	ldd	r31, Y+6	; 0x06
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	93 83       	std	Z+3, r25	; 0x03
    146e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1470:	e9 81       	ldd	r30, Y+1	; 0x01
    1472:	fa 81       	ldd	r31, Y+2	; 0x02
    1474:	84 81       	ldd	r24, Z+4	; 0x04
    1476:	95 81       	ldd	r25, Z+5	; 0x05
    1478:	ed 81       	ldd	r30, Y+5	; 0x05
    147a:	fe 81       	ldd	r31, Y+6	; 0x06
    147c:	95 83       	std	Z+5, r25	; 0x05
    147e:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	04 80       	ldd	r0, Z+4	; 0x04
    1486:	f5 81       	ldd	r31, Z+5	; 0x05
    1488:	e0 2d       	mov	r30, r0
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	93 83       	std	Z+3, r25	; 0x03
    1490:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	95 83       	std	Z+5, r25	; 0x05
    149c:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    149e:	ed 81       	ldd	r30, Y+5	; 0x05
    14a0:	fe 81       	ldd	r31, Y+6	; 0x06
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	91 87       	std	Z+9, r25	; 0x09
    14a8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	eb 81       	ldd	r30, Y+3	; 0x03
    14b4:	fc 81       	ldd	r31, Y+4	; 0x04
    14b6:	80 83       	st	Z, r24
}
    14b8:	26 96       	adiw	r28, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	28 97       	sbiw	r28, 0x08	; 8
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	78 87       	std	Y+8, r23	; 0x08
    14e4:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    14e6:	ef 81       	ldd	r30, Y+7	; 0x07
    14e8:	f8 85       	ldd	r31, Y+8	; 0x08
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	2f ef       	ldi	r18, 0xFF	; 255
    14f8:	8f 3f       	cpi	r24, 0xFF	; 255
    14fa:	92 07       	cpc	r25, r18
    14fc:	39 f4       	brne	.+14     	; 0x150c <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    14fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1500:	fe 81       	ldd	r31, Y+6	; 0x06
    1502:	87 81       	ldd	r24, Z+7	; 0x07
    1504:	90 85       	ldd	r25, Z+8	; 0x08
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	18 c0       	rjmp	.+48     	; 0x153c <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	03 96       	adiw	r24, 0x03	; 3
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <vListInsert+0x5a>
    1518:	eb 81       	ldd	r30, Y+3	; 0x03
    151a:	fc 81       	ldd	r31, Y+4	; 0x04
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	02 80       	ldd	r0, Z+2	; 0x02
    152a:	f3 81       	ldd	r31, Z+3	; 0x03
    152c:	e0 2d       	mov	r30, r0
    152e:	20 81       	ld	r18, Z
    1530:	31 81       	ldd	r19, Z+1	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	82 17       	cp	r24, r18
    1538:	93 07       	cpc	r25, r19
    153a:	70 f7       	brcc	.-36     	; 0x1518 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    153c:	eb 81       	ldd	r30, Y+3	; 0x03
    153e:	fc 81       	ldd	r31, Y+4	; 0x04
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	ef 81       	ldd	r30, Y+7	; 0x07
    1546:	f8 85       	ldd	r31, Y+8	; 0x08
    1548:	93 83       	std	Z+3, r25	; 0x03
    154a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    154c:	ef 81       	ldd	r30, Y+7	; 0x07
    154e:	f8 85       	ldd	r31, Y+8	; 0x08
    1550:	02 80       	ldd	r0, Z+2	; 0x02
    1552:	f3 81       	ldd	r31, Z+3	; 0x03
    1554:	e0 2d       	mov	r30, r0
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	95 83       	std	Z+5, r25	; 0x05
    155c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    155e:	ef 81       	ldd	r30, Y+7	; 0x07
    1560:	f8 85       	ldd	r31, Y+8	; 0x08
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	95 83       	std	Z+5, r25	; 0x05
    1568:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	8f 81       	ldd	r24, Y+7	; 0x07
    1570:	98 85       	ldd	r25, Y+8	; 0x08
    1572:	93 83       	std	Z+3, r25	; 0x03
    1574:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    1576:	ef 81       	ldd	r30, Y+7	; 0x07
    1578:	f8 85       	ldd	r31, Y+8	; 0x08
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	91 87       	std	Z+9, r25	; 0x09
    1580:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1582:	ed 81       	ldd	r30, Y+5	; 0x05
    1584:	fe 81       	ldd	r31, Y+6	; 0x06
    1586:	80 81       	ld	r24, Z
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	ed 81       	ldd	r30, Y+5	; 0x05
    158c:	fe 81       	ldd	r31, Y+6	; 0x06
    158e:	80 83       	st	Z, r24
}
    1590:	28 96       	adiw	r28, 0x08	; 8
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <uxListRemove+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <uxListRemove+0x8>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    15b2:	eb 81       	ldd	r30, Y+3	; 0x03
    15b4:	fc 81       	ldd	r31, Y+4	; 0x04
    15b6:	80 85       	ldd	r24, Z+8	; 0x08
    15b8:	91 85       	ldd	r25, Z+9	; 0x09
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    15be:	eb 81       	ldd	r30, Y+3	; 0x03
    15c0:	fc 81       	ldd	r31, Y+4	; 0x04
    15c2:	a2 81       	ldd	r26, Z+2	; 0x02
    15c4:	b3 81       	ldd	r27, Z+3	; 0x03
    15c6:	eb 81       	ldd	r30, Y+3	; 0x03
    15c8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ca:	84 81       	ldd	r24, Z+4	; 0x04
    15cc:	95 81       	ldd	r25, Z+5	; 0x05
    15ce:	15 96       	adiw	r26, 0x05	; 5
    15d0:	9c 93       	st	X, r25
    15d2:	8e 93       	st	-X, r24
    15d4:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    15d6:	eb 81       	ldd	r30, Y+3	; 0x03
    15d8:	fc 81       	ldd	r31, Y+4	; 0x04
    15da:	a4 81       	ldd	r26, Z+4	; 0x04
    15dc:	b5 81       	ldd	r27, Z+5	; 0x05
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	9c 93       	st	X, r25
    15ea:	8e 93       	st	-X, r24
    15ec:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    15ee:	e9 81       	ldd	r30, Y+1	; 0x01
    15f0:	fa 81       	ldd	r31, Y+2	; 0x02
    15f2:	21 81       	ldd	r18, Z+1	; 0x01
    15f4:	32 81       	ldd	r19, Z+2	; 0x02
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	28 17       	cp	r18, r24
    15fc:	39 07       	cpc	r19, r25
    15fe:	41 f4       	brne	.+16     	; 0x1610 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	84 81       	ldd	r24, Z+4	; 0x04
    1606:	95 81       	ldd	r25, Z+5	; 0x05
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	92 83       	std	Z+2, r25	; 0x02
    160e:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	11 86       	std	Z+9, r1	; 0x09
    1616:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	80 81       	ld	r24, Z
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1626:	e9 81       	ldd	r30, Y+1	; 0x01
    1628:	fa 81       	ldd	r31, Y+2	; 0x02
    162a:	80 81       	ld	r24, Z
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	28 97       	sbiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	7e 83       	std	Y+6, r23	; 0x06
    1654:	6d 83       	std	Y+5, r22	; 0x05
    1656:	58 87       	std	Y+8, r21	; 0x08
    1658:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	fc 81       	ldd	r31, Y+4	; 0x04
    165e:	81 e1       	ldi	r24, 0x11	; 17
    1660:	80 83       	st	Z, r24
	pxTopOfStack--;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	82 e2       	ldi	r24, 0x22	; 34
    1672:	80 83       	st	Z, r24
	pxTopOfStack--;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	83 e3       	ldi	r24, 0x33	; 51
    1684:	80 83       	st	Z, r24
	pxTopOfStack--;
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	80 83       	st	Z, r24
	pxTopOfStack--;
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	89 2f       	mov	r24, r25
    16b0:	99 27       	eor	r25, r25
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	10 82       	st	Z, r1
	pxTopOfStack--;
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    16d8:	eb 81       	ldd	r30, Y+3	; 0x03
    16da:	fc 81       	ldd	r31, Y+4	; 0x04
    16dc:	80 e8       	ldi	r24, 0x80	; 128
    16de:	80 83       	st	Z, r24
	pxTopOfStack--;
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    16ea:	eb 81       	ldd	r30, Y+3	; 0x03
    16ec:	fc 81       	ldd	r31, Y+4	; 0x04
    16ee:	10 82       	st	Z, r1
	pxTopOfStack--;
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    16fa:	eb 81       	ldd	r30, Y+3	; 0x03
    16fc:	fc 81       	ldd	r31, Y+4	; 0x04
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	80 83       	st	Z, r24
	pxTopOfStack--;
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9c 83       	std	Y+4, r25	; 0x04
    170a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    170c:	eb 81       	ldd	r30, Y+3	; 0x03
    170e:	fc 81       	ldd	r31, Y+4	; 0x04
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	80 83       	st	Z, r24
	pxTopOfStack--;
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	84 e0       	ldi	r24, 0x04	; 4
    1724:	80 83       	st	Z, r24
	pxTopOfStack--;
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    1730:	eb 81       	ldd	r30, Y+3	; 0x03
    1732:	fc 81       	ldd	r31, Y+4	; 0x04
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	80 83       	st	Z, r24
	pxTopOfStack--;
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    1742:	eb 81       	ldd	r30, Y+3	; 0x03
    1744:	fc 81       	ldd	r31, Y+4	; 0x04
    1746:	86 e0       	ldi	r24, 0x06	; 6
    1748:	80 83       	st	Z, r24
	pxTopOfStack--;
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    1754:	eb 81       	ldd	r30, Y+3	; 0x03
    1756:	fc 81       	ldd	r31, Y+4	; 0x04
    1758:	87 e0       	ldi	r24, 0x07	; 7
    175a:	80 83       	st	Z, r24
	pxTopOfStack--;
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    1766:	eb 81       	ldd	r30, Y+3	; 0x03
    1768:	fc 81       	ldd	r31, Y+4	; 0x04
    176a:	88 e0       	ldi	r24, 0x08	; 8
    176c:	80 83       	st	Z, r24
	pxTopOfStack--;
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    1778:	eb 81       	ldd	r30, Y+3	; 0x03
    177a:	fc 81       	ldd	r31, Y+4	; 0x04
    177c:	89 e0       	ldi	r24, 0x09	; 9
    177e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    178a:	eb 81       	ldd	r30, Y+3	; 0x03
    178c:	fc 81       	ldd	r31, Y+4	; 0x04
    178e:	80 e1       	ldi	r24, 0x10	; 16
    1790:	80 83       	st	Z, r24
	pxTopOfStack--;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    179c:	eb 81       	ldd	r30, Y+3	; 0x03
    179e:	fc 81       	ldd	r31, Y+4	; 0x04
    17a0:	81 e1       	ldi	r24, 0x11	; 17
    17a2:	80 83       	st	Z, r24
	pxTopOfStack--;
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    17ae:	eb 81       	ldd	r30, Y+3	; 0x03
    17b0:	fc 81       	ldd	r31, Y+4	; 0x04
    17b2:	82 e1       	ldi	r24, 0x12	; 18
    17b4:	80 83       	st	Z, r24
	pxTopOfStack--;
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    17c0:	eb 81       	ldd	r30, Y+3	; 0x03
    17c2:	fc 81       	ldd	r31, Y+4	; 0x04
    17c4:	83 e1       	ldi	r24, 0x13	; 19
    17c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	84 e1       	ldi	r24, 0x14	; 20
    17d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    17e4:	eb 81       	ldd	r30, Y+3	; 0x03
    17e6:	fc 81       	ldd	r31, Y+4	; 0x04
    17e8:	85 e1       	ldi	r24, 0x15	; 21
    17ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    17f6:	eb 81       	ldd	r30, Y+3	; 0x03
    17f8:	fc 81       	ldd	r31, Y+4	; 0x04
    17fa:	86 e1       	ldi	r24, 0x16	; 22
    17fc:	80 83       	st	Z, r24
	pxTopOfStack--;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	87 e1       	ldi	r24, 0x17	; 23
    180e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    181a:	eb 81       	ldd	r30, Y+3	; 0x03
    181c:	fc 81       	ldd	r31, Y+4	; 0x04
    181e:	88 e1       	ldi	r24, 0x18	; 24
    1820:	80 83       	st	Z, r24
	pxTopOfStack--;
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	89 e1       	ldi	r24, 0x19	; 25
    1832:	80 83       	st	Z, r24
	pxTopOfStack--;
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9c 83       	std	Y+4, r25	; 0x04
    183c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    183e:	eb 81       	ldd	r30, Y+3	; 0x03
    1840:	fc 81       	ldd	r31, Y+4	; 0x04
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	80 83       	st	Z, r24
	pxTopOfStack--;
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    1850:	eb 81       	ldd	r30, Y+3	; 0x03
    1852:	fc 81       	ldd	r31, Y+4	; 0x04
    1854:	81 e2       	ldi	r24, 0x21	; 33
    1856:	80 83       	st	Z, r24
	pxTopOfStack--;
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    1862:	eb 81       	ldd	r30, Y+3	; 0x03
    1864:	fc 81       	ldd	r31, Y+4	; 0x04
    1866:	82 e2       	ldi	r24, 0x22	; 34
    1868:	80 83       	st	Z, r24
	pxTopOfStack--;
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    1874:	eb 81       	ldd	r30, Y+3	; 0x03
    1876:	fc 81       	ldd	r31, Y+4	; 0x04
    1878:	83 e2       	ldi	r24, 0x23	; 35
    187a:	80 83       	st	Z, r24
	pxTopOfStack--;
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    1886:	8f 81       	ldd	r24, Y+7	; 0x07
    1888:	98 85       	ldd	r25, Y+8	; 0x08
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	eb 81       	ldd	r30, Y+3	; 0x03
    1892:	fc 81       	ldd	r31, Y+4	; 0x04
    1894:	80 83       	st	Z, r24
	pxTopOfStack--;
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	89 2f       	mov	r24, r25
    18a6:	99 27       	eor	r25, r25
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	eb 81       	ldd	r30, Y+3	; 0x03
    18b0:	fc 81       	ldd	r31, Y+4	; 0x04
    18b2:	80 83       	st	Z, r24
	pxTopOfStack--;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    18be:	eb 81       	ldd	r30, Y+3	; 0x03
    18c0:	fc 81       	ldd	r31, Y+4	; 0x04
    18c2:	86 e2       	ldi	r24, 0x26	; 38
    18c4:	80 83       	st	Z, r24
	pxTopOfStack--;
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    18d0:	eb 81       	ldd	r30, Y+3	; 0x03
    18d2:	fc 81       	ldd	r31, Y+4	; 0x04
    18d4:	87 e2       	ldi	r24, 0x27	; 39
    18d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    18e2:	eb 81       	ldd	r30, Y+3	; 0x03
    18e4:	fc 81       	ldd	r31, Y+4	; 0x04
    18e6:	88 e2       	ldi	r24, 0x28	; 40
    18e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    18f4:	eb 81       	ldd	r30, Y+3	; 0x03
    18f6:	fc 81       	ldd	r31, Y+4	; 0x04
    18f8:	89 e2       	ldi	r24, 0x29	; 41
    18fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9c 83       	std	Y+4, r25	; 0x04
    1904:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	80 e3       	ldi	r24, 0x30	; 48
    190c:	80 83       	st	Z, r24
	pxTopOfStack--;
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    1918:	eb 81       	ldd	r30, Y+3	; 0x03
    191a:	fc 81       	ldd	r31, Y+4	; 0x04
    191c:	81 e3       	ldi	r24, 0x31	; 49
    191e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    192e:	28 96       	adiw	r28, 0x08	; 8
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1948:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    194c:	a0 91 6c 04 	lds	r26, 0x046C
    1950:	b0 91 6d 04 	lds	r27, 0x046D
    1954:	cd 91       	ld	r28, X+
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	dd 91       	ld	r29, X+
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	9f 90       	pop	r9
    198a:	8f 90       	pop	r8
    198c:	7f 90       	pop	r7
    198e:	6f 90       	pop	r6
    1990:	5f 90       	pop	r5
    1992:	4f 90       	pop	r4
    1994:	3f 90       	pop	r3
    1996:	2f 90       	pop	r2
    1998:	1f 90       	pop	r1
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    19a0:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	0f 92       	push	r0
    19c0:	1f 92       	push	r1
    19c2:	11 24       	eor	r1, r1
    19c4:	2f 92       	push	r2
    19c6:	3f 92       	push	r3
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
    1a00:	a0 91 6c 04 	lds	r26, 0x046C
    1a04:	b0 91 6d 04 	lds	r27, 0x046D
    1a08:	0d b6       	in	r0, 0x3d	; 61
    1a0a:	0d 92       	st	X+, r0
    1a0c:	0e b6       	in	r0, 0x3e	; 62
    1a0e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1a10:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1a14:	a0 91 6c 04 	lds	r26, 0x046C
    1a18:	b0 91 6d 04 	lds	r27, 0x046D
    1a1c:	cd 91       	ld	r28, X+
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	dd 91       	ld	r29, X+
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	7f 90       	pop	r7
    1a56:	6f 90       	pop	r6
    1a58:	5f 90       	pop	r5
    1a5a:	4f 90       	pop	r4
    1a5c:	3f 90       	pop	r3
    1a5e:	2f 90       	pop	r2
    1a60:	1f 90       	pop	r1
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1a68:	08 95       	ret

00001a6a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	0f 92       	push	r0
    1a72:	1f 92       	push	r1
    1a74:	11 24       	eor	r1, r1
    1a76:	2f 92       	push	r2
    1a78:	3f 92       	push	r3
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	a0 91 6c 04 	lds	r26, 0x046C
    1ab6:	b0 91 6d 04 	lds	r27, 0x046D
    1aba:	0d b6       	in	r0, 0x3d	; 61
    1abc:	0d 92       	st	X+, r0
    1abe:	0e b6       	in	r0, 0x3e	; 62
    1ac0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1ac2:	0e 94 b4 1b 	call	0x3768	; 0x3768 <xTaskIncrementTick>
    1ac6:	88 23       	and	r24, r24
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1aca:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1ace:	a0 91 6c 04 	lds	r26, 0x046C
    1ad2:	b0 91 6d 04 	lds	r27, 0x046D
    1ad6:	cd 91       	ld	r28, X+
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	dd 91       	ld	r29, X+
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	3f 90       	pop	r3
    1b18:	2f 90       	pop	r2
    1b1a:	1f 90       	pop	r1
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1b22:	08 95       	ret

00001b24 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <prvSetupTimerInterrupt+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <prvSetupTimerInterrupt+0x8>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <prvSetupTimerInterrupt+0xa>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1b32:	80 e4       	ldi	r24, 0x40	; 64
    1b34:	9f e1       	ldi	r25, 0x1F	; 31
    1b36:	a0 e0       	ldi	r26, 0x00	; 0
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	ad 83       	std	Y+5, r26	; 0x05
    1b40:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	ad 81       	ldd	r26, Y+5	; 0x05
    1b48:	be 81       	ldd	r27, Y+6	; 0x06
    1b4a:	68 94       	set
    1b4c:	15 f8       	bld	r1, 5
    1b4e:	b6 95       	lsr	r27
    1b50:	a7 95       	ror	r26
    1b52:	97 95       	ror	r25
    1b54:	87 95       	ror	r24
    1b56:	16 94       	lsr	r1
    1b58:	d1 f7       	brne	.-12     	; 0x1b4e <prvSetupTimerInterrupt+0x2a>
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	ad 83       	std	Y+5, r26	; 0x05
    1b60:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	ad 81       	ldd	r26, Y+5	; 0x05
    1b68:	be 81       	ldd	r27, Y+6	; 0x06
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	a1 09       	sbc	r26, r1
    1b6e:	b1 09       	sbc	r27, r1
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	ad 83       	std	Y+5, r26	; 0x05
    1b76:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	ad 81       	ldd	r26, Y+5	; 0x05
    1b82:	be 81       	ldd	r27, Y+6	; 0x06
    1b84:	89 2f       	mov	r24, r25
    1b86:	9a 2f       	mov	r25, r26
    1b88:	ab 2f       	mov	r26, r27
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	ad 83       	std	Y+5, r26	; 0x05
    1b92:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    1b98:	eb e4       	ldi	r30, 0x4B	; 75
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1ba0:	ea e4       	ldi	r30, 0x4A	; 74
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1ba8:	8b e0       	ldi	r24, 0x0B	; 11
    1baa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1bac:	ee e4       	ldi	r30, 0x4E	; 78
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1bb4:	e9 e5       	ldi	r30, 0x59	; 89
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	80 61       	ori	r24, 0x10	; 16
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1bc2:	e9 e5       	ldi	r30, 0x59	; 89
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	80 83       	st	Z, r24
}
    1bca:	26 96       	adiw	r28, 0x06	; 6
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1bdc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <vPortYieldFromTick>
		asm volatile ( "reti" );
    1be0:	18 95       	reti

00001be2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <xQueueGenericReset+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <xQueueGenericReset+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	40 81       	ld	r20, Z
    1c0a:	51 81       	ldd	r21, Z+1	; 0x01
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	bc 01       	movw	r22, r24
    1c22:	26 9f       	mul	r18, r22
    1c24:	c0 01       	movw	r24, r0
    1c26:	27 9f       	mul	r18, r23
    1c28:	90 0d       	add	r25, r0
    1c2a:	36 9f       	mul	r19, r22
    1c2c:	90 0d       	add	r25, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	84 0f       	add	r24, r20
    1c32:	95 1f       	adc	r25, r21
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	95 83       	std	Z+5, r25	; 0x05
    1c3a:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	93 83       	std	Z+3, r25	; 0x03
    1c50:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	40 81       	ld	r20, Z
    1c58:	51 81       	ldd	r21, Z+1	; 0x01
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 01       	movw	r18, r24
    1c66:	21 50       	subi	r18, 0x01	; 1
    1c68:	30 40       	sbci	r19, 0x00	; 0
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	bc 01       	movw	r22, r24
    1c76:	26 9f       	mul	r18, r22
    1c78:	c0 01       	movw	r24, r0
    1c7a:	27 9f       	mul	r18, r23
    1c7c:	90 0d       	add	r25, r0
    1c7e:	36 9f       	mul	r19, r22
    1c80:	90 0d       	add	r25, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	84 0f       	add	r24, r20
    1c86:	95 1f       	adc	r25, r21
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	97 83       	std	Z+7, r25	; 0x07
    1c8e:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	88 23       	and	r24, r24
    1ca4:	79 f4       	brne	.+30     	; 0x1cc4 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	80 85       	ldd	r24, Z+8	; 0x08
    1cac:	88 23       	and	r24, r24
    1cae:	a1 f0       	breq	.+40     	; 0x1cd8 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	08 96       	adiw	r24, 0x08	; 8
    1cb6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    1cba:	88 23       	and	r24, r24
    1cbc:	69 f0       	breq	.+26     	; 0x1cd8 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1cbe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1cc2:	0a c0       	rjmp	.+20     	; 0x1cd8 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	08 96       	adiw	r24, 0x08	; 8
    1cca:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	41 96       	adiw	r24, 0x11	; 17
    1cd4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	29 97       	sbiw	r28, 0x09	; 9
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	68 87       	std	Y+8, r22	; 0x08
    1d0a:	49 87       	std	Y+9, r20	; 0x09
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	88 85       	ldd	r24, Y+8	; 0x08
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	ac 01       	movw	r20, r24
    1d1a:	24 9f       	mul	r18, r20
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	25 9f       	mul	r18, r21
    1d20:	90 0d       	add	r25, r0
    1d22:	34 9f       	mul	r19, r20
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	4f 96       	adiw	r24, 0x1f	; 31
    1d32:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <pvPortMalloc>
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	a1 f0       	breq	.+40     	; 0x1d6a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	4f 96       	adiw	r24, 0x1f	; 31
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    1d54:	29 81       	ldd	r18, Y+1	; 0x01
    1d56:	3a 81       	ldd	r19, Y+2	; 0x02
    1d58:	ed 81       	ldd	r30, Y+5	; 0x05
    1d5a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5e:	68 85       	ldd	r22, Y+8	; 0x08
    1d60:	a9 01       	movw	r20, r18
    1d62:	29 85       	ldd	r18, Y+9	; 0x09
    1d64:	8f 01       	movw	r16, r30
    1d66:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    1d6e:	29 96       	adiw	r28, 0x09	; 9
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	08 95       	ret

00001d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	27 97       	sbiw	r28, 0x07	; 7
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	6a 83       	std	Y+2, r22	; 0x02
    1da0:	5c 83       	std	Y+4, r21	; 0x04
    1da2:	4b 83       	std	Y+3, r20	; 0x03
    1da4:	2d 83       	std	Y+5, r18	; 0x05
    1da6:	1f 83       	std	Y+7, r17	; 0x07
    1da8:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	88 23       	and	r24, r24
    1dae:	39 f4       	brne	.+14     	; 0x1dbe <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	ee 81       	ldd	r30, Y+6	; 0x06
    1db6:	ff 81       	ldd	r31, Y+7	; 0x07
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
    1dbc:	06 c0       	rjmp	.+12     	; 0x1dca <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	ee 81       	ldd	r30, Y+6	; 0x06
    1dc4:	ff 81       	ldd	r31, Y+7	; 0x07
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1dca:	ee 81       	ldd	r30, Y+6	; 0x06
    1dcc:	ff 81       	ldd	r31, Y+7	; 0x07
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1dd2:	ee 81       	ldd	r30, Y+6	; 0x06
    1dd4:	ff 81       	ldd	r31, Y+7	; 0x07
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1dda:	8e 81       	ldd	r24, Y+6	; 0x06
    1ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dde:	61 e0       	ldi	r22, 0x01	; 1
    1de0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    1de4:	27 96       	adiw	r28, 0x07	; 7
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2f 97       	sbiw	r28, 0x0f	; 15
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	99 87       	std	Y+9, r25	; 0x09
    1e10:	88 87       	std	Y+8, r24	; 0x08
    1e12:	7b 87       	std	Y+11, r23	; 0x0b
    1e14:	6a 87       	std	Y+10, r22	; 0x0a
    1e16:	5d 87       	std	Y+13, r21	; 0x0d
    1e18:	4c 87       	std	Y+12, r20	; 0x0c
    1e1a:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1e1c:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    1e1e:	88 85       	ldd	r24, Y+8	; 0x08
    1e20:	99 85       	ldd	r25, Y+9	; 0x09
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e38:	98 17       	cp	r25, r24
    1e3a:	18 f0       	brcs	.+6      	; 0x1e42 <xQueueGenericSend+0x48>
    1e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	11 f5       	brne	.+68     	; 0x1e86 <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e48:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e4e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <prvCopyDataToQueue>
    1e52:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	81 89       	ldd	r24, Z+17	; 0x11
    1e5a:	88 23       	and	r24, r24
    1e5c:	51 f0       	breq	.+20     	; 0x1e72 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	41 96       	adiw	r24, 0x11	; 17
    1e64:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    1e68:	88 23       	and	r24, r24
    1e6a:	41 f0       	breq	.+16     	; 0x1e7c <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1e6c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 23       	and	r24, r24
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1e78:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
    1e84:	5c c0       	rjmp	.+184    	; 0x1f3e <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1e86:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e88:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1e8e:	0f 90       	pop	r0
    1e90:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1e92:	1f 86       	std	Y+15, r1	; 0x0f
    1e94:	54 c0       	rjmp	.+168    	; 0x1f3e <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	88 23       	and	r24, r24
    1e9a:	31 f4       	brne	.+12     	; 0x1ea8 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	05 96       	adiw	r24, 0x05	; 5
    1ea0:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1eac:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	0f 92       	push	r0
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ebe:	19 f4       	brne	.+6      	; 0x1ec6 <xQueueGenericSend+0xcc>
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	15 8e       	std	Z+29, r1	; 0x1d
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ecc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ece:	19 f4       	brne	.+6      	; 0x1ed6 <xQueueGenericSend+0xdc>
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	16 8e       	std	Z+30, r1	; 0x1e
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1eda:	ce 01       	movw	r24, r28
    1edc:	05 96       	adiw	r24, 0x05	; 5
    1ede:	9e 01       	movw	r18, r28
    1ee0:	24 5f       	subi	r18, 0xF4	; 244
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <xTaskCheckForTimeOut>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f5       	brne	.+66     	; 0x1f30 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	0e 94 cf 14 	call	0x299e	; 0x299e <prvIsQueueFull>
    1ef6:	88 23       	and	r24, r24
    1ef8:	a1 f0       	breq	.+40     	; 0x1f22 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	08 96       	adiw	r24, 0x08	; 8
    1f00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f04:	b9 01       	movw	r22, r18
    1f06:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1f12:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    1f16:	88 23       	and	r24, r24
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <xQueueGenericSend+0x122>
    1f1a:	85 cf       	rjmp	.-246    	; 0x1e26 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    1f1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1f20:	82 cf       	rjmp	.-252    	; 0x1e26 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1f2a:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    1f2e:	7b cf       	rjmp	.-266    	; 0x1e26 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1f38:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1f3c:	1f 86       	std	Y+15, r1	; 0x0f
    1f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    1f40:	2f 96       	adiw	r28, 0x0f	; 15
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	2d 97       	sbiw	r28, 0x0d	; 13
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	98 87       	std	Y+8, r25	; 0x08
    1f68:	8f 83       	std	Y+7, r24	; 0x07
    1f6a:	7a 87       	std	Y+10, r23	; 0x0a
    1f6c:	69 87       	std	Y+9, r22	; 0x09
    1f6e:	5c 87       	std	Y+12, r21	; 0x0c
    1f70:	4b 87       	std	Y+11, r20	; 0x0b
    1f72:	2d 87       	std	Y+13, r18	; 0x0d
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    1f74:	8f 81       	ldd	r24, Y+7	; 0x07
    1f76:	98 85       	ldd	r25, Y+8	; 0x08
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1f7c:	1d 82       	std	Y+5, r1	; 0x05
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f80:	fc 81       	ldd	r31, Y+4	; 0x04
    1f82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f84:	eb 81       	ldd	r30, Y+3	; 0x03
    1f86:	fc 81       	ldd	r31, Y+4	; 0x04
    1f88:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f8a:	98 17       	cp	r25, r24
    1f8c:	18 f0       	brcs	.+6      	; 0x1f94 <xQueueGenericSendFromISR+0x42>
    1f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	81 f5       	brne	.+96     	; 0x1ff4 <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    1f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fa2:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	29 85       	ldd	r18, Y+9	; 0x09
    1faa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fac:	b9 01       	movw	r22, r18
    1fae:	4d 85       	ldd	r20, Y+13	; 0x0d
    1fb0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb8:	a9 f4       	brne	.+42     	; 0x1fe4 <xQueueGenericSendFromISR+0x92>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1fba:	eb 81       	ldd	r30, Y+3	; 0x03
    1fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fbe:	81 89       	ldd	r24, Z+17	; 0x11
    1fc0:	88 23       	and	r24, r24
    1fc2:	a9 f0       	breq	.+42     	; 0x1fee <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	41 96       	adiw	r24, 0x11	; 17
    1fca:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    1fce:	88 23       	and	r24, r24
    1fd0:	71 f0       	breq	.+28     	; 0x1fee <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1fd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	51 f0       	breq	.+20     	; 0x1fee <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1fda:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fdc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	80 83       	st	Z, r24
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fea:	fc 81       	ldd	r31, Y+4	; 0x04
    1fec:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8e 83       	std	Y+6, r24	; 0x06
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1ff4:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ff8:	2d 96       	adiw	r28, 0x0d	; 13
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	2a 97       	sbiw	r28, 0x0a	; 10
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	98 87       	std	Y+8, r25	; 0x08
    2020:	8f 83       	std	Y+7, r24	; 0x07
    2022:	7a 87       	std	Y+10, r23	; 0x0a
    2024:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
    2028:	98 85       	ldd	r25, Y+8	; 0x08
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    202e:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2030:	eb 81       	ldd	r30, Y+3	; 0x03
    2032:	fc 81       	ldd	r31, Y+4	; 0x04
    2034:	82 8d       	ldd	r24, Z+26	; 0x1a
    2036:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2038:	eb 81       	ldd	r30, Y+3	; 0x03
    203a:	fc 81       	ldd	r31, Y+4	; 0x04
    203c:	93 8d       	ldd	r25, Z+27	; 0x1b
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	89 17       	cp	r24, r25
    2042:	48 f5       	brcc	.+82     	; 0x2096 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2044:	eb 81       	ldd	r30, Y+3	; 0x03
    2046:	fc 81       	ldd	r31, Y+4	; 0x04
    2048:	86 8d       	ldd	r24, Z+30	; 0x1e
    204a:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	eb 81       	ldd	r30, Y+3	; 0x03
    2052:	fc 81       	ldd	r31, Y+4	; 0x04
    2054:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	8f 3f       	cpi	r24, 0xFF	; 255
    205a:	a9 f4       	brne	.+42     	; 0x2086 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    205c:	eb 81       	ldd	r30, Y+3	; 0x03
    205e:	fc 81       	ldd	r31, Y+4	; 0x04
    2060:	81 89       	ldd	r24, Z+17	; 0x11
    2062:	88 23       	and	r24, r24
    2064:	a9 f0       	breq	.+42     	; 0x2090 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	41 96       	adiw	r24, 0x11	; 17
    206c:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    2070:	88 23       	and	r24, r24
    2072:	71 f0       	breq	.+28     	; 0x2090 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	51 f0       	breq	.+20     	; 0x2090 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    207c:	e9 85       	ldd	r30, Y+9	; 0x09
    207e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	80 83       	st	Z, r24
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	eb 81       	ldd	r30, Y+3	; 0x03
    208c:	fc 81       	ldd	r31, Y+4	; 0x04
    208e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8e 83       	std	Y+6, r24	; 0x06
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2096:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
}
    209a:	2a 96       	adiw	r28, 0x0a	; 10
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	2e 97       	sbiw	r28, 0x0e	; 14
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	99 87       	std	Y+9, r25	; 0x09
    20c2:	88 87       	std	Y+8, r24	; 0x08
    20c4:	7b 87       	std	Y+11, r23	; 0x0b
    20c6:	6a 87       	std	Y+10, r22	; 0x0a
    20c8:	5d 87       	std	Y+13, r21	; 0x0d
    20ca:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    20cc:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    20ce:	88 85       	ldd	r24, Y+8	; 0x08
    20d0:	99 85       	ldd	r25, Y+9	; 0x09
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    20dc:	ea 81       	ldd	r30, Y+2	; 0x02
    20de:	fb 81       	ldd	r31, Y+3	; 0x03
    20e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e2:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	88 23       	and	r24, r24
    20e8:	f9 f0       	breq	.+62     	; 0x2128 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    20f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	81 50       	subi	r24, 0x01	; 1
    20fc:	ea 81       	ldd	r30, Y+2	; 0x02
    20fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2100:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2102:	ea 81       	ldd	r30, Y+2	; 0x02
    2104:	fb 81       	ldd	r31, Y+3	; 0x03
    2106:	80 85       	ldd	r24, Z+8	; 0x08
    2108:	88 23       	and	r24, r24
    210a:	49 f0       	breq	.+18     	; 0x211e <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	9b 81       	ldd	r25, Y+3	; 0x03
    2110:	08 96       	adiw	r24, 0x08	; 8
    2112:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    2116:	88 23       	and	r24, r24
    2118:	11 f0       	breq	.+4      	; 0x211e <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    211a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	8e 87       	std	Y+14, r24	; 0x0e
    2126:	63 c0       	rjmp	.+198    	; 0x21ee <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2128:	8c 85       	ldd	r24, Y+12	; 0x0c
    212a:	9d 85       	ldd	r25, Y+13	; 0x0d
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	21 f4       	brne	.+8      	; 0x2138 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2134:	1e 86       	std	Y+14, r1	; 0x0e
    2136:	5b c0       	rjmp	.+182    	; 0x21ee <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	88 23       	and	r24, r24
    213c:	31 f4       	brne	.+12     	; 0x214a <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    213e:	ce 01       	movw	r24, r28
    2140:	05 96       	adiw	r24, 0x05	; 5
    2142:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    214e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	0f 92       	push	r0
    2158:	ea 81       	ldd	r30, Y+2	; 0x02
    215a:	fb 81       	ldd	r31, Y+3	; 0x03
    215c:	85 8d       	ldd	r24, Z+29	; 0x1d
    215e:	8f 3f       	cpi	r24, 0xFF	; 255
    2160:	19 f4       	brne	.+6      	; 0x2168 <xQueueReceive+0xbc>
    2162:	ea 81       	ldd	r30, Y+2	; 0x02
    2164:	fb 81       	ldd	r31, Y+3	; 0x03
    2166:	15 8e       	std	Z+29, r1	; 0x1d
    2168:	ea 81       	ldd	r30, Y+2	; 0x02
    216a:	fb 81       	ldd	r31, Y+3	; 0x03
    216c:	86 8d       	ldd	r24, Z+30	; 0x1e
    216e:	8f 3f       	cpi	r24, 0xFF	; 255
    2170:	19 f4       	brne	.+6      	; 0x2178 <xQueueReceive+0xcc>
    2172:	ea 81       	ldd	r30, Y+2	; 0x02
    2174:	fb 81       	ldd	r31, Y+3	; 0x03
    2176:	16 8e       	std	Z+30, r1	; 0x1e
    2178:	0f 90       	pop	r0
    217a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    217c:	ce 01       	movw	r24, r28
    217e:	05 96       	adiw	r24, 0x05	; 5
    2180:	9e 01       	movw	r18, r28
    2182:	24 5f       	subi	r18, 0xF4	; 244
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	b9 01       	movw	r22, r18
    2188:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <xTaskCheckForTimeOut>
    218c:	88 23       	and	r24, r24
    218e:	09 f5       	brne	.+66     	; 0x21d2 <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    2198:	88 23       	and	r24, r24
    219a:	a1 f0       	breq	.+40     	; 0x21c4 <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	41 96       	adiw	r24, 0x11	; 17
    21a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    21a6:	b9 01       	movw	r22, r18
    21a8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    21b4:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    21b8:	88 23       	and	r24, r24
    21ba:	09 f0       	breq	.+2      	; 0x21be <xQueueReceive+0x112>
    21bc:	8c cf       	rjmp	.-232    	; 0x20d6 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    21be:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    21c2:	89 cf       	rjmp	.-238    	; 0x20d6 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    21cc:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    21d0:	82 cf       	rjmp	.-252    	; 0x20d6 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    21da:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    21e6:	88 23       	and	r24, r24
    21e8:	09 f4       	brne	.+2      	; 0x21ec <xQueueReceive+0x140>
    21ea:	75 cf       	rjmp	.-278    	; 0x20d6 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    21ec:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    21ee:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    21f0:	2e 96       	adiw	r28, 0x0e	; 14
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	2c 97       	sbiw	r28, 0x0c	; 12
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	99 87       	std	Y+9, r25	; 0x09
    2218:	88 87       	std	Y+8, r24	; 0x08
    221a:	7b 87       	std	Y+11, r23	; 0x0b
    221c:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    221e:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2220:	88 85       	ldd	r24, Y+8	; 0x08
    2222:	99 85       	ldd	r25, Y+9	; 0x09
    2224:	9b 83       	std	Y+3, r25	; 0x03
    2226:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    222e:	ea 81       	ldd	r30, Y+2	; 0x02
    2230:	fb 81       	ldd	r31, Y+3	; 0x03
    2232:	82 8d       	ldd	r24, Z+26	; 0x1a
    2234:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	88 23       	and	r24, r24
    223a:	c1 f0       	breq	.+48     	; 0x226c <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	81 50       	subi	r24, 0x01	; 1
    2240:	ea 81       	ldd	r30, Y+2	; 0x02
    2242:	fb 81       	ldd	r31, Y+3	; 0x03
    2244:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2246:	ea 81       	ldd	r30, Y+2	; 0x02
    2248:	fb 81       	ldd	r31, Y+3	; 0x03
    224a:	80 85       	ldd	r24, Z+8	; 0x08
    224c:	88 23       	and	r24, r24
    224e:	49 f0       	breq	.+18     	; 0x2262 <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	08 96       	adiw	r24, 0x08	; 8
    2256:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    225a:	88 23       	and	r24, r24
    225c:	11 f0       	breq	.+4      	; 0x2262 <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    225e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	8c 87       	std	Y+12, r24	; 0x0c
    226a:	63 c0       	rjmp	.+198    	; 0x2332 <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    226c:	8a 85       	ldd	r24, Y+10	; 0x0a
    226e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	21 f4       	brne	.+8      	; 0x227c <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    2274:	0f 90       	pop	r0
    2276:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2278:	1c 86       	std	Y+12, r1	; 0x0c
    227a:	5b c0       	rjmp	.+182    	; 0x2332 <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	88 23       	and	r24, r24
    2280:	31 f4       	brne	.+12     	; 0x228e <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2282:	ce 01       	movw	r24, r28
    2284:	05 96       	adiw	r24, 0x05	; 5
    2286:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    228e:	0f 90       	pop	r0
    2290:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    2292:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	0f 92       	push	r0
    229c:	ea 81       	ldd	r30, Y+2	; 0x02
    229e:	fb 81       	ldd	r31, Y+3	; 0x03
    22a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    22a2:	8f 3f       	cpi	r24, 0xFF	; 255
    22a4:	19 f4       	brne	.+6      	; 0x22ac <xQueueSemaphoreTake+0xaa>
    22a6:	ea 81       	ldd	r30, Y+2	; 0x02
    22a8:	fb 81       	ldd	r31, Y+3	; 0x03
    22aa:	15 8e       	std	Z+29, r1	; 0x1d
    22ac:	ea 81       	ldd	r30, Y+2	; 0x02
    22ae:	fb 81       	ldd	r31, Y+3	; 0x03
    22b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	19 f4       	brne	.+6      	; 0x22bc <xQueueSemaphoreTake+0xba>
    22b6:	ea 81       	ldd	r30, Y+2	; 0x02
    22b8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ba:	16 8e       	std	Z+30, r1	; 0x1e
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    22c0:	ce 01       	movw	r24, r28
    22c2:	05 96       	adiw	r24, 0x05	; 5
    22c4:	9e 01       	movw	r18, r28
    22c6:	26 5f       	subi	r18, 0xF6	; 246
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	b9 01       	movw	r22, r18
    22cc:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <xTaskCheckForTimeOut>
    22d0:	88 23       	and	r24, r24
    22d2:	09 f5       	brne	.+66     	; 0x2316 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    22dc:	88 23       	and	r24, r24
    22de:	a1 f0       	breq	.+40     	; 0x2308 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	41 96       	adiw	r24, 0x11	; 17
    22e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    22e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    22ea:	b9 01       	movw	r22, r18
    22ec:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	9b 81       	ldd	r25, Y+3	; 0x03
    22f4:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    22f8:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    22fc:	88 23       	and	r24, r24
    22fe:	09 f0       	breq	.+2      	; 0x2302 <xQueueSemaphoreTake+0x100>
    2300:	93 cf       	rjmp	.-218    	; 0x2228 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    2302:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2306:	90 cf       	rjmp	.-224    	; 0x2228 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2310:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    2314:	89 cf       	rjmp	.-238    	; 0x2228 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    231e:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    232a:	88 23       	and	r24, r24
    232c:	09 f4       	brne	.+2      	; 0x2330 <xQueueSemaphoreTake+0x12e>
    232e:	7c cf       	rjmp	.-264    	; 0x2228 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2330:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    2332:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2334:	2c 96       	adiw	r28, 0x0c	; 12
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	60 97       	sbiw	r28, 0x10	; 16
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	9b 87       	std	Y+11, r25	; 0x0b
    235c:	8a 87       	std	Y+10, r24	; 0x0a
    235e:	7d 87       	std	Y+13, r23	; 0x0d
    2360:	6c 87       	std	Y+12, r22	; 0x0c
    2362:	5f 87       	std	Y+15, r21	; 0x0f
    2364:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    2366:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    2368:	8a 85       	ldd	r24, Y+10	; 0x0a
    236a:	9b 85       	ldd	r25, Y+11	; 0x0b
    236c:	9b 83       	std	Y+3, r25	; 0x03
    236e:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2376:	ea 81       	ldd	r30, Y+2	; 0x02
    2378:	fb 81       	ldd	r31, Y+3	; 0x03
    237a:	82 8d       	ldd	r24, Z+26	; 0x1a
    237c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	88 23       	and	r24, r24
    2382:	31 f1       	breq	.+76     	; 0x23d0 <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2384:	ea 81       	ldd	r30, Y+2	; 0x02
    2386:	fb 81       	ldd	r31, Y+3	; 0x03
    2388:	86 81       	ldd	r24, Z+6	; 0x06
    238a:	97 81       	ldd	r25, Z+7	; 0x07
    238c:	9d 83       	std	Y+5, r25	; 0x05
    238e:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	2c 85       	ldd	r18, Y+12	; 0x0c
    2396:	3d 85       	ldd	r19, Y+13	; 0x0d
    2398:	b9 01       	movw	r22, r18
    239a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    239e:	ea 81       	ldd	r30, Y+2	; 0x02
    23a0:	fb 81       	ldd	r31, Y+3	; 0x03
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	97 83       	std	Z+7, r25	; 0x07
    23a8:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23aa:	ea 81       	ldd	r30, Y+2	; 0x02
    23ac:	fb 81       	ldd	r31, Y+3	; 0x03
    23ae:	81 89       	ldd	r24, Z+17	; 0x11
    23b0:	88 23       	and	r24, r24
    23b2:	49 f0       	breq	.+18     	; 0x23c6 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	41 96       	adiw	r24, 0x11	; 17
    23ba:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    23be:	88 23       	and	r24, r24
    23c0:	11 f0       	breq	.+4      	; 0x23c6 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    23c2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	88 8b       	std	Y+16, r24	; 0x10
    23ce:	63 c0       	rjmp	.+198    	; 0x2496 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    23d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	21 f4       	brne	.+8      	; 0x23e0 <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    23dc:	18 8a       	std	Y+16, r1	; 0x10
    23de:	5b c0       	rjmp	.+182    	; 0x2496 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    23e0:	8e 81       	ldd	r24, Y+6	; 0x06
    23e2:	88 23       	and	r24, r24
    23e4:	31 f4       	brne	.+12     	; 0x23f2 <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    23e6:	ce 01       	movw	r24, r28
    23e8:	07 96       	adiw	r24, 0x07	; 7
    23ea:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23f2:	0f 90       	pop	r0
    23f4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23f6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	0f 92       	push	r0
    2400:	ea 81       	ldd	r30, Y+2	; 0x02
    2402:	fb 81       	ldd	r31, Y+3	; 0x03
    2404:	85 8d       	ldd	r24, Z+29	; 0x1d
    2406:	8f 3f       	cpi	r24, 0xFF	; 255
    2408:	19 f4       	brne	.+6      	; 0x2410 <xQueuePeek+0xca>
    240a:	ea 81       	ldd	r30, Y+2	; 0x02
    240c:	fb 81       	ldd	r31, Y+3	; 0x03
    240e:	15 8e       	std	Z+29, r1	; 0x1d
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	86 8d       	ldd	r24, Z+30	; 0x1e
    2416:	8f 3f       	cpi	r24, 0xFF	; 255
    2418:	19 f4       	brne	.+6      	; 0x2420 <xQueuePeek+0xda>
    241a:	ea 81       	ldd	r30, Y+2	; 0x02
    241c:	fb 81       	ldd	r31, Y+3	; 0x03
    241e:	16 8e       	std	Z+30, r1	; 0x1e
    2420:	0f 90       	pop	r0
    2422:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2424:	ce 01       	movw	r24, r28
    2426:	07 96       	adiw	r24, 0x07	; 7
    2428:	9e 01       	movw	r18, r28
    242a:	22 5f       	subi	r18, 0xF2	; 242
    242c:	3f 4f       	sbci	r19, 0xFF	; 255
    242e:	b9 01       	movw	r22, r18
    2430:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <xTaskCheckForTimeOut>
    2434:	88 23       	and	r24, r24
    2436:	09 f5       	brne	.+66     	; 0x247a <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    2440:	88 23       	and	r24, r24
    2442:	a1 f0       	breq	.+40     	; 0x246c <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	41 96       	adiw	r24, 0x11	; 17
    244a:	2e 85       	ldd	r18, Y+14	; 0x0e
    244c:	3f 85       	ldd	r19, Y+15	; 0x0f
    244e:	b9 01       	movw	r22, r18
    2450:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	9b 81       	ldd	r25, Y+3	; 0x03
    2458:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    245c:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    2460:	88 23       	and	r24, r24
    2462:	09 f0       	breq	.+2      	; 0x2466 <xQueuePeek+0x120>
    2464:	85 cf       	rjmp	.-246    	; 0x2370 <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    2466:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    246a:	82 cf       	rjmp	.-252    	; 0x2370 <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2474:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    2478:	7b cf       	rjmp	.-266    	; 0x2370 <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	0e 94 40 14 	call	0x2880	; 0x2880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2482:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	9b 81       	ldd	r25, Y+3	; 0x03
    248a:	0e 94 93 14 	call	0x2926	; 0x2926 <prvIsQueueEmpty>
    248e:	88 23       	and	r24, r24
    2490:	09 f4       	brne	.+2      	; 0x2494 <xQueuePeek+0x14e>
    2492:	6e cf       	rjmp	.-292    	; 0x2370 <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2494:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    2496:	88 89       	ldd	r24, Y+16	; 0x10
}
    2498:	60 96       	adiw	r28, 0x10	; 16
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	2c 97       	sbiw	r28, 0x0c	; 12
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	98 87       	std	Y+8, r25	; 0x08
    24c0:	8f 83       	std	Y+7, r24	; 0x07
    24c2:	7a 87       	std	Y+10, r23	; 0x0a
    24c4:	69 87       	std	Y+9, r22	; 0x09
    24c6:	5c 87       	std	Y+12, r21	; 0x0c
    24c8:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    24ca:	8f 81       	ldd	r24, Y+7	; 0x07
    24cc:	98 85       	ldd	r25, Y+8	; 0x08
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d2:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    24d4:	eb 81       	ldd	r30, Y+3	; 0x03
    24d6:	fc 81       	ldd	r31, Y+4	; 0x04
    24d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24da:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	88 23       	and	r24, r24
    24e0:	81 f1       	breq	.+96     	; 0x2542 <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    24e2:	eb 81       	ldd	r30, Y+3	; 0x03
    24e4:	fc 81       	ldd	r31, Y+4	; 0x04
    24e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    24e8:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	29 85       	ldd	r18, Y+9	; 0x09
    24f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f2:	b9 01       	movw	r22, r18
    24f4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	81 50       	subi	r24, 0x01	; 1
    24fc:	eb 81       	ldd	r30, Y+3	; 0x03
    24fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2500:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	8f 3f       	cpi	r24, 0xFF	; 255
    2506:	a9 f4       	brne	.+42     	; 0x2532 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2508:	eb 81       	ldd	r30, Y+3	; 0x03
    250a:	fc 81       	ldd	r31, Y+4	; 0x04
    250c:	80 85       	ldd	r24, Z+8	; 0x08
    250e:	88 23       	and	r24, r24
    2510:	a9 f0       	breq	.+42     	; 0x253c <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	08 96       	adiw	r24, 0x08	; 8
    2518:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    251c:	88 23       	and	r24, r24
    251e:	71 f0       	breq	.+28     	; 0x253c <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2520:	8b 85       	ldd	r24, Y+11	; 0x0b
    2522:	9c 85       	ldd	r25, Y+12	; 0x0c
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	51 f0       	breq	.+20     	; 0x253c <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2528:	eb 85       	ldd	r30, Y+11	; 0x0b
    252a:	fc 85       	ldd	r31, Y+12	; 0x0c
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 83       	st	Z, r24
    2530:	05 c0       	rjmp	.+10     	; 0x253c <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	eb 81       	ldd	r30, Y+3	; 0x03
    2538:	fc 81       	ldd	r31, Y+4	; 0x04
    253a:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	8e 83       	std	Y+6, r24	; 0x06
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2542:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2546:	2c 96       	adiw	r28, 0x0c	; 12
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	2a 97       	sbiw	r28, 0x0a	; 10
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	98 87       	std	Y+8, r25	; 0x08
    256e:	8f 83       	std	Y+7, r24	; 0x07
    2570:	7a 87       	std	Y+10, r23	; 0x0a
    2572:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    2574:	8f 81       	ldd	r24, Y+7	; 0x07
    2576:	98 85       	ldd	r25, Y+8	; 0x08
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    257c:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    257e:	e9 81       	ldd	r30, Y+1	; 0x01
    2580:	fa 81       	ldd	r31, Y+2	; 0x02
    2582:	82 8d       	ldd	r24, Z+26	; 0x1a
    2584:	88 23       	and	r24, r24
    2586:	b1 f0       	breq	.+44     	; 0x25b4 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2588:	e9 81       	ldd	r30, Y+1	; 0x01
    258a:	fa 81       	ldd	r31, Y+2	; 0x02
    258c:	86 81       	ldd	r24, Z+6	; 0x06
    258e:	97 81       	ldd	r25, Z+7	; 0x07
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	29 85       	ldd	r18, Y+9	; 0x09
    259a:	3a 85       	ldd	r19, Y+10	; 0x0a
    259c:	b9 01       	movw	r22, r18
    259e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	97 83       	std	Z+7, r25	; 0x07
    25ac:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	8e 83       	std	Y+6, r24	; 0x06
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    25b4:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25b8:	2a 96       	adiw	r28, 0x0a	; 10
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <uxQueueMessagesWaiting+0x6>
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9b 83       	std	Y+3, r25	; 0x03
    25d8:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    25e0:	ea 81       	ldd	r30, Y+2	; 0x02
    25e2:	fb 81       	ldd	r31, Y+3	; 0x03
    25e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25e6:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <uxQueueSpacesAvailable+0x6>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <uxQueueSpacesAvailable+0x8>
    2602:	0f 92       	push	r0
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	9d 83       	std	Y+5, r25	; 0x05
    260a:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    261a:	e9 81       	ldd	r30, Y+1	; 0x01
    261c:	fa 81       	ldd	r31, Y+2	; 0x02
    261e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2620:	e9 81       	ldd	r30, Y+1	; 0x01
    2622:	fa 81       	ldd	r31, Y+2	; 0x02
    2624:	82 8d       	ldd	r24, Z+26	; 0x1a
    2626:	29 2f       	mov	r18, r25
    2628:	28 1b       	sub	r18, r24
    262a:	82 2f       	mov	r24, r18
    262c:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <uxQueueMessagesWaitingFromISR+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <uxQueueMessagesWaitingFromISR+0x8>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9d 83       	std	Y+5, r25	; 0x05
    2654:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	82 8d       	ldd	r24, Z+26	; 0x1a
    2664:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	00 d0       	rcall	.+0      	; 0x267e <vQueueDelete+0x6>
    267e:	00 d0       	rcall	.+0      	; 0x2680 <vQueueDelete+0x8>
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	9c 83       	std	Y+4, r25	; 0x04
    2686:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	0e 94 c1 09 	call	0x1382	; 0x1382 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	27 97       	sbiw	r28, 0x07	; 7
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
    26be:	7e 83       	std	Y+6, r23	; 0x06
    26c0:	6d 83       	std	Y+5, r22	; 0x05
    26c2:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    26c4:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    26c6:	eb 81       	ldd	r30, Y+3	; 0x03
    26c8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    26cc:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    26ce:	eb 81       	ldd	r30, Y+3	; 0x03
    26d0:	fc 81       	ldd	r31, Y+4	; 0x04
    26d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    26d4:	88 23       	and	r24, r24
    26d6:	09 f4       	brne	.+2      	; 0x26da <prvCopyDataToQueue+0x34>
    26d8:	7d c0       	rjmp	.+250    	; 0x27d4 <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    26da:	8f 81       	ldd	r24, Y+7	; 0x07
    26dc:	88 23       	and	r24, r24
    26de:	99 f5       	brne	.+102    	; 0x2746 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    26e0:	eb 81       	ldd	r30, Y+3	; 0x03
    26e2:	fc 81       	ldd	r31, Y+4	; 0x04
    26e4:	62 81       	ldd	r22, Z+2	; 0x02
    26e6:	73 81       	ldd	r23, Z+3	; 0x03
    26e8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ea:	fc 81       	ldd	r31, Y+4	; 0x04
    26ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ee:	48 2f       	mov	r20, r24
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	2d 81       	ldd	r18, Y+5	; 0x05
    26f4:	3e 81       	ldd	r19, Y+6	; 0x06
    26f6:	cb 01       	movw	r24, r22
    26f8:	b9 01       	movw	r22, r18
    26fa:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    26fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2700:	fc 81       	ldd	r31, Y+4	; 0x04
    2702:	22 81       	ldd	r18, Z+2	; 0x02
    2704:	33 81       	ldd	r19, Z+3	; 0x03
    2706:	eb 81       	ldd	r30, Y+3	; 0x03
    2708:	fc 81       	ldd	r31, Y+4	; 0x04
    270a:	84 8d       	ldd	r24, Z+28	; 0x1c
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	82 0f       	add	r24, r18
    2712:	93 1f       	adc	r25, r19
    2714:	eb 81       	ldd	r30, Y+3	; 0x03
    2716:	fc 81       	ldd	r31, Y+4	; 0x04
    2718:	93 83       	std	Z+3, r25	; 0x03
    271a:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    271c:	eb 81       	ldd	r30, Y+3	; 0x03
    271e:	fc 81       	ldd	r31, Y+4	; 0x04
    2720:	22 81       	ldd	r18, Z+2	; 0x02
    2722:	33 81       	ldd	r19, Z+3	; 0x03
    2724:	eb 81       	ldd	r30, Y+3	; 0x03
    2726:	fc 81       	ldd	r31, Y+4	; 0x04
    2728:	84 81       	ldd	r24, Z+4	; 0x04
    272a:	95 81       	ldd	r25, Z+5	; 0x05
    272c:	28 17       	cp	r18, r24
    272e:	39 07       	cpc	r19, r25
    2730:	08 f4       	brcc	.+2      	; 0x2734 <prvCopyDataToQueue+0x8e>
    2732:	50 c0       	rjmp	.+160    	; 0x27d4 <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2734:	eb 81       	ldd	r30, Y+3	; 0x03
    2736:	fc 81       	ldd	r31, Y+4	; 0x04
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	eb 81       	ldd	r30, Y+3	; 0x03
    273e:	fc 81       	ldd	r31, Y+4	; 0x04
    2740:	93 83       	std	Z+3, r25	; 0x03
    2742:	82 83       	std	Z+2, r24	; 0x02
    2744:	47 c0       	rjmp	.+142    	; 0x27d4 <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    2746:	eb 81       	ldd	r30, Y+3	; 0x03
    2748:	fc 81       	ldd	r31, Y+4	; 0x04
    274a:	66 81       	ldd	r22, Z+6	; 0x06
    274c:	77 81       	ldd	r23, Z+7	; 0x07
    274e:	eb 81       	ldd	r30, Y+3	; 0x03
    2750:	fc 81       	ldd	r31, Y+4	; 0x04
    2752:	84 8d       	ldd	r24, Z+28	; 0x1c
    2754:	48 2f       	mov	r20, r24
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	2d 81       	ldd	r18, Y+5	; 0x05
    275a:	3e 81       	ldd	r19, Y+6	; 0x06
    275c:	cb 01       	movw	r24, r22
    275e:	b9 01       	movw	r22, r18
    2760:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    2764:	eb 81       	ldd	r30, Y+3	; 0x03
    2766:	fc 81       	ldd	r31, Y+4	; 0x04
    2768:	26 81       	ldd	r18, Z+6	; 0x06
    276a:	37 81       	ldd	r19, Z+7	; 0x07
    276c:	eb 81       	ldd	r30, Y+3	; 0x03
    276e:	fc 81       	ldd	r31, Y+4	; 0x04
    2770:	84 8d       	ldd	r24, Z+28	; 0x1c
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	90 95       	com	r25
    2778:	81 95       	neg	r24
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	eb 81       	ldd	r30, Y+3	; 0x03
    2782:	fc 81       	ldd	r31, Y+4	; 0x04
    2784:	97 83       	std	Z+7, r25	; 0x07
    2786:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2788:	eb 81       	ldd	r30, Y+3	; 0x03
    278a:	fc 81       	ldd	r31, Y+4	; 0x04
    278c:	26 81       	ldd	r18, Z+6	; 0x06
    278e:	37 81       	ldd	r19, Z+7	; 0x07
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	90 f4       	brcc	.+36     	; 0x27c2 <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    279e:	eb 81       	ldd	r30, Y+3	; 0x03
    27a0:	fc 81       	ldd	r31, Y+4	; 0x04
    27a2:	24 81       	ldd	r18, Z+4	; 0x04
    27a4:	35 81       	ldd	r19, Z+5	; 0x05
    27a6:	eb 81       	ldd	r30, Y+3	; 0x03
    27a8:	fc 81       	ldd	r31, Y+4	; 0x04
    27aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	90 95       	com	r25
    27b2:	81 95       	neg	r24
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	82 0f       	add	r24, r18
    27b8:	93 1f       	adc	r25, r19
    27ba:	eb 81       	ldd	r30, Y+3	; 0x03
    27bc:	fc 81       	ldd	r31, Y+4	; 0x04
    27be:	97 83       	std	Z+7, r25	; 0x07
    27c0:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    27c2:	8f 81       	ldd	r24, Y+7	; 0x07
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	31 f4       	brne	.+12     	; 0x27d4 <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	88 23       	and	r24, r24
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	81 50       	subi	r24, 0x01	; 1
    27d2:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	eb 81       	ldd	r30, Y+3	; 0x03
    27da:	fc 81       	ldd	r31, Y+4	; 0x04
    27dc:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    27e0:	27 96       	adiw	r28, 0x07	; 7
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <prvCopyDataFromQueue+0x6>
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <prvCopyDataFromQueue+0x8>
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	7c 83       	std	Y+4, r23	; 0x04
    2804:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2806:	e9 81       	ldd	r30, Y+1	; 0x01
    2808:	fa 81       	ldd	r31, Y+2	; 0x02
    280a:	84 8d       	ldd	r24, Z+28	; 0x1c
    280c:	88 23       	and	r24, r24
    280e:	89 f1       	breq	.+98     	; 0x2872 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	26 81       	ldd	r18, Z+6	; 0x06
    2816:	37 81       	ldd	r19, Z+7	; 0x07
    2818:	e9 81       	ldd	r30, Y+1	; 0x01
    281a:	fa 81       	ldd	r31, Y+2	; 0x02
    281c:	84 8d       	ldd	r24, Z+28	; 0x1c
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	82 0f       	add	r24, r18
    2824:	93 1f       	adc	r25, r19
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	97 83       	std	Z+7, r25	; 0x07
    282c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	26 81       	ldd	r18, Z+6	; 0x06
    2834:	37 81       	ldd	r19, Z+7	; 0x07
    2836:	e9 81       	ldd	r30, Y+1	; 0x01
    2838:	fa 81       	ldd	r31, Y+2	; 0x02
    283a:	84 81       	ldd	r24, Z+4	; 0x04
    283c:	95 81       	ldd	r25, Z+5	; 0x05
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	40 f0       	brcs	.+16     	; 0x2854 <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2844:	e9 81       	ldd	r30, Y+1	; 0x01
    2846:	fa 81       	ldd	r31, Y+2	; 0x02
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	e9 81       	ldd	r30, Y+1	; 0x01
    284e:	fa 81       	ldd	r31, Y+2	; 0x02
    2850:	97 83       	std	Z+7, r25	; 0x07
    2852:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	46 81       	ldd	r20, Z+6	; 0x06
    285a:	57 81       	ldd	r21, Z+7	; 0x07
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	84 8d       	ldd	r24, Z+28	; 0x1c
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	ba 01       	movw	r22, r20
    286c:	a9 01       	movw	r20, r18
    286e:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <memcpy>
	}
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <prvUnlockQueue+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <prvUnlockQueue+0x8>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    2896:	eb 81       	ldd	r30, Y+3	; 0x03
    2898:	fc 81       	ldd	r31, Y+4	; 0x04
    289a:	86 8d       	ldd	r24, Z+30	; 0x1e
    289c:	8a 83       	std	Y+2, r24	; 0x02
    289e:	11 c0       	rjmp	.+34     	; 0x28c2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28a0:	eb 81       	ldd	r30, Y+3	; 0x03
    28a2:	fc 81       	ldd	r31, Y+4	; 0x04
    28a4:	81 89       	ldd	r24, Z+17	; 0x11
    28a6:	88 23       	and	r24, r24
    28a8:	79 f0       	breq	.+30     	; 0x28c8 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	41 96       	adiw	r24, 0x11	; 17
    28b0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    28b4:	88 23       	and	r24, r24
    28b6:	11 f0       	breq	.+4      	; 0x28bc <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    28b8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	18 16       	cp	r1, r24
    28c6:	64 f3       	brlt	.-40     	; 0x28a0 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    28c8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ca:	fc 81       	ldd	r31, Y+4	; 0x04
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    28da:	eb 81       	ldd	r30, Y+3	; 0x03
    28dc:	fc 81       	ldd	r31, Y+4	; 0x04
    28de:	85 8d       	ldd	r24, Z+29	; 0x1d
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	11 c0       	rjmp	.+34     	; 0x2906 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    28e4:	eb 81       	ldd	r30, Y+3	; 0x03
    28e6:	fc 81       	ldd	r31, Y+4	; 0x04
    28e8:	80 85       	ldd	r24, Z+8	; 0x08
    28ea:	88 23       	and	r24, r24
    28ec:	79 f0       	breq	.+30     	; 0x290c <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	08 96       	adiw	r24, 0x08	; 8
    28f4:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <xTaskRemoveFromEventList>
    28f8:	88 23       	and	r24, r24
    28fa:	11 f0       	breq	.+4      	; 0x2900 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    28fc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	81 50       	subi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	18 16       	cp	r1, r24
    290a:	64 f3       	brlt	.-40     	; 0x28e4 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    290c:	eb 81       	ldd	r30, Y+3	; 0x03
    290e:	fc 81       	ldd	r31, Y+4	; 0x04
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	00 d0       	rcall	.+0      	; 0x292c <prvIsQueueEmpty+0x6>
    292c:	0f 92       	push	r0
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	9b 83       	std	Y+3, r25	; 0x03
    2934:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    293c:	ea 81       	ldd	r30, Y+2	; 0x02
    293e:	fb 81       	ldd	r31, Y+3	; 0x03
    2940:	82 8d       	ldd	r24, Z+26	; 0x1a
    2942:	88 23       	and	r24, r24
    2944:	19 f4       	brne	.+6      	; 0x294c <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	01 c0       	rjmp	.+2      	; 0x294e <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    294c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <xQueueIsQueueEmptyFromISR+0x6>
    2966:	00 d0       	rcall	.+0      	; 0x2968 <xQueueIsQueueEmptyFromISR+0x8>
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	9d 83       	std	Y+5, r25	; 0x05
    2970:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    297a:	e9 81       	ldd	r30, Y+1	; 0x01
    297c:	fa 81       	ldd	r31, Y+2	; 0x02
    297e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2980:	88 23       	and	r24, r24
    2982:	19 f4       	brne	.+6      	; 0x298a <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	8b 83       	std	Y+3, r24	; 0x03
    2988:	01 c0       	rjmp	.+2      	; 0x298c <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    298a:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <prvIsQueueFull+0x6>
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	9b 83       	std	Y+3, r25	; 0x03
    29ac:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    29b4:	ea 81       	ldd	r30, Y+2	; 0x02
    29b6:	fb 81       	ldd	r31, Y+3	; 0x03
    29b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    29ba:	ea 81       	ldd	r30, Y+2	; 0x02
    29bc:	fb 81       	ldd	r31, Y+3	; 0x03
    29be:	83 8d       	ldd	r24, Z+27	; 0x1b
    29c0:	98 17       	cp	r25, r24
    29c2:	19 f4       	brne	.+6      	; 0x29ca <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    29ca:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <xQueueIsQueueFullFromISR+0x6>
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <xQueueIsQueueFullFromISR+0x8>
    29e6:	0f 92       	push	r0
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	9d 83       	std	Y+5, r25	; 0x05
    29ee:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	9d 81       	ldd	r25, Y+5	; 0x05
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a04:	98 17       	cp	r25, r24
    2a06:	19 f4       	brne	.+6      	; 0x2a0e <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    2a0e:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    2a22:	8f 92       	push	r8
    2a24:	9f 92       	push	r9
    2a26:	af 92       	push	r10
    2a28:	bf 92       	push	r11
    2a2a:	cf 92       	push	r12
    2a2c:	df 92       	push	r13
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	60 97       	sbiw	r28, 0x10	; 16
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	9f 83       	std	Y+7, r25	; 0x07
    2a4c:	8e 83       	std	Y+6, r24	; 0x06
    2a4e:	79 87       	std	Y+9, r23	; 0x09
    2a50:	68 87       	std	Y+8, r22	; 0x08
    2a52:	5b 87       	std	Y+11, r21	; 0x0b
    2a54:	4a 87       	std	Y+10, r20	; 0x0a
    2a56:	3d 87       	std	Y+13, r19	; 0x0d
    2a58:	2c 87       	std	Y+12, r18	; 0x0c
    2a5a:	0e 87       	std	Y+14, r16	; 0x0e
    2a5c:	f8 8a       	std	Y+16, r15	; 0x10
    2a5e:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    2a60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a64:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <pvPortMalloc>
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	b1 f0       	breq	.+44     	; 0x2aa0 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    2a74:	86 e2       	ldi	r24, 0x26	; 38
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <pvPortMalloc>
    2a7c:	9d 83       	std	Y+5, r25	; 0x05
    2a7e:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	9d 81       	ldd	r25, Y+5	; 0x05
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	39 f0       	breq	.+14     	; 0x2a96 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    2a88:	ec 81       	ldd	r30, Y+4	; 0x04
    2a8a:	fd 81       	ldd	r31, Y+5	; 0x05
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	90 8f       	std	Z+24, r25	; 0x18
    2a92:	87 8b       	std	Z+23, r24	; 0x17
    2a94:	07 c0       	rjmp	.+14     	; 0x2aa4 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	0e 94 c1 09 	call	0x1382	; 0x1382 <vPortFree>
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    2aa0:	1d 82       	std	Y+5, r1	; 0x05
    2aa2:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	e9 f0       	breq	.+58     	; 0x2ae6 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    2aac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	68 85       	ldd	r22, Y+8	; 0x08
    2abc:	79 85       	ldd	r23, Y+9	; 0x09
    2abe:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ac0:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ac2:	af 85       	ldd	r26, Y+15	; 0x0f
    2ac4:	b8 89       	ldd	r27, Y+16	; 0x10
    2ac6:	ac 80       	ldd	r10, Y+4	; 0x04
    2ac8:	bd 80       	ldd	r11, Y+5	; 0x05
    2aca:	8f 01       	movw	r16, r30
    2acc:	ee 84       	ldd	r14, Y+14	; 0x0e
    2ace:	6d 01       	movw	r12, r26
    2ad0:	88 24       	eor	r8, r8
    2ad2:	99 24       	eor	r9, r9
    2ad4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	9d 81       	ldd	r25, Y+5	; 0x05
    2adc:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2aec:	60 96       	adiw	r28, 0x10	; 16
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	ff 90       	pop	r15
    2b02:	ef 90       	pop	r14
    2b04:	df 90       	pop	r13
    2b06:	cf 90       	pop	r12
    2b08:	bf 90       	pop	r11
    2b0a:	af 90       	pop	r10
    2b0c:	9f 90       	pop	r9
    2b0e:	8f 90       	pop	r8
    2b10:	08 95       	ret

00002b12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    2b12:	8f 92       	push	r8
    2b14:	9f 92       	push	r9
    2b16:	af 92       	push	r10
    2b18:	bf 92       	push	r11
    2b1a:	cf 92       	push	r12
    2b1c:	df 92       	push	r13
    2b1e:	ef 92       	push	r14
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	64 97       	sbiw	r28, 0x14	; 20
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	9d 83       	std	Y+5, r25	; 0x05
    2b3a:	8c 83       	std	Y+4, r24	; 0x04
    2b3c:	7f 83       	std	Y+7, r23	; 0x07
    2b3e:	6e 83       	std	Y+6, r22	; 0x06
    2b40:	28 87       	std	Y+8, r18	; 0x08
    2b42:	39 87       	std	Y+9, r19	; 0x09
    2b44:	4a 87       	std	Y+10, r20	; 0x0a
    2b46:	5b 87       	std	Y+11, r21	; 0x0b
    2b48:	1d 87       	std	Y+13, r17	; 0x0d
    2b4a:	0c 87       	std	Y+12, r16	; 0x0c
    2b4c:	ee 86       	std	Y+14, r14	; 0x0e
    2b4e:	d8 8a       	std	Y+16, r13	; 0x10
    2b50:	cf 86       	std	Y+15, r12	; 0x0f
    2b52:	ba 8a       	std	Y+18, r11	; 0x12
    2b54:	a9 8a       	std	Y+17, r10	; 0x11
    2b56:	9c 8a       	std	Y+20, r9	; 0x14
    2b58:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    2b5a:	e9 89       	ldd	r30, Y+17	; 0x11
    2b5c:	fa 89       	ldd	r31, Y+18	; 0x12
    2b5e:	27 89       	ldd	r18, Z+23	; 0x17
    2b60:	30 8d       	ldd	r19, Z+24	; 0x18
    2b62:	88 85       	ldd	r24, Y+8	; 0x08
    2b64:	99 85       	ldd	r25, Y+9	; 0x09
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	9b 83       	std	Y+3, r25	; 0x03
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    2b70:	8e 81       	ldd	r24, Y+6	; 0x06
    2b72:	9f 81       	ldd	r25, Y+7	; 0x07
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	51 f1       	breq	.+84     	; 0x2bcc <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2b78:	19 82       	std	Y+1, r1	; 0x01
    2b7a:	21 c0       	rjmp	.+66     	; 0x2bbe <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	48 2f       	mov	r20, r24
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	28 2f       	mov	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e2 0f       	add	r30, r18
    2b90:	f3 1f       	adc	r31, r19
    2b92:	20 81       	ld	r18, Z
    2b94:	89 89       	ldd	r24, Y+17	; 0x11
    2b96:	9a 89       	ldd	r25, Y+18	; 0x12
    2b98:	84 0f       	add	r24, r20
    2b9a:	95 1f       	adc	r25, r21
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	79 96       	adiw	r30, 0x19	; 25
    2ba0:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    2baa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bac:	fc 01       	movw	r30, r24
    2bae:	e2 0f       	add	r30, r18
    2bb0:	f3 1f       	adc	r31, r19
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 23       	and	r24, r24
    2bb6:	31 f0       	breq	.+12     	; 0x2bc4 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	88 30       	cpi	r24, 0x08	; 8
    2bc2:	e0 f2       	brcs	.-72     	; 0x2b7c <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2bc4:	e9 89       	ldd	r30, Y+17	; 0x11
    2bc6:	fa 89       	ldd	r31, Y+18	; 0x12
    2bc8:	10 a2       	std	Z+32, r1	; 0x20
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    2bcc:	e9 89       	ldd	r30, Y+17	; 0x11
    2bce:	fa 89       	ldd	r31, Y+18	; 0x12
    2bd0:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    2bd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd4:	85 30       	cpi	r24, 0x05	; 5
    2bd6:	10 f0       	brcs	.+4      	; 0x2bdc <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    2bd8:	84 e0       	ldi	r24, 0x04	; 4
    2bda:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    2bdc:	e9 89       	ldd	r30, Y+17	; 0x11
    2bde:	fa 89       	ldd	r31, Y+18	; 0x12
    2be0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2be2:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2be4:	89 89       	ldd	r24, Y+17	; 0x11
    2be6:	9a 89       	ldd	r25, Y+18	; 0x12
    2be8:	02 96       	adiw	r24, 0x02	; 2
    2bea:	0e 94 11 0a 	call	0x1422	; 0x1422 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2bee:	89 89       	ldd	r24, Y+17	; 0x11
    2bf0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf2:	0c 96       	adiw	r24, 0x0c	; 12
    2bf4:	0e 94 11 0a 	call	0x1422	; 0x1422 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2bf8:	e9 89       	ldd	r30, Y+17	; 0x11
    2bfa:	fa 89       	ldd	r31, Y+18	; 0x12
    2bfc:	89 89       	ldd	r24, Y+17	; 0x11
    2bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    2c00:	91 87       	std	Z+9, r25	; 0x09
    2c02:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c04:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	85 e0       	ldi	r24, 0x05	; 5
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	82 1b       	sub	r24, r18
    2c10:	93 0b       	sbc	r25, r19
    2c12:	e9 89       	ldd	r30, Y+17	; 0x11
    2c14:	fa 89       	ldd	r31, Y+18	; 0x12
    2c16:	95 87       	std	Z+13, r25	; 0x0d
    2c18:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2c1a:	e9 89       	ldd	r30, Y+17	; 0x11
    2c1c:	fa 89       	ldd	r31, Y+18	; 0x12
    2c1e:	89 89       	ldd	r24, Y+17	; 0x11
    2c20:	9a 89       	ldd	r25, Y+18	; 0x12
    2c22:	93 8b       	std	Z+19, r25	; 0x13
    2c24:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    2c26:	e9 89       	ldd	r30, Y+17	; 0x11
    2c28:	fa 89       	ldd	r31, Y+18	; 0x12
    2c2a:	11 a2       	std	Z+33, r1	; 0x21
    2c2c:	12 a2       	std	Z+34, r1	; 0x22
    2c2e:	13 a2       	std	Z+35, r1	; 0x23
    2c30:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2c32:	e9 89       	ldd	r30, Y+17	; 0x11
    2c34:	fa 89       	ldd	r31, Y+18	; 0x12
    2c36:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c40:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c42:	5d 85       	ldd	r21, Y+13	; 0x0d
    2c44:	b9 01       	movw	r22, r18
    2c46:	0e 94 1d 0b 	call	0x163a	; 0x163a <pxPortInitialiseStack>
    2c4a:	e9 89       	ldd	r30, Y+17	; 0x11
    2c4c:	fa 89       	ldd	r31, Y+18	; 0x12
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    2c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c54:	98 89       	ldd	r25, Y+16	; 0x10
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	31 f0       	breq	.+12     	; 0x2c66 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2c5a:	ef 85       	ldd	r30, Y+15	; 0x0f
    2c5c:	f8 89       	ldd	r31, Y+16	; 0x10
    2c5e:	89 89       	ldd	r24, Y+17	; 0x11
    2c60:	9a 89       	ldd	r25, Y+18	; 0x12
    2c62:	91 83       	std	Z+1, r25	; 0x01
    2c64:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2c66:	64 96       	adiw	r28, 0x14	; 20
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	bf 90       	pop	r11
    2c82:	af 90       	pop	r10
    2c84:	9f 90       	pop	r9
    2c86:	8f 90       	pop	r8
    2c88:	08 95       	ret

00002c8a <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <prvAddNewTaskToReadyList+0x6>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    2c9e:	80 91 6f 04 	lds	r24, 0x046F
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	80 93 6f 04 	sts	0x046F, r24
		if( pxCurrentTCB == NULL )
    2ca8:	80 91 6c 04 	lds	r24, 0x046C
    2cac:	90 91 6d 04 	lds	r25, 0x046D
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f4       	brne	.+26     	; 0x2cce <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb8:	90 93 6d 04 	sts	0x046D, r25
    2cbc:	80 93 6c 04 	sts	0x046C, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2cc0:	80 91 6f 04 	lds	r24, 0x046F
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	b9 f4       	brne	.+46     	; 0x2cf6 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    2cc8:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <prvInitialiseTaskLists>
    2ccc:	14 c0       	rjmp	.+40     	; 0x2cf6 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    2cce:	80 91 73 04 	lds	r24, 0x0473
    2cd2:	88 23       	and	r24, r24
    2cd4:	81 f4       	brne	.+32     	; 0x2cf6 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2cd6:	e0 91 6c 04 	lds	r30, 0x046C
    2cda:	f0 91 6d 04 	lds	r31, 0x046D
    2cde:	96 89       	ldd	r25, Z+22	; 0x16
    2ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce4:	86 89       	ldd	r24, Z+22	; 0x16
    2ce6:	89 17       	cp	r24, r25
    2ce8:	30 f0       	brcs	.+12     	; 0x2cf6 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	90 93 6d 04 	sts	0x046D, r25
    2cf2:	80 93 6c 04 	sts	0x046C, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    2cf6:	80 91 78 04 	lds	r24, 0x0478
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	80 93 78 04 	sts	0x0478, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    2d00:	e9 81       	ldd	r30, Y+1	; 0x01
    2d02:	fa 81       	ldd	r31, Y+2	; 0x02
    2d04:	96 89       	ldd	r25, Z+22	; 0x16
    2d06:	80 91 72 04 	lds	r24, 0x0472
    2d0a:	89 17       	cp	r24, r25
    2d0c:	28 f4       	brcc	.+10     	; 0x2d18 <prvAddNewTaskToReadyList+0x8e>
    2d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d10:	fa 81       	ldd	r31, Y+2	; 0x02
    2d12:	86 89       	ldd	r24, Z+22	; 0x16
    2d14:	80 93 72 04 	sts	0x0472, r24
    2d18:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1c:	86 89       	ldd	r24, Z+22	; 0x16
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	c9 01       	movw	r24, r18
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	ac 01       	movw	r20, r24
    2d36:	42 58       	subi	r20, 0x82	; 130
    2d38:	5b 4f       	sbci	r21, 0xFB	; 251
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	9c 01       	movw	r18, r24
    2d40:	2e 5f       	subi	r18, 0xFE	; 254
    2d42:	3f 4f       	sbci	r19, 0xFF	; 255
    2d44:	ca 01       	movw	r24, r20
    2d46:	b9 01       	movw	r22, r18
    2d48:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    2d50:	80 91 73 04 	lds	r24, 0x0473
    2d54:	88 23       	and	r24, r24
    2d56:	61 f0       	breq	.+24     	; 0x2d70 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2d58:	e0 91 6c 04 	lds	r30, 0x046C
    2d5c:	f0 91 6d 04 	lds	r31, 0x046D
    2d60:	96 89       	ldd	r25, Z+22	; 0x16
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	86 89       	ldd	r24, Z+22	; 0x16
    2d68:	98 17       	cp	r25, r24
    2d6a:	10 f4       	brcc	.+4      	; 0x2d70 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    2d6c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <vTaskDelete+0x6>
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <vTaskDelete+0x8>
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <vTaskDelete+0xa>
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	39 f4       	brne	.+14     	; 0x2da8 <vTaskDelete+0x2e>
    2d9a:	80 91 6c 04 	lds	r24, 0x046C
    2d9e:	90 91 6d 04 	lds	r25, 0x046D
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <vTaskDelete+0x36>
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	02 96       	adiw	r24, 0x02	; 2
    2dbe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc6:	84 89       	ldd	r24, Z+20	; 0x14
    2dc8:	95 89       	ldd	r25, Z+21	; 0x15
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	29 f0       	breq	.+10     	; 0x2dd8 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	0c 96       	adiw	r24, 0x0c	; 12
    2dd4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    2dd8:	80 91 78 04 	lds	r24, 0x0478
    2ddc:	8f 5f       	subi	r24, 0xFF	; 255
    2dde:	80 93 78 04 	sts	0x0478, r24

			if( pxTCB == pxCurrentTCB )
    2de2:	20 91 6c 04 	lds	r18, 0x046C
    2de6:	30 91 6d 04 	lds	r19, 0x046D
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	82 17       	cp	r24, r18
    2df0:	93 07       	cpc	r25, r19
    2df2:	81 f4       	brne	.+32     	; 0x2e14 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	9c 01       	movw	r18, r24
    2dfa:	2e 5f       	subi	r18, 0xFE	; 254
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	8a ec       	ldi	r24, 0xCA	; 202
    2e00:	94 e0       	ldi	r25, 0x04	; 4
    2e02:	b9 01       	movw	r22, r18
    2e04:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    2e08:	80 91 6e 04 	lds	r24, 0x046E
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 6e 04 	sts	0x046E, r24
    2e12:	0b c0       	rjmp	.+22     	; 0x2e2a <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    2e14:	80 91 6f 04 	lds	r24, 0x046F
    2e18:	81 50       	subi	r24, 0x01	; 1
    2e1a:	80 93 6f 04 	sts	0x046F, r24
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    2e26:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
    2e2a:	0f 90       	pop	r0
    2e2c:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2e2e:	80 91 73 04 	lds	r24, 0x0473
    2e32:	88 23       	and	r24, r24
    2e34:	59 f0       	breq	.+22     	; 0x2e4c <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    2e36:	20 91 6c 04 	lds	r18, 0x046C
    2e3a:	30 91 6d 04 	lds	r19, 0x046D
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	82 17       	cp	r24, r18
    2e44:	93 07       	cpc	r25, r19
    2e46:	11 f4       	brne	.+4      	; 0x2e4c <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    2e48:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2e4c:	26 96       	adiw	r28, 0x06	; 6
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	2a 97       	sbiw	r28, 0x0a	; 10
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	8f 83       	std	Y+7, r24	; 0x07
    2e76:	7a 87       	std	Y+10, r23	; 0x0a
    2e78:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    2e7a:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    2e7c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2e80:	80 91 70 04 	lds	r24, 0x0470
    2e84:	90 91 71 04 	lds	r25, 0x0471
    2e88:	9a 83       	std	Y+2, r25	; 0x02
    2e8a:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2e8c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e8e:	f8 85       	ldd	r31, Y+8	; 0x08
    2e90:	20 81       	ld	r18, Z
    2e92:	31 81       	ldd	r19, Z+1	; 0x01
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	82 0f       	add	r24, r18
    2e9a:	93 1f       	adc	r25, r19
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    2ea0:	ef 81       	ldd	r30, Y+7	; 0x07
    2ea2:	f8 85       	ldd	r31, Y+8	; 0x08
    2ea4:	20 81       	ld	r18, Z
    2ea6:	31 81       	ldd	r19, Z+1	; 0x01
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	82 17       	cp	r24, r18
    2eae:	93 07       	cpc	r25, r19
    2eb0:	98 f4       	brcc	.+38     	; 0x2ed8 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2eb2:	ef 81       	ldd	r30, Y+7	; 0x07
    2eb4:	f8 85       	ldd	r31, Y+8	; 0x08
    2eb6:	20 81       	ld	r18, Z
    2eb8:	31 81       	ldd	r19, Z+1	; 0x01
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	82 17       	cp	r24, r18
    2ec0:	93 07       	cpc	r25, r19
    2ec2:	e0 f4       	brcc	.+56     	; 0x2efc <vTaskDelayUntil+0x9e>
    2ec4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	82 17       	cp	r24, r18
    2ece:	93 07       	cpc	r25, r19
    2ed0:	a8 f4       	brcc	.+42     	; 0x2efc <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	8b 83       	std	Y+3, r24	; 0x03
    2ed6:	12 c0       	rjmp	.+36     	; 0x2efc <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    2ed8:	ef 81       	ldd	r30, Y+7	; 0x07
    2eda:	f8 85       	ldd	r31, Y+8	; 0x08
    2edc:	20 81       	ld	r18, Z
    2ede:	31 81       	ldd	r19, Z+1	; 0x01
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	82 17       	cp	r24, r18
    2ee6:	93 07       	cpc	r25, r19
    2ee8:	38 f0       	brcs	.+14     	; 0x2ef8 <vTaskDelayUntil+0x9a>
    2eea:	2d 81       	ldd	r18, Y+5	; 0x05
    2eec:	3e 81       	ldd	r19, Y+6	; 0x06
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	82 17       	cp	r24, r18
    2ef4:	93 07       	cpc	r25, r19
    2ef6:	10 f4       	brcc	.+4      	; 0x2efc <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2efc:	ef 81       	ldd	r30, Y+7	; 0x07
    2efe:	f8 85       	ldd	r31, Y+8	; 0x08
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	88 23       	and	r24, r24
    2f0c:	49 f0       	breq	.+18     	; 0x2f20 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	29 81       	ldd	r18, Y+1	; 0x01
    2f14:	3a 81       	ldd	r19, Y+2	; 0x02
    2f16:	82 1b       	sub	r24, r18
    2f18:	93 0b       	sbc	r25, r19
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2f20:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    2f24:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f26:	8c 81       	ldd	r24, Y+4	; 0x04
    2f28:	88 23       	and	r24, r24
    2f2a:	11 f4       	brne	.+4      	; 0x2f30 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    2f2c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f30:	2a 96       	adiw	r28, 0x0a	; 10
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <vTaskDelay+0x6>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	9b 83       	std	Y+3, r25	; 0x03
    2f50:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    2f52:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	9b 81       	ldd	r25, Y+3	; 0x03
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	51 f0       	breq	.+20     	; 0x2f70 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2f5c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	9b 81       	ldd	r25, Y+3	; 0x03
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2f6a:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    2f6e:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	88 23       	and	r24, r24
    2f74:	11 f4       	brne	.+4      	; 0x2f7a <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    2f76:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	27 97       	sbiw	r28, 0x07	; 7
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	9d 83       	std	Y+5, r25	; 0x05
    2f9c:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    2fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	39 f4       	brne	.+14     	; 0x2fba <uxTaskPriorityGet+0x34>
    2fac:	80 91 6c 04 	lds	r24, 0x046C
    2fb0:	90 91 6d 04 	lds	r25, 0x046D
    2fb4:	9f 83       	std	Y+7, r25	; 0x07
    2fb6:	8e 83       	std	Y+6, r24	; 0x06
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <uxTaskPriorityGet+0x3c>
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbe:	9f 83       	std	Y+7, r25	; 0x07
    2fc0:	8e 83       	std	Y+6, r24	; 0x06
    2fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc6:	9b 83       	std	Y+3, r25	; 0x03
    2fc8:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    2fca:	ea 81       	ldd	r30, Y+2	; 0x02
    2fcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2fce:	86 89       	ldd	r24, Z+22	; 0x16
    2fd0:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    2fd2:	0f 90       	pop	r0
    2fd4:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2fd8:	27 96       	adiw	r28, 0x07	; 7
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	28 97       	sbiw	r28, 0x08	; 8
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    3002:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	39 f4       	brne	.+14     	; 0x301a <uxTaskPriorityGetFromISR+0x30>
    300c:	80 91 6c 04 	lds	r24, 0x046C
    3010:	90 91 6d 04 	lds	r25, 0x046D
    3014:	98 87       	std	Y+8, r25	; 0x08
    3016:	8f 83       	std	Y+7, r24	; 0x07
    3018:	04 c0       	rjmp	.+8      	; 0x3022 <uxTaskPriorityGetFromISR+0x38>
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	98 87       	std	Y+8, r25	; 0x08
    3020:	8f 83       	std	Y+7, r24	; 0x07
    3022:	8f 81       	ldd	r24, Y+7	; 0x07
    3024:	98 85       	ldd	r25, Y+8	; 0x08
    3026:	9c 83       	std	Y+4, r25	; 0x04
    3028:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    302a:	eb 81       	ldd	r30, Y+3	; 0x03
    302c:	fc 81       	ldd	r31, Y+4	; 0x04
    302e:	86 89       	ldd	r24, Z+22	; 0x16
    3030:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3034:	28 96       	adiw	r28, 0x08	; 8
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	2a 97       	sbiw	r28, 0x0a	; 10
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	9f 83       	std	Y+7, r25	; 0x07
    305c:	8e 83       	std	Y+6, r24	; 0x06
    305e:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    3060:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3062:	88 85       	ldd	r24, Y+8	; 0x08
    3064:	85 30       	cpi	r24, 0x05	; 5
    3066:	10 f0       	brcs	.+4      	; 0x306c <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3068:	84 e0       	ldi	r24, 0x04	; 4
    306a:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3072:	8e 81       	ldd	r24, Y+6	; 0x06
    3074:	9f 81       	ldd	r25, Y+7	; 0x07
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	39 f4       	brne	.+14     	; 0x3088 <vTaskPrioritySet+0x42>
    307a:	80 91 6c 04 	lds	r24, 0x046C
    307e:	90 91 6d 04 	lds	r25, 0x046D
    3082:	9a 87       	std	Y+10, r25	; 0x0a
    3084:	89 87       	std	Y+9, r24	; 0x09
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <vTaskPrioritySet+0x4a>
    3088:	8e 81       	ldd	r24, Y+6	; 0x06
    308a:	9f 81       	ldd	r25, Y+7	; 0x07
    308c:	9a 87       	std	Y+10, r25	; 0x0a
    308e:	89 87       	std	Y+9, r24	; 0x09
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	9d 83       	std	Y+5, r25	; 0x05
    3096:	8c 83       	std	Y+4, r24	; 0x04
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
    3098:	ec 81       	ldd	r30, Y+4	; 0x04
    309a:	fd 81       	ldd	r31, Y+5	; 0x05
    309c:	86 89       	ldd	r24, Z+22	; 0x16
    309e:	8b 83       	std	Y+3, r24	; 0x03
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	88 85       	ldd	r24, Y+8	; 0x08
    30a4:	98 17       	cp	r25, r24
    30a6:	09 f4       	brne	.+2      	; 0x30aa <vTaskPrioritySet+0x64>
    30a8:	81 c0       	rjmp	.+258    	; 0x31ac <vTaskPrioritySet+0x166>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    30aa:	98 85       	ldd	r25, Y+8	; 0x08
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	89 17       	cp	r24, r25
    30b0:	a0 f4       	brcc	.+40     	; 0x30da <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    30b2:	20 91 6c 04 	lds	r18, 0x046C
    30b6:	30 91 6d 04 	lds	r19, 0x046D
    30ba:	8c 81       	ldd	r24, Y+4	; 0x04
    30bc:	9d 81       	ldd	r25, Y+5	; 0x05
    30be:	82 17       	cp	r24, r18
    30c0:	93 07       	cpc	r25, r19
    30c2:	b1 f0       	breq	.+44     	; 0x30f0 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    30c4:	e0 91 6c 04 	lds	r30, 0x046C
    30c8:	f0 91 6d 04 	lds	r31, 0x046D
    30cc:	96 89       	ldd	r25, Z+22	; 0x16
    30ce:	88 85       	ldd	r24, Y+8	; 0x08
    30d0:	89 17       	cp	r24, r25
    30d2:	70 f0       	brcs	.+28     	; 0x30f0 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	0b c0       	rjmp	.+22     	; 0x30f0 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    30da:	20 91 6c 04 	lds	r18, 0x046C
    30de:	30 91 6d 04 	lds	r19, 0x046D
    30e2:	8c 81       	ldd	r24, Y+4	; 0x04
    30e4:	9d 81       	ldd	r25, Y+5	; 0x05
    30e6:	82 17       	cp	r24, r18
    30e8:	93 07       	cpc	r25, r19
    30ea:	11 f4       	brne	.+4      	; 0x30f0 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    30f0:	ec 81       	ldd	r30, Y+4	; 0x04
    30f2:	fd 81       	ldd	r31, Y+5	; 0x05
    30f4:	86 89       	ldd	r24, Z+22	; 0x16
    30f6:	8a 83       	std	Y+2, r24	; 0x02
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
    30f8:	ec 81       	ldd	r30, Y+4	; 0x04
    30fa:	fd 81       	ldd	r31, Y+5	; 0x05
    30fc:	88 85       	ldd	r24, Y+8	; 0x08
    30fe:	86 8b       	std	Z+22, r24	; 0x16
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3100:	ec 81       	ldd	r30, Y+4	; 0x04
    3102:	fd 81       	ldd	r31, Y+5	; 0x05
    3104:	84 85       	ldd	r24, Z+12	; 0x0c
    3106:	95 85       	ldd	r25, Z+13	; 0x0d
    3108:	99 23       	and	r25, r25
    310a:	5c f0       	brlt	.+22     	; 0x3122 <vTaskPrioritySet+0xdc>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    310c:	88 85       	ldd	r24, Y+8	; 0x08
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	85 e0       	ldi	r24, 0x05	; 5
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	82 1b       	sub	r24, r18
    3118:	93 0b       	sbc	r25, r19
    311a:	ec 81       	ldd	r30, Y+4	; 0x04
    311c:	fd 81       	ldd	r31, Y+5	; 0x05
    311e:	95 87       	std	Z+13, r25	; 0x0d
    3120:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3122:	ec 81       	ldd	r30, Y+4	; 0x04
    3124:	fd 81       	ldd	r31, Y+5	; 0x05
    3126:	42 85       	ldd	r20, Z+10	; 0x0a
    3128:	53 85       	ldd	r21, Z+11	; 0x0b
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	28 2f       	mov	r18, r24
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	c9 01       	movw	r24, r18
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	82 0f       	add	r24, r18
    3140:	93 1f       	adc	r25, r19
    3142:	82 58       	subi	r24, 0x82	; 130
    3144:	9b 4f       	sbci	r25, 0xFB	; 251
    3146:	48 17       	cp	r20, r24
    3148:	59 07       	cpc	r21, r25
    314a:	59 f5       	brne	.+86     	; 0x31a2 <vTaskPrioritySet+0x15c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    314c:	8c 81       	ldd	r24, Y+4	; 0x04
    314e:	9d 81       	ldd	r25, Y+5	; 0x05
    3150:	02 96       	adiw	r24, 0x02	; 2
    3152:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    3156:	ec 81       	ldd	r30, Y+4	; 0x04
    3158:	fd 81       	ldd	r31, Y+5	; 0x05
    315a:	96 89       	ldd	r25, Z+22	; 0x16
    315c:	80 91 72 04 	lds	r24, 0x0472
    3160:	89 17       	cp	r24, r25
    3162:	28 f4       	brcc	.+10     	; 0x316e <vTaskPrioritySet+0x128>
    3164:	ec 81       	ldd	r30, Y+4	; 0x04
    3166:	fd 81       	ldd	r31, Y+5	; 0x05
    3168:	86 89       	ldd	r24, Z+22	; 0x16
    316a:	80 93 72 04 	sts	0x0472, r24
    316e:	ec 81       	ldd	r30, Y+4	; 0x04
    3170:	fd 81       	ldd	r31, Y+5	; 0x05
    3172:	86 89       	ldd	r24, Z+22	; 0x16
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	c9 01       	movw	r24, r18
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	82 0f       	add	r24, r18
    3188:	93 1f       	adc	r25, r19
    318a:	ac 01       	movw	r20, r24
    318c:	42 58       	subi	r20, 0x82	; 130
    318e:	5b 4f       	sbci	r21, 0xFB	; 251
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	9d 81       	ldd	r25, Y+5	; 0x05
    3194:	9c 01       	movw	r18, r24
    3196:	2e 5f       	subi	r18, 0xFE	; 254
    3198:	3f 4f       	sbci	r19, 0xFF	; 255
    319a:	ca 01       	movw	r24, r20
    319c:	b9 01       	movw	r22, r18
    319e:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	88 23       	and	r24, r24
    31a6:	11 f0       	breq	.+4      	; 0x31ac <vTaskPrioritySet+0x166>
				{
					taskYIELD_IF_USING_PREEMPTION();
    31a8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    31ac:	0f 90       	pop	r0
    31ae:	0f be       	out	0x3f, r0	; 63
	}
    31b0:	2a 96       	adiw	r28, 0x0a	; 10
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <vTaskSuspend+0x6>
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <vTaskSuspend+0x8>
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <vTaskSuspend+0xa>
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	9c 81       	ldd	r25, Y+4	; 0x04
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	39 f4       	brne	.+14     	; 0x31f0 <vTaskSuspend+0x2e>
    31e2:	80 91 6c 04 	lds	r24, 0x046C
    31e6:	90 91 6d 04 	lds	r25, 0x046D
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
    31ee:	04 c0       	rjmp	.+8      	; 0x31f8 <vTaskSuspend+0x36>
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	02 96       	adiw	r24, 0x02	; 2
    3206:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    320a:	e9 81       	ldd	r30, Y+1	; 0x01
    320c:	fa 81       	ldd	r31, Y+2	; 0x02
    320e:	84 89       	ldd	r24, Z+20	; 0x14
    3210:	95 89       	ldd	r25, Z+21	; 0x15
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	29 f0       	breq	.+10     	; 0x3220 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	0c 96       	adiw	r24, 0x0c	; 12
    321c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	9c 01       	movw	r18, r24
    3226:	2e 5f       	subi	r18, 0xFE	; 254
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	83 ed       	ldi	r24, 0xD3	; 211
    322c:	94 e0       	ldi	r25, 0x04	; 4
    322e:	b9 01       	movw	r22, r18
    3230:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    3234:	e9 81       	ldd	r30, Y+1	; 0x01
    3236:	fa 81       	ldd	r31, Y+2	; 0x02
    3238:	85 a1       	ldd	r24, Z+37	; 0x25
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	19 f4       	brne	.+6      	; 0x3244 <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    3244:	0f 90       	pop	r0
    3246:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3248:	80 91 73 04 	lds	r24, 0x0473
    324c:	88 23       	and	r24, r24
    324e:	39 f0       	breq	.+14     	; 0x325e <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    3256:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    325a:	0f 90       	pop	r0
    325c:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    325e:	20 91 6c 04 	lds	r18, 0x046C
    3262:	30 91 6d 04 	lds	r19, 0x046D
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	9a 81       	ldd	r25, Y+2	; 0x02
    326a:	82 17       	cp	r24, r18
    326c:	93 07       	cpc	r25, r19
    326e:	a1 f4       	brne	.+40     	; 0x3298 <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    3270:	80 91 73 04 	lds	r24, 0x0473
    3274:	88 23       	and	r24, r24
    3276:	19 f0       	breq	.+6      	; 0x327e <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3278:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    327c:	0d c0       	rjmp	.+26     	; 0x3298 <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    327e:	90 91 d3 04 	lds	r25, 0x04D3
    3282:	80 91 6f 04 	lds	r24, 0x046F
    3286:	98 17       	cp	r25, r24
    3288:	29 f4       	brne	.+10     	; 0x3294 <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    328a:	10 92 6d 04 	sts	0x046D, r1
    328e:	10 92 6c 04 	sts	0x046C, r1
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    3294:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3298:	26 96       	adiw	r28, 0x06	; 6
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <prvTaskIsTaskSuspended+0x6>
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <prvTaskIsTaskSuspended+0x8>
    32b2:	0f 92       	push	r0
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	9d 83       	std	Y+5, r25	; 0x05
    32ba:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    32bc:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    32be:	8c 81       	ldd	r24, Y+4	; 0x04
    32c0:	9d 81       	ldd	r25, Y+5	; 0x05
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    32c6:	e9 81       	ldd	r30, Y+1	; 0x01
    32c8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ca:	82 85       	ldd	r24, Z+10	; 0x0a
    32cc:	93 85       	ldd	r25, Z+11	; 0x0b
    32ce:	24 e0       	ldi	r18, 0x04	; 4
    32d0:	83 3d       	cpi	r24, 0xD3	; 211
    32d2:	92 07       	cpc	r25, r18
    32d4:	81 f4       	brne	.+32     	; 0x32f6 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    32d6:	e9 81       	ldd	r30, Y+1	; 0x01
    32d8:	fa 81       	ldd	r31, Y+2	; 0x02
    32da:	84 89       	ldd	r24, Z+20	; 0x14
    32dc:	95 89       	ldd	r25, Z+21	; 0x15
    32de:	24 e0       	ldi	r18, 0x04	; 4
    32e0:	81 3c       	cpi	r24, 0xC1	; 193
    32e2:	92 07       	cpc	r25, r18
    32e4:	41 f0       	breq	.+16     	; 0x32f6 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	84 89       	ldd	r24, Z+20	; 0x14
    32ec:	95 89       	ldd	r25, Z+21	; 0x15
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	00 d0       	rcall	.+0      	; 0x330e <vTaskResume+0x6>
    330e:	00 d0       	rcall	.+0      	; 0x3310 <vTaskResume+0x8>
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	9c 81       	ldd	r25, Y+4	; 0x04
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    3320:	20 91 6c 04 	lds	r18, 0x046C
    3324:	30 91 6d 04 	lds	r19, 0x046D
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	82 17       	cp	r24, r18
    332e:	93 07       	cpc	r25, r19
    3330:	09 f4       	brne	.+2      	; 0x3334 <vTaskResume+0x2c>
    3332:	47 c0       	rjmp	.+142    	; 0x33c2 <vTaskResume+0xba>
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	09 f4       	brne	.+2      	; 0x333e <vTaskResume+0x36>
    333c:	42 c0       	rjmp	.+132    	; 0x33c2 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	0e 94 55 19 	call	0x32aa	; 0x32aa <prvTaskIsTaskSuspended>
    334c:	88 23       	and	r24, r24
    334e:	b9 f1       	breq	.+110    	; 0x33be <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	9a 81       	ldd	r25, Y+2	; 0x02
    3354:	02 96       	adiw	r24, 0x02	; 2
    3356:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    335a:	e9 81       	ldd	r30, Y+1	; 0x01
    335c:	fa 81       	ldd	r31, Y+2	; 0x02
    335e:	96 89       	ldd	r25, Z+22	; 0x16
    3360:	80 91 72 04 	lds	r24, 0x0472
    3364:	89 17       	cp	r24, r25
    3366:	28 f4       	brcc	.+10     	; 0x3372 <vTaskResume+0x6a>
    3368:	e9 81       	ldd	r30, Y+1	; 0x01
    336a:	fa 81       	ldd	r31, Y+2	; 0x02
    336c:	86 89       	ldd	r24, Z+22	; 0x16
    336e:	80 93 72 04 	sts	0x0472, r24
    3372:	e9 81       	ldd	r30, Y+1	; 0x01
    3374:	fa 81       	ldd	r31, Y+2	; 0x02
    3376:	86 89       	ldd	r24, Z+22	; 0x16
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	c9 01       	movw	r24, r18
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	88 0f       	add	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	82 0f       	add	r24, r18
    338c:	93 1f       	adc	r25, r19
    338e:	ac 01       	movw	r20, r24
    3390:	42 58       	subi	r20, 0x82	; 130
    3392:	5b 4f       	sbci	r21, 0xFB	; 251
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	9c 01       	movw	r18, r24
    339a:	2e 5f       	subi	r18, 0xFE	; 254
    339c:	3f 4f       	sbci	r19, 0xFF	; 255
    339e:	ca 01       	movw	r24, r20
    33a0:	b9 01       	movw	r22, r18
    33a2:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    33a6:	e9 81       	ldd	r30, Y+1	; 0x01
    33a8:	fa 81       	ldd	r31, Y+2	; 0x02
    33aa:	96 89       	ldd	r25, Z+22	; 0x16
    33ac:	e0 91 6c 04 	lds	r30, 0x046C
    33b0:	f0 91 6d 04 	lds	r31, 0x046D
    33b4:	86 89       	ldd	r24, Z+22	; 0x16
    33b6:	98 17       	cp	r25, r24
    33b8:	10 f0       	brcs	.+4      	; 0x33be <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    33ba:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    33be:	0f 90       	pop	r0
    33c0:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	08 95       	ret

000033d0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <xTaskResumeFromISR+0x6>
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <xTaskResumeFromISR+0x8>
    33d8:	00 d0       	rcall	.+0      	; 0x33da <xTaskResumeFromISR+0xa>
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    33e2:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	9b 83       	std	Y+3, r25	; 0x03
    33ea:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    33ec:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	0e 94 55 19 	call	0x32aa	; 0x32aa <prvTaskIsTaskSuspended>
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <xTaskResumeFromISR+0x2c>
    33fa:	46 c0       	rjmp	.+140    	; 0x3488 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    33fc:	80 91 7d 04 	lds	r24, 0x047D
    3400:	88 23       	and	r24, r24
    3402:	c1 f5       	brne	.+112    	; 0x3474 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3404:	ea 81       	ldd	r30, Y+2	; 0x02
    3406:	fb 81       	ldd	r31, Y+3	; 0x03
    3408:	96 89       	ldd	r25, Z+22	; 0x16
    340a:	e0 91 6c 04 	lds	r30, 0x046C
    340e:	f0 91 6d 04 	lds	r31, 0x046D
    3412:	86 89       	ldd	r24, Z+22	; 0x16
    3414:	98 17       	cp	r25, r24
    3416:	10 f0       	brcs	.+4      	; 0x341c <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	9b 81       	ldd	r25, Y+3	; 0x03
    3420:	02 96       	adiw	r24, 0x02	; 2
    3422:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3426:	ea 81       	ldd	r30, Y+2	; 0x02
    3428:	fb 81       	ldd	r31, Y+3	; 0x03
    342a:	96 89       	ldd	r25, Z+22	; 0x16
    342c:	80 91 72 04 	lds	r24, 0x0472
    3430:	89 17       	cp	r24, r25
    3432:	28 f4       	brcc	.+10     	; 0x343e <xTaskResumeFromISR+0x6e>
    3434:	ea 81       	ldd	r30, Y+2	; 0x02
    3436:	fb 81       	ldd	r31, Y+3	; 0x03
    3438:	86 89       	ldd	r24, Z+22	; 0x16
    343a:	80 93 72 04 	sts	0x0472, r24
    343e:	ea 81       	ldd	r30, Y+2	; 0x02
    3440:	fb 81       	ldd	r31, Y+3	; 0x03
    3442:	86 89       	ldd	r24, Z+22	; 0x16
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	82 0f       	add	r24, r18
    3458:	93 1f       	adc	r25, r19
    345a:	ac 01       	movw	r20, r24
    345c:	42 58       	subi	r20, 0x82	; 130
    345e:	5b 4f       	sbci	r21, 0xFB	; 251
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	9c 01       	movw	r18, r24
    3466:	2e 5f       	subi	r18, 0xFE	; 254
    3468:	3f 4f       	sbci	r19, 0xFF	; 255
    346a:	ca 01       	movw	r24, r20
    346c:	b9 01       	movw	r22, r18
    346e:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
    3472:	0a c0       	rjmp	.+20     	; 0x3488 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	9c 01       	movw	r18, r24
    347a:	24 5f       	subi	r18, 0xF4	; 244
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	81 ec       	ldi	r24, 0xC1	; 193
    3480:	94 e0       	ldi	r25, 0x04	; 4
    3482:	b9 01       	movw	r22, r18
    3484:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    3488:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    348a:	26 96       	adiw	r28, 0x06	; 6
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	0f 93       	push	r16
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	0f 92       	push	r0
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    34ac:	82 ed       	ldi	r24, 0xD2	; 210
    34ae:	9e e1       	ldi	r25, 0x1E	; 30
    34b0:	22 e7       	ldi	r18, 0x72	; 114
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	eb e7       	ldi	r30, 0x7B	; 123
    34b6:	f4 e0       	ldi	r31, 0x04	; 4
    34b8:	b9 01       	movw	r22, r18
    34ba:	4a ef       	ldi	r20, 0xFA	; 250
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	00 e0       	ldi	r16, 0x00	; 0
    34c4:	7f 01       	movw	r14, r30
    34c6:	0e 94 11 15 	call	0x2a22	; 0x2a22 <xTaskCreate>
    34ca:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	81 30       	cpi	r24, 0x01	; 1
    34d0:	81 f4       	brne	.+32     	; 0x34f2 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    34d2:	f8 94       	cli
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	9f ef       	ldi	r25, 0xFF	; 255
    34d8:	90 93 7a 04 	sts	0x047A, r25
    34dc:	80 93 79 04 	sts	0x0479, r24
		xSchedulerRunning = pdTRUE;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	80 93 73 04 	sts	0x0473, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    34e6:	10 92 71 04 	sts	0x0471, r1
    34ea:	10 92 70 04 	sts	0x0470, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    34ee:	0e 94 a0 0c 	call	0x1940	; 0x1940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    34f2:	0f 90       	pop	r0
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	08 95       	ret

00003500 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3508:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    350a:	10 92 73 04 	sts	0x0473, r1
	vPortEndScheduler();
    350e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vPortEndScheduler>
}
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
    3520:	80 91 7d 04 	lds	r24, 0x047D
    3524:	8f 5f       	subi	r24, 0xFF	; 255
    3526:	80 93 7d 04 	sts	0x047D, r24

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	00 d0       	rcall	.+0      	; 0x3536 <xTaskResumeAll+0x6>
    3536:	00 d0       	rcall	.+0      	; 0x3538 <xTaskResumeAll+0x8>
    3538:	0f 92       	push	r0
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    353e:	1d 82       	std	Y+5, r1	; 0x05
    3540:	1c 82       	std	Y+4, r1	; 0x04
BaseType_t xAlreadyYielded = pdFALSE;
    3542:	1b 82       	std	Y+3, r1	; 0x03
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    354a:	80 91 7d 04 	lds	r24, 0x047D
    354e:	81 50       	subi	r24, 0x01	; 1
    3550:	80 93 7d 04 	sts	0x047D, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3554:	80 91 7d 04 	lds	r24, 0x047D
    3558:	88 23       	and	r24, r24
    355a:	09 f0       	breq	.+2      	; 0x355e <xTaskResumeAll+0x2e>
    355c:	7c c0       	rjmp	.+248    	; 0x3656 <xTaskResumeAll+0x126>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    355e:	80 91 6f 04 	lds	r24, 0x046F
    3562:	88 23       	and	r24, r24
    3564:	09 f4       	brne	.+2      	; 0x3568 <xTaskResumeAll+0x38>
    3566:	77 c0       	rjmp	.+238    	; 0x3656 <xTaskResumeAll+0x126>
    3568:	45 c0       	rjmp	.+138    	; 0x35f4 <xTaskResumeAll+0xc4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    356a:	e0 91 c6 04 	lds	r30, 0x04C6
    356e:	f0 91 c7 04 	lds	r31, 0x04C7
    3572:	86 81       	ldd	r24, Z+6	; 0x06
    3574:	97 81       	ldd	r25, Z+7	; 0x07
    3576:	9d 83       	std	Y+5, r25	; 0x05
    3578:	8c 83       	std	Y+4, r24	; 0x04
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    357a:	8c 81       	ldd	r24, Y+4	; 0x04
    357c:	9d 81       	ldd	r25, Y+5	; 0x05
    357e:	0c 96       	adiw	r24, 0x0c	; 12
    3580:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3584:	8c 81       	ldd	r24, Y+4	; 0x04
    3586:	9d 81       	ldd	r25, Y+5	; 0x05
    3588:	02 96       	adiw	r24, 0x02	; 2
    358a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    358e:	ec 81       	ldd	r30, Y+4	; 0x04
    3590:	fd 81       	ldd	r31, Y+5	; 0x05
    3592:	96 89       	ldd	r25, Z+22	; 0x16
    3594:	80 91 72 04 	lds	r24, 0x0472
    3598:	89 17       	cp	r24, r25
    359a:	28 f4       	brcc	.+10     	; 0x35a6 <xTaskResumeAll+0x76>
    359c:	ec 81       	ldd	r30, Y+4	; 0x04
    359e:	fd 81       	ldd	r31, Y+5	; 0x05
    35a0:	86 89       	ldd	r24, Z+22	; 0x16
    35a2:	80 93 72 04 	sts	0x0472, r24
    35a6:	ec 81       	ldd	r30, Y+4	; 0x04
    35a8:	fd 81       	ldd	r31, Y+5	; 0x05
    35aa:	86 89       	ldd	r24, Z+22	; 0x16
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	c9 01       	movw	r24, r18
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	82 0f       	add	r24, r18
    35c0:	93 1f       	adc	r25, r19
    35c2:	ac 01       	movw	r20, r24
    35c4:	42 58       	subi	r20, 0x82	; 130
    35c6:	5b 4f       	sbci	r21, 0xFB	; 251
    35c8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ca:	9d 81       	ldd	r25, Y+5	; 0x05
    35cc:	9c 01       	movw	r18, r24
    35ce:	2e 5f       	subi	r18, 0xFE	; 254
    35d0:	3f 4f       	sbci	r19, 0xFF	; 255
    35d2:	ca 01       	movw	r24, r20
    35d4:	b9 01       	movw	r22, r18
    35d6:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    35da:	ec 81       	ldd	r30, Y+4	; 0x04
    35dc:	fd 81       	ldd	r31, Y+5	; 0x05
    35de:	96 89       	ldd	r25, Z+22	; 0x16
    35e0:	e0 91 6c 04 	lds	r30, 0x046C
    35e4:	f0 91 6d 04 	lds	r31, 0x046D
    35e8:	86 89       	ldd	r24, Z+22	; 0x16
    35ea:	98 17       	cp	r25, r24
    35ec:	18 f0       	brcs	.+6      	; 0x35f4 <xTaskResumeAll+0xc4>
					{
						xYieldPending = pdTRUE;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	80 93 76 04 	sts	0x0476, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    35f4:	80 91 c1 04 	lds	r24, 0x04C1
    35f8:	88 23       	and	r24, r24
    35fa:	09 f0       	breq	.+2      	; 0x35fe <xTaskResumeAll+0xce>
    35fc:	b6 cf       	rjmp	.-148    	; 0x356a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    35fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3600:	9d 81       	ldd	r25, Y+5	; 0x05
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	11 f0       	breq	.+4      	; 0x360a <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    3606:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    360a:	80 91 74 04 	lds	r24, 0x0474
    360e:	90 91 75 04 	lds	r25, 0x0475
    3612:	9a 83       	std	Y+2, r25	; 0x02
    3614:	89 83       	std	Y+1, r24	; 0x01

					if( xPendedCounts > ( TickType_t ) 0U )
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	9a 81       	ldd	r25, Y+2	; 0x02
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	a1 f0       	breq	.+40     	; 0x3646 <xTaskResumeAll+0x116>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    361e:	0e 94 b4 1b 	call	0x3768	; 0x3768 <xTaskIncrementTick>
    3622:	88 23       	and	r24, r24
    3624:	19 f0       	breq	.+6      	; 0x362c <xTaskResumeAll+0xfc>
							{
								xYieldPending = pdTRUE;
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	80 93 76 04 	sts	0x0476, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	9a 81       	ldd	r25, Y+2	; 0x02
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
						} while( xPendedCounts > ( TickType_t ) 0U );
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	81 f7       	brne	.-32     	; 0x361e <xTaskResumeAll+0xee>

						xPendedTicks = 0;
    363e:	10 92 75 04 	sts	0x0475, r1
    3642:	10 92 74 04 	sts	0x0474, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    3646:	80 91 76 04 	lds	r24, 0x0476
    364a:	88 23       	and	r24, r24
    364c:	21 f0       	breq	.+8      	; 0x3656 <xTaskResumeAll+0x126>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	8b 83       	std	Y+3, r24	; 0x03
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3652:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3656:	0f 90       	pop	r0
    3658:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    365a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <xTaskGetTickCount+0x6>
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    367c:	80 91 70 04 	lds	r24, 0x0470
    3680:	90 91 71 04 	lds	r25, 0x0471
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    3688:	0f 90       	pop	r0
    368a:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <xTaskGetTickCountFromISR+0x6>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    36a6:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    36a8:	80 91 70 04 	lds	r24, 0x0470
    36ac:	90 91 71 04 	lds	r25, 0x0471
    36b0:	9b 83       	std	Y+3, r25	; 0x03
    36b2:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    36cc:	80 91 6f 04 	lds	r24, 0x046F
}
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	00 d0       	rcall	.+0      	; 0x36dc <pcTaskGetName+0x6>
    36dc:	00 d0       	rcall	.+0      	; 0x36de <pcTaskGetName+0x8>
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <pcTaskGetName+0xa>
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	9c 83       	std	Y+4, r25	; 0x04
    36e6:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	39 f4       	brne	.+14     	; 0x36fe <pcTaskGetName+0x28>
    36f0:	80 91 6c 04 	lds	r24, 0x046C
    36f4:	90 91 6d 04 	lds	r25, 0x046D
    36f8:	9e 83       	std	Y+6, r25	; 0x06
    36fa:	8d 83       	std	Y+5, r24	; 0x05
    36fc:	04 c0       	rjmp	.+8      	; 0x3706 <pcTaskGetName+0x30>
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	9c 81       	ldd	r25, Y+4	; 0x04
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	8d 83       	std	Y+5, r24	; 0x05
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	9e 81       	ldd	r25, Y+6	; 0x06
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	49 96       	adiw	r24, 0x19	; 25
}
    3714:	26 96       	adiw	r28, 0x06	; 6
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	00 d0       	rcall	.+0      	; 0x372c <xTaskCatchUpTicks+0x6>
    372c:	0f 92       	push	r0
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	9b 83       	std	Y+3, r25	; 0x03
    3734:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xYieldRequired = pdFALSE;
    3736:	19 82       	std	Y+1, r1	; 0x01
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
    3738:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
    373c:	20 91 74 04 	lds	r18, 0x0474
    3740:	30 91 75 04 	lds	r19, 0x0475
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	9b 81       	ldd	r25, Y+3	; 0x03
    3748:	82 0f       	add	r24, r18
    374a:	93 1f       	adc	r25, r19
    374c:	90 93 75 04 	sts	0x0475, r25
    3750:	80 93 74 04 	sts	0x0474, r24
	xYieldRequired = xTaskResumeAll();
    3754:	0e 94 98 1a 	call	0x3530	; 0x3530 <xTaskResumeAll>
    3758:	89 83       	std	Y+1, r24	; 0x01

	return xYieldRequired;
    375a:	89 81       	ldd	r24, Y+1	; 0x01
}
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	08 95       	ret

00003768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	29 97       	sbiw	r28, 0x09	; 9
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    377c:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    377e:	80 91 7d 04 	lds	r24, 0x047D
    3782:	88 23       	and	r24, r24
    3784:	09 f0       	breq	.+2      	; 0x3788 <xTaskIncrementTick+0x20>
    3786:	c6 c0       	rjmp	.+396    	; 0x3914 <xTaskIncrementTick+0x1ac>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3788:	80 91 70 04 	lds	r24, 0x0470
    378c:	90 91 71 04 	lds	r25, 0x0471
    3790:	01 96       	adiw	r24, 0x01	; 1
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	90 93 71 04 	sts	0x0471, r25
    379e:	80 93 70 04 	sts	0x0470, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    37a2:	8b 81       	ldd	r24, Y+3	; 0x03
    37a4:	9c 81       	ldd	r25, Y+4	; 0x04
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	d9 f4       	brne	.+54     	; 0x37e0 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    37aa:	80 91 bd 04 	lds	r24, 0x04BD
    37ae:	90 91 be 04 	lds	r25, 0x04BE
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	80 91 bf 04 	lds	r24, 0x04BF
    37ba:	90 91 c0 04 	lds	r25, 0x04C0
    37be:	90 93 be 04 	sts	0x04BE, r25
    37c2:	80 93 bd 04 	sts	0x04BD, r24
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	90 93 c0 04 	sts	0x04C0, r25
    37ce:	80 93 bf 04 	sts	0x04BF, r24
    37d2:	80 91 77 04 	lds	r24, 0x0477
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	80 93 77 04 	sts	0x0477, r24
    37dc:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    37e0:	20 91 79 04 	lds	r18, 0x0479
    37e4:	30 91 7a 04 	lds	r19, 0x047A
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	9c 81       	ldd	r25, Y+4	; 0x04
    37ec:	82 17       	cp	r24, r18
    37ee:	93 07       	cpc	r25, r19
    37f0:	08 f4       	brcc	.+2      	; 0x37f4 <xTaskIncrementTick+0x8c>
    37f2:	71 c0       	rjmp	.+226    	; 0x38d6 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    37f4:	e0 91 bd 04 	lds	r30, 0x04BD
    37f8:	f0 91 be 04 	lds	r31, 0x04BE
    37fc:	80 81       	ld	r24, Z
    37fe:	88 23       	and	r24, r24
    3800:	39 f4       	brne	.+14     	; 0x3810 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3802:	8f ef       	ldi	r24, 0xFF	; 255
    3804:	9f ef       	ldi	r25, 0xFF	; 255
    3806:	90 93 7a 04 	sts	0x047A, r25
    380a:	80 93 79 04 	sts	0x0479, r24
    380e:	63 c0       	rjmp	.+198    	; 0x38d6 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3810:	e0 91 bd 04 	lds	r30, 0x04BD
    3814:	f0 91 be 04 	lds	r31, 0x04BE
    3818:	05 80       	ldd	r0, Z+5	; 0x05
    381a:	f6 81       	ldd	r31, Z+6	; 0x06
    381c:	e0 2d       	mov	r30, r0
    381e:	86 81       	ldd	r24, Z+6	; 0x06
    3820:	97 81       	ldd	r25, Z+7	; 0x07
    3822:	99 87       	std	Y+9, r25	; 0x09
    3824:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3826:	e8 85       	ldd	r30, Y+8	; 0x08
    3828:	f9 85       	ldd	r31, Y+9	; 0x09
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	9f 83       	std	Y+7, r25	; 0x07
    3830:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    3832:	2b 81       	ldd	r18, Y+3	; 0x03
    3834:	3c 81       	ldd	r19, Y+4	; 0x04
    3836:	8e 81       	ldd	r24, Y+6	; 0x06
    3838:	9f 81       	ldd	r25, Y+7	; 0x07
    383a:	28 17       	cp	r18, r24
    383c:	39 07       	cpc	r19, r25
    383e:	38 f4       	brcc	.+14     	; 0x384e <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    3840:	8e 81       	ldd	r24, Y+6	; 0x06
    3842:	9f 81       	ldd	r25, Y+7	; 0x07
    3844:	90 93 7a 04 	sts	0x047A, r25
    3848:	80 93 79 04 	sts	0x0479, r24
    384c:	44 c0       	rjmp	.+136    	; 0x38d6 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    384e:	88 85       	ldd	r24, Y+8	; 0x08
    3850:	99 85       	ldd	r25, Y+9	; 0x09
    3852:	02 96       	adiw	r24, 0x02	; 2
    3854:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3858:	e8 85       	ldd	r30, Y+8	; 0x08
    385a:	f9 85       	ldd	r31, Y+9	; 0x09
    385c:	84 89       	ldd	r24, Z+20	; 0x14
    385e:	95 89       	ldd	r25, Z+21	; 0x15
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	29 f0       	breq	.+10     	; 0x386e <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3864:	88 85       	ldd	r24, Y+8	; 0x08
    3866:	99 85       	ldd	r25, Y+9	; 0x09
    3868:	0c 96       	adiw	r24, 0x0c	; 12
    386a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    386e:	e8 85       	ldd	r30, Y+8	; 0x08
    3870:	f9 85       	ldd	r31, Y+9	; 0x09
    3872:	96 89       	ldd	r25, Z+22	; 0x16
    3874:	80 91 72 04 	lds	r24, 0x0472
    3878:	89 17       	cp	r24, r25
    387a:	28 f4       	brcc	.+10     	; 0x3886 <xTaskIncrementTick+0x11e>
    387c:	e8 85       	ldd	r30, Y+8	; 0x08
    387e:	f9 85       	ldd	r31, Y+9	; 0x09
    3880:	86 89       	ldd	r24, Z+22	; 0x16
    3882:	80 93 72 04 	sts	0x0472, r24
    3886:	e8 85       	ldd	r30, Y+8	; 0x08
    3888:	f9 85       	ldd	r31, Y+9	; 0x09
    388a:	86 89       	ldd	r24, Z+22	; 0x16
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	c9 01       	movw	r24, r18
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	82 0f       	add	r24, r18
    38a0:	93 1f       	adc	r25, r19
    38a2:	ac 01       	movw	r20, r24
    38a4:	42 58       	subi	r20, 0x82	; 130
    38a6:	5b 4f       	sbci	r21, 0xFB	; 251
    38a8:	88 85       	ldd	r24, Y+8	; 0x08
    38aa:	99 85       	ldd	r25, Y+9	; 0x09
    38ac:	9c 01       	movw	r18, r24
    38ae:	2e 5f       	subi	r18, 0xFE	; 254
    38b0:	3f 4f       	sbci	r19, 0xFF	; 255
    38b2:	ca 01       	movw	r24, r20
    38b4:	b9 01       	movw	r22, r18
    38b6:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38ba:	e8 85       	ldd	r30, Y+8	; 0x08
    38bc:	f9 85       	ldd	r31, Y+9	; 0x09
    38be:	96 89       	ldd	r25, Z+22	; 0x16
    38c0:	e0 91 6c 04 	lds	r30, 0x046C
    38c4:	f0 91 6d 04 	lds	r31, 0x046D
    38c8:	86 89       	ldd	r24, Z+22	; 0x16
    38ca:	98 17       	cp	r25, r24
    38cc:	08 f4       	brcc	.+2      	; 0x38d0 <xTaskIncrementTick+0x168>
    38ce:	92 cf       	rjmp	.-220    	; 0x37f4 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	8f cf       	rjmp	.-226    	; 0x37f4 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    38d6:	e0 91 6c 04 	lds	r30, 0x046C
    38da:	f0 91 6d 04 	lds	r31, 0x046D
    38de:	86 89       	ldd	r24, Z+22	; 0x16
    38e0:	28 2f       	mov	r18, r24
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	c9 01       	movw	r24, r18
    38e6:	88 0f       	add	r24, r24
    38e8:	99 1f       	adc	r25, r25
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	82 0f       	add	r24, r18
    38f4:	93 1f       	adc	r25, r19
    38f6:	fc 01       	movw	r30, r24
    38f8:	e2 58       	subi	r30, 0x82	; 130
    38fa:	fb 4f       	sbci	r31, 0xFB	; 251
    38fc:	80 81       	ld	r24, Z
    38fe:	82 30       	cpi	r24, 0x02	; 2
    3900:	10 f0       	brcs	.+4      	; 0x3906 <xTaskIncrementTick+0x19e>
			{
				xSwitchRequired = pdTRUE;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8d 83       	std	Y+5, r24	; 0x05
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
    3906:	80 91 76 04 	lds	r24, 0x0476
    390a:	88 23       	and	r24, r24
    390c:	61 f0       	breq	.+24     	; 0x3926 <xTaskIncrementTick+0x1be>
			{
				xSwitchRequired = pdTRUE;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	8d 83       	std	Y+5, r24	; 0x05
    3912:	09 c0       	rjmp	.+18     	; 0x3926 <xTaskIncrementTick+0x1be>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
    3914:	80 91 74 04 	lds	r24, 0x0474
    3918:	90 91 75 04 	lds	r25, 0x0475
    391c:	01 96       	adiw	r24, 0x01	; 1
    391e:	90 93 75 04 	sts	0x0475, r25
    3922:	80 93 74 04 	sts	0x0474, r24
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
    3926:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3928:	29 96       	adiw	r28, 0x09	; 9
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	00 d0       	rcall	.+0      	; 0x3940 <vTaskSwitchContext+0x6>
    3940:	0f 92       	push	r0
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3946:	80 91 7d 04 	lds	r24, 0x047D
    394a:	88 23       	and	r24, r24
    394c:	21 f0       	breq	.+8      	; 0x3956 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	80 93 76 04 	sts	0x0476, r24
    3954:	59 c0       	rjmp	.+178    	; 0x3a08 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    3956:	10 92 76 04 	sts	0x0476, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    395a:	80 91 72 04 	lds	r24, 0x0472
    395e:	8b 83       	std	Y+3, r24	; 0x03
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <vTaskSwitchContext+0x2e>
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	81 50       	subi	r24, 0x01	; 1
    3966:	8b 83       	std	Y+3, r24	; 0x03
    3968:	8b 81       	ldd	r24, Y+3	; 0x03
    396a:	28 2f       	mov	r18, r24
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	c9 01       	movw	r24, r18
    3970:	88 0f       	add	r24, r24
    3972:	99 1f       	adc	r25, r25
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	82 0f       	add	r24, r18
    397e:	93 1f       	adc	r25, r19
    3980:	fc 01       	movw	r30, r24
    3982:	e2 58       	subi	r30, 0x82	; 130
    3984:	fb 4f       	sbci	r31, 0xFB	; 251
    3986:	80 81       	ld	r24, Z
    3988:	88 23       	and	r24, r24
    398a:	59 f3       	breq	.-42     	; 0x3962 <vTaskSwitchContext+0x28>
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	28 2f       	mov	r18, r24
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	c9 01       	movw	r24, r18
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	82 0f       	add	r24, r18
    39a2:	93 1f       	adc	r25, r19
    39a4:	82 58       	subi	r24, 0x82	; 130
    39a6:	9b 4f       	sbci	r25, 0xFB	; 251
    39a8:	9a 83       	std	Y+2, r25	; 0x02
    39aa:	89 83       	std	Y+1, r24	; 0x01
    39ac:	e9 81       	ldd	r30, Y+1	; 0x01
    39ae:	fa 81       	ldd	r31, Y+2	; 0x02
    39b0:	01 80       	ldd	r0, Z+1	; 0x01
    39b2:	f2 81       	ldd	r31, Z+2	; 0x02
    39b4:	e0 2d       	mov	r30, r0
    39b6:	82 81       	ldd	r24, Z+2	; 0x02
    39b8:	93 81       	ldd	r25, Z+3	; 0x03
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	92 83       	std	Z+2, r25	; 0x02
    39c0:	81 83       	std	Z+1, r24	; 0x01
    39c2:	e9 81       	ldd	r30, Y+1	; 0x01
    39c4:	fa 81       	ldd	r31, Y+2	; 0x02
    39c6:	21 81       	ldd	r18, Z+1	; 0x01
    39c8:	32 81       	ldd	r19, Z+2	; 0x02
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
    39ce:	03 96       	adiw	r24, 0x03	; 3
    39d0:	28 17       	cp	r18, r24
    39d2:	39 07       	cpc	r19, r25
    39d4:	59 f4       	brne	.+22     	; 0x39ec <vTaskSwitchContext+0xb2>
    39d6:	e9 81       	ldd	r30, Y+1	; 0x01
    39d8:	fa 81       	ldd	r31, Y+2	; 0x02
    39da:	01 80       	ldd	r0, Z+1	; 0x01
    39dc:	f2 81       	ldd	r31, Z+2	; 0x02
    39de:	e0 2d       	mov	r30, r0
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	92 83       	std	Z+2, r25	; 0x02
    39ea:	81 83       	std	Z+1, r24	; 0x01
    39ec:	e9 81       	ldd	r30, Y+1	; 0x01
    39ee:	fa 81       	ldd	r31, Y+2	; 0x02
    39f0:	01 80       	ldd	r0, Z+1	; 0x01
    39f2:	f2 81       	ldd	r31, Z+2	; 0x02
    39f4:	e0 2d       	mov	r30, r0
    39f6:	86 81       	ldd	r24, Z+6	; 0x06
    39f8:	97 81       	ldd	r25, Z+7	; 0x07
    39fa:	90 93 6d 04 	sts	0x046D, r25
    39fe:	80 93 6c 04 	sts	0x046C, r24
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	80 93 72 04 	sts	0x0472, r24
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	08 95       	ret

00003a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <vTaskPlaceOnEventList+0x6>
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <vTaskPlaceOnEventList+0x8>
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	9a 83       	std	Y+2, r25	; 0x02
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	7c 83       	std	Y+4, r23	; 0x04
    3a26:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3a28:	80 91 6c 04 	lds	r24, 0x046C
    3a2c:	90 91 6d 04 	lds	r25, 0x046D
    3a30:	9c 01       	movw	r18, r24
    3a32:	24 5f       	subi	r18, 0xF4	; 244
    3a34:	3f 4f       	sbci	r19, 0xFF	; 255
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3a:	b9 01       	movw	r22, r18
    3a3c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	9c 81       	ldd	r25, Y+4	; 0x04
    3a44:	61 e0       	ldi	r22, 0x01	; 1
    3a46:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>
}
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	08 95       	ret

00003a58 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <vTaskPlaceOnUnorderedEventList+0x6>
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <vTaskPlaceOnUnorderedEventList+0x8>
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <vTaskPlaceOnUnorderedEventList+0xa>
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	9a 83       	std	Y+2, r25	; 0x02
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	7c 83       	std	Y+4, r23	; 0x04
    3a6c:	6b 83       	std	Y+3, r22	; 0x03
    3a6e:	5e 83       	std	Y+6, r21	; 0x06
    3a70:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3a72:	e0 91 6c 04 	lds	r30, 0x046C
    3a76:	f0 91 6d 04 	lds	r31, 0x046D
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7e:	90 68       	ori	r25, 0x80	; 128
    3a80:	95 87       	std	Z+13, r25	; 0x0d
    3a82:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3a84:	80 91 6c 04 	lds	r24, 0x046C
    3a88:	90 91 6d 04 	lds	r25, 0x046D
    3a8c:	9c 01       	movw	r18, r24
    3a8e:	24 5f       	subi	r18, 0xF4	; 244
    3a90:	3f 4f       	sbci	r19, 0xFF	; 255
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	b9 01       	movw	r22, r18
    3a98:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	61 e0       	ldi	r22, 0x01	; 1
    3aa2:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>
}
    3aa6:	26 96       	adiw	r28, 0x06	; 6
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <xTaskRemoveFromEventList+0x6>
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <xTaskRemoveFromEventList+0x8>
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	9d 83       	std	Y+5, r25	; 0x05
    3ac8:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3aca:	ec 81       	ldd	r30, Y+4	; 0x04
    3acc:	fd 81       	ldd	r31, Y+5	; 0x05
    3ace:	05 80       	ldd	r0, Z+5	; 0x05
    3ad0:	f6 81       	ldd	r31, Z+6	; 0x06
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	86 81       	ldd	r24, Z+6	; 0x06
    3ad6:	97 81       	ldd	r25, Z+7	; 0x07
    3ad8:	9b 83       	std	Y+3, r25	; 0x03
    3ada:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae0:	0c 96       	adiw	r24, 0x0c	; 12
    3ae2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ae6:	80 91 7d 04 	lds	r24, 0x047D
    3aea:	88 23       	and	r24, r24
    3aec:	61 f5       	brne	.+88     	; 0x3b46 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	9b 81       	ldd	r25, Y+3	; 0x03
    3af2:	02 96       	adiw	r24, 0x02	; 2
    3af4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3af8:	ea 81       	ldd	r30, Y+2	; 0x02
    3afa:	fb 81       	ldd	r31, Y+3	; 0x03
    3afc:	96 89       	ldd	r25, Z+22	; 0x16
    3afe:	80 91 72 04 	lds	r24, 0x0472
    3b02:	89 17       	cp	r24, r25
    3b04:	28 f4       	brcc	.+10     	; 0x3b10 <xTaskRemoveFromEventList+0x58>
    3b06:	ea 81       	ldd	r30, Y+2	; 0x02
    3b08:	fb 81       	ldd	r31, Y+3	; 0x03
    3b0a:	86 89       	ldd	r24, Z+22	; 0x16
    3b0c:	80 93 72 04 	sts	0x0472, r24
    3b10:	ea 81       	ldd	r30, Y+2	; 0x02
    3b12:	fb 81       	ldd	r31, Y+3	; 0x03
    3b14:	86 89       	ldd	r24, Z+22	; 0x16
    3b16:	28 2f       	mov	r18, r24
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	c9 01       	movw	r24, r18
    3b1c:	88 0f       	add	r24, r24
    3b1e:	99 1f       	adc	r25, r25
    3b20:	88 0f       	add	r24, r24
    3b22:	99 1f       	adc	r25, r25
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	ac 01       	movw	r20, r24
    3b2e:	42 58       	subi	r20, 0x82	; 130
    3b30:	5b 4f       	sbci	r21, 0xFB	; 251
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	9b 81       	ldd	r25, Y+3	; 0x03
    3b36:	9c 01       	movw	r18, r24
    3b38:	2e 5f       	subi	r18, 0xFE	; 254
    3b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b3c:	ca 01       	movw	r24, r20
    3b3e:	b9 01       	movw	r22, r18
    3b40:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
    3b44:	0a c0       	rjmp	.+20     	; 0x3b5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	9c 01       	movw	r18, r24
    3b4c:	24 5f       	subi	r18, 0xF4	; 244
    3b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b50:	81 ec       	ldi	r24, 0xC1	; 193
    3b52:	94 e0       	ldi	r25, 0x04	; 4
    3b54:	b9 01       	movw	r22, r18
    3b56:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3b5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3b5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3b5e:	96 89       	ldd	r25, Z+22	; 0x16
    3b60:	e0 91 6c 04 	lds	r30, 0x046C
    3b64:	f0 91 6d 04 	lds	r31, 0x046D
    3b68:	86 89       	ldd	r24, Z+22	; 0x16
    3b6a:	89 17       	cp	r24, r25
    3b6c:	30 f4       	brcc	.+12     	; 0x3b7a <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	80 93 76 04 	sts	0x0476, r24
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    3b7a:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	08 95       	ret

00003b8e <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <vTaskRemoveFromUnorderedEventList+0x6>
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <vTaskRemoveFromUnorderedEventList+0x8>
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <vTaskRemoveFromUnorderedEventList+0xa>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	9c 83       	std	Y+4, r25	; 0x04
    3b9e:	8b 83       	std	Y+3, r24	; 0x03
    3ba0:	7e 83       	std	Y+6, r23	; 0x06
    3ba2:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	90 68       	ori	r25, 0x80	; 128
    3baa:	eb 81       	ldd	r30, Y+3	; 0x03
    3bac:	fc 81       	ldd	r31, Y+4	; 0x04
    3bae:	91 83       	std	Z+1, r25	; 0x01
    3bb0:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    3bb6:	86 81       	ldd	r24, Z+6	; 0x06
    3bb8:	97 81       	ldd	r25, Z+7	; 0x07
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bca:	02 96       	adiw	r24, 0x02	; 2
    3bcc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    3bd4:	96 89       	ldd	r25, Z+22	; 0x16
    3bd6:	80 91 72 04 	lds	r24, 0x0472
    3bda:	89 17       	cp	r24, r25
    3bdc:	28 f4       	brcc	.+10     	; 0x3be8 <vTaskRemoveFromUnorderedEventList+0x5a>
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	86 89       	ldd	r24, Z+22	; 0x16
    3be4:	80 93 72 04 	sts	0x0472, r24
    3be8:	e9 81       	ldd	r30, Y+1	; 0x01
    3bea:	fa 81       	ldd	r31, Y+2	; 0x02
    3bec:	86 89       	ldd	r24, Z+22	; 0x16
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	c9 01       	movw	r24, r18
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	82 0f       	add	r24, r18
    3c02:	93 1f       	adc	r25, r19
    3c04:	ac 01       	movw	r20, r24
    3c06:	42 58       	subi	r20, 0x82	; 130
    3c08:	5b 4f       	sbci	r21, 0xFB	; 251
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	9c 01       	movw	r18, r24
    3c10:	2e 5f       	subi	r18, 0xFE	; 254
    3c12:	3f 4f       	sbci	r19, 0xFF	; 255
    3c14:	ca 01       	movw	r24, r20
    3c16:	b9 01       	movw	r22, r18
    3c18:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c20:	96 89       	ldd	r25, Z+22	; 0x16
    3c22:	e0 91 6c 04 	lds	r30, 0x046C
    3c26:	f0 91 6d 04 	lds	r31, 0x046D
    3c2a:	86 89       	ldd	r24, Z+22	; 0x16
    3c2c:	89 17       	cp	r24, r25
    3c2e:	18 f4       	brcc	.+6      	; 0x3c36 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	80 93 76 04 	sts	0x0476, r24
	}
}
    3c36:	26 96       	adiw	r28, 0x06	; 6
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	00 d0       	rcall	.+0      	; 0x3c4e <vTaskSetTimeOutState+0x6>
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	9a 83       	std	Y+2, r25	; 0x02
    3c54:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    3c5c:	80 91 77 04 	lds	r24, 0x0477
    3c60:	e9 81       	ldd	r30, Y+1	; 0x01
    3c62:	fa 81       	ldd	r31, Y+2	; 0x02
    3c64:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    3c66:	80 91 70 04 	lds	r24, 0x0470
    3c6a:	90 91 71 04 	lds	r25, 0x0471
    3c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c70:	fa 81       	ldd	r31, Y+2	; 0x02
    3c72:	92 83       	std	Z+2, r25	; 0x02
    3c74:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3c76:	0f 90       	pop	r0
    3c78:	0f be       	out	0x3f, r0	; 63
}
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	00 d0       	rcall	.+0      	; 0x3c8a <vTaskInternalSetTimeOutState+0x6>
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	9a 83       	std	Y+2, r25	; 0x02
    3c90:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3c92:	80 91 77 04 	lds	r24, 0x0477
    3c96:	e9 81       	ldd	r30, Y+1	; 0x01
    3c98:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    3c9c:	80 91 70 04 	lds	r24, 0x0470
    3ca0:	90 91 71 04 	lds	r25, 0x0471
    3ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca8:	92 83       	std	Z+2, r25	; 0x02
    3caa:	81 83       	std	Z+1, r24	; 0x01
}
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
    3cbe:	29 97       	sbiw	r28, 0x09	; 9
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	9f 83       	std	Y+7, r25	; 0x07
    3ccc:	8e 83       	std	Y+6, r24	; 0x06
    3cce:	79 87       	std	Y+9, r23	; 0x09
    3cd0:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3cd8:	80 91 70 04 	lds	r24, 0x0470
    3cdc:	90 91 71 04 	lds	r25, 0x0471
    3ce0:	9c 83       	std	Y+4, r25	; 0x04
    3ce2:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3ce4:	ee 81       	ldd	r30, Y+6	; 0x06
    3ce6:	ff 81       	ldd	r31, Y+7	; 0x07
    3ce8:	21 81       	ldd	r18, Z+1	; 0x01
    3cea:	32 81       	ldd	r19, Z+2	; 0x02
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	82 1b       	sub	r24, r18
    3cf2:	93 0b       	sbc	r25, r19
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
    3cf6:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    3cf8:	e8 85       	ldd	r30, Y+8	; 0x08
    3cfa:	f9 85       	ldd	r31, Y+9	; 0x09
    3cfc:	80 81       	ld	r24, Z
    3cfe:	91 81       	ldd	r25, Z+1	; 0x01
    3d00:	2f ef       	ldi	r18, 0xFF	; 255
    3d02:	8f 3f       	cpi	r24, 0xFF	; 255
    3d04:	92 07       	cpc	r25, r18
    3d06:	11 f4       	brne	.+4      	; 0x3d0c <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    3d08:	1d 82       	std	Y+5, r1	; 0x05
    3d0a:	36 c0       	rjmp	.+108    	; 0x3d78 <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3d0c:	ee 81       	ldd	r30, Y+6	; 0x06
    3d0e:	ff 81       	ldd	r31, Y+7	; 0x07
    3d10:	90 81       	ld	r25, Z
    3d12:	80 91 77 04 	lds	r24, 0x0477
    3d16:	98 17       	cp	r25, r24
    3d18:	61 f0       	breq	.+24     	; 0x3d32 <xTaskCheckForTimeOut+0x7c>
    3d1a:	ee 81       	ldd	r30, Y+6	; 0x06
    3d1c:	ff 81       	ldd	r31, Y+7	; 0x07
    3d1e:	21 81       	ldd	r18, Z+1	; 0x01
    3d20:	32 81       	ldd	r19, Z+2	; 0x02
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	9c 81       	ldd	r25, Y+4	; 0x04
    3d26:	82 17       	cp	r24, r18
    3d28:	93 07       	cpc	r25, r19
    3d2a:	18 f0       	brcs	.+6      	; 0x3d32 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	8d 83       	std	Y+5, r24	; 0x05
    3d30:	23 c0       	rjmp	.+70     	; 0x3d78 <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3d32:	e8 85       	ldd	r30, Y+8	; 0x08
    3d34:	f9 85       	ldd	r31, Y+9	; 0x09
    3d36:	20 81       	ld	r18, Z
    3d38:	31 81       	ldd	r19, Z+1	; 0x01
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	82 17       	cp	r24, r18
    3d40:	93 07       	cpc	r25, r19
    3d42:	a0 f4       	brcc	.+40     	; 0x3d6c <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    3d44:	e8 85       	ldd	r30, Y+8	; 0x08
    3d46:	f9 85       	ldd	r31, Y+9	; 0x09
    3d48:	20 81       	ld	r18, Z
    3d4a:	31 81       	ldd	r19, Z+1	; 0x01
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	a9 01       	movw	r20, r18
    3d52:	48 1b       	sub	r20, r24
    3d54:	59 0b       	sbc	r21, r25
    3d56:	ca 01       	movw	r24, r20
    3d58:	e8 85       	ldd	r30, Y+8	; 0x08
    3d5a:	f9 85       	ldd	r31, Y+9	; 0x09
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    3d60:	8e 81       	ldd	r24, Y+6	; 0x06
    3d62:	9f 81       	ldd	r25, Y+7	; 0x07
    3d64:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    3d68:	1d 82       	std	Y+5, r1	; 0x05
    3d6a:	06 c0       	rjmp	.+12     	; 0x3d78 <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    3d6c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d6e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d70:	11 82       	std	Z+1, r1	; 0x01
    3d72:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    3d78:	0f 90       	pop	r0
    3d7a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3d7e:	29 96       	adiw	r28, 0x09	; 9
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	08 95       	ret

00003d90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3d90:	df 93       	push	r29
    3d92:	cf 93       	push	r28
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	80 93 76 04 	sts	0x0476, r24
}
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <prvIdleTask+0x6>
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3db2:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <prvCheckTasksWaitingTermination>
    3db6:	fd cf       	rjmp	.-6      	; 0x3db2 <prvIdleTask+0xe>

00003db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	0f 92       	push	r0
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3dc2:	19 82       	std	Y+1, r1	; 0x01
    3dc4:	13 c0       	rjmp	.+38     	; 0x3dec <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	c9 01       	movw	r24, r18
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	88 0f       	add	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	88 0f       	add	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	82 0f       	add	r24, r18
    3ddc:	93 1f       	adc	r25, r19
    3dde:	82 58       	subi	r24, 0x82	; 130
    3de0:	9b 4f       	sbci	r25, 0xFB	; 251
    3de2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	8f 5f       	subi	r24, 0xFF	; 255
    3dea:	89 83       	std	Y+1, r24	; 0x01
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	85 30       	cpi	r24, 0x05	; 5
    3df0:	50 f3       	brcs	.-44     	; 0x3dc6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3df2:	8b ea       	ldi	r24, 0xAB	; 171
    3df4:	94 e0       	ldi	r25, 0x04	; 4
    3df6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3dfa:	84 eb       	ldi	r24, 0xB4	; 180
    3dfc:	94 e0       	ldi	r25, 0x04	; 4
    3dfe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3e02:	81 ec       	ldi	r24, 0xC1	; 193
    3e04:	94 e0       	ldi	r25, 0x04	; 4
    3e06:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3e0a:	8a ec       	ldi	r24, 0xCA	; 202
    3e0c:	94 e0       	ldi	r25, 0x04	; 4
    3e0e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3e12:	83 ed       	ldi	r24, 0xD3	; 211
    3e14:	94 e0       	ldi	r25, 0x04	; 4
    3e16:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3e1a:	8b ea       	ldi	r24, 0xAB	; 171
    3e1c:	94 e0       	ldi	r25, 0x04	; 4
    3e1e:	90 93 be 04 	sts	0x04BE, r25
    3e22:	80 93 bd 04 	sts	0x04BD, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3e26:	84 eb       	ldi	r24, 0xB4	; 180
    3e28:	94 e0       	ldi	r25, 0x04	; 4
    3e2a:	90 93 c0 04 	sts	0x04C0, r25
    3e2e:	80 93 bf 04 	sts	0x04BF, r24
}
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <prvCheckTasksWaitingTermination+0x6>
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	20 c0       	rjmp	.+64     	; 0x3e86 <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e4c:	e0 91 cf 04 	lds	r30, 0x04CF
    3e50:	f0 91 d0 04 	lds	r31, 0x04D0
    3e54:	86 81       	ldd	r24, Z+6	; 0x06
    3e56:	97 81       	ldd	r25, Z+7	; 0x07
    3e58:	9a 83       	std	Y+2, r25	; 0x02
    3e5a:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e60:	02 96       	adiw	r24, 0x02	; 2
    3e62:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
    3e66:	80 91 6f 04 	lds	r24, 0x046F
    3e6a:	81 50       	subi	r24, 0x01	; 1
    3e6c:	80 93 6f 04 	sts	0x046F, r24
				--uxDeletedTasksWaitingCleanUp;
    3e70:	80 91 6e 04 	lds	r24, 0x046E
    3e74:	81 50       	subi	r24, 0x01	; 1
    3e76:	80 93 6e 04 	sts	0x046E, r24
			}
			taskEXIT_CRITICAL();
    3e7a:	0f 90       	pop	r0
    3e7c:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	9a 81       	ldd	r25, Y+2	; 0x02
    3e82:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3e86:	80 91 6e 04 	lds	r24, 0x046E
    3e8a:	88 23       	and	r24, r24
    3e8c:	e1 f6       	brne	.-72     	; 0x3e46 <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <prvDeleteTCB+0x6>
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    3ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eaa:	87 89       	ldd	r24, Z+23	; 0x17
    3eac:	90 8d       	ldd	r25, Z+24	; 0x18
    3eae:	0e 94 c1 09 	call	0x1382	; 0x1382 <vPortFree>
			vPortFree( pxTCB );
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb6:	0e 94 c1 09 	call	0x1382	; 0x1382 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	00 d0       	rcall	.+0      	; 0x3eca <prvResetNextTaskUnblockTime+0x6>
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3ece:	e0 91 bd 04 	lds	r30, 0x04BD
    3ed2:	f0 91 be 04 	lds	r31, 0x04BE
    3ed6:	80 81       	ld	r24, Z
    3ed8:	88 23       	and	r24, r24
    3eda:	39 f4       	brne	.+14     	; 0x3eea <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3edc:	8f ef       	ldi	r24, 0xFF	; 255
    3ede:	9f ef       	ldi	r25, 0xFF	; 255
    3ee0:	90 93 7a 04 	sts	0x047A, r25
    3ee4:	80 93 79 04 	sts	0x0479, r24
    3ee8:	13 c0       	rjmp	.+38     	; 0x3f10 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3eea:	e0 91 bd 04 	lds	r30, 0x04BD
    3eee:	f0 91 be 04 	lds	r31, 0x04BE
    3ef2:	05 80       	ldd	r0, Z+5	; 0x05
    3ef4:	f6 81       	ldd	r31, Z+6	; 0x06
    3ef6:	e0 2d       	mov	r30, r0
    3ef8:	86 81       	ldd	r24, Z+6	; 0x06
    3efa:	97 81       	ldd	r25, Z+7	; 0x07
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3f00:	e9 81       	ldd	r30, Y+1	; 0x01
    3f02:	fa 81       	ldd	r31, Y+2	; 0x02
    3f04:	82 81       	ldd	r24, Z+2	; 0x02
    3f06:	93 81       	ldd	r25, Z+3	; 0x03
    3f08:	90 93 7a 04 	sts	0x047A, r25
    3f0c:	80 93 79 04 	sts	0x0479, r24
	}
}
    3f10:	0f 90       	pop	r0
    3f12:	0f 90       	pop	r0
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret

00003f1a <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	00 d0       	rcall	.+0      	; 0x3f20 <uxTaskResetEventItemValue+0x6>
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3f24:	e0 91 6c 04 	lds	r30, 0x046C
    3f28:	f0 91 6d 04 	lds	r31, 0x046D
    3f2c:	84 85       	ldd	r24, Z+12	; 0x0c
    3f2e:	95 85       	ldd	r25, Z+13	; 0x0d
    3f30:	9a 83       	std	Y+2, r25	; 0x02
    3f32:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f34:	a0 91 6c 04 	lds	r26, 0x046C
    3f38:	b0 91 6d 04 	lds	r27, 0x046D
    3f3c:	e0 91 6c 04 	lds	r30, 0x046C
    3f40:	f0 91 6d 04 	lds	r31, 0x046D
    3f44:	86 89       	ldd	r24, Z+22	; 0x16
    3f46:	28 2f       	mov	r18, r24
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	85 e0       	ldi	r24, 0x05	; 5
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	82 1b       	sub	r24, r18
    3f50:	93 0b       	sbc	r25, r19
    3f52:	1d 96       	adiw	r26, 0x0d	; 13
    3f54:	9c 93       	st	X, r25
    3f56:	8e 93       	st	-X, r24
    3f58:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	08 95       	ret

00003f68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	cd b7       	in	r28, 0x3d	; 61
    3f6e:	de b7       	in	r29, 0x3e	; 62
    3f70:	27 97       	sbiw	r28, 0x07	; 7
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
    3f7e:	7f 83       	std	Y+7, r23	; 0x07
    3f80:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    3f88:	e0 91 6c 04 	lds	r30, 0x046C
    3f8c:	f0 91 6d 04 	lds	r31, 0x046D
    3f90:	81 a1       	ldd	r24, Z+33	; 0x21
    3f92:	92 a1       	ldd	r25, Z+34	; 0x22
    3f94:	a3 a1       	ldd	r26, Z+35	; 0x23
    3f96:	b4 a1       	ldd	r27, Z+36	; 0x24
    3f98:	00 97       	sbiw	r24, 0x00	; 0
    3f9a:	a1 05       	cpc	r26, r1
    3f9c:	b1 05       	cpc	r27, r1
    3f9e:	89 f4       	brne	.+34     	; 0x3fc2 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    3fa0:	e0 91 6c 04 	lds	r30, 0x046C
    3fa4:	f0 91 6d 04 	lds	r31, 0x046D
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    3fac:	8e 81       	ldd	r24, Y+6	; 0x06
    3fae:	9f 81       	ldd	r25, Y+7	; 0x07
    3fb0:	00 97       	sbiw	r24, 0x00	; 0
    3fb2:	39 f0       	breq	.+14     	; 0x3fc2 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    3fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    3fb8:	61 e0       	ldi	r22, 0x01	; 1
    3fba:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    3fbe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    3fc2:	0f 90       	pop	r0
    3fc4:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    3fcc:	e0 91 6c 04 	lds	r30, 0x046C
    3fd0:	f0 91 6d 04 	lds	r31, 0x046D
    3fd4:	81 a1       	ldd	r24, Z+33	; 0x21
    3fd6:	92 a1       	ldd	r25, Z+34	; 0x22
    3fd8:	a3 a1       	ldd	r26, Z+35	; 0x23
    3fda:	b4 a1       	ldd	r27, Z+36	; 0x24
    3fdc:	89 83       	std	Y+1, r24	; 0x01
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	ab 83       	std	Y+3, r26	; 0x03
    3fe2:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	ab 81       	ldd	r26, Y+3	; 0x03
    3fea:	bc 81       	ldd	r27, Y+4	; 0x04
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	a1 05       	cpc	r26, r1
    3ff0:	b1 05       	cpc	r27, r1
    3ff2:	d9 f0       	breq	.+54     	; 0x402a <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	88 23       	and	r24, r24
    3ff8:	49 f0       	breq	.+18     	; 0x400c <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    3ffa:	e0 91 6c 04 	lds	r30, 0x046C
    3ffe:	f0 91 6d 04 	lds	r31, 0x046D
    4002:	11 a2       	std	Z+33, r1	; 0x21
    4004:	12 a2       	std	Z+34, r1	; 0x22
    4006:	13 a2       	std	Z+35, r1	; 0x23
    4008:	14 a2       	std	Z+36, r1	; 0x24
    400a:	0f c0       	rjmp	.+30     	; 0x402a <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    400c:	e0 91 6c 04 	lds	r30, 0x046C
    4010:	f0 91 6d 04 	lds	r31, 0x046D
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	ab 81       	ldd	r26, Y+3	; 0x03
    401a:	bc 81       	ldd	r27, Y+4	; 0x04
    401c:	01 97       	sbiw	r24, 0x01	; 1
    401e:	a1 09       	sbc	r26, r1
    4020:	b1 09       	sbc	r27, r1
    4022:	81 a3       	std	Z+33, r24	; 0x21
    4024:	92 a3       	std	Z+34, r25	; 0x22
    4026:	a3 a3       	std	Z+35, r26	; 0x23
    4028:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    402a:	e0 91 6c 04 	lds	r30, 0x046C
    402e:	f0 91 6d 04 	lds	r31, 0x046D
    4032:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    4034:	0f 90       	pop	r0
    4036:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	9a 81       	ldd	r25, Y+2	; 0x02
    403c:	ab 81       	ldd	r26, Y+3	; 0x03
    403e:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	27 96       	adiw	r28, 0x07	; 7
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4056:	ef 92       	push	r14
    4058:	ff 92       	push	r15
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	df 93       	push	r29
    4060:	cf 93       	push	r28
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	2d 97       	sbiw	r28, 0x0d	; 13
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	6a 83       	std	Y+2, r22	; 0x02
    4074:	7b 83       	std	Y+3, r23	; 0x03
    4076:	8c 83       	std	Y+4, r24	; 0x04
    4078:	9d 83       	std	Y+5, r25	; 0x05
    407a:	2e 83       	std	Y+6, r18	; 0x06
    407c:	3f 83       	std	Y+7, r19	; 0x07
    407e:	48 87       	std	Y+8, r20	; 0x08
    4080:	59 87       	std	Y+9, r21	; 0x09
    4082:	1b 87       	std	Y+11, r17	; 0x0b
    4084:	0a 87       	std	Y+10, r16	; 0x0a
    4086:	fd 86       	std	Y+13, r15	; 0x0d
    4088:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	f8 94       	cli
    408e:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    4090:	e0 91 6c 04 	lds	r30, 0x046C
    4094:	f0 91 6d 04 	lds	r31, 0x046D
    4098:	85 a1       	ldd	r24, Z+37	; 0x25
    409a:	82 30       	cpi	r24, 0x02	; 2
    409c:	49 f1       	breq	.+82     	; 0x40f0 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    409e:	e0 91 6c 04 	lds	r30, 0x046C
    40a2:	f0 91 6d 04 	lds	r31, 0x046D
    40a6:	21 a1       	ldd	r18, Z+33	; 0x21
    40a8:	32 a1       	ldd	r19, Z+34	; 0x22
    40aa:	43 a1       	ldd	r20, Z+35	; 0x23
    40ac:	54 a1       	ldd	r21, Z+36	; 0x24
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	9b 81       	ldd	r25, Y+3	; 0x03
    40b2:	ac 81       	ldd	r26, Y+4	; 0x04
    40b4:	bd 81       	ldd	r27, Y+5	; 0x05
    40b6:	80 95       	com	r24
    40b8:	90 95       	com	r25
    40ba:	a0 95       	com	r26
    40bc:	b0 95       	com	r27
    40be:	82 23       	and	r24, r18
    40c0:	93 23       	and	r25, r19
    40c2:	a4 23       	and	r26, r20
    40c4:	b5 23       	and	r27, r21
    40c6:	81 a3       	std	Z+33, r24	; 0x21
    40c8:	92 a3       	std	Z+34, r25	; 0x22
    40ca:	a3 a3       	std	Z+35, r26	; 0x23
    40cc:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    40ce:	e0 91 6c 04 	lds	r30, 0x046C
    40d2:	f0 91 6d 04 	lds	r31, 0x046D
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    40da:	8c 85       	ldd	r24, Y+12	; 0x0c
    40dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    40de:	00 97       	sbiw	r24, 0x00	; 0
    40e0:	39 f0       	breq	.+14     	; 0x40f0 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    40e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    40e6:	61 e0       	ldi	r22, 0x01	; 1
    40e8:	0e 94 b7 23 	call	0x476e	; 0x476e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    40ec:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    40f0:	0f 90       	pop	r0
    40f2:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    40f4:	0f b6       	in	r0, 0x3f	; 63
    40f6:	f8 94       	cli
    40f8:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    40fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    40fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	71 f0       	breq	.+28     	; 0x411e <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4102:	e0 91 6c 04 	lds	r30, 0x046C
    4106:	f0 91 6d 04 	lds	r31, 0x046D
    410a:	81 a1       	ldd	r24, Z+33	; 0x21
    410c:	92 a1       	ldd	r25, Z+34	; 0x22
    410e:	a3 a1       	ldd	r26, Z+35	; 0x23
    4110:	b4 a1       	ldd	r27, Z+36	; 0x24
    4112:	ea 85       	ldd	r30, Y+10	; 0x0a
    4114:	fb 85       	ldd	r31, Y+11	; 0x0b
    4116:	80 83       	st	Z, r24
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	a2 83       	std	Z+2, r26	; 0x02
    411c:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    411e:	e0 91 6c 04 	lds	r30, 0x046C
    4122:	f0 91 6d 04 	lds	r31, 0x046D
    4126:	85 a1       	ldd	r24, Z+37	; 0x25
    4128:	82 30       	cpi	r24, 0x02	; 2
    412a:	11 f0       	breq	.+4      	; 0x4130 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    412c:	19 82       	std	Y+1, r1	; 0x01
    412e:	1a c0       	rjmp	.+52     	; 0x4164 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4130:	e0 91 6c 04 	lds	r30, 0x046C
    4134:	f0 91 6d 04 	lds	r31, 0x046D
    4138:	21 a1       	ldd	r18, Z+33	; 0x21
    413a:	32 a1       	ldd	r19, Z+34	; 0x22
    413c:	43 a1       	ldd	r20, Z+35	; 0x23
    413e:	54 a1       	ldd	r21, Z+36	; 0x24
    4140:	8e 81       	ldd	r24, Y+6	; 0x06
    4142:	9f 81       	ldd	r25, Y+7	; 0x07
    4144:	a8 85       	ldd	r26, Y+8	; 0x08
    4146:	b9 85       	ldd	r27, Y+9	; 0x09
    4148:	80 95       	com	r24
    414a:	90 95       	com	r25
    414c:	a0 95       	com	r26
    414e:	b0 95       	com	r27
    4150:	82 23       	and	r24, r18
    4152:	93 23       	and	r25, r19
    4154:	a4 23       	and	r26, r20
    4156:	b5 23       	and	r27, r21
    4158:	81 a3       	std	Z+33, r24	; 0x21
    415a:	92 a3       	std	Z+34, r25	; 0x22
    415c:	a3 a3       	std	Z+35, r26	; 0x23
    415e:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4164:	e0 91 6c 04 	lds	r30, 0x046C
    4168:	f0 91 6d 04 	lds	r31, 0x046D
    416c:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    416e:	0f 90       	pop	r0
    4170:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4172:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4174:	2d 96       	adiw	r28, 0x0d	; 13
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	1f 91       	pop	r17
    4186:	0f 91       	pop	r16
    4188:	ff 90       	pop	r15
    418a:	ef 90       	pop	r14
    418c:	08 95       	ret

0000418e <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    418e:	0f 93       	push	r16
    4190:	1f 93       	push	r17
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	2f 97       	sbiw	r28, 0x0f	; 15
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	4f 83       	std	Y+7, r20	; 0x07
    41ac:	58 87       	std	Y+8, r21	; 0x08
    41ae:	69 87       	std	Y+9, r22	; 0x09
    41b0:	7a 87       	std	Y+10, r23	; 0x0a
    41b2:	2b 87       	std	Y+11, r18	; 0x0b
    41b4:	1d 87       	std	Y+13, r17	; 0x0d
    41b6:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    41bc:	8d 81       	ldd	r24, Y+5	; 0x05
    41be:	9e 81       	ldd	r25, Y+6	; 0x06
    41c0:	9c 83       	std	Y+4, r25	; 0x04
    41c2:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    41ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    41cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	61 f0       	breq	.+24     	; 0x41ea <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    41d2:	eb 81       	ldd	r30, Y+3	; 0x03
    41d4:	fc 81       	ldd	r31, Y+4	; 0x04
    41d6:	81 a1       	ldd	r24, Z+33	; 0x21
    41d8:	92 a1       	ldd	r25, Z+34	; 0x22
    41da:	a3 a1       	ldd	r26, Z+35	; 0x23
    41dc:	b4 a1       	ldd	r27, Z+36	; 0x24
    41de:	ec 85       	ldd	r30, Y+12	; 0x0c
    41e0:	fd 85       	ldd	r31, Y+13	; 0x0d
    41e2:	80 83       	st	Z, r24
    41e4:	91 83       	std	Z+1, r25	; 0x01
    41e6:	a2 83       	std	Z+2, r26	; 0x02
    41e8:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    41ea:	eb 81       	ldd	r30, Y+3	; 0x03
    41ec:	fc 81       	ldd	r31, Y+4	; 0x04
    41ee:	85 a1       	ldd	r24, Z+37	; 0x25
    41f0:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    41f2:	eb 81       	ldd	r30, Y+3	; 0x03
    41f4:	fc 81       	ldd	r31, Y+4	; 0x04
    41f6:	82 e0       	ldi	r24, 0x02	; 2
    41f8:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    41fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	3f 87       	std	Y+15, r19	; 0x0f
    4202:	2e 87       	std	Y+14, r18	; 0x0e
    4204:	8e 85       	ldd	r24, Y+14	; 0x0e
    4206:	9f 85       	ldd	r25, Y+15	; 0x0f
    4208:	82 30       	cpi	r24, 0x02	; 2
    420a:	91 05       	cpc	r25, r1
    420c:	59 f1       	breq	.+86     	; 0x4264 <xTaskGenericNotify+0xd6>
    420e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4210:	3f 85       	ldd	r19, Y+15	; 0x0f
    4212:	23 30       	cpi	r18, 0x03	; 3
    4214:	31 05       	cpc	r19, r1
    4216:	34 f4       	brge	.+12     	; 0x4224 <xTaskGenericNotify+0x96>
    4218:	8e 85       	ldd	r24, Y+14	; 0x0e
    421a:	9f 85       	ldd	r25, Y+15	; 0x0f
    421c:	81 30       	cpi	r24, 0x01	; 1
    421e:	91 05       	cpc	r25, r1
    4220:	61 f0       	breq	.+24     	; 0x423a <xTaskGenericNotify+0xac>
    4222:	4a c0       	rjmp	.+148    	; 0x42b8 <xTaskGenericNotify+0x12a>
    4224:	2e 85       	ldd	r18, Y+14	; 0x0e
    4226:	3f 85       	ldd	r19, Y+15	; 0x0f
    4228:	23 30       	cpi	r18, 0x03	; 3
    422a:	31 05       	cpc	r19, r1
    422c:	59 f1       	breq	.+86     	; 0x4284 <xTaskGenericNotify+0xf6>
    422e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4230:	9f 85       	ldd	r25, Y+15	; 0x0f
    4232:	84 30       	cpi	r24, 0x04	; 4
    4234:	91 05       	cpc	r25, r1
    4236:	89 f1       	breq	.+98     	; 0x429a <xTaskGenericNotify+0x10c>
    4238:	3f c0       	rjmp	.+126    	; 0x42b8 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    423a:	eb 81       	ldd	r30, Y+3	; 0x03
    423c:	fc 81       	ldd	r31, Y+4	; 0x04
    423e:	21 a1       	ldd	r18, Z+33	; 0x21
    4240:	32 a1       	ldd	r19, Z+34	; 0x22
    4242:	43 a1       	ldd	r20, Z+35	; 0x23
    4244:	54 a1       	ldd	r21, Z+36	; 0x24
    4246:	8f 81       	ldd	r24, Y+7	; 0x07
    4248:	98 85       	ldd	r25, Y+8	; 0x08
    424a:	a9 85       	ldd	r26, Y+9	; 0x09
    424c:	ba 85       	ldd	r27, Y+10	; 0x0a
    424e:	82 2b       	or	r24, r18
    4250:	93 2b       	or	r25, r19
    4252:	a4 2b       	or	r26, r20
    4254:	b5 2b       	or	r27, r21
    4256:	eb 81       	ldd	r30, Y+3	; 0x03
    4258:	fc 81       	ldd	r31, Y+4	; 0x04
    425a:	81 a3       	std	Z+33, r24	; 0x21
    425c:	92 a3       	std	Z+34, r25	; 0x22
    425e:	a3 a3       	std	Z+35, r26	; 0x23
    4260:	b4 a3       	std	Z+36, r27	; 0x24
    4262:	2a c0       	rjmp	.+84     	; 0x42b8 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4264:	eb 81       	ldd	r30, Y+3	; 0x03
    4266:	fc 81       	ldd	r31, Y+4	; 0x04
    4268:	81 a1       	ldd	r24, Z+33	; 0x21
    426a:	92 a1       	ldd	r25, Z+34	; 0x22
    426c:	a3 a1       	ldd	r26, Z+35	; 0x23
    426e:	b4 a1       	ldd	r27, Z+36	; 0x24
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	a1 1d       	adc	r26, r1
    4274:	b1 1d       	adc	r27, r1
    4276:	eb 81       	ldd	r30, Y+3	; 0x03
    4278:	fc 81       	ldd	r31, Y+4	; 0x04
    427a:	81 a3       	std	Z+33, r24	; 0x21
    427c:	92 a3       	std	Z+34, r25	; 0x22
    427e:	a3 a3       	std	Z+35, r26	; 0x23
    4280:	b4 a3       	std	Z+36, r27	; 0x24
    4282:	1a c0       	rjmp	.+52     	; 0x42b8 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4284:	eb 81       	ldd	r30, Y+3	; 0x03
    4286:	fc 81       	ldd	r31, Y+4	; 0x04
    4288:	8f 81       	ldd	r24, Y+7	; 0x07
    428a:	98 85       	ldd	r25, Y+8	; 0x08
    428c:	a9 85       	ldd	r26, Y+9	; 0x09
    428e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4290:	81 a3       	std	Z+33, r24	; 0x21
    4292:	92 a3       	std	Z+34, r25	; 0x22
    4294:	a3 a3       	std	Z+35, r26	; 0x23
    4296:	b4 a3       	std	Z+36, r27	; 0x24
    4298:	0f c0       	rjmp	.+30     	; 0x42b8 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	82 30       	cpi	r24, 0x02	; 2
    429e:	59 f0       	breq	.+22     	; 0x42b6 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    42a0:	eb 81       	ldd	r30, Y+3	; 0x03
    42a2:	fc 81       	ldd	r31, Y+4	; 0x04
    42a4:	8f 81       	ldd	r24, Y+7	; 0x07
    42a6:	98 85       	ldd	r25, Y+8	; 0x08
    42a8:	a9 85       	ldd	r26, Y+9	; 0x09
    42aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    42ac:	81 a3       	std	Z+33, r24	; 0x21
    42ae:	92 a3       	std	Z+34, r25	; 0x22
    42b0:	a3 a3       	std	Z+35, r26	; 0x23
    42b2:	b4 a3       	std	Z+36, r27	; 0x24
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    42b6:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	b9 f5       	brne	.+110    	; 0x432c <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	9c 81       	ldd	r25, Y+4	; 0x04
    42c2:	02 96       	adiw	r24, 0x02	; 2
    42c4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    42c8:	eb 81       	ldd	r30, Y+3	; 0x03
    42ca:	fc 81       	ldd	r31, Y+4	; 0x04
    42cc:	96 89       	ldd	r25, Z+22	; 0x16
    42ce:	80 91 72 04 	lds	r24, 0x0472
    42d2:	89 17       	cp	r24, r25
    42d4:	28 f4       	brcc	.+10     	; 0x42e0 <xTaskGenericNotify+0x152>
    42d6:	eb 81       	ldd	r30, Y+3	; 0x03
    42d8:	fc 81       	ldd	r31, Y+4	; 0x04
    42da:	86 89       	ldd	r24, Z+22	; 0x16
    42dc:	80 93 72 04 	sts	0x0472, r24
    42e0:	eb 81       	ldd	r30, Y+3	; 0x03
    42e2:	fc 81       	ldd	r31, Y+4	; 0x04
    42e4:	86 89       	ldd	r24, Z+22	; 0x16
    42e6:	28 2f       	mov	r18, r24
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	c9 01       	movw	r24, r18
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	88 0f       	add	r24, r24
    42f2:	99 1f       	adc	r25, r25
    42f4:	88 0f       	add	r24, r24
    42f6:	99 1f       	adc	r25, r25
    42f8:	82 0f       	add	r24, r18
    42fa:	93 1f       	adc	r25, r19
    42fc:	ac 01       	movw	r20, r24
    42fe:	42 58       	subi	r20, 0x82	; 130
    4300:	5b 4f       	sbci	r21, 0xFB	; 251
    4302:	8b 81       	ldd	r24, Y+3	; 0x03
    4304:	9c 81       	ldd	r25, Y+4	; 0x04
    4306:	9c 01       	movw	r18, r24
    4308:	2e 5f       	subi	r18, 0xFE	; 254
    430a:	3f 4f       	sbci	r19, 0xFF	; 255
    430c:	ca 01       	movw	r24, r20
    430e:	b9 01       	movw	r22, r18
    4310:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4314:	eb 81       	ldd	r30, Y+3	; 0x03
    4316:	fc 81       	ldd	r31, Y+4	; 0x04
    4318:	96 89       	ldd	r25, Z+22	; 0x16
    431a:	e0 91 6c 04 	lds	r30, 0x046C
    431e:	f0 91 6d 04 	lds	r31, 0x046D
    4322:	86 89       	ldd	r24, Z+22	; 0x16
    4324:	89 17       	cp	r24, r25
    4326:	10 f4       	brcc	.+4      	; 0x432c <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4328:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    432c:	0f 90       	pop	r0
    432e:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4332:	2f 96       	adiw	r28, 0x0f	; 15
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	08 95       	ret

00004348 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4348:	ef 92       	push	r14
    434a:	ff 92       	push	r15
    434c:	0f 93       	push	r16
    434e:	1f 93       	push	r17
    4350:	df 93       	push	r29
    4352:	cf 93       	push	r28
    4354:	cd b7       	in	r28, 0x3d	; 61
    4356:	de b7       	in	r29, 0x3e	; 62
    4358:	62 97       	sbiw	r28, 0x12	; 18
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	cd bf       	out	0x3d, r28	; 61
    4364:	9f 83       	std	Y+7, r25	; 0x07
    4366:	8e 83       	std	Y+6, r24	; 0x06
    4368:	48 87       	std	Y+8, r20	; 0x08
    436a:	59 87       	std	Y+9, r21	; 0x09
    436c:	6a 87       	std	Y+10, r22	; 0x0a
    436e:	7b 87       	std	Y+11, r23	; 0x0b
    4370:	2c 87       	std	Y+12, r18	; 0x0c
    4372:	1e 87       	std	Y+14, r17	; 0x0e
    4374:	0d 87       	std	Y+13, r16	; 0x0d
    4376:	f8 8a       	std	Y+16, r15	; 0x10
    4378:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    437e:	8e 81       	ldd	r24, Y+6	; 0x06
    4380:	9f 81       	ldd	r25, Y+7	; 0x07
    4382:	9d 83       	std	Y+5, r25	; 0x05
    4384:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4386:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    4388:	8d 85       	ldd	r24, Y+13	; 0x0d
    438a:	9e 85       	ldd	r25, Y+14	; 0x0e
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	61 f0       	breq	.+24     	; 0x43a8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4390:	ec 81       	ldd	r30, Y+4	; 0x04
    4392:	fd 81       	ldd	r31, Y+5	; 0x05
    4394:	81 a1       	ldd	r24, Z+33	; 0x21
    4396:	92 a1       	ldd	r25, Z+34	; 0x22
    4398:	a3 a1       	ldd	r26, Z+35	; 0x23
    439a:	b4 a1       	ldd	r27, Z+36	; 0x24
    439c:	ed 85       	ldd	r30, Y+13	; 0x0d
    439e:	fe 85       	ldd	r31, Y+14	; 0x0e
    43a0:	80 83       	st	Z, r24
    43a2:	91 83       	std	Z+1, r25	; 0x01
    43a4:	a2 83       	std	Z+2, r26	; 0x02
    43a6:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    43a8:	ec 81       	ldd	r30, Y+4	; 0x04
    43aa:	fd 81       	ldd	r31, Y+5	; 0x05
    43ac:	85 a1       	ldd	r24, Z+37	; 0x25
    43ae:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    43b0:	ec 81       	ldd	r30, Y+4	; 0x04
    43b2:	fd 81       	ldd	r31, Y+5	; 0x05
    43b4:	82 e0       	ldi	r24, 0x02	; 2
    43b6:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    43b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	3a 8b       	std	Y+18, r19	; 0x12
    43c0:	29 8b       	std	Y+17, r18	; 0x11
    43c2:	89 89       	ldd	r24, Y+17	; 0x11
    43c4:	9a 89       	ldd	r25, Y+18	; 0x12
    43c6:	82 30       	cpi	r24, 0x02	; 2
    43c8:	91 05       	cpc	r25, r1
    43ca:	59 f1       	breq	.+86     	; 0x4422 <xTaskGenericNotifyFromISR+0xda>
    43cc:	29 89       	ldd	r18, Y+17	; 0x11
    43ce:	3a 89       	ldd	r19, Y+18	; 0x12
    43d0:	23 30       	cpi	r18, 0x03	; 3
    43d2:	31 05       	cpc	r19, r1
    43d4:	34 f4       	brge	.+12     	; 0x43e2 <xTaskGenericNotifyFromISR+0x9a>
    43d6:	89 89       	ldd	r24, Y+17	; 0x11
    43d8:	9a 89       	ldd	r25, Y+18	; 0x12
    43da:	81 30       	cpi	r24, 0x01	; 1
    43dc:	91 05       	cpc	r25, r1
    43de:	61 f0       	breq	.+24     	; 0x43f8 <xTaskGenericNotifyFromISR+0xb0>
    43e0:	4a c0       	rjmp	.+148    	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
    43e2:	29 89       	ldd	r18, Y+17	; 0x11
    43e4:	3a 89       	ldd	r19, Y+18	; 0x12
    43e6:	23 30       	cpi	r18, 0x03	; 3
    43e8:	31 05       	cpc	r19, r1
    43ea:	59 f1       	breq	.+86     	; 0x4442 <xTaskGenericNotifyFromISR+0xfa>
    43ec:	89 89       	ldd	r24, Y+17	; 0x11
    43ee:	9a 89       	ldd	r25, Y+18	; 0x12
    43f0:	84 30       	cpi	r24, 0x04	; 4
    43f2:	91 05       	cpc	r25, r1
    43f4:	89 f1       	breq	.+98     	; 0x4458 <xTaskGenericNotifyFromISR+0x110>
    43f6:	3f c0       	rjmp	.+126    	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    43f8:	ec 81       	ldd	r30, Y+4	; 0x04
    43fa:	fd 81       	ldd	r31, Y+5	; 0x05
    43fc:	21 a1       	ldd	r18, Z+33	; 0x21
    43fe:	32 a1       	ldd	r19, Z+34	; 0x22
    4400:	43 a1       	ldd	r20, Z+35	; 0x23
    4402:	54 a1       	ldd	r21, Z+36	; 0x24
    4404:	88 85       	ldd	r24, Y+8	; 0x08
    4406:	99 85       	ldd	r25, Y+9	; 0x09
    4408:	aa 85       	ldd	r26, Y+10	; 0x0a
    440a:	bb 85       	ldd	r27, Y+11	; 0x0b
    440c:	82 2b       	or	r24, r18
    440e:	93 2b       	or	r25, r19
    4410:	a4 2b       	or	r26, r20
    4412:	b5 2b       	or	r27, r21
    4414:	ec 81       	ldd	r30, Y+4	; 0x04
    4416:	fd 81       	ldd	r31, Y+5	; 0x05
    4418:	81 a3       	std	Z+33, r24	; 0x21
    441a:	92 a3       	std	Z+34, r25	; 0x22
    441c:	a3 a3       	std	Z+35, r26	; 0x23
    441e:	b4 a3       	std	Z+36, r27	; 0x24
    4420:	2a c0       	rjmp	.+84     	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4422:	ec 81       	ldd	r30, Y+4	; 0x04
    4424:	fd 81       	ldd	r31, Y+5	; 0x05
    4426:	81 a1       	ldd	r24, Z+33	; 0x21
    4428:	92 a1       	ldd	r25, Z+34	; 0x22
    442a:	a3 a1       	ldd	r26, Z+35	; 0x23
    442c:	b4 a1       	ldd	r27, Z+36	; 0x24
    442e:	01 96       	adiw	r24, 0x01	; 1
    4430:	a1 1d       	adc	r26, r1
    4432:	b1 1d       	adc	r27, r1
    4434:	ec 81       	ldd	r30, Y+4	; 0x04
    4436:	fd 81       	ldd	r31, Y+5	; 0x05
    4438:	81 a3       	std	Z+33, r24	; 0x21
    443a:	92 a3       	std	Z+34, r25	; 0x22
    443c:	a3 a3       	std	Z+35, r26	; 0x23
    443e:	b4 a3       	std	Z+36, r27	; 0x24
    4440:	1a c0       	rjmp	.+52     	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4442:	ec 81       	ldd	r30, Y+4	; 0x04
    4444:	fd 81       	ldd	r31, Y+5	; 0x05
    4446:	88 85       	ldd	r24, Y+8	; 0x08
    4448:	99 85       	ldd	r25, Y+9	; 0x09
    444a:	aa 85       	ldd	r26, Y+10	; 0x0a
    444c:	bb 85       	ldd	r27, Y+11	; 0x0b
    444e:	81 a3       	std	Z+33, r24	; 0x21
    4450:	92 a3       	std	Z+34, r25	; 0x22
    4452:	a3 a3       	std	Z+35, r26	; 0x23
    4454:	b4 a3       	std	Z+36, r27	; 0x24
    4456:	0f c0       	rjmp	.+30     	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
    445a:	82 30       	cpi	r24, 0x02	; 2
    445c:	59 f0       	breq	.+22     	; 0x4474 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    445e:	ec 81       	ldd	r30, Y+4	; 0x04
    4460:	fd 81       	ldd	r31, Y+5	; 0x05
    4462:	88 85       	ldd	r24, Y+8	; 0x08
    4464:	99 85       	ldd	r25, Y+9	; 0x09
    4466:	aa 85       	ldd	r26, Y+10	; 0x0a
    4468:	bb 85       	ldd	r27, Y+11	; 0x0b
    446a:	81 a3       	std	Z+33, r24	; 0x21
    446c:	92 a3       	std	Z+34, r25	; 0x22
    446e:	a3 a3       	std	Z+35, r26	; 0x23
    4470:	b4 a3       	std	Z+36, r27	; 0x24
    4472:	01 c0       	rjmp	.+2      	; 0x4476 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4474:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4476:	8b 81       	ldd	r24, Y+3	; 0x03
    4478:	81 30       	cpi	r24, 0x01	; 1
    447a:	09 f0       	breq	.+2      	; 0x447e <xTaskGenericNotifyFromISR+0x136>
    447c:	4f c0       	rjmp	.+158    	; 0x451c <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    447e:	80 91 7d 04 	lds	r24, 0x047D
    4482:	88 23       	and	r24, r24
    4484:	61 f5       	brne	.+88     	; 0x44de <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4486:	8c 81       	ldd	r24, Y+4	; 0x04
    4488:	9d 81       	ldd	r25, Y+5	; 0x05
    448a:	02 96       	adiw	r24, 0x02	; 2
    448c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4490:	ec 81       	ldd	r30, Y+4	; 0x04
    4492:	fd 81       	ldd	r31, Y+5	; 0x05
    4494:	96 89       	ldd	r25, Z+22	; 0x16
    4496:	80 91 72 04 	lds	r24, 0x0472
    449a:	89 17       	cp	r24, r25
    449c:	28 f4       	brcc	.+10     	; 0x44a8 <xTaskGenericNotifyFromISR+0x160>
    449e:	ec 81       	ldd	r30, Y+4	; 0x04
    44a0:	fd 81       	ldd	r31, Y+5	; 0x05
    44a2:	86 89       	ldd	r24, Z+22	; 0x16
    44a4:	80 93 72 04 	sts	0x0472, r24
    44a8:	ec 81       	ldd	r30, Y+4	; 0x04
    44aa:	fd 81       	ldd	r31, Y+5	; 0x05
    44ac:	86 89       	ldd	r24, Z+22	; 0x16
    44ae:	28 2f       	mov	r18, r24
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	c9 01       	movw	r24, r18
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	88 0f       	add	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	88 0f       	add	r24, r24
    44be:	99 1f       	adc	r25, r25
    44c0:	82 0f       	add	r24, r18
    44c2:	93 1f       	adc	r25, r19
    44c4:	ac 01       	movw	r20, r24
    44c6:	42 58       	subi	r20, 0x82	; 130
    44c8:	5b 4f       	sbci	r21, 0xFB	; 251
    44ca:	8c 81       	ldd	r24, Y+4	; 0x04
    44cc:	9d 81       	ldd	r25, Y+5	; 0x05
    44ce:	9c 01       	movw	r18, r24
    44d0:	2e 5f       	subi	r18, 0xFE	; 254
    44d2:	3f 4f       	sbci	r19, 0xFF	; 255
    44d4:	ca 01       	movw	r24, r20
    44d6:	b9 01       	movw	r22, r18
    44d8:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
    44dc:	0a c0       	rjmp	.+20     	; 0x44f2 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    44de:	8c 81       	ldd	r24, Y+4	; 0x04
    44e0:	9d 81       	ldd	r25, Y+5	; 0x05
    44e2:	9c 01       	movw	r18, r24
    44e4:	24 5f       	subi	r18, 0xF4	; 244
    44e6:	3f 4f       	sbci	r19, 0xFF	; 255
    44e8:	81 ec       	ldi	r24, 0xC1	; 193
    44ea:	94 e0       	ldi	r25, 0x04	; 4
    44ec:	b9 01       	movw	r22, r18
    44ee:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    44f2:	ec 81       	ldd	r30, Y+4	; 0x04
    44f4:	fd 81       	ldd	r31, Y+5	; 0x05
    44f6:	96 89       	ldd	r25, Z+22	; 0x16
    44f8:	e0 91 6c 04 	lds	r30, 0x046C
    44fc:	f0 91 6d 04 	lds	r31, 0x046D
    4500:	86 89       	ldd	r24, Z+22	; 0x16
    4502:	89 17       	cp	r24, r25
    4504:	58 f4       	brcc	.+22     	; 0x451c <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4506:	8f 85       	ldd	r24, Y+15	; 0x0f
    4508:	98 89       	ldd	r25, Y+16	; 0x10
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	21 f0       	breq	.+8      	; 0x4516 <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    450e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4510:	f8 89       	ldd	r31, Y+16	; 0x10
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	80 93 76 04 	sts	0x0476, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    451c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    451e:	62 96       	adiw	r28, 0x12	; 18
    4520:	0f b6       	in	r0, 0x3f	; 63
    4522:	f8 94       	cli
    4524:	de bf       	out	0x3e, r29	; 62
    4526:	0f be       	out	0x3f, r0	; 63
    4528:	cd bf       	out	0x3d, r28	; 61
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	ff 90       	pop	r15
    4534:	ef 90       	pop	r14
    4536:	08 95       	ret

00004538 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4538:	df 93       	push	r29
    453a:	cf 93       	push	r28
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	28 97       	sbiw	r28, 0x08	; 8
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	f8 94       	cli
    4546:	de bf       	out	0x3e, r29	; 62
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	cd bf       	out	0x3d, r28	; 61
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	8d 83       	std	Y+5, r24	; 0x05
    4550:	78 87       	std	Y+8, r23	; 0x08
    4552:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    4554:	8d 81       	ldd	r24, Y+5	; 0x05
    4556:	9e 81       	ldd	r25, Y+6	; 0x06
    4558:	9c 83       	std	Y+4, r25	; 0x04
    455a:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    455c:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    455e:	eb 81       	ldd	r30, Y+3	; 0x03
    4560:	fc 81       	ldd	r31, Y+4	; 0x04
    4562:	85 a1       	ldd	r24, Z+37	; 0x25
    4564:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4566:	eb 81       	ldd	r30, Y+3	; 0x03
    4568:	fc 81       	ldd	r31, Y+4	; 0x04
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    456e:	eb 81       	ldd	r30, Y+3	; 0x03
    4570:	fc 81       	ldd	r31, Y+4	; 0x04
    4572:	81 a1       	ldd	r24, Z+33	; 0x21
    4574:	92 a1       	ldd	r25, Z+34	; 0x22
    4576:	a3 a1       	ldd	r26, Z+35	; 0x23
    4578:	b4 a1       	ldd	r27, Z+36	; 0x24
    457a:	01 96       	adiw	r24, 0x01	; 1
    457c:	a1 1d       	adc	r26, r1
    457e:	b1 1d       	adc	r27, r1
    4580:	eb 81       	ldd	r30, Y+3	; 0x03
    4582:	fc 81       	ldd	r31, Y+4	; 0x04
    4584:	81 a3       	std	Z+33, r24	; 0x21
    4586:	92 a3       	std	Z+34, r25	; 0x22
    4588:	a3 a3       	std	Z+35, r26	; 0x23
    458a:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	81 30       	cpi	r24, 0x01	; 1
    4590:	09 f0       	breq	.+2      	; 0x4594 <vTaskNotifyGiveFromISR+0x5c>
    4592:	4f c0       	rjmp	.+158    	; 0x4632 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4594:	80 91 7d 04 	lds	r24, 0x047D
    4598:	88 23       	and	r24, r24
    459a:	61 f5       	brne	.+88     	; 0x45f4 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	9c 81       	ldd	r25, Y+4	; 0x04
    45a0:	02 96       	adiw	r24, 0x02	; 2
    45a2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    45a6:	eb 81       	ldd	r30, Y+3	; 0x03
    45a8:	fc 81       	ldd	r31, Y+4	; 0x04
    45aa:	96 89       	ldd	r25, Z+22	; 0x16
    45ac:	80 91 72 04 	lds	r24, 0x0472
    45b0:	89 17       	cp	r24, r25
    45b2:	28 f4       	brcc	.+10     	; 0x45be <vTaskNotifyGiveFromISR+0x86>
    45b4:	eb 81       	ldd	r30, Y+3	; 0x03
    45b6:	fc 81       	ldd	r31, Y+4	; 0x04
    45b8:	86 89       	ldd	r24, Z+22	; 0x16
    45ba:	80 93 72 04 	sts	0x0472, r24
    45be:	eb 81       	ldd	r30, Y+3	; 0x03
    45c0:	fc 81       	ldd	r31, Y+4	; 0x04
    45c2:	86 89       	ldd	r24, Z+22	; 0x16
    45c4:	28 2f       	mov	r18, r24
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	c9 01       	movw	r24, r18
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	88 0f       	add	r24, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	88 0f       	add	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	82 0f       	add	r24, r18
    45d8:	93 1f       	adc	r25, r19
    45da:	ac 01       	movw	r20, r24
    45dc:	42 58       	subi	r20, 0x82	; 130
    45de:	5b 4f       	sbci	r21, 0xFB	; 251
    45e0:	8b 81       	ldd	r24, Y+3	; 0x03
    45e2:	9c 81       	ldd	r25, Y+4	; 0x04
    45e4:	9c 01       	movw	r18, r24
    45e6:	2e 5f       	subi	r18, 0xFE	; 254
    45e8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ea:	ca 01       	movw	r24, r20
    45ec:	b9 01       	movw	r22, r18
    45ee:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
    45f2:	0a c0       	rjmp	.+20     	; 0x4608 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    45f4:	8b 81       	ldd	r24, Y+3	; 0x03
    45f6:	9c 81       	ldd	r25, Y+4	; 0x04
    45f8:	9c 01       	movw	r18, r24
    45fa:	24 5f       	subi	r18, 0xF4	; 244
    45fc:	3f 4f       	sbci	r19, 0xFF	; 255
    45fe:	81 ec       	ldi	r24, 0xC1	; 193
    4600:	94 e0       	ldi	r25, 0x04	; 4
    4602:	b9 01       	movw	r22, r18
    4604:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4608:	eb 81       	ldd	r30, Y+3	; 0x03
    460a:	fc 81       	ldd	r31, Y+4	; 0x04
    460c:	96 89       	ldd	r25, Z+22	; 0x16
    460e:	e0 91 6c 04 	lds	r30, 0x046C
    4612:	f0 91 6d 04 	lds	r31, 0x046D
    4616:	86 89       	ldd	r24, Z+22	; 0x16
    4618:	89 17       	cp	r24, r25
    461a:	58 f4       	brcc	.+22     	; 0x4632 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    461c:	8f 81       	ldd	r24, Y+7	; 0x07
    461e:	98 85       	ldd	r25, Y+8	; 0x08
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	21 f0       	breq	.+8      	; 0x462c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4624:	ef 81       	ldd	r30, Y+7	; 0x07
    4626:	f8 85       	ldd	r31, Y+8	; 0x08
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	80 93 76 04 	sts	0x0476, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4632:	28 96       	adiw	r28, 0x08	; 8
    4634:	0f b6       	in	r0, 0x3f	; 63
    4636:	f8 94       	cli
    4638:	de bf       	out	0x3e, r29	; 62
    463a:	0f be       	out	0x3f, r0	; 63
    463c:	cd bf       	out	0x3d, r28	; 61
    463e:	cf 91       	pop	r28
    4640:	df 91       	pop	r29
    4642:	08 95       	ret

00004644 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    4644:	df 93       	push	r29
    4646:	cf 93       	push	r28
    4648:	cd b7       	in	r28, 0x3d	; 61
    464a:	de b7       	in	r29, 0x3e	; 62
    464c:	27 97       	sbiw	r28, 0x07	; 7
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	de bf       	out	0x3e, r29	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	9d 83       	std	Y+5, r25	; 0x05
    465a:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    465c:	8c 81       	ldd	r24, Y+4	; 0x04
    465e:	9d 81       	ldd	r25, Y+5	; 0x05
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	39 f4       	brne	.+14     	; 0x4672 <xTaskNotifyStateClear+0x2e>
    4664:	80 91 6c 04 	lds	r24, 0x046C
    4668:	90 91 6d 04 	lds	r25, 0x046D
    466c:	9f 83       	std	Y+7, r25	; 0x07
    466e:	8e 83       	std	Y+6, r24	; 0x06
    4670:	04 c0       	rjmp	.+8      	; 0x467a <xTaskNotifyStateClear+0x36>
    4672:	8c 81       	ldd	r24, Y+4	; 0x04
    4674:	9d 81       	ldd	r25, Y+5	; 0x05
    4676:	9f 83       	std	Y+7, r25	; 0x07
    4678:	8e 83       	std	Y+6, r24	; 0x06
    467a:	8e 81       	ldd	r24, Y+6	; 0x06
    467c:	9f 81       	ldd	r25, Y+7	; 0x07
    467e:	9b 83       	std	Y+3, r25	; 0x03
    4680:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    4682:	0f b6       	in	r0, 0x3f	; 63
    4684:	f8 94       	cli
    4686:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    4688:	ea 81       	ldd	r30, Y+2	; 0x02
    468a:	fb 81       	ldd	r31, Y+3	; 0x03
    468c:	85 a1       	ldd	r24, Z+37	; 0x25
    468e:	82 30       	cpi	r24, 0x02	; 2
    4690:	31 f4       	brne	.+12     	; 0x469e <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4692:	ea 81       	ldd	r30, Y+2	; 0x02
    4694:	fb 81       	ldd	r31, Y+3	; 0x03
    4696:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	89 83       	std	Y+1, r24	; 0x01
    469c:	01 c0       	rjmp	.+2      	; 0x46a0 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    469e:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    46a0:	0f 90       	pop	r0
    46a2:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    46a6:	27 96       	adiw	r28, 0x07	; 7
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	cd bf       	out	0x3d, r28	; 61
    46b2:	cf 91       	pop	r28
    46b4:	df 91       	pop	r29
    46b6:	08 95       	ret

000046b8 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
    46b8:	df 93       	push	r29
    46ba:	cf 93       	push	r28
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
    46c0:	2e 97       	sbiw	r28, 0x0e	; 14
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	98 87       	std	Y+8, r25	; 0x08
    46ce:	8f 83       	std	Y+7, r24	; 0x07
    46d0:	49 87       	std	Y+9, r20	; 0x09
    46d2:	5a 87       	std	Y+10, r21	; 0x0a
    46d4:	6b 87       	std	Y+11, r22	; 0x0b
    46d6:	7c 87       	std	Y+12, r23	; 0x0c
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    46d8:	8f 81       	ldd	r24, Y+7	; 0x07
    46da:	98 85       	ldd	r25, Y+8	; 0x08
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	39 f4       	brne	.+14     	; 0x46ee <ulTaskNotifyValueClear+0x36>
    46e0:	80 91 6c 04 	lds	r24, 0x046C
    46e4:	90 91 6d 04 	lds	r25, 0x046D
    46e8:	9e 87       	std	Y+14, r25	; 0x0e
    46ea:	8d 87       	std	Y+13, r24	; 0x0d
    46ec:	04 c0       	rjmp	.+8      	; 0x46f6 <ulTaskNotifyValueClear+0x3e>
    46ee:	8f 81       	ldd	r24, Y+7	; 0x07
    46f0:	98 85       	ldd	r25, Y+8	; 0x08
    46f2:	9e 87       	std	Y+14, r25	; 0x0e
    46f4:	8d 87       	std	Y+13, r24	; 0x0d
    46f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46fa:	9e 83       	std	Y+6, r25	; 0x06
    46fc:	8d 83       	std	Y+5, r24	; 0x05

		taskENTER_CRITICAL();
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	0f 92       	push	r0
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4704:	e0 91 6c 04 	lds	r30, 0x046C
    4708:	f0 91 6d 04 	lds	r31, 0x046D
    470c:	81 a1       	ldd	r24, Z+33	; 0x21
    470e:	92 a1       	ldd	r25, Z+34	; 0x22
    4710:	a3 a1       	ldd	r26, Z+35	; 0x23
    4712:	b4 a1       	ldd	r27, Z+36	; 0x24
    4714:	89 83       	std	Y+1, r24	; 0x01
    4716:	9a 83       	std	Y+2, r25	; 0x02
    4718:	ab 83       	std	Y+3, r26	; 0x03
    471a:	bc 83       	std	Y+4, r27	; 0x04
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
    471c:	ed 81       	ldd	r30, Y+5	; 0x05
    471e:	fe 81       	ldd	r31, Y+6	; 0x06
    4720:	21 a1       	ldd	r18, Z+33	; 0x21
    4722:	32 a1       	ldd	r19, Z+34	; 0x22
    4724:	43 a1       	ldd	r20, Z+35	; 0x23
    4726:	54 a1       	ldd	r21, Z+36	; 0x24
    4728:	89 85       	ldd	r24, Y+9	; 0x09
    472a:	9a 85       	ldd	r25, Y+10	; 0x0a
    472c:	ab 85       	ldd	r26, Y+11	; 0x0b
    472e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4730:	80 95       	com	r24
    4732:	90 95       	com	r25
    4734:	a0 95       	com	r26
    4736:	b0 95       	com	r27
    4738:	82 23       	and	r24, r18
    473a:	93 23       	and	r25, r19
    473c:	a4 23       	and	r26, r20
    473e:	b5 23       	and	r27, r21
    4740:	ed 81       	ldd	r30, Y+5	; 0x05
    4742:	fe 81       	ldd	r31, Y+6	; 0x06
    4744:	81 a3       	std	Z+33, r24	; 0x21
    4746:	92 a3       	std	Z+34, r25	; 0x22
    4748:	a3 a3       	std	Z+35, r26	; 0x23
    474a:	b4 a3       	std	Z+36, r27	; 0x24
		}
		taskEXIT_CRITICAL();
    474c:	0f 90       	pop	r0
    474e:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	ab 81       	ldd	r26, Y+3	; 0x03
    4756:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4758:	bc 01       	movw	r22, r24
    475a:	cd 01       	movw	r24, r26
    475c:	2e 96       	adiw	r28, 0x0e	; 14
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	cf 91       	pop	r28
    476a:	df 91       	pop	r29
    476c:	08 95       	ret

0000476e <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    476e:	df 93       	push	r29
    4770:	cf 93       	push	r28
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	27 97       	sbiw	r28, 0x07	; 7
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	9e 83       	std	Y+6, r25	; 0x06
    4784:	8d 83       	std	Y+5, r24	; 0x05
    4786:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4788:	80 91 70 04 	lds	r24, 0x0470
    478c:	90 91 71 04 	lds	r25, 0x0471
    4790:	9a 83       	std	Y+2, r25	; 0x02
    4792:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4794:	80 91 6c 04 	lds	r24, 0x046C
    4798:	90 91 6d 04 	lds	r25, 0x046D
    479c:	02 96       	adiw	r24, 0x02	; 2
    479e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    47a2:	8d 81       	ldd	r24, Y+5	; 0x05
    47a4:	9e 81       	ldd	r25, Y+6	; 0x06
    47a6:	2f ef       	ldi	r18, 0xFF	; 255
    47a8:	8f 3f       	cpi	r24, 0xFF	; 255
    47aa:	92 07       	cpc	r25, r18
    47ac:	81 f4       	brne	.+32     	; 0x47ce <prvAddCurrentTaskToDelayedList+0x60>
    47ae:	8f 81       	ldd	r24, Y+7	; 0x07
    47b0:	88 23       	and	r24, r24
    47b2:	69 f0       	breq	.+26     	; 0x47ce <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    47b4:	80 91 6c 04 	lds	r24, 0x046C
    47b8:	90 91 6d 04 	lds	r25, 0x046D
    47bc:	9c 01       	movw	r18, r24
    47be:	2e 5f       	subi	r18, 0xFE	; 254
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	83 ed       	ldi	r24, 0xD3	; 211
    47c4:	94 e0       	ldi	r25, 0x04	; 4
    47c6:	b9 01       	movw	r22, r18
    47c8:	0e 94 21 0a 	call	0x1442	; 0x1442 <vListInsertEnd>
    47cc:	43 c0       	rjmp	.+134    	; 0x4854 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    47ce:	29 81       	ldd	r18, Y+1	; 0x01
    47d0:	3a 81       	ldd	r19, Y+2	; 0x02
    47d2:	8d 81       	ldd	r24, Y+5	; 0x05
    47d4:	9e 81       	ldd	r25, Y+6	; 0x06
    47d6:	82 0f       	add	r24, r18
    47d8:	93 1f       	adc	r25, r19
    47da:	9c 83       	std	Y+4, r25	; 0x04
    47dc:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    47de:	e0 91 6c 04 	lds	r30, 0x046C
    47e2:	f0 91 6d 04 	lds	r31, 0x046D
    47e6:	8b 81       	ldd	r24, Y+3	; 0x03
    47e8:	9c 81       	ldd	r25, Y+4	; 0x04
    47ea:	93 83       	std	Z+3, r25	; 0x03
    47ec:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    47ee:	2b 81       	ldd	r18, Y+3	; 0x03
    47f0:	3c 81       	ldd	r19, Y+4	; 0x04
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	9a 81       	ldd	r25, Y+2	; 0x02
    47f6:	28 17       	cp	r18, r24
    47f8:	39 07       	cpc	r19, r25
    47fa:	70 f4       	brcc	.+28     	; 0x4818 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    47fc:	80 91 bf 04 	lds	r24, 0x04BF
    4800:	90 91 c0 04 	lds	r25, 0x04C0
    4804:	20 91 6c 04 	lds	r18, 0x046C
    4808:	30 91 6d 04 	lds	r19, 0x046D
    480c:	2e 5f       	subi	r18, 0xFE	; 254
    480e:	3f 4f       	sbci	r19, 0xFF	; 255
    4810:	b9 01       	movw	r22, r18
    4812:	0e 94 65 0a 	call	0x14ca	; 0x14ca <vListInsert>
    4816:	1e c0       	rjmp	.+60     	; 0x4854 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4818:	40 91 bd 04 	lds	r20, 0x04BD
    481c:	50 91 be 04 	lds	r21, 0x04BE
    4820:	80 91 6c 04 	lds	r24, 0x046C
    4824:	90 91 6d 04 	lds	r25, 0x046D
    4828:	9c 01       	movw	r18, r24
    482a:	2e 5f       	subi	r18, 0xFE	; 254
    482c:	3f 4f       	sbci	r19, 0xFF	; 255
    482e:	ca 01       	movw	r24, r20
    4830:	b9 01       	movw	r22, r18
    4832:	0e 94 65 0a 	call	0x14ca	; 0x14ca <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    4836:	20 91 79 04 	lds	r18, 0x0479
    483a:	30 91 7a 04 	lds	r19, 0x047A
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	9c 81       	ldd	r25, Y+4	; 0x04
    4842:	82 17       	cp	r24, r18
    4844:	93 07       	cpc	r25, r19
    4846:	30 f4       	brcc	.+12     	; 0x4854 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    4848:	8b 81       	ldd	r24, Y+3	; 0x03
    484a:	9c 81       	ldd	r25, Y+4	; 0x04
    484c:	90 93 7a 04 	sts	0x047A, r25
    4850:	80 93 79 04 	sts	0x0479, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4854:	27 96       	adiw	r28, 0x07	; 7
    4856:	0f b6       	in	r0, 0x3f	; 63
    4858:	f8 94       	cli
    485a:	de bf       	out	0x3e, r29	; 62
    485c:	0f be       	out	0x3f, r0	; 63
    485e:	cd bf       	out	0x3d, r28	; 61
    4860:	cf 91       	pop	r28
    4862:	df 91       	pop	r29
    4864:	08 95       	ret

00004866 <GIE_Enable>:
#include "GIE_Private.h"
#include "GIE_Cfg.h"


void GIE_Enable(void)
{
    4866:	df 93       	push	r29
    4868:	cf 93       	push	r28
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    486e:	af e5       	ldi	r26, 0x5F	; 95
    4870:	b0 e0       	ldi	r27, 0x00	; 0
    4872:	ef e5       	ldi	r30, 0x5F	; 95
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	80 81       	ld	r24, Z
    4878:	80 68       	ori	r24, 0x80	; 128
    487a:	8c 93       	st	X, r24
}
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <GIE_Disable>:
void GIE_Disable(void)
{
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    488a:	af e5       	ldi	r26, 0x5F	; 95
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	ef e5       	ldi	r30, 0x5F	; 95
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	80 81       	ld	r24, Z
    4894:	8f 77       	andi	r24, 0x7F	; 127
    4896:	8c 93       	st	X, r24
}
    4898:	cf 91       	pop	r28
    489a:	df 91       	pop	r29
    489c:	08 95       	ret

0000489e <EXTI_EnableDisable>:
void (*EXTI0_CallBack) (void) = NULL;
void (*EXTI1_CallBack) (void) = NULL;
void (*EXTI2_CallBack) (void) = NULL;

void EXTI_EnableDisable(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_MODE_e)
{
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	00 d0       	rcall	.+0      	; 0x48a4 <EXTI_EnableDisable+0x6>
    48a4:	00 d0       	rcall	.+0      	; 0x48a6 <EXTI_EnableDisable+0x8>
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	28 2f       	mov	r18, r24
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	3c 83       	std	Y+4, r19	; 0x04
    48b6:	2b 83       	std	Y+3, r18	; 0x03
    48b8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ba:	9c 81       	ldd	r25, Y+4	; 0x04
    48bc:	81 30       	cpi	r24, 0x01	; 1
    48be:	91 05       	cpc	r25, r1
    48c0:	01 f1       	breq	.+64     	; 0x4902 <EXTI_EnableDisable+0x64>
    48c2:	2b 81       	ldd	r18, Y+3	; 0x03
    48c4:	3c 81       	ldd	r19, Y+4	; 0x04
    48c6:	22 30       	cpi	r18, 0x02	; 2
    48c8:	31 05       	cpc	r19, r1
    48ca:	89 f1       	breq	.+98     	; 0x492e <EXTI_EnableDisable+0x90>
    48cc:	8b 81       	ldd	r24, Y+3	; 0x03
    48ce:	9c 81       	ldd	r25, Y+4	; 0x04
    48d0:	00 97       	sbiw	r24, 0x00	; 0
    48d2:	09 f0       	breq	.+2      	; 0x48d6 <EXTI_EnableDisable+0x38>
    48d4:	41 c0       	rjmp	.+130    	; 0x4958 <EXTI_EnableDisable+0xba>
	{
	case EXTI_INT_0:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    48d6:	8a 81       	ldd	r24, Y+2	; 0x02
    48d8:	81 30       	cpi	r24, 0x01	; 1
    48da:	41 f4       	brne	.+16     	; 0x48ec <EXTI_EnableDisable+0x4e>
		{
			SET_BIT(GICR , GICR_INT0);
    48dc:	ab e5       	ldi	r26, 0x5B	; 91
    48de:	b0 e0       	ldi	r27, 0x00	; 0
    48e0:	eb e5       	ldi	r30, 0x5B	; 91
    48e2:	f0 e0       	ldi	r31, 0x00	; 0
    48e4:	80 81       	ld	r24, Z
    48e6:	80 64       	ori	r24, 0x40	; 64
    48e8:	8c 93       	st	X, r24
    48ea:	36 c0       	rjmp	.+108    	; 0x4958 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	88 23       	and	r24, r24
    48f0:	99 f5       	brne	.+102    	; 0x4958 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT0);
    48f2:	ab e5       	ldi	r26, 0x5B	; 91
    48f4:	b0 e0       	ldi	r27, 0x00	; 0
    48f6:	eb e5       	ldi	r30, 0x5B	; 91
    48f8:	f0 e0       	ldi	r31, 0x00	; 0
    48fa:	80 81       	ld	r24, Z
    48fc:	8f 7b       	andi	r24, 0xBF	; 191
    48fe:	8c 93       	st	X, r24
    4900:	2b c0       	rjmp	.+86     	; 0x4958 <EXTI_EnableDisable+0xba>
		}
		break;


	case EXTI_INT_1:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    4902:	8a 81       	ldd	r24, Y+2	; 0x02
    4904:	81 30       	cpi	r24, 0x01	; 1
    4906:	41 f4       	brne	.+16     	; 0x4918 <EXTI_EnableDisable+0x7a>
		{
			SET_BIT(GICR , GICR_INT1);
    4908:	ab e5       	ldi	r26, 0x5B	; 91
    490a:	b0 e0       	ldi	r27, 0x00	; 0
    490c:	eb e5       	ldi	r30, 0x5B	; 91
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	80 68       	ori	r24, 0x80	; 128
    4914:	8c 93       	st	X, r24
    4916:	20 c0       	rjmp	.+64     	; 0x4958 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	88 23       	and	r24, r24
    491c:	e9 f4       	brne	.+58     	; 0x4958 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT1);
    491e:	ab e5       	ldi	r26, 0x5B	; 91
    4920:	b0 e0       	ldi	r27, 0x00	; 0
    4922:	eb e5       	ldi	r30, 0x5B	; 91
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	80 81       	ld	r24, Z
    4928:	8f 77       	andi	r24, 0x7F	; 127
    492a:	8c 93       	st	X, r24
    492c:	15 c0       	rjmp	.+42     	; 0x4958 <EXTI_EnableDisable+0xba>
		break;



	case EXTI_INT_2:
		if(EXTI_ENABLE == Copy_u8EXTI_MODE_e)
    492e:	8a 81       	ldd	r24, Y+2	; 0x02
    4930:	81 30       	cpi	r24, 0x01	; 1
    4932:	41 f4       	brne	.+16     	; 0x4944 <EXTI_EnableDisable+0xa6>
		{
			SET_BIT(GICR , GICR_INT2);
    4934:	ab e5       	ldi	r26, 0x5B	; 91
    4936:	b0 e0       	ldi	r27, 0x00	; 0
    4938:	eb e5       	ldi	r30, 0x5B	; 91
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	80 81       	ld	r24, Z
    493e:	80 62       	ori	r24, 0x20	; 32
    4940:	8c 93       	st	X, r24
    4942:	0a c0       	rjmp	.+20     	; 0x4958 <EXTI_EnableDisable+0xba>
		}
		else if(EXTI_DISABLE == Copy_u8EXTI_MODE_e)
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	88 23       	and	r24, r24
    4948:	39 f4       	brne	.+14     	; 0x4958 <EXTI_EnableDisable+0xba>
		{
			CLR_BIT(GICR , GICR_INT2);
    494a:	ab e5       	ldi	r26, 0x5B	; 91
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	eb e5       	ldi	r30, 0x5B	; 91
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	8f 7d       	andi	r24, 0xDF	; 223
    4956:	8c 93       	st	X, r24
		}
		break;
	}
}
    4958:	0f 90       	pop	r0
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	cf 91       	pop	r28
    4962:	df 91       	pop	r29
    4964:	08 95       	ret

00004966 <EXTI_SetSenstivity>:

void EXTI_SetSenstivity(u8 Copy_u8EXTI_INTNum_e , u8 Copy_u8EXTI_SENSTIVITY_e)
{
    4966:	df 93       	push	r29
    4968:	cf 93       	push	r28
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
    496e:	2a 97       	sbiw	r28, 0x0a	; 10
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	89 83       	std	Y+1, r24	; 0x01
    497c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_INTNum_e)
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	28 2f       	mov	r18, r24
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	3a 87       	std	Y+10, r19	; 0x0a
    4986:	29 87       	std	Y+9, r18	; 0x09
    4988:	89 85       	ldd	r24, Y+9	; 0x09
    498a:	9a 85       	ldd	r25, Y+10	; 0x0a
    498c:	81 30       	cpi	r24, 0x01	; 1
    498e:	91 05       	cpc	r25, r1
    4990:	09 f4       	brne	.+2      	; 0x4994 <EXTI_SetSenstivity+0x2e>
    4992:	66 c0       	rjmp	.+204    	; 0x4a60 <EXTI_SetSenstivity+0xfa>
    4994:	29 85       	ldd	r18, Y+9	; 0x09
    4996:	3a 85       	ldd	r19, Y+10	; 0x0a
    4998:	22 30       	cpi	r18, 0x02	; 2
    499a:	31 05       	cpc	r19, r1
    499c:	09 f4       	brne	.+2      	; 0x49a0 <EXTI_SetSenstivity+0x3a>
    499e:	bb c0       	rjmp	.+374    	; 0x4b16 <EXTI_SetSenstivity+0x1b0>
    49a0:	89 85       	ldd	r24, Y+9	; 0x09
    49a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	09 f0       	breq	.+2      	; 0x49aa <EXTI_SetSenstivity+0x44>
    49a8:	d5 c0       	rjmp	.+426    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
	{
	case EXTI_INT_0:
		switch(Copy_u8EXTI_SENSTIVITY_e)
    49aa:	8a 81       	ldd	r24, Y+2	; 0x02
    49ac:	28 2f       	mov	r18, r24
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	38 87       	std	Y+8, r19	; 0x08
    49b2:	2f 83       	std	Y+7, r18	; 0x07
    49b4:	8f 81       	ldd	r24, Y+7	; 0x07
    49b6:	98 85       	ldd	r25, Y+8	; 0x08
    49b8:	81 30       	cpi	r24, 0x01	; 1
    49ba:	91 05       	cpc	r25, r1
    49bc:	21 f1       	breq	.+72     	; 0x4a06 <EXTI_SetSenstivity+0xa0>
    49be:	2f 81       	ldd	r18, Y+7	; 0x07
    49c0:	38 85       	ldd	r19, Y+8	; 0x08
    49c2:	22 30       	cpi	r18, 0x02	; 2
    49c4:	31 05       	cpc	r19, r1
    49c6:	2c f4       	brge	.+10     	; 0x49d2 <EXTI_SetSenstivity+0x6c>
    49c8:	8f 81       	ldd	r24, Y+7	; 0x07
    49ca:	98 85       	ldd	r25, Y+8	; 0x08
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	61 f0       	breq	.+24     	; 0x49e8 <EXTI_SetSenstivity+0x82>
    49d0:	c1 c0       	rjmp	.+386    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
    49d2:	2f 81       	ldd	r18, Y+7	; 0x07
    49d4:	38 85       	ldd	r19, Y+8	; 0x08
    49d6:	22 30       	cpi	r18, 0x02	; 2
    49d8:	31 05       	cpc	r19, r1
    49da:	21 f1       	breq	.+72     	; 0x4a24 <EXTI_SetSenstivity+0xbe>
    49dc:	8f 81       	ldd	r24, Y+7	; 0x07
    49de:	98 85       	ldd	r25, Y+8	; 0x08
    49e0:	83 30       	cpi	r24, 0x03	; 3
    49e2:	91 05       	cpc	r25, r1
    49e4:	71 f1       	breq	.+92     	; 0x4a42 <EXTI_SetSenstivity+0xdc>
    49e6:	b6 c0       	rjmp	.+364    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    49e8:	a5 e5       	ldi	r26, 0x55	; 85
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	e5 e5       	ldi	r30, 0x55	; 85
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 81       	ld	r24, Z
    49f2:	8e 7f       	andi	r24, 0xFE	; 254
    49f4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    49f6:	a5 e5       	ldi	r26, 0x55	; 85
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	e5 e5       	ldi	r30, 0x55	; 85
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	8d 7f       	andi	r24, 0xFD	; 253
    4a02:	8c 93       	st	X, r24
    4a04:	a7 c0       	rjmp	.+334    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    4a06:	a5 e5       	ldi	r26, 0x55	; 85
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	e5 e5       	ldi	r30, 0x55	; 85
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	81 60       	ori	r24, 0x01	; 1
    4a12:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    4a14:	a5 e5       	ldi	r26, 0x55	; 85
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	e5 e5       	ldi	r30, 0x55	; 85
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	8d 7f       	andi	r24, 0xFD	; 253
    4a20:	8c 93       	st	X, r24
    4a22:	98 c0       	rjmp	.+304    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_FAILLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    4a24:	a5 e5       	ldi	r26, 0x55	; 85
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e5 e5       	ldi	r30, 0x55	; 85
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 81       	ld	r24, Z
    4a2e:	8e 7f       	andi	r24, 0xFE	; 254
    4a30:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    4a32:	a5 e5       	ldi	r26, 0x55	; 85
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	e5 e5       	ldi	r30, 0x55	; 85
    4a38:	f0 e0       	ldi	r31, 0x00	; 0
    4a3a:	80 81       	ld	r24, Z
    4a3c:	82 60       	ori	r24, 0x02	; 2
    4a3e:	8c 93       	st	X, r24
    4a40:	89 c0       	rjmp	.+274    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
			break;

		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    4a42:	a5 e5       	ldi	r26, 0x55	; 85
    4a44:	b0 e0       	ldi	r27, 0x00	; 0
    4a46:	e5 e5       	ldi	r30, 0x55	; 85
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	80 81       	ld	r24, Z
    4a4c:	81 60       	ori	r24, 0x01	; 1
    4a4e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    4a50:	a5 e5       	ldi	r26, 0x55	; 85
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	e5 e5       	ldi	r30, 0x55	; 85
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	82 60       	ori	r24, 0x02	; 2
    4a5c:	8c 93       	st	X, r24
    4a5e:	7a c0       	rjmp	.+244    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
			break;
		}
		break;

		case EXTI_INT_1:
			switch(Copy_u8EXTI_SENSTIVITY_e)
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	28 2f       	mov	r18, r24
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	3e 83       	std	Y+6, r19	; 0x06
    4a68:	2d 83       	std	Y+5, r18	; 0x05
    4a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a6e:	81 30       	cpi	r24, 0x01	; 1
    4a70:	91 05       	cpc	r25, r1
    4a72:	21 f1       	breq	.+72     	; 0x4abc <EXTI_SetSenstivity+0x156>
    4a74:	2d 81       	ldd	r18, Y+5	; 0x05
    4a76:	3e 81       	ldd	r19, Y+6	; 0x06
    4a78:	22 30       	cpi	r18, 0x02	; 2
    4a7a:	31 05       	cpc	r19, r1
    4a7c:	2c f4       	brge	.+10     	; 0x4a88 <EXTI_SetSenstivity+0x122>
    4a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a80:	9e 81       	ldd	r25, Y+6	; 0x06
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	61 f0       	breq	.+24     	; 0x4a9e <EXTI_SetSenstivity+0x138>
    4a86:	66 c0       	rjmp	.+204    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
    4a88:	2d 81       	ldd	r18, Y+5	; 0x05
    4a8a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a8c:	22 30       	cpi	r18, 0x02	; 2
    4a8e:	31 05       	cpc	r19, r1
    4a90:	21 f1       	breq	.+72     	; 0x4ada <EXTI_SetSenstivity+0x174>
    4a92:	8d 81       	ldd	r24, Y+5	; 0x05
    4a94:	9e 81       	ldd	r25, Y+6	; 0x06
    4a96:	83 30       	cpi	r24, 0x03	; 3
    4a98:	91 05       	cpc	r25, r1
    4a9a:	71 f1       	breq	.+92     	; 0x4af8 <EXTI_SetSenstivity+0x192>
    4a9c:	5b c0       	rjmp	.+182    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
			{
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    4a9e:	a5 e5       	ldi	r26, 0x55	; 85
    4aa0:	b0 e0       	ldi	r27, 0x00	; 0
    4aa2:	e5 e5       	ldi	r30, 0x55	; 85
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	80 81       	ld	r24, Z
    4aa8:	8b 7f       	andi	r24, 0xFB	; 251
    4aaa:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    4aac:	a5 e5       	ldi	r26, 0x55	; 85
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	e5 e5       	ldi	r30, 0x55	; 85
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	87 7f       	andi	r24, 0xF7	; 247
    4ab8:	8c 93       	st	X, r24
    4aba:	4c c0       	rjmp	.+152    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_ON_CHANGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    4abc:	a5 e5       	ldi	r26, 0x55	; 85
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	e5 e5       	ldi	r30, 0x55	; 85
    4ac2:	f0 e0       	ldi	r31, 0x00	; 0
    4ac4:	80 81       	ld	r24, Z
    4ac6:	84 60       	ori	r24, 0x04	; 4
    4ac8:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC11);
    4aca:	a5 e5       	ldi	r26, 0x55	; 85
    4acc:	b0 e0       	ldi	r27, 0x00	; 0
    4ace:	e5 e5       	ldi	r30, 0x55	; 85
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	87 7f       	andi	r24, 0xF7	; 247
    4ad6:	8c 93       	st	X, r24
    4ad8:	3d c0       	rjmp	.+122    	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_FAILLING_EDGE:
				CLR_BIT(MCUCR,MCUCR_ISC10);
    4ada:	a5 e5       	ldi	r26, 0x55	; 85
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e5 e5       	ldi	r30, 0x55	; 85
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	8b 7f       	andi	r24, 0xFB	; 251
    4ae6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    4ae8:	a5 e5       	ldi	r26, 0x55	; 85
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	e5 e5       	ldi	r30, 0x55	; 85
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	88 60       	ori	r24, 0x08	; 8
    4af4:	8c 93       	st	X, r24
    4af6:	2e c0       	rjmp	.+92     	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
				break;

			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC10);
    4af8:	a5 e5       	ldi	r26, 0x55	; 85
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	e5 e5       	ldi	r30, 0x55	; 85
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	84 60       	ori	r24, 0x04	; 4
    4b04:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC11);
    4b06:	a5 e5       	ldi	r26, 0x55	; 85
    4b08:	b0 e0       	ldi	r27, 0x00	; 0
    4b0a:	e5 e5       	ldi	r30, 0x55	; 85
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	80 81       	ld	r24, Z
    4b10:	88 60       	ori	r24, 0x08	; 8
    4b12:	8c 93       	st	X, r24
    4b14:	1f c0       	rjmp	.+62     	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
				break;
			}
			break;

			case EXTI_INT_2:
				switch(Copy_u8EXTI_SENSTIVITY_e)
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	28 2f       	mov	r18, r24
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	3c 83       	std	Y+4, r19	; 0x04
    4b1e:	2b 83       	std	Y+3, r18	; 0x03
    4b20:	8b 81       	ldd	r24, Y+3	; 0x03
    4b22:	9c 81       	ldd	r25, Y+4	; 0x04
    4b24:	82 30       	cpi	r24, 0x02	; 2
    4b26:	91 05       	cpc	r25, r1
    4b28:	31 f0       	breq	.+12     	; 0x4b36 <EXTI_SetSenstivity+0x1d0>
    4b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    4b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    4b2e:	23 30       	cpi	r18, 0x03	; 3
    4b30:	31 05       	cpc	r19, r1
    4b32:	49 f0       	breq	.+18     	; 0x4b46 <EXTI_SetSenstivity+0x1e0>
    4b34:	0f c0       	rjmp	.+30     	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
				{
				case
				EXTI_FAILLING_EDGE:
					SET_BIT(MCUCSR , MCUCSR_ISC2);
    4b36:	a4 e5       	ldi	r26, 0x54	; 84
    4b38:	b0 e0       	ldi	r27, 0x00	; 0
    4b3a:	e4 e5       	ldi	r30, 0x54	; 84
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	80 81       	ld	r24, Z
    4b40:	80 64       	ori	r24, 0x40	; 64
    4b42:	8c 93       	st	X, r24
    4b44:	07 c0       	rjmp	.+14     	; 0x4b54 <EXTI_SetSenstivity+0x1ee>
					break;
				case EXTI_RISING_EDGE:
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    4b46:	a4 e5       	ldi	r26, 0x54	; 84
    4b48:	b0 e0       	ldi	r27, 0x00	; 0
    4b4a:	e4 e5       	ldi	r30, 0x54	; 84
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	8f 7b       	andi	r24, 0xBF	; 191
    4b52:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    4b54:	2a 96       	adiw	r28, 0x0a	; 10
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	f8 94       	cli
    4b5a:	de bf       	out	0x3e, r29	; 62
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	cd bf       	out	0x3d, r28	; 61
    4b60:	cf 91       	pop	r28
    4b62:	df 91       	pop	r29
    4b64:	08 95       	ret

00004b66 <EXTI_vSetCallBack>:


void EXTI_vSetCallBack(EXTI_INTNum_e  A_EXTI_ID , void (*A_ptrToFunc)(void))
{
    4b66:	df 93       	push	r29
    4b68:	cf 93       	push	r28
    4b6a:	00 d0       	rcall	.+0      	; 0x4b6c <EXTI_vSetCallBack+0x6>
    4b6c:	00 d0       	rcall	.+0      	; 0x4b6e <EXTI_vSetCallBack+0x8>
    4b6e:	0f 92       	push	r0
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62
    4b74:	89 83       	std	Y+1, r24	; 0x01
    4b76:	7b 83       	std	Y+3, r23	; 0x03
    4b78:	6a 83       	std	Y+2, r22	; 0x02
    if( (A_EXTI_ID <= EXTI_INT_2) && (A_ptrToFunc != NULL) )
    4b7a:	89 81       	ldd	r24, Y+1	; 0x01
    4b7c:	83 30       	cpi	r24, 0x03	; 3
    4b7e:	88 f5       	brcc	.+98     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	9b 81       	ldd	r25, Y+3	; 0x03
    4b84:	00 97       	sbiw	r24, 0x00	; 0
    4b86:	69 f1       	breq	.+90     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
    {
        switch (A_EXTI_ID)
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	28 2f       	mov	r18, r24
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	3d 83       	std	Y+5, r19	; 0x05
    4b90:	2c 83       	std	Y+4, r18	; 0x04
    4b92:	8c 81       	ldd	r24, Y+4	; 0x04
    4b94:	9d 81       	ldd	r25, Y+5	; 0x05
    4b96:	81 30       	cpi	r24, 0x01	; 1
    4b98:	91 05       	cpc	r25, r1
    4b9a:	b1 f0       	breq	.+44     	; 0x4bc8 <EXTI_vSetCallBack+0x62>
    4b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    4b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    4ba0:	22 30       	cpi	r18, 0x02	; 2
    4ba2:	31 05       	cpc	r19, r1
    4ba4:	c1 f0       	breq	.+48     	; 0x4bd6 <EXTI_vSetCallBack+0x70>
    4ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    4baa:	00 97       	sbiw	r24, 0x00	; 0
    4bac:	d1 f4       	brne	.+52     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
        {
            case EXTI_INT_0:
                if (EXTI0_CallBack == NULL) {
    4bae:	80 91 dc 04 	lds	r24, 0x04DC
    4bb2:	90 91 dd 04 	lds	r25, 0x04DD
    4bb6:	00 97       	sbiw	r24, 0x00	; 0
    4bb8:	a1 f4       	brne	.+40     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
                    EXTI0_CallBack = A_ptrToFunc;
    4bba:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbe:	90 93 dd 04 	sts	0x04DD, r25
    4bc2:	80 93 dc 04 	sts	0x04DC, r24
    4bc6:	0d c0       	rjmp	.+26     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
                }
                break;

            case EXTI_INT_1:
                EXTI1_CallBack = A_ptrToFunc; // Set the callback function for EXTI1
    4bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bca:	9b 81       	ldd	r25, Y+3	; 0x03
    4bcc:	90 93 df 04 	sts	0x04DF, r25
    4bd0:	80 93 de 04 	sts	0x04DE, r24
    4bd4:	06 c0       	rjmp	.+12     	; 0x4be2 <EXTI_vSetCallBack+0x7c>
                break;

            case EXTI_INT_2:
                EXTI2_CallBack = A_ptrToFunc; // Set the callback function for EXTI2
    4bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bda:	90 93 e1 04 	sts	0x04E1, r25
    4bde:	80 93 e0 04 	sts	0x04E0, r24

            default:
                break;
        }
    }
}
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	cf 91       	pop	r28
    4bee:	df 91       	pop	r29
    4bf0:	08 95       	ret

00004bf2 <__vector_1>:


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	2f 93       	push	r18
    4bfe:	3f 93       	push	r19
    4c00:	4f 93       	push	r20
    4c02:	5f 93       	push	r21
    4c04:	6f 93       	push	r22
    4c06:	7f 93       	push	r23
    4c08:	8f 93       	push	r24
    4c0a:	9f 93       	push	r25
    4c0c:	af 93       	push	r26
    4c0e:	bf 93       	push	r27
    4c10:	ef 93       	push	r30
    4c12:	ff 93       	push	r31
    4c14:	df 93       	push	r29
    4c16:	cf 93       	push	r28
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    if(EXTI0_CallBack != NULL)
    4c1c:	80 91 dc 04 	lds	r24, 0x04DC
    4c20:	90 91 dd 04 	lds	r25, 0x04DD
    4c24:	00 97       	sbiw	r24, 0x00	; 0
    4c26:	29 f0       	breq	.+10     	; 0x4c32 <__vector_1+0x40>
    {
        EXTI0_CallBack();
    4c28:	e0 91 dc 04 	lds	r30, 0x04DC
    4c2c:	f0 91 dd 04 	lds	r31, 0x04DD
    4c30:	09 95       	icall
    }
}
    4c32:	cf 91       	pop	r28
    4c34:	df 91       	pop	r29
    4c36:	ff 91       	pop	r31
    4c38:	ef 91       	pop	r30
    4c3a:	bf 91       	pop	r27
    4c3c:	af 91       	pop	r26
    4c3e:	9f 91       	pop	r25
    4c40:	8f 91       	pop	r24
    4c42:	7f 91       	pop	r23
    4c44:	6f 91       	pop	r22
    4c46:	5f 91       	pop	r21
    4c48:	4f 91       	pop	r20
    4c4a:	3f 91       	pop	r19
    4c4c:	2f 91       	pop	r18
    4c4e:	0f 90       	pop	r0
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	0f 90       	pop	r0
    4c54:	1f 90       	pop	r1
    4c56:	18 95       	reti

00004c58 <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    4c58:	df 93       	push	r29
    4c5a:	cf 93       	push	r28
    4c5c:	cd b7       	in	r28, 0x3d	; 61
    4c5e:	de b7       	in	r29, 0x3e	; 62
    4c60:	2d 97       	sbiw	r28, 0x0d	; 13
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	f8 94       	cli
    4c66:	de bf       	out	0x3e, r29	; 62
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	cd bf       	out	0x3d, r28	; 61
    4c6c:	89 83       	std	Y+1, r24	; 0x01
    4c6e:	6a 83       	std	Y+2, r22	; 0x02
    4c70:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	84 30       	cpi	r24, 0x04	; 4
    4c76:	08 f0       	brcs	.+2      	; 0x4c7a <MDIO_vSetPinDir+0x22>
    4c78:	09 c1       	rjmp	.+530    	; 0x4e8c <MDIO_vSetPinDir+0x234>
    4c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7c:	88 30       	cpi	r24, 0x08	; 8
    4c7e:	08 f0       	brcs	.+2      	; 0x4c82 <MDIO_vSetPinDir+0x2a>
    4c80:	05 c1       	rjmp	.+522    	; 0x4e8c <MDIO_vSetPinDir+0x234>
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	82 30       	cpi	r24, 0x02	; 2
    4c86:	08 f0       	brcs	.+2      	; 0x4c8a <MDIO_vSetPinDir+0x32>
    4c88:	01 c1       	rjmp	.+514    	; 0x4e8c <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	28 2f       	mov	r18, r24
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	3d 87       	std	Y+13, r19	; 0x0d
    4c92:	2c 87       	std	Y+12, r18	; 0x0c
    4c94:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c96:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c98:	81 30       	cpi	r24, 0x01	; 1
    4c9a:	91 05       	cpc	r25, r1
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <MDIO_vSetPinDir+0x48>
    4c9e:	4f c0       	rjmp	.+158    	; 0x4d3e <MDIO_vSetPinDir+0xe6>
    4ca0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ca2:	3d 85       	ldd	r19, Y+13	; 0x0d
    4ca4:	22 30       	cpi	r18, 0x02	; 2
    4ca6:	31 05       	cpc	r19, r1
    4ca8:	2c f4       	brge	.+10     	; 0x4cb4 <MDIO_vSetPinDir+0x5c>
    4caa:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cac:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	71 f0       	breq	.+28     	; 0x4cce <MDIO_vSetPinDir+0x76>
    4cb2:	ec c0       	rjmp	.+472    	; 0x4e8c <MDIO_vSetPinDir+0x234>
    4cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4cb6:	3d 85       	ldd	r19, Y+13	; 0x0d
    4cb8:	22 30       	cpi	r18, 0x02	; 2
    4cba:	31 05       	cpc	r19, r1
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <MDIO_vSetPinDir+0x68>
    4cbe:	77 c0       	rjmp	.+238    	; 0x4dae <MDIO_vSetPinDir+0x156>
    4cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cc4:	83 30       	cpi	r24, 0x03	; 3
    4cc6:	91 05       	cpc	r25, r1
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <MDIO_vSetPinDir+0x74>
    4cca:	a9 c0       	rjmp	.+338    	; 0x4e1e <MDIO_vSetPinDir+0x1c6>
    4ccc:	df c0       	rjmp	.+446    	; 0x4e8c <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	28 2f       	mov	r18, r24
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	3b 87       	std	Y+11, r19	; 0x0b
    4cd6:	2a 87       	std	Y+10, r18	; 0x0a
    4cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	31 f0       	breq	.+12     	; 0x4cec <MDIO_vSetPinDir+0x94>
    4ce0:	2a 85       	ldd	r18, Y+10	; 0x0a
    4ce2:	3b 85       	ldd	r19, Y+11	; 0x0b
    4ce4:	21 30       	cpi	r18, 0x01	; 1
    4ce6:	31 05       	cpc	r19, r1
    4ce8:	b1 f0       	breq	.+44     	; 0x4d16 <MDIO_vSetPinDir+0xbe>
    4cea:	d0 c0       	rjmp	.+416    	; 0x4e8c <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    4cec:	aa e3       	ldi	r26, 0x3A	; 58
    4cee:	b0 e0       	ldi	r27, 0x00	; 0
    4cf0:	ea e3       	ldi	r30, 0x3A	; 58
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	80 81       	ld	r24, Z
    4cf6:	48 2f       	mov	r20, r24
    4cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfa:	28 2f       	mov	r18, r24
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	02 2e       	mov	r0, r18
    4d04:	02 c0       	rjmp	.+4      	; 0x4d0a <MDIO_vSetPinDir+0xb2>
    4d06:	88 0f       	add	r24, r24
    4d08:	99 1f       	adc	r25, r25
    4d0a:	0a 94       	dec	r0
    4d0c:	e2 f7       	brpl	.-8      	; 0x4d06 <MDIO_vSetPinDir+0xae>
    4d0e:	80 95       	com	r24
    4d10:	84 23       	and	r24, r20
    4d12:	8c 93       	st	X, r24
    4d14:	bb c0       	rjmp	.+374    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    4d16:	aa e3       	ldi	r26, 0x3A	; 58
    4d18:	b0 e0       	ldi	r27, 0x00	; 0
    4d1a:	ea e3       	ldi	r30, 0x3A	; 58
    4d1c:	f0 e0       	ldi	r31, 0x00	; 0
    4d1e:	80 81       	ld	r24, Z
    4d20:	48 2f       	mov	r20, r24
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	28 2f       	mov	r18, r24
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	02 2e       	mov	r0, r18
    4d2e:	02 c0       	rjmp	.+4      	; 0x4d34 <MDIO_vSetPinDir+0xdc>
    4d30:	88 0f       	add	r24, r24
    4d32:	99 1f       	adc	r25, r25
    4d34:	0a 94       	dec	r0
    4d36:	e2 f7       	brpl	.-8      	; 0x4d30 <MDIO_vSetPinDir+0xd8>
    4d38:	84 2b       	or	r24, r20
    4d3a:	8c 93       	st	X, r24
    4d3c:	a7 c0       	rjmp	.+334    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	28 2f       	mov	r18, r24
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	39 87       	std	Y+9, r19	; 0x09
    4d46:	28 87       	std	Y+8, r18	; 0x08
    4d48:	88 85       	ldd	r24, Y+8	; 0x08
    4d4a:	99 85       	ldd	r25, Y+9	; 0x09
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	31 f0       	breq	.+12     	; 0x4d5c <MDIO_vSetPinDir+0x104>
    4d50:	28 85       	ldd	r18, Y+8	; 0x08
    4d52:	39 85       	ldd	r19, Y+9	; 0x09
    4d54:	21 30       	cpi	r18, 0x01	; 1
    4d56:	31 05       	cpc	r19, r1
    4d58:	b1 f0       	breq	.+44     	; 0x4d86 <MDIO_vSetPinDir+0x12e>
    4d5a:	98 c0       	rjmp	.+304    	; 0x4e8c <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    4d5c:	a7 e3       	ldi	r26, 0x37	; 55
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e7 e3       	ldi	r30, 0x37	; 55
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	48 2f       	mov	r20, r24
    4d68:	8a 81       	ldd	r24, Y+2	; 0x02
    4d6a:	28 2f       	mov	r18, r24
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	02 2e       	mov	r0, r18
    4d74:	02 c0       	rjmp	.+4      	; 0x4d7a <MDIO_vSetPinDir+0x122>
    4d76:	88 0f       	add	r24, r24
    4d78:	99 1f       	adc	r25, r25
    4d7a:	0a 94       	dec	r0
    4d7c:	e2 f7       	brpl	.-8      	; 0x4d76 <MDIO_vSetPinDir+0x11e>
    4d7e:	80 95       	com	r24
    4d80:	84 23       	and	r24, r20
    4d82:	8c 93       	st	X, r24
    4d84:	83 c0       	rjmp	.+262    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    4d86:	a7 e3       	ldi	r26, 0x37	; 55
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	e7 e3       	ldi	r30, 0x37	; 55
    4d8c:	f0 e0       	ldi	r31, 0x00	; 0
    4d8e:	80 81       	ld	r24, Z
    4d90:	48 2f       	mov	r20, r24
    4d92:	8a 81       	ldd	r24, Y+2	; 0x02
    4d94:	28 2f       	mov	r18, r24
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	02 2e       	mov	r0, r18
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <MDIO_vSetPinDir+0x14c>
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	0a 94       	dec	r0
    4da6:	e2 f7       	brpl	.-8      	; 0x4da0 <MDIO_vSetPinDir+0x148>
    4da8:	84 2b       	or	r24, r20
    4daa:	8c 93       	st	X, r24
    4dac:	6f c0       	rjmp	.+222    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	28 2f       	mov	r18, r24
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	3f 83       	std	Y+7, r19	; 0x07
    4db6:	2e 83       	std	Y+6, r18	; 0x06
    4db8:	8e 81       	ldd	r24, Y+6	; 0x06
    4dba:	9f 81       	ldd	r25, Y+7	; 0x07
    4dbc:	00 97       	sbiw	r24, 0x00	; 0
    4dbe:	31 f0       	breq	.+12     	; 0x4dcc <MDIO_vSetPinDir+0x174>
    4dc0:	2e 81       	ldd	r18, Y+6	; 0x06
    4dc2:	3f 81       	ldd	r19, Y+7	; 0x07
    4dc4:	21 30       	cpi	r18, 0x01	; 1
    4dc6:	31 05       	cpc	r19, r1
    4dc8:	b1 f0       	breq	.+44     	; 0x4df6 <MDIO_vSetPinDir+0x19e>
    4dca:	60 c0       	rjmp	.+192    	; 0x4e8c <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    4dcc:	a4 e3       	ldi	r26, 0x34	; 52
    4dce:	b0 e0       	ldi	r27, 0x00	; 0
    4dd0:	e4 e3       	ldi	r30, 0x34	; 52
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	80 81       	ld	r24, Z
    4dd6:	48 2f       	mov	r20, r24
    4dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dda:	28 2f       	mov	r18, r24
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	81 e0       	ldi	r24, 0x01	; 1
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	02 2e       	mov	r0, r18
    4de4:	02 c0       	rjmp	.+4      	; 0x4dea <MDIO_vSetPinDir+0x192>
    4de6:	88 0f       	add	r24, r24
    4de8:	99 1f       	adc	r25, r25
    4dea:	0a 94       	dec	r0
    4dec:	e2 f7       	brpl	.-8      	; 0x4de6 <MDIO_vSetPinDir+0x18e>
    4dee:	80 95       	com	r24
    4df0:	84 23       	and	r24, r20
    4df2:	8c 93       	st	X, r24
    4df4:	4b c0       	rjmp	.+150    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    4df6:	a4 e3       	ldi	r26, 0x34	; 52
    4df8:	b0 e0       	ldi	r27, 0x00	; 0
    4dfa:	e4 e3       	ldi	r30, 0x34	; 52
    4dfc:	f0 e0       	ldi	r31, 0x00	; 0
    4dfe:	80 81       	ld	r24, Z
    4e00:	48 2f       	mov	r20, r24
    4e02:	8a 81       	ldd	r24, Y+2	; 0x02
    4e04:	28 2f       	mov	r18, r24
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	02 2e       	mov	r0, r18
    4e0e:	02 c0       	rjmp	.+4      	; 0x4e14 <MDIO_vSetPinDir+0x1bc>
    4e10:	88 0f       	add	r24, r24
    4e12:	99 1f       	adc	r25, r25
    4e14:	0a 94       	dec	r0
    4e16:	e2 f7       	brpl	.-8      	; 0x4e10 <MDIO_vSetPinDir+0x1b8>
    4e18:	84 2b       	or	r24, r20
    4e1a:	8c 93       	st	X, r24
    4e1c:	37 c0       	rjmp	.+110    	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    4e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	3d 83       	std	Y+5, r19	; 0x05
    4e26:	2c 83       	std	Y+4, r18	; 0x04
    4e28:	8c 81       	ldd	r24, Y+4	; 0x04
    4e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    4e2c:	00 97       	sbiw	r24, 0x00	; 0
    4e2e:	31 f0       	breq	.+12     	; 0x4e3c <MDIO_vSetPinDir+0x1e4>
    4e30:	2c 81       	ldd	r18, Y+4	; 0x04
    4e32:	3d 81       	ldd	r19, Y+5	; 0x05
    4e34:	21 30       	cpi	r18, 0x01	; 1
    4e36:	31 05       	cpc	r19, r1
    4e38:	b1 f0       	breq	.+44     	; 0x4e66 <MDIO_vSetPinDir+0x20e>
    4e3a:	28 c0       	rjmp	.+80     	; 0x4e8c <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    4e3c:	a1 e3       	ldi	r26, 0x31	; 49
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	e1 e3       	ldi	r30, 0x31	; 49
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	48 2f       	mov	r20, r24
    4e48:	8a 81       	ldd	r24, Y+2	; 0x02
    4e4a:	28 2f       	mov	r18, r24
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	02 2e       	mov	r0, r18
    4e54:	02 c0       	rjmp	.+4      	; 0x4e5a <MDIO_vSetPinDir+0x202>
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	0a 94       	dec	r0
    4e5c:	e2 f7       	brpl	.-8      	; 0x4e56 <MDIO_vSetPinDir+0x1fe>
    4e5e:	80 95       	com	r24
    4e60:	84 23       	and	r24, r20
    4e62:	8c 93       	st	X, r24
    4e64:	13 c0       	rjmp	.+38     	; 0x4e8c <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    4e66:	a1 e3       	ldi	r26, 0x31	; 49
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	e1 e3       	ldi	r30, 0x31	; 49
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	80 81       	ld	r24, Z
    4e70:	48 2f       	mov	r20, r24
    4e72:	8a 81       	ldd	r24, Y+2	; 0x02
    4e74:	28 2f       	mov	r18, r24
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	02 2e       	mov	r0, r18
    4e7e:	02 c0       	rjmp	.+4      	; 0x4e84 <MDIO_vSetPinDir+0x22c>
    4e80:	88 0f       	add	r24, r24
    4e82:	99 1f       	adc	r25, r25
    4e84:	0a 94       	dec	r0
    4e86:	e2 f7       	brpl	.-8      	; 0x4e80 <MDIO_vSetPinDir+0x228>
    4e88:	84 2b       	or	r24, r20
    4e8a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    4e8c:	2d 96       	adiw	r28, 0x0d	; 13
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	de bf       	out	0x3e, r29	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	cd bf       	out	0x3d, r28	; 61
    4e98:	cf 91       	pop	r28
    4e9a:	df 91       	pop	r29
    4e9c:	08 95       	ret

00004e9e <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    4e9e:	df 93       	push	r29
    4ea0:	cf 93       	push	r28
    4ea2:	cd b7       	in	r28, 0x3d	; 61
    4ea4:	de b7       	in	r29, 0x3e	; 62
    4ea6:	2d 97       	sbiw	r28, 0x0d	; 13
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	f8 94       	cli
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	cd bf       	out	0x3d, r28	; 61
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	6a 83       	std	Y+2, r22	; 0x02
    4eb6:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	84 30       	cpi	r24, 0x04	; 4
    4ebc:	08 f0       	brcs	.+2      	; 0x4ec0 <MDIO_vSetPinVal+0x22>
    4ebe:	09 c1       	rjmp	.+530    	; 0x50d2 <MDIO_vSetPinVal+0x234>
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec2:	88 30       	cpi	r24, 0x08	; 8
    4ec4:	08 f0       	brcs	.+2      	; 0x4ec8 <MDIO_vSetPinVal+0x2a>
    4ec6:	05 c1       	rjmp	.+522    	; 0x50d2 <MDIO_vSetPinVal+0x234>
    4ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eca:	82 30       	cpi	r24, 0x02	; 2
    4ecc:	08 f0       	brcs	.+2      	; 0x4ed0 <MDIO_vSetPinVal+0x32>
    4ece:	01 c1       	rjmp	.+514    	; 0x50d2 <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	3d 87       	std	Y+13, r19	; 0x0d
    4ed8:	2c 87       	std	Y+12, r18	; 0x0c
    4eda:	8c 85       	ldd	r24, Y+12	; 0x0c
    4edc:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ede:	81 30       	cpi	r24, 0x01	; 1
    4ee0:	91 05       	cpc	r25, r1
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <MDIO_vSetPinVal+0x48>
    4ee4:	4f c0       	rjmp	.+158    	; 0x4f84 <MDIO_vSetPinVal+0xe6>
    4ee6:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ee8:	3d 85       	ldd	r19, Y+13	; 0x0d
    4eea:	22 30       	cpi	r18, 0x02	; 2
    4eec:	31 05       	cpc	r19, r1
    4eee:	2c f4       	brge	.+10     	; 0x4efa <MDIO_vSetPinVal+0x5c>
    4ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ef2:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ef4:	00 97       	sbiw	r24, 0x00	; 0
    4ef6:	71 f0       	breq	.+28     	; 0x4f14 <MDIO_vSetPinVal+0x76>
    4ef8:	ec c0       	rjmp	.+472    	; 0x50d2 <MDIO_vSetPinVal+0x234>
    4efa:	2c 85       	ldd	r18, Y+12	; 0x0c
    4efc:	3d 85       	ldd	r19, Y+13	; 0x0d
    4efe:	22 30       	cpi	r18, 0x02	; 2
    4f00:	31 05       	cpc	r19, r1
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <MDIO_vSetPinVal+0x68>
    4f04:	77 c0       	rjmp	.+238    	; 0x4ff4 <MDIO_vSetPinVal+0x156>
    4f06:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f08:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f0a:	83 30       	cpi	r24, 0x03	; 3
    4f0c:	91 05       	cpc	r25, r1
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <MDIO_vSetPinVal+0x74>
    4f10:	a9 c0       	rjmp	.+338    	; 0x5064 <MDIO_vSetPinVal+0x1c6>
    4f12:	df c0       	rjmp	.+446    	; 0x50d2 <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	28 2f       	mov	r18, r24
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	3b 87       	std	Y+11, r19	; 0x0b
    4f1c:	2a 87       	std	Y+10, r18	; 0x0a
    4f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	31 f0       	breq	.+12     	; 0x4f32 <MDIO_vSetPinVal+0x94>
    4f26:	2a 85       	ldd	r18, Y+10	; 0x0a
    4f28:	3b 85       	ldd	r19, Y+11	; 0x0b
    4f2a:	21 30       	cpi	r18, 0x01	; 1
    4f2c:	31 05       	cpc	r19, r1
    4f2e:	b1 f0       	breq	.+44     	; 0x4f5c <MDIO_vSetPinVal+0xbe>
    4f30:	d0 c0       	rjmp	.+416    	; 0x50d2 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    4f32:	ab e3       	ldi	r26, 0x3B	; 59
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	eb e3       	ldi	r30, 0x3B	; 59
    4f38:	f0 e0       	ldi	r31, 0x00	; 0
    4f3a:	80 81       	ld	r24, Z
    4f3c:	48 2f       	mov	r20, r24
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	28 2f       	mov	r18, r24
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	02 2e       	mov	r0, r18
    4f4a:	02 c0       	rjmp	.+4      	; 0x4f50 <MDIO_vSetPinVal+0xb2>
    4f4c:	88 0f       	add	r24, r24
    4f4e:	99 1f       	adc	r25, r25
    4f50:	0a 94       	dec	r0
    4f52:	e2 f7       	brpl	.-8      	; 0x4f4c <MDIO_vSetPinVal+0xae>
    4f54:	80 95       	com	r24
    4f56:	84 23       	and	r24, r20
    4f58:	8c 93       	st	X, r24
    4f5a:	bb c0       	rjmp	.+374    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    4f5c:	ab e3       	ldi	r26, 0x3B	; 59
    4f5e:	b0 e0       	ldi	r27, 0x00	; 0
    4f60:	eb e3       	ldi	r30, 0x3B	; 59
    4f62:	f0 e0       	ldi	r31, 0x00	; 0
    4f64:	80 81       	ld	r24, Z
    4f66:	48 2f       	mov	r20, r24
    4f68:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6a:	28 2f       	mov	r18, r24
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	02 2e       	mov	r0, r18
    4f74:	02 c0       	rjmp	.+4      	; 0x4f7a <MDIO_vSetPinVal+0xdc>
    4f76:	88 0f       	add	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	0a 94       	dec	r0
    4f7c:	e2 f7       	brpl	.-8      	; 0x4f76 <MDIO_vSetPinVal+0xd8>
    4f7e:	84 2b       	or	r24, r20
    4f80:	8c 93       	st	X, r24
    4f82:	a7 c0       	rjmp	.+334    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    4f84:	8b 81       	ldd	r24, Y+3	; 0x03
    4f86:	28 2f       	mov	r18, r24
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	39 87       	std	Y+9, r19	; 0x09
    4f8c:	28 87       	std	Y+8, r18	; 0x08
    4f8e:	88 85       	ldd	r24, Y+8	; 0x08
    4f90:	99 85       	ldd	r25, Y+9	; 0x09
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	31 f0       	breq	.+12     	; 0x4fa2 <MDIO_vSetPinVal+0x104>
    4f96:	28 85       	ldd	r18, Y+8	; 0x08
    4f98:	39 85       	ldd	r19, Y+9	; 0x09
    4f9a:	21 30       	cpi	r18, 0x01	; 1
    4f9c:	31 05       	cpc	r19, r1
    4f9e:	b1 f0       	breq	.+44     	; 0x4fcc <MDIO_vSetPinVal+0x12e>
    4fa0:	98 c0       	rjmp	.+304    	; 0x50d2 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    4fa2:	a8 e3       	ldi	r26, 0x38	; 56
    4fa4:	b0 e0       	ldi	r27, 0x00	; 0
    4fa6:	e8 e3       	ldi	r30, 0x38	; 56
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	80 81       	ld	r24, Z
    4fac:	48 2f       	mov	r20, r24
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	02 2e       	mov	r0, r18
    4fba:	02 c0       	rjmp	.+4      	; 0x4fc0 <MDIO_vSetPinVal+0x122>
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	0a 94       	dec	r0
    4fc2:	e2 f7       	brpl	.-8      	; 0x4fbc <MDIO_vSetPinVal+0x11e>
    4fc4:	80 95       	com	r24
    4fc6:	84 23       	and	r24, r20
    4fc8:	8c 93       	st	X, r24
    4fca:	83 c0       	rjmp	.+262    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    4fcc:	a8 e3       	ldi	r26, 0x38	; 56
    4fce:	b0 e0       	ldi	r27, 0x00	; 0
    4fd0:	e8 e3       	ldi	r30, 0x38	; 56
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	80 81       	ld	r24, Z
    4fd6:	48 2f       	mov	r20, r24
    4fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fda:	28 2f       	mov	r18, r24
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	02 2e       	mov	r0, r18
    4fe4:	02 c0       	rjmp	.+4      	; 0x4fea <MDIO_vSetPinVal+0x14c>
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	0a 94       	dec	r0
    4fec:	e2 f7       	brpl	.-8      	; 0x4fe6 <MDIO_vSetPinVal+0x148>
    4fee:	84 2b       	or	r24, r20
    4ff0:	8c 93       	st	X, r24
    4ff2:	6f c0       	rjmp	.+222    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    4ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff6:	28 2f       	mov	r18, r24
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	3f 83       	std	Y+7, r19	; 0x07
    4ffc:	2e 83       	std	Y+6, r18	; 0x06
    4ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    5000:	9f 81       	ldd	r25, Y+7	; 0x07
    5002:	00 97       	sbiw	r24, 0x00	; 0
    5004:	31 f0       	breq	.+12     	; 0x5012 <MDIO_vSetPinVal+0x174>
    5006:	2e 81       	ldd	r18, Y+6	; 0x06
    5008:	3f 81       	ldd	r19, Y+7	; 0x07
    500a:	21 30       	cpi	r18, 0x01	; 1
    500c:	31 05       	cpc	r19, r1
    500e:	b1 f0       	breq	.+44     	; 0x503c <MDIO_vSetPinVal+0x19e>
    5010:	60 c0       	rjmp	.+192    	; 0x50d2 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    5012:	a5 e3       	ldi	r26, 0x35	; 53
    5014:	b0 e0       	ldi	r27, 0x00	; 0
    5016:	e5 e3       	ldi	r30, 0x35	; 53
    5018:	f0 e0       	ldi	r31, 0x00	; 0
    501a:	80 81       	ld	r24, Z
    501c:	48 2f       	mov	r20, r24
    501e:	8a 81       	ldd	r24, Y+2	; 0x02
    5020:	28 2f       	mov	r18, r24
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	02 2e       	mov	r0, r18
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <MDIO_vSetPinVal+0x192>
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	0a 94       	dec	r0
    5032:	e2 f7       	brpl	.-8      	; 0x502c <MDIO_vSetPinVal+0x18e>
    5034:	80 95       	com	r24
    5036:	84 23       	and	r24, r20
    5038:	8c 93       	st	X, r24
    503a:	4b c0       	rjmp	.+150    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    503c:	a5 e3       	ldi	r26, 0x35	; 53
    503e:	b0 e0       	ldi	r27, 0x00	; 0
    5040:	e5 e3       	ldi	r30, 0x35	; 53
    5042:	f0 e0       	ldi	r31, 0x00	; 0
    5044:	80 81       	ld	r24, Z
    5046:	48 2f       	mov	r20, r24
    5048:	8a 81       	ldd	r24, Y+2	; 0x02
    504a:	28 2f       	mov	r18, r24
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	02 2e       	mov	r0, r18
    5054:	02 c0       	rjmp	.+4      	; 0x505a <MDIO_vSetPinVal+0x1bc>
    5056:	88 0f       	add	r24, r24
    5058:	99 1f       	adc	r25, r25
    505a:	0a 94       	dec	r0
    505c:	e2 f7       	brpl	.-8      	; 0x5056 <MDIO_vSetPinVal+0x1b8>
    505e:	84 2b       	or	r24, r20
    5060:	8c 93       	st	X, r24
    5062:	37 c0       	rjmp	.+110    	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    5064:	8b 81       	ldd	r24, Y+3	; 0x03
    5066:	28 2f       	mov	r18, r24
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	3d 83       	std	Y+5, r19	; 0x05
    506c:	2c 83       	std	Y+4, r18	; 0x04
    506e:	8c 81       	ldd	r24, Y+4	; 0x04
    5070:	9d 81       	ldd	r25, Y+5	; 0x05
    5072:	00 97       	sbiw	r24, 0x00	; 0
    5074:	31 f0       	breq	.+12     	; 0x5082 <MDIO_vSetPinVal+0x1e4>
    5076:	2c 81       	ldd	r18, Y+4	; 0x04
    5078:	3d 81       	ldd	r19, Y+5	; 0x05
    507a:	21 30       	cpi	r18, 0x01	; 1
    507c:	31 05       	cpc	r19, r1
    507e:	b1 f0       	breq	.+44     	; 0x50ac <MDIO_vSetPinVal+0x20e>
    5080:	28 c0       	rjmp	.+80     	; 0x50d2 <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    5082:	a2 e3       	ldi	r26, 0x32	; 50
    5084:	b0 e0       	ldi	r27, 0x00	; 0
    5086:	e2 e3       	ldi	r30, 0x32	; 50
    5088:	f0 e0       	ldi	r31, 0x00	; 0
    508a:	80 81       	ld	r24, Z
    508c:	48 2f       	mov	r20, r24
    508e:	8a 81       	ldd	r24, Y+2	; 0x02
    5090:	28 2f       	mov	r18, r24
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	02 2e       	mov	r0, r18
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <MDIO_vSetPinVal+0x202>
    509c:	88 0f       	add	r24, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	0a 94       	dec	r0
    50a2:	e2 f7       	brpl	.-8      	; 0x509c <MDIO_vSetPinVal+0x1fe>
    50a4:	80 95       	com	r24
    50a6:	84 23       	and	r24, r20
    50a8:	8c 93       	st	X, r24
    50aa:	13 c0       	rjmp	.+38     	; 0x50d2 <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    50ac:	a2 e3       	ldi	r26, 0x32	; 50
    50ae:	b0 e0       	ldi	r27, 0x00	; 0
    50b0:	e2 e3       	ldi	r30, 0x32	; 50
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	80 81       	ld	r24, Z
    50b6:	48 2f       	mov	r20, r24
    50b8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ba:	28 2f       	mov	r18, r24
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	81 e0       	ldi	r24, 0x01	; 1
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	02 2e       	mov	r0, r18
    50c4:	02 c0       	rjmp	.+4      	; 0x50ca <MDIO_vSetPinVal+0x22c>
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	0a 94       	dec	r0
    50cc:	e2 f7       	brpl	.-8      	; 0x50c6 <MDIO_vSetPinVal+0x228>
    50ce:	84 2b       	or	r24, r20
    50d0:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    50d2:	2d 96       	adiw	r28, 0x0d	; 13
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    50e4:	df 93       	push	r29
    50e6:	cf 93       	push	r28
    50e8:	00 d0       	rcall	.+0      	; 0x50ea <MDIO_GetPinVal+0x6>
    50ea:	00 d0       	rcall	.+0      	; 0x50ec <MDIO_GetPinVal+0x8>
    50ec:	0f 92       	push	r0
    50ee:	cd b7       	in	r28, 0x3d	; 61
    50f0:	de b7       	in	r29, 0x3e	; 62
    50f2:	8a 83       	std	Y+2, r24	; 0x02
    50f4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    50f6:	8a 81       	ldd	r24, Y+2	; 0x02
    50f8:	84 30       	cpi	r24, 0x04	; 4
    50fa:	08 f0       	brcs	.+2      	; 0x50fe <MDIO_GetPinVal+0x1a>
    50fc:	6b c0       	rjmp	.+214    	; 0x51d4 <MDIO_GetPinVal+0xf0>
    50fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5100:	88 30       	cpi	r24, 0x08	; 8
    5102:	08 f0       	brcs	.+2      	; 0x5106 <MDIO_GetPinVal+0x22>
    5104:	67 c0       	rjmp	.+206    	; 0x51d4 <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    5106:	8a 81       	ldd	r24, Y+2	; 0x02
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	3d 83       	std	Y+5, r19	; 0x05
    510e:	2c 83       	std	Y+4, r18	; 0x04
    5110:	4c 81       	ldd	r20, Y+4	; 0x04
    5112:	5d 81       	ldd	r21, Y+5	; 0x05
    5114:	41 30       	cpi	r20, 0x01	; 1
    5116:	51 05       	cpc	r21, r1
    5118:	41 f1       	breq	.+80     	; 0x516a <MDIO_GetPinVal+0x86>
    511a:	8c 81       	ldd	r24, Y+4	; 0x04
    511c:	9d 81       	ldd	r25, Y+5	; 0x05
    511e:	82 30       	cpi	r24, 0x02	; 2
    5120:	91 05       	cpc	r25, r1
    5122:	34 f4       	brge	.+12     	; 0x5130 <MDIO_GetPinVal+0x4c>
    5124:	2c 81       	ldd	r18, Y+4	; 0x04
    5126:	3d 81       	ldd	r19, Y+5	; 0x05
    5128:	21 15       	cp	r18, r1
    512a:	31 05       	cpc	r19, r1
    512c:	61 f0       	breq	.+24     	; 0x5146 <MDIO_GetPinVal+0x62>
    512e:	52 c0       	rjmp	.+164    	; 0x51d4 <MDIO_GetPinVal+0xf0>
    5130:	4c 81       	ldd	r20, Y+4	; 0x04
    5132:	5d 81       	ldd	r21, Y+5	; 0x05
    5134:	42 30       	cpi	r20, 0x02	; 2
    5136:	51 05       	cpc	r21, r1
    5138:	51 f1       	breq	.+84     	; 0x518e <MDIO_GetPinVal+0xaa>
    513a:	8c 81       	ldd	r24, Y+4	; 0x04
    513c:	9d 81       	ldd	r25, Y+5	; 0x05
    513e:	83 30       	cpi	r24, 0x03	; 3
    5140:	91 05       	cpc	r25, r1
    5142:	b9 f1       	breq	.+110    	; 0x51b2 <MDIO_GetPinVal+0xce>
    5144:	47 c0       	rjmp	.+142    	; 0x51d4 <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    5146:	e9 e3       	ldi	r30, 0x39	; 57
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	80 81       	ld	r24, Z
    514c:	28 2f       	mov	r18, r24
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	8b 81       	ldd	r24, Y+3	; 0x03
    5152:	88 2f       	mov	r24, r24
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	a9 01       	movw	r20, r18
    5158:	02 c0       	rjmp	.+4      	; 0x515e <MDIO_GetPinVal+0x7a>
    515a:	55 95       	asr	r21
    515c:	47 95       	ror	r20
    515e:	8a 95       	dec	r24
    5160:	e2 f7       	brpl	.-8      	; 0x515a <MDIO_GetPinVal+0x76>
    5162:	ca 01       	movw	r24, r20
    5164:	81 70       	andi	r24, 0x01	; 1
    5166:	89 83       	std	Y+1, r24	; 0x01
    5168:	35 c0       	rjmp	.+106    	; 0x51d4 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    516a:	e6 e3       	ldi	r30, 0x36	; 54
    516c:	f0 e0       	ldi	r31, 0x00	; 0
    516e:	80 81       	ld	r24, Z
    5170:	28 2f       	mov	r18, r24
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	8b 81       	ldd	r24, Y+3	; 0x03
    5176:	88 2f       	mov	r24, r24
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	a9 01       	movw	r20, r18
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <MDIO_GetPinVal+0x9e>
    517e:	55 95       	asr	r21
    5180:	47 95       	ror	r20
    5182:	8a 95       	dec	r24
    5184:	e2 f7       	brpl	.-8      	; 0x517e <MDIO_GetPinVal+0x9a>
    5186:	ca 01       	movw	r24, r20
    5188:	81 70       	andi	r24, 0x01	; 1
    518a:	89 83       	std	Y+1, r24	; 0x01
    518c:	23 c0       	rjmp	.+70     	; 0x51d4 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    518e:	e3 e3       	ldi	r30, 0x33	; 51
    5190:	f0 e0       	ldi	r31, 0x00	; 0
    5192:	80 81       	ld	r24, Z
    5194:	28 2f       	mov	r18, r24
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	8b 81       	ldd	r24, Y+3	; 0x03
    519a:	88 2f       	mov	r24, r24
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	a9 01       	movw	r20, r18
    51a0:	02 c0       	rjmp	.+4      	; 0x51a6 <MDIO_GetPinVal+0xc2>
    51a2:	55 95       	asr	r21
    51a4:	47 95       	ror	r20
    51a6:	8a 95       	dec	r24
    51a8:	e2 f7       	brpl	.-8      	; 0x51a2 <MDIO_GetPinVal+0xbe>
    51aa:	ca 01       	movw	r24, r20
    51ac:	81 70       	andi	r24, 0x01	; 1
    51ae:	89 83       	std	Y+1, r24	; 0x01
    51b0:	11 c0       	rjmp	.+34     	; 0x51d4 <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    51b2:	e0 e3       	ldi	r30, 0x30	; 48
    51b4:	f0 e0       	ldi	r31, 0x00	; 0
    51b6:	80 81       	ld	r24, Z
    51b8:	28 2f       	mov	r18, r24
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	8b 81       	ldd	r24, Y+3	; 0x03
    51be:	88 2f       	mov	r24, r24
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	a9 01       	movw	r20, r18
    51c4:	02 c0       	rjmp	.+4      	; 0x51ca <MDIO_GetPinVal+0xe6>
    51c6:	55 95       	asr	r21
    51c8:	47 95       	ror	r20
    51ca:	8a 95       	dec	r24
    51cc:	e2 f7       	brpl	.-8      	; 0x51c6 <MDIO_GetPinVal+0xe2>
    51ce:	ca 01       	movw	r24, r20
    51d0:	81 70       	andi	r24, 0x01	; 1
    51d2:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	0f 90       	pop	r0
    51e0:	cf 91       	pop	r28
    51e2:	df 91       	pop	r29
    51e4:	08 95       	ret

000051e6 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    51e6:	df 93       	push	r29
    51e8:	cf 93       	push	r28
    51ea:	00 d0       	rcall	.+0      	; 0x51ec <MDIO_vTogglePinVal+0x6>
    51ec:	00 d0       	rcall	.+0      	; 0x51ee <MDIO_vTogglePinVal+0x8>
    51ee:	cd b7       	in	r28, 0x3d	; 61
    51f0:	de b7       	in	r29, 0x3e	; 62
    51f2:	89 83       	std	Y+1, r24	; 0x01
    51f4:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    51f6:	89 81       	ldd	r24, Y+1	; 0x01
    51f8:	84 30       	cpi	r24, 0x04	; 4
    51fa:	08 f0       	brcs	.+2      	; 0x51fe <MDIO_vTogglePinVal+0x18>
    51fc:	72 c0       	rjmp	.+228    	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
    51fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5200:	88 30       	cpi	r24, 0x08	; 8
    5202:	08 f0       	brcs	.+2      	; 0x5206 <MDIO_vTogglePinVal+0x20>
    5204:	6e c0       	rjmp	.+220    	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	28 2f       	mov	r18, r24
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	3c 83       	std	Y+4, r19	; 0x04
    520e:	2b 83       	std	Y+3, r18	; 0x03
    5210:	8b 81       	ldd	r24, Y+3	; 0x03
    5212:	9c 81       	ldd	r25, Y+4	; 0x04
    5214:	81 30       	cpi	r24, 0x01	; 1
    5216:	91 05       	cpc	r25, r1
    5218:	49 f1       	breq	.+82     	; 0x526c <MDIO_vTogglePinVal+0x86>
    521a:	2b 81       	ldd	r18, Y+3	; 0x03
    521c:	3c 81       	ldd	r19, Y+4	; 0x04
    521e:	22 30       	cpi	r18, 0x02	; 2
    5220:	31 05       	cpc	r19, r1
    5222:	2c f4       	brge	.+10     	; 0x522e <MDIO_vTogglePinVal+0x48>
    5224:	8b 81       	ldd	r24, Y+3	; 0x03
    5226:	9c 81       	ldd	r25, Y+4	; 0x04
    5228:	00 97       	sbiw	r24, 0x00	; 0
    522a:	61 f0       	breq	.+24     	; 0x5244 <MDIO_vTogglePinVal+0x5e>
    522c:	5a c0       	rjmp	.+180    	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
    522e:	2b 81       	ldd	r18, Y+3	; 0x03
    5230:	3c 81       	ldd	r19, Y+4	; 0x04
    5232:	22 30       	cpi	r18, 0x02	; 2
    5234:	31 05       	cpc	r19, r1
    5236:	71 f1       	breq	.+92     	; 0x5294 <MDIO_vTogglePinVal+0xae>
    5238:	8b 81       	ldd	r24, Y+3	; 0x03
    523a:	9c 81       	ldd	r25, Y+4	; 0x04
    523c:	83 30       	cpi	r24, 0x03	; 3
    523e:	91 05       	cpc	r25, r1
    5240:	e9 f1       	breq	.+122    	; 0x52bc <MDIO_vTogglePinVal+0xd6>
    5242:	4f c0       	rjmp	.+158    	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    5244:	ab e3       	ldi	r26, 0x3B	; 59
    5246:	b0 e0       	ldi	r27, 0x00	; 0
    5248:	eb e3       	ldi	r30, 0x3B	; 59
    524a:	f0 e0       	ldi	r31, 0x00	; 0
    524c:	80 81       	ld	r24, Z
    524e:	48 2f       	mov	r20, r24
    5250:	8a 81       	ldd	r24, Y+2	; 0x02
    5252:	28 2f       	mov	r18, r24
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	02 2e       	mov	r0, r18
    525c:	02 c0       	rjmp	.+4      	; 0x5262 <MDIO_vTogglePinVal+0x7c>
    525e:	88 0f       	add	r24, r24
    5260:	99 1f       	adc	r25, r25
    5262:	0a 94       	dec	r0
    5264:	e2 f7       	brpl	.-8      	; 0x525e <MDIO_vTogglePinVal+0x78>
    5266:	84 27       	eor	r24, r20
    5268:	8c 93       	st	X, r24
    526a:	3b c0       	rjmp	.+118    	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    526c:	a8 e3       	ldi	r26, 0x38	; 56
    526e:	b0 e0       	ldi	r27, 0x00	; 0
    5270:	e8 e3       	ldi	r30, 0x38	; 56
    5272:	f0 e0       	ldi	r31, 0x00	; 0
    5274:	80 81       	ld	r24, Z
    5276:	48 2f       	mov	r20, r24
    5278:	8a 81       	ldd	r24, Y+2	; 0x02
    527a:	28 2f       	mov	r18, r24
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	02 2e       	mov	r0, r18
    5284:	02 c0       	rjmp	.+4      	; 0x528a <MDIO_vTogglePinVal+0xa4>
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	0a 94       	dec	r0
    528c:	e2 f7       	brpl	.-8      	; 0x5286 <MDIO_vTogglePinVal+0xa0>
    528e:	84 27       	eor	r24, r20
    5290:	8c 93       	st	X, r24
    5292:	27 c0       	rjmp	.+78     	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    5294:	a5 e3       	ldi	r26, 0x35	; 53
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	e5 e3       	ldi	r30, 0x35	; 53
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	80 81       	ld	r24, Z
    529e:	48 2f       	mov	r20, r24
    52a0:	8a 81       	ldd	r24, Y+2	; 0x02
    52a2:	28 2f       	mov	r18, r24
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	02 2e       	mov	r0, r18
    52ac:	02 c0       	rjmp	.+4      	; 0x52b2 <MDIO_vTogglePinVal+0xcc>
    52ae:	88 0f       	add	r24, r24
    52b0:	99 1f       	adc	r25, r25
    52b2:	0a 94       	dec	r0
    52b4:	e2 f7       	brpl	.-8      	; 0x52ae <MDIO_vTogglePinVal+0xc8>
    52b6:	84 27       	eor	r24, r20
    52b8:	8c 93       	st	X, r24
    52ba:	13 c0       	rjmp	.+38     	; 0x52e2 <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    52bc:	a2 e3       	ldi	r26, 0x32	; 50
    52be:	b0 e0       	ldi	r27, 0x00	; 0
    52c0:	e2 e3       	ldi	r30, 0x32	; 50
    52c2:	f0 e0       	ldi	r31, 0x00	; 0
    52c4:	80 81       	ld	r24, Z
    52c6:	48 2f       	mov	r20, r24
    52c8:	8a 81       	ldd	r24, Y+2	; 0x02
    52ca:	28 2f       	mov	r18, r24
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	02 2e       	mov	r0, r18
    52d4:	02 c0       	rjmp	.+4      	; 0x52da <MDIO_vTogglePinVal+0xf4>
    52d6:	88 0f       	add	r24, r24
    52d8:	99 1f       	adc	r25, r25
    52da:	0a 94       	dec	r0
    52dc:	e2 f7       	brpl	.-8      	; 0x52d6 <MDIO_vTogglePinVal+0xf0>
    52de:	84 27       	eor	r24, r20
    52e0:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    52e2:	0f 90       	pop	r0
    52e4:	0f 90       	pop	r0
    52e6:	0f 90       	pop	r0
    52e8:	0f 90       	pop	r0
    52ea:	cf 91       	pop	r28
    52ec:	df 91       	pop	r29
    52ee:	08 95       	ret

000052f0 <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    52f0:	df 93       	push	r29
    52f2:	cf 93       	push	r28
    52f4:	00 d0       	rcall	.+0      	; 0x52f6 <MDIO_vSetPortDir+0x6>
    52f6:	00 d0       	rcall	.+0      	; 0x52f8 <MDIO_vSetPortDir+0x8>
    52f8:	cd b7       	in	r28, 0x3d	; 61
    52fa:	de b7       	in	r29, 0x3e	; 62
    52fc:	89 83       	std	Y+1, r24	; 0x01
    52fe:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    5300:	89 81       	ldd	r24, Y+1	; 0x01
    5302:	84 30       	cpi	r24, 0x04	; 4
    5304:	90 f5       	brcc	.+100    	; 0x536a <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    5306:	89 81       	ldd	r24, Y+1	; 0x01
    5308:	28 2f       	mov	r18, r24
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	3c 83       	std	Y+4, r19	; 0x04
    530e:	2b 83       	std	Y+3, r18	; 0x03
    5310:	8b 81       	ldd	r24, Y+3	; 0x03
    5312:	9c 81       	ldd	r25, Y+4	; 0x04
    5314:	81 30       	cpi	r24, 0x01	; 1
    5316:	91 05       	cpc	r25, r1
    5318:	d1 f0       	breq	.+52     	; 0x534e <MDIO_vSetPortDir+0x5e>
    531a:	2b 81       	ldd	r18, Y+3	; 0x03
    531c:	3c 81       	ldd	r19, Y+4	; 0x04
    531e:	22 30       	cpi	r18, 0x02	; 2
    5320:	31 05       	cpc	r19, r1
    5322:	2c f4       	brge	.+10     	; 0x532e <MDIO_vSetPortDir+0x3e>
    5324:	8b 81       	ldd	r24, Y+3	; 0x03
    5326:	9c 81       	ldd	r25, Y+4	; 0x04
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	61 f0       	breq	.+24     	; 0x5344 <MDIO_vSetPortDir+0x54>
    532c:	1e c0       	rjmp	.+60     	; 0x536a <MDIO_vSetPortDir+0x7a>
    532e:	2b 81       	ldd	r18, Y+3	; 0x03
    5330:	3c 81       	ldd	r19, Y+4	; 0x04
    5332:	22 30       	cpi	r18, 0x02	; 2
    5334:	31 05       	cpc	r19, r1
    5336:	81 f0       	breq	.+32     	; 0x5358 <MDIO_vSetPortDir+0x68>
    5338:	8b 81       	ldd	r24, Y+3	; 0x03
    533a:	9c 81       	ldd	r25, Y+4	; 0x04
    533c:	83 30       	cpi	r24, 0x03	; 3
    533e:	91 05       	cpc	r25, r1
    5340:	81 f0       	breq	.+32     	; 0x5362 <MDIO_vSetPortDir+0x72>
    5342:	13 c0       	rjmp	.+38     	; 0x536a <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    5344:	ea e3       	ldi	r30, 0x3A	; 58
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	8a 81       	ldd	r24, Y+2	; 0x02
    534a:	80 83       	st	Z, r24
    534c:	0e c0       	rjmp	.+28     	; 0x536a <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    534e:	e7 e3       	ldi	r30, 0x37	; 55
    5350:	f0 e0       	ldi	r31, 0x00	; 0
    5352:	8a 81       	ldd	r24, Y+2	; 0x02
    5354:	80 83       	st	Z, r24
    5356:	09 c0       	rjmp	.+18     	; 0x536a <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    5358:	e4 e3       	ldi	r30, 0x34	; 52
    535a:	f0 e0       	ldi	r31, 0x00	; 0
    535c:	8a 81       	ldd	r24, Y+2	; 0x02
    535e:	80 83       	st	Z, r24
    5360:	04 c0       	rjmp	.+8      	; 0x536a <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    5362:	e1 e3       	ldi	r30, 0x31	; 49
    5364:	f0 e0       	ldi	r31, 0x00	; 0
    5366:	8a 81       	ldd	r24, Y+2	; 0x02
    5368:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	0f 90       	pop	r0
    5370:	0f 90       	pop	r0
    5372:	cf 91       	pop	r28
    5374:	df 91       	pop	r29
    5376:	08 95       	ret

00005378 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    5378:	df 93       	push	r29
    537a:	cf 93       	push	r28
    537c:	00 d0       	rcall	.+0      	; 0x537e <MDIO_vSetPortVal+0x6>
    537e:	00 d0       	rcall	.+0      	; 0x5380 <MDIO_vSetPortVal+0x8>
    5380:	cd b7       	in	r28, 0x3d	; 61
    5382:	de b7       	in	r29, 0x3e	; 62
    5384:	89 83       	std	Y+1, r24	; 0x01
    5386:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	84 30       	cpi	r24, 0x04	; 4
    538c:	90 f5       	brcc	.+100    	; 0x53f2 <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	28 2f       	mov	r18, r24
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	3c 83       	std	Y+4, r19	; 0x04
    5396:	2b 83       	std	Y+3, r18	; 0x03
    5398:	8b 81       	ldd	r24, Y+3	; 0x03
    539a:	9c 81       	ldd	r25, Y+4	; 0x04
    539c:	81 30       	cpi	r24, 0x01	; 1
    539e:	91 05       	cpc	r25, r1
    53a0:	d1 f0       	breq	.+52     	; 0x53d6 <MDIO_vSetPortVal+0x5e>
    53a2:	2b 81       	ldd	r18, Y+3	; 0x03
    53a4:	3c 81       	ldd	r19, Y+4	; 0x04
    53a6:	22 30       	cpi	r18, 0x02	; 2
    53a8:	31 05       	cpc	r19, r1
    53aa:	2c f4       	brge	.+10     	; 0x53b6 <MDIO_vSetPortVal+0x3e>
    53ac:	8b 81       	ldd	r24, Y+3	; 0x03
    53ae:	9c 81       	ldd	r25, Y+4	; 0x04
    53b0:	00 97       	sbiw	r24, 0x00	; 0
    53b2:	61 f0       	breq	.+24     	; 0x53cc <MDIO_vSetPortVal+0x54>
    53b4:	1e c0       	rjmp	.+60     	; 0x53f2 <MDIO_vSetPortVal+0x7a>
    53b6:	2b 81       	ldd	r18, Y+3	; 0x03
    53b8:	3c 81       	ldd	r19, Y+4	; 0x04
    53ba:	22 30       	cpi	r18, 0x02	; 2
    53bc:	31 05       	cpc	r19, r1
    53be:	81 f0       	breq	.+32     	; 0x53e0 <MDIO_vSetPortVal+0x68>
    53c0:	8b 81       	ldd	r24, Y+3	; 0x03
    53c2:	9c 81       	ldd	r25, Y+4	; 0x04
    53c4:	83 30       	cpi	r24, 0x03	; 3
    53c6:	91 05       	cpc	r25, r1
    53c8:	81 f0       	breq	.+32     	; 0x53ea <MDIO_vSetPortVal+0x72>
    53ca:	13 c0       	rjmp	.+38     	; 0x53f2 <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    53cc:	eb e3       	ldi	r30, 0x3B	; 59
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	8a 81       	ldd	r24, Y+2	; 0x02
    53d2:	80 83       	st	Z, r24
    53d4:	0e c0       	rjmp	.+28     	; 0x53f2 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    53d6:	e8 e3       	ldi	r30, 0x38	; 56
    53d8:	f0 e0       	ldi	r31, 0x00	; 0
    53da:	8a 81       	ldd	r24, Y+2	; 0x02
    53dc:	80 83       	st	Z, r24
    53de:	09 c0       	rjmp	.+18     	; 0x53f2 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    53e0:	e5 e3       	ldi	r30, 0x35	; 53
    53e2:	f0 e0       	ldi	r31, 0x00	; 0
    53e4:	8a 81       	ldd	r24, Y+2	; 0x02
    53e6:	80 83       	st	Z, r24
    53e8:	04 c0       	rjmp	.+8      	; 0x53f2 <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    53ea:	e2 e3       	ldi	r30, 0x32	; 50
    53ec:	f0 e0       	ldi	r31, 0x00	; 0
    53ee:	8a 81       	ldd	r24, Y+2	; 0x02
    53f0:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    53f2:	0f 90       	pop	r0
    53f4:	0f 90       	pop	r0
    53f6:	0f 90       	pop	r0
    53f8:	0f 90       	pop	r0
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <MDIO_vInit>:


void MDIO_vInit()
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    5408:	ea e3       	ldi	r30, 0x3A	; 58
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    540e:	e7 e3       	ldi	r30, 0x37	; 55
    5410:	f0 e0       	ldi	r31, 0x00	; 0
    5412:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    5414:	e4 e3       	ldi	r30, 0x34	; 52
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	87 e0       	ldi	r24, 0x07	; 7
    541a:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    541c:	e1 e3       	ldi	r30, 0x31	; 49
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	8f ef       	ldi	r24, 0xFF	; 255
    5422:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    5424:	eb e3       	ldi	r30, 0x3B	; 59
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    542a:	e8 e3       	ldi	r30, 0x38	; 56
    542c:	f0 e0       	ldi	r31, 0x00	; 0
    542e:	84 e0       	ldi	r24, 0x04	; 4
    5430:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    5432:	e5 e3       	ldi	r30, 0x35	; 53
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    5438:	e2 e3       	ldi	r30, 0x32	; 50
    543a:	f0 e0       	ldi	r31, 0x00	; 0
    543c:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    543e:	cf 91       	pop	r28
    5440:	df 91       	pop	r29
    5442:	08 95       	ret

00005444 <LCD_InitPortDir>:

#include <util/delay.h>


void LCD_InitPortDir()
{
    5444:	df 93       	push	r29
    5446:	cf 93       	push	r28
    5448:	cd b7       	in	r28, 0x3d	; 61
    544a:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RS_PIN , DIO_OUTPUT);
    544c:	82 e0       	ldi	r24, 0x02	; 2
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	41 e0       	ldi	r20, 0x01	; 1
    5452:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_RW_PIN , DIO_OUTPUT);
    5456:	82 e0       	ldi	r24, 0x02	; 2
    5458:	61 e0       	ldi	r22, 0x01	; 1
    545a:	41 e0       	ldi	r20, 0x01	; 1
    545c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT , LCD_E_PIN , DIO_OUTPUT);
    5460:	82 e0       	ldi	r24, 0x02	; 2
    5462:	62 e0       	ldi	r22, 0x02	; 2
    5464:	41 e0       	ldi	r20, 0x01	; 1
    5466:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <MDIO_vSetPinDir>


	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	6f ef       	ldi	r22, 0xFF	; 255
    546e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <MDIO_vSetPortDir>
}
    5472:	cf 91       	pop	r28
    5474:	df 91       	pop	r29
    5476:	08 95       	ret

00005478 <LCD_SendCommand>:

void LCD_SendCommand(u8 Command)
{
    5478:	df 93       	push	r29
    547a:	cf 93       	push	r28
    547c:	cd b7       	in	r28, 0x3d	; 61
    547e:	de b7       	in	r29, 0x3e	; 62
    5480:	2f 97       	sbiw	r28, 0x0f	; 15
    5482:	0f b6       	in	r0, 0x3f	; 63
    5484:	f8 94       	cli
    5486:	de bf       	out	0x3e, r29	; 62
    5488:	0f be       	out	0x3f, r0	; 63
    548a:	cd bf       	out	0x3d, r28	; 61
    548c:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    548e:	82 e0       	ldi	r24, 0x02	; 2
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>
	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    5498:	82 e0       	ldi	r24, 0x02	; 2
    549a:	61 e0       	ldi	r22, 0x01	; 1
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Command);
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    54a6:	0e 94 bc 29 	call	0x5378	; 0x5378 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    54aa:	82 e0       	ldi	r24, 0x02	; 2
    54ac:	62 e0       	ldi	r22, 0x02	; 2
    54ae:	41 e0       	ldi	r20, 0x01	; 1
    54b0:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	a0 e8       	ldi	r26, 0x80	; 128
    54ba:	bf e3       	ldi	r27, 0x3F	; 63
    54bc:	8b 87       	std	Y+11, r24	; 0x0b
    54be:	9c 87       	std	Y+12, r25	; 0x0c
    54c0:	ad 87       	std	Y+13, r26	; 0x0d
    54c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    54c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    54c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    54ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	4a ef       	ldi	r20, 0xFA	; 250
    54d2:	54 e4       	ldi	r21, 0x44	; 68
    54d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	8f 83       	std	Y+7, r24	; 0x07
    54de:	98 87       	std	Y+8, r25	; 0x08
    54e0:	a9 87       	std	Y+9, r26	; 0x09
    54e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54e4:	6f 81       	ldd	r22, Y+7	; 0x07
    54e6:	78 85       	ldd	r23, Y+8	; 0x08
    54e8:	89 85       	ldd	r24, Y+9	; 0x09
    54ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	40 e8       	ldi	r20, 0x80	; 128
    54f2:	5f e3       	ldi	r21, 0x3F	; 63
    54f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54f8:	88 23       	and	r24, r24
    54fa:	2c f4       	brge	.+10     	; 0x5506 <LCD_SendCommand+0x8e>
		__ticks = 1;
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9e 83       	std	Y+6, r25	; 0x06
    5502:	8d 83       	std	Y+5, r24	; 0x05
    5504:	3f c0       	rjmp	.+126    	; 0x5584 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    5506:	6f 81       	ldd	r22, Y+7	; 0x07
    5508:	78 85       	ldd	r23, Y+8	; 0x08
    550a:	89 85       	ldd	r24, Y+9	; 0x09
    550c:	9a 85       	ldd	r25, Y+10	; 0x0a
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	3f ef       	ldi	r19, 0xFF	; 255
    5512:	4f e7       	ldi	r20, 0x7F	; 127
    5514:	57 e4       	ldi	r21, 0x47	; 71
    5516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    551a:	18 16       	cp	r1, r24
    551c:	4c f5       	brge	.+82     	; 0x5570 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    551e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5520:	7c 85       	ldd	r23, Y+12	; 0x0c
    5522:	8d 85       	ldd	r24, Y+13	; 0x0d
    5524:	9e 85       	ldd	r25, Y+14	; 0x0e
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e2       	ldi	r20, 0x20	; 32
    552c:	51 e4       	ldi	r21, 0x41	; 65
    552e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	bc 01       	movw	r22, r24
    5538:	cd 01       	movw	r24, r26
    553a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	9e 83       	std	Y+6, r25	; 0x06
    5544:	8d 83       	std	Y+5, r24	; 0x05
    5546:	0f c0       	rjmp	.+30     	; 0x5566 <LCD_SendCommand+0xee>
    5548:	88 ec       	ldi	r24, 0xC8	; 200
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	9c 83       	std	Y+4, r25	; 0x04
    554e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5550:	8b 81       	ldd	r24, Y+3	; 0x03
    5552:	9c 81       	ldd	r25, Y+4	; 0x04
    5554:	01 97       	sbiw	r24, 0x01	; 1
    5556:	f1 f7       	brne	.-4      	; 0x5554 <LCD_SendCommand+0xdc>
    5558:	9c 83       	std	Y+4, r25	; 0x04
    555a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    555c:	8d 81       	ldd	r24, Y+5	; 0x05
    555e:	9e 81       	ldd	r25, Y+6	; 0x06
    5560:	01 97       	sbiw	r24, 0x01	; 1
    5562:	9e 83       	std	Y+6, r25	; 0x06
    5564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5566:	8d 81       	ldd	r24, Y+5	; 0x05
    5568:	9e 81       	ldd	r25, Y+6	; 0x06
    556a:	00 97       	sbiw	r24, 0x00	; 0
    556c:	69 f7       	brne	.-38     	; 0x5548 <LCD_SendCommand+0xd0>
    556e:	14 c0       	rjmp	.+40     	; 0x5598 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5570:	6f 81       	ldd	r22, Y+7	; 0x07
    5572:	78 85       	ldd	r23, Y+8	; 0x08
    5574:	89 85       	ldd	r24, Y+9	; 0x09
    5576:	9a 85       	ldd	r25, Y+10	; 0x0a
    5578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	9e 83       	std	Y+6, r25	; 0x06
    5582:	8d 83       	std	Y+5, r24	; 0x05
    5584:	8d 81       	ldd	r24, Y+5	; 0x05
    5586:	9e 81       	ldd	r25, Y+6	; 0x06
    5588:	9a 83       	std	Y+2, r25	; 0x02
    558a:	89 83       	std	Y+1, r24	; 0x01
    558c:	89 81       	ldd	r24, Y+1	; 0x01
    558e:	9a 81       	ldd	r25, Y+2	; 0x02
    5590:	01 97       	sbiw	r24, 0x01	; 1
    5592:	f1 f7       	brne	.-4      	; 0x5590 <LCD_SendCommand+0x118>
    5594:	9a 83       	std	Y+2, r25	; 0x02
    5596:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    5598:	82 e0       	ldi	r24, 0x02	; 2
    559a:	62 e0       	ldi	r22, 0x02	; 2
    559c:	40 e0       	ldi	r20, 0x00	; 0
    559e:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>

}
    55a2:	2f 96       	adiw	r28, 0x0f	; 15
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	cf 91       	pop	r28
    55b0:	df 91       	pop	r29
    55b2:	08 95       	ret

000055b4 <LCD_SendData>:
void LCD_SendData(u8 Data)
{
    55b4:	df 93       	push	r29
    55b6:	cf 93       	push	r28
    55b8:	cd b7       	in	r28, 0x3d	; 61
    55ba:	de b7       	in	r29, 0x3e	; 62
    55bc:	2f 97       	sbiw	r28, 0x0f	; 15
    55be:	0f b6       	in	r0, 0x3f	; 63
    55c0:	f8 94       	cli
    55c2:	de bf       	out	0x3e, r29	; 62
    55c4:	0f be       	out	0x3f, r0	; 63
    55c6:	cd bf       	out	0x3d, r28	; 61
    55c8:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RS -> 1
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    55ca:	82 e0       	ldi	r24, 0x02	; 2
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	41 e0       	ldi	r20, 0x01	; 1
    55d0:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>

	// Set RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    55d4:	82 e0       	ldi	r24, 0x02	; 2
    55d6:	61 e0       	ldi	r22, 0x01	; 1
    55d8:	40 e0       	ldi	r20, 0x00	; 0
    55da:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>

	MDIO_vSetPortVal(LCD_DATA_PORT,Data);
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    55e2:	0e 94 bc 29 	call	0x5378	; 0x5378 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_HIGH);
    55e6:	82 e0       	ldi	r24, 0x02	; 2
    55e8:	62 e0       	ldi	r22, 0x02	; 2
    55ea:	41 e0       	ldi	r20, 0x01	; 1
    55ec:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	a0 e8       	ldi	r26, 0x80	; 128
    55f6:	bf e3       	ldi	r27, 0x3F	; 63
    55f8:	8b 87       	std	Y+11, r24	; 0x0b
    55fa:	9c 87       	std	Y+12, r25	; 0x0c
    55fc:	ad 87       	std	Y+13, r26	; 0x0d
    55fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5600:	6b 85       	ldd	r22, Y+11	; 0x0b
    5602:	7c 85       	ldd	r23, Y+12	; 0x0c
    5604:	8d 85       	ldd	r24, Y+13	; 0x0d
    5606:	9e 85       	ldd	r25, Y+14	; 0x0e
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	4a ef       	ldi	r20, 0xFA	; 250
    560e:	54 e4       	ldi	r21, 0x44	; 68
    5610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5614:	dc 01       	movw	r26, r24
    5616:	cb 01       	movw	r24, r22
    5618:	8f 83       	std	Y+7, r24	; 0x07
    561a:	98 87       	std	Y+8, r25	; 0x08
    561c:	a9 87       	std	Y+9, r26	; 0x09
    561e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5620:	6f 81       	ldd	r22, Y+7	; 0x07
    5622:	78 85       	ldd	r23, Y+8	; 0x08
    5624:	89 85       	ldd	r24, Y+9	; 0x09
    5626:	9a 85       	ldd	r25, Y+10	; 0x0a
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	40 e8       	ldi	r20, 0x80	; 128
    562e:	5f e3       	ldi	r21, 0x3F	; 63
    5630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5634:	88 23       	and	r24, r24
    5636:	2c f4       	brge	.+10     	; 0x5642 <LCD_SendData+0x8e>
		__ticks = 1;
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	9e 83       	std	Y+6, r25	; 0x06
    563e:	8d 83       	std	Y+5, r24	; 0x05
    5640:	3f c0       	rjmp	.+126    	; 0x56c0 <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    5642:	6f 81       	ldd	r22, Y+7	; 0x07
    5644:	78 85       	ldd	r23, Y+8	; 0x08
    5646:	89 85       	ldd	r24, Y+9	; 0x09
    5648:	9a 85       	ldd	r25, Y+10	; 0x0a
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	3f ef       	ldi	r19, 0xFF	; 255
    564e:	4f e7       	ldi	r20, 0x7F	; 127
    5650:	57 e4       	ldi	r21, 0x47	; 71
    5652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5656:	18 16       	cp	r1, r24
    5658:	4c f5       	brge	.+82     	; 0x56ac <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    565a:	6b 85       	ldd	r22, Y+11	; 0x0b
    565c:	7c 85       	ldd	r23, Y+12	; 0x0c
    565e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5660:	9e 85       	ldd	r25, Y+14	; 0x0e
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	40 e2       	ldi	r20, 0x20	; 32
    5668:	51 e4       	ldi	r21, 0x41	; 65
    566a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    566e:	dc 01       	movw	r26, r24
    5670:	cb 01       	movw	r24, r22
    5672:	bc 01       	movw	r22, r24
    5674:	cd 01       	movw	r24, r26
    5676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567a:	dc 01       	movw	r26, r24
    567c:	cb 01       	movw	r24, r22
    567e:	9e 83       	std	Y+6, r25	; 0x06
    5680:	8d 83       	std	Y+5, r24	; 0x05
    5682:	0f c0       	rjmp	.+30     	; 0x56a2 <LCD_SendData+0xee>
    5684:	88 ec       	ldi	r24, 0xC8	; 200
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	9c 83       	std	Y+4, r25	; 0x04
    568a:	8b 83       	std	Y+3, r24	; 0x03
    568c:	8b 81       	ldd	r24, Y+3	; 0x03
    568e:	9c 81       	ldd	r25, Y+4	; 0x04
    5690:	01 97       	sbiw	r24, 0x01	; 1
    5692:	f1 f7       	brne	.-4      	; 0x5690 <LCD_SendData+0xdc>
    5694:	9c 83       	std	Y+4, r25	; 0x04
    5696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5698:	8d 81       	ldd	r24, Y+5	; 0x05
    569a:	9e 81       	ldd	r25, Y+6	; 0x06
    569c:	01 97       	sbiw	r24, 0x01	; 1
    569e:	9e 83       	std	Y+6, r25	; 0x06
    56a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a2:	8d 81       	ldd	r24, Y+5	; 0x05
    56a4:	9e 81       	ldd	r25, Y+6	; 0x06
    56a6:	00 97       	sbiw	r24, 0x00	; 0
    56a8:	69 f7       	brne	.-38     	; 0x5684 <LCD_SendData+0xd0>
    56aa:	14 c0       	rjmp	.+40     	; 0x56d4 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ac:	6f 81       	ldd	r22, Y+7	; 0x07
    56ae:	78 85       	ldd	r23, Y+8	; 0x08
    56b0:	89 85       	ldd	r24, Y+9	; 0x09
    56b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56b8:	dc 01       	movw	r26, r24
    56ba:	cb 01       	movw	r24, r22
    56bc:	9e 83       	std	Y+6, r25	; 0x06
    56be:	8d 83       	std	Y+5, r24	; 0x05
    56c0:	8d 81       	ldd	r24, Y+5	; 0x05
    56c2:	9e 81       	ldd	r25, Y+6	; 0x06
    56c4:	9a 83       	std	Y+2, r25	; 0x02
    56c6:	89 83       	std	Y+1, r24	; 0x01
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	9a 81       	ldd	r25, Y+2	; 0x02
    56cc:	01 97       	sbiw	r24, 0x01	; 1
    56ce:	f1 f7       	brne	.-4      	; 0x56cc <LCD_SendData+0x118>
    56d0:	9a 83       	std	Y+2, r25	; 0x02
    56d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT ,LCD_E_PIN , DIO_LOW);
    56d4:	82 e0       	ldi	r24, 0x02	; 2
    56d6:	62 e0       	ldi	r22, 0x02	; 2
    56d8:	40 e0       	ldi	r20, 0x00	; 0
    56da:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <MDIO_vSetPinVal>
}
    56de:	2f 96       	adiw	r28, 0x0f	; 15
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	de bf       	out	0x3e, r29	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	cd bf       	out	0x3d, r28	; 61
    56ea:	cf 91       	pop	r28
    56ec:	df 91       	pop	r29
    56ee:	08 95       	ret

000056f0 <LCD_Init>:

void LCD_Init(void)
{
    56f0:	0f 93       	push	r16
    56f2:	1f 93       	push	r17
    56f4:	df 93       	push	r29
    56f6:	cf 93       	push	r28
    56f8:	cd b7       	in	r28, 0x3d	; 61
    56fa:	de b7       	in	r29, 0x3e	; 62
    56fc:	c6 54       	subi	r28, 0x46	; 70
    56fe:	d0 40       	sbci	r29, 0x00	; 0
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	fe 01       	movw	r30, r28
    570c:	ed 5b       	subi	r30, 0xBD	; 189
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	a0 e2       	ldi	r26, 0x20	; 32
    5716:	b2 e4       	ldi	r27, 0x42	; 66
    5718:	80 83       	st	Z, r24
    571a:	91 83       	std	Z+1, r25	; 0x01
    571c:	a2 83       	std	Z+2, r26	; 0x02
    571e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5720:	8e 01       	movw	r16, r28
    5722:	01 5c       	subi	r16, 0xC1	; 193
    5724:	1f 4f       	sbci	r17, 0xFF	; 255
    5726:	fe 01       	movw	r30, r28
    5728:	ed 5b       	subi	r30, 0xBD	; 189
    572a:	ff 4f       	sbci	r31, 0xFF	; 255
    572c:	60 81       	ld	r22, Z
    572e:	71 81       	ldd	r23, Z+1	; 0x01
    5730:	82 81       	ldd	r24, Z+2	; 0x02
    5732:	93 81       	ldd	r25, Z+3	; 0x03
    5734:	20 e0       	ldi	r18, 0x00	; 0
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	4a ef       	ldi	r20, 0xFA	; 250
    573a:	54 e4       	ldi	r21, 0x44	; 68
    573c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5740:	dc 01       	movw	r26, r24
    5742:	cb 01       	movw	r24, r22
    5744:	f8 01       	movw	r30, r16
    5746:	80 83       	st	Z, r24
    5748:	91 83       	std	Z+1, r25	; 0x01
    574a:	a2 83       	std	Z+2, r26	; 0x02
    574c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    574e:	fe 01       	movw	r30, r28
    5750:	ff 96       	adiw	r30, 0x3f	; 63
    5752:	60 81       	ld	r22, Z
    5754:	71 81       	ldd	r23, Z+1	; 0x01
    5756:	82 81       	ldd	r24, Z+2	; 0x02
    5758:	93 81       	ldd	r25, Z+3	; 0x03
    575a:	20 e0       	ldi	r18, 0x00	; 0
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	40 e8       	ldi	r20, 0x80	; 128
    5760:	5f e3       	ldi	r21, 0x3F	; 63
    5762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5766:	88 23       	and	r24, r24
    5768:	2c f4       	brge	.+10     	; 0x5774 <LCD_Init+0x84>
		__ticks = 1;
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	9e af       	std	Y+62, r25	; 0x3e
    5770:	8d af       	std	Y+61, r24	; 0x3d
    5772:	46 c0       	rjmp	.+140    	; 0x5800 <LCD_Init+0x110>
	else if (__tmp > 65535)
    5774:	fe 01       	movw	r30, r28
    5776:	ff 96       	adiw	r30, 0x3f	; 63
    5778:	60 81       	ld	r22, Z
    577a:	71 81       	ldd	r23, Z+1	; 0x01
    577c:	82 81       	ldd	r24, Z+2	; 0x02
    577e:	93 81       	ldd	r25, Z+3	; 0x03
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	3f ef       	ldi	r19, 0xFF	; 255
    5784:	4f e7       	ldi	r20, 0x7F	; 127
    5786:	57 e4       	ldi	r21, 0x47	; 71
    5788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    578c:	18 16       	cp	r1, r24
    578e:	64 f5       	brge	.+88     	; 0x57e8 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5790:	fe 01       	movw	r30, r28
    5792:	ed 5b       	subi	r30, 0xBD	; 189
    5794:	ff 4f       	sbci	r31, 0xFF	; 255
    5796:	60 81       	ld	r22, Z
    5798:	71 81       	ldd	r23, Z+1	; 0x01
    579a:	82 81       	ldd	r24, Z+2	; 0x02
    579c:	93 81       	ldd	r25, Z+3	; 0x03
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	40 e2       	ldi	r20, 0x20	; 32
    57a4:	51 e4       	ldi	r21, 0x41	; 65
    57a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	bc 01       	movw	r22, r24
    57b0:	cd 01       	movw	r24, r26
    57b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b6:	dc 01       	movw	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	9e af       	std	Y+62, r25	; 0x3e
    57bc:	8d af       	std	Y+61, r24	; 0x3d
    57be:	0f c0       	rjmp	.+30     	; 0x57de <LCD_Init+0xee>
    57c0:	88 ec       	ldi	r24, 0xC8	; 200
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	9c af       	std	Y+60, r25	; 0x3c
    57c6:	8b af       	std	Y+59, r24	; 0x3b
    57c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    57ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <LCD_Init+0xdc>
    57d0:	9c af       	std	Y+60, r25	; 0x3c
    57d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    57d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	9e af       	std	Y+62, r25	; 0x3e
    57dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57de:	8d ad       	ldd	r24, Y+61	; 0x3d
    57e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	69 f7       	brne	.-38     	; 0x57c0 <LCD_Init+0xd0>
    57e6:	16 c0       	rjmp	.+44     	; 0x5814 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e8:	fe 01       	movw	r30, r28
    57ea:	ff 96       	adiw	r30, 0x3f	; 63
    57ec:	60 81       	ld	r22, Z
    57ee:	71 81       	ldd	r23, Z+1	; 0x01
    57f0:	82 81       	ldd	r24, Z+2	; 0x02
    57f2:	93 81       	ldd	r25, Z+3	; 0x03
    57f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	9e af       	std	Y+62, r25	; 0x3e
    57fe:	8d af       	std	Y+61, r24	; 0x3d
    5800:	8d ad       	ldd	r24, Y+61	; 0x3d
    5802:	9e ad       	ldd	r25, Y+62	; 0x3e
    5804:	9a af       	std	Y+58, r25	; 0x3a
    5806:	89 af       	std	Y+57, r24	; 0x39
    5808:	89 ad       	ldd	r24, Y+57	; 0x39
    580a:	9a ad       	ldd	r25, Y+58	; 0x3a
    580c:	01 97       	sbiw	r24, 0x01	; 1
    580e:	f1 f7       	brne	.-4      	; 0x580c <LCD_Init+0x11c>
    5810:	9a af       	std	Y+58, r25	; 0x3a
    5812:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);

	LCD_SendCommand(0b00111000);
    5814:	88 e3       	ldi	r24, 0x38	; 56
    5816:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	a0 e8       	ldi	r26, 0x80	; 128
    5820:	bf e3       	ldi	r27, 0x3F	; 63
    5822:	8d ab       	std	Y+53, r24	; 0x35
    5824:	9e ab       	std	Y+54, r25	; 0x36
    5826:	af ab       	std	Y+55, r26	; 0x37
    5828:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    582a:	6d a9       	ldd	r22, Y+53	; 0x35
    582c:	7e a9       	ldd	r23, Y+54	; 0x36
    582e:	8f a9       	ldd	r24, Y+55	; 0x37
    5830:	98 ad       	ldd	r25, Y+56	; 0x38
    5832:	20 e0       	ldi	r18, 0x00	; 0
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	4a ef       	ldi	r20, 0xFA	; 250
    5838:	54 e4       	ldi	r21, 0x44	; 68
    583a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    583e:	dc 01       	movw	r26, r24
    5840:	cb 01       	movw	r24, r22
    5842:	89 ab       	std	Y+49, r24	; 0x31
    5844:	9a ab       	std	Y+50, r25	; 0x32
    5846:	ab ab       	std	Y+51, r26	; 0x33
    5848:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    584a:	69 a9       	ldd	r22, Y+49	; 0x31
    584c:	7a a9       	ldd	r23, Y+50	; 0x32
    584e:	8b a9       	ldd	r24, Y+51	; 0x33
    5850:	9c a9       	ldd	r25, Y+52	; 0x34
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 e8       	ldi	r20, 0x80	; 128
    5858:	5f e3       	ldi	r21, 0x3F	; 63
    585a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    585e:	88 23       	and	r24, r24
    5860:	2c f4       	brge	.+10     	; 0x586c <LCD_Init+0x17c>
		__ticks = 1;
    5862:	81 e0       	ldi	r24, 0x01	; 1
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	98 ab       	std	Y+48, r25	; 0x30
    5868:	8f a7       	std	Y+47, r24	; 0x2f
    586a:	3f c0       	rjmp	.+126    	; 0x58ea <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    586c:	69 a9       	ldd	r22, Y+49	; 0x31
    586e:	7a a9       	ldd	r23, Y+50	; 0x32
    5870:	8b a9       	ldd	r24, Y+51	; 0x33
    5872:	9c a9       	ldd	r25, Y+52	; 0x34
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	3f ef       	ldi	r19, 0xFF	; 255
    5878:	4f e7       	ldi	r20, 0x7F	; 127
    587a:	57 e4       	ldi	r21, 0x47	; 71
    587c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5880:	18 16       	cp	r1, r24
    5882:	4c f5       	brge	.+82     	; 0x58d6 <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5884:	6d a9       	ldd	r22, Y+53	; 0x35
    5886:	7e a9       	ldd	r23, Y+54	; 0x36
    5888:	8f a9       	ldd	r24, Y+55	; 0x37
    588a:	98 ad       	ldd	r25, Y+56	; 0x38
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	40 e2       	ldi	r20, 0x20	; 32
    5892:	51 e4       	ldi	r21, 0x41	; 65
    5894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	bc 01       	movw	r22, r24
    589e:	cd 01       	movw	r24, r26
    58a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	98 ab       	std	Y+48, r25	; 0x30
    58aa:	8f a7       	std	Y+47, r24	; 0x2f
    58ac:	0f c0       	rjmp	.+30     	; 0x58cc <LCD_Init+0x1dc>
    58ae:	88 ec       	ldi	r24, 0xC8	; 200
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	9e a7       	std	Y+46, r25	; 0x2e
    58b4:	8d a7       	std	Y+45, r24	; 0x2d
    58b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    58b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    58ba:	01 97       	sbiw	r24, 0x01	; 1
    58bc:	f1 f7       	brne	.-4      	; 0x58ba <LCD_Init+0x1ca>
    58be:	9e a7       	std	Y+46, r25	; 0x2e
    58c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    58c4:	98 a9       	ldd	r25, Y+48	; 0x30
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	98 ab       	std	Y+48, r25	; 0x30
    58ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    58ce:	98 a9       	ldd	r25, Y+48	; 0x30
    58d0:	00 97       	sbiw	r24, 0x00	; 0
    58d2:	69 f7       	brne	.-38     	; 0x58ae <LCD_Init+0x1be>
    58d4:	14 c0       	rjmp	.+40     	; 0x58fe <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58d6:	69 a9       	ldd	r22, Y+49	; 0x31
    58d8:	7a a9       	ldd	r23, Y+50	; 0x32
    58da:	8b a9       	ldd	r24, Y+51	; 0x33
    58dc:	9c a9       	ldd	r25, Y+52	; 0x34
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	98 ab       	std	Y+48, r25	; 0x30
    58e8:	8f a7       	std	Y+47, r24	; 0x2f
    58ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    58ec:	98 a9       	ldd	r25, Y+48	; 0x30
    58ee:	9c a7       	std	Y+44, r25	; 0x2c
    58f0:	8b a7       	std	Y+43, r24	; 0x2b
    58f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    58f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    58f6:	01 97       	sbiw	r24, 0x01	; 1
    58f8:	f1 f7       	brne	.-4      	; 0x58f6 <LCD_Init+0x206>
    58fa:	9c a7       	std	Y+44, r25	; 0x2c
    58fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_SendCommand(0b00001100);
    58fe:	8c e0       	ldi	r24, 0x0C	; 12
    5900:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	a0 e8       	ldi	r26, 0x80	; 128
    590a:	bf e3       	ldi	r27, 0x3F	; 63
    590c:	8f a3       	std	Y+39, r24	; 0x27
    590e:	98 a7       	std	Y+40, r25	; 0x28
    5910:	a9 a7       	std	Y+41, r26	; 0x29
    5912:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5914:	6f a1       	ldd	r22, Y+39	; 0x27
    5916:	78 a5       	ldd	r23, Y+40	; 0x28
    5918:	89 a5       	ldd	r24, Y+41	; 0x29
    591a:	9a a5       	ldd	r25, Y+42	; 0x2a
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	4a ef       	ldi	r20, 0xFA	; 250
    5922:	54 e4       	ldi	r21, 0x44	; 68
    5924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	8b a3       	std	Y+35, r24	; 0x23
    592e:	9c a3       	std	Y+36, r25	; 0x24
    5930:	ad a3       	std	Y+37, r26	; 0x25
    5932:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5934:	6b a1       	ldd	r22, Y+35	; 0x23
    5936:	7c a1       	ldd	r23, Y+36	; 0x24
    5938:	8d a1       	ldd	r24, Y+37	; 0x25
    593a:	9e a1       	ldd	r25, Y+38	; 0x26
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	30 e0       	ldi	r19, 0x00	; 0
    5940:	40 e8       	ldi	r20, 0x80	; 128
    5942:	5f e3       	ldi	r21, 0x3F	; 63
    5944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5948:	88 23       	and	r24, r24
    594a:	2c f4       	brge	.+10     	; 0x5956 <LCD_Init+0x266>
		__ticks = 1;
    594c:	81 e0       	ldi	r24, 0x01	; 1
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	9a a3       	std	Y+34, r25	; 0x22
    5952:	89 a3       	std	Y+33, r24	; 0x21
    5954:	3f c0       	rjmp	.+126    	; 0x59d4 <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    5956:	6b a1       	ldd	r22, Y+35	; 0x23
    5958:	7c a1       	ldd	r23, Y+36	; 0x24
    595a:	8d a1       	ldd	r24, Y+37	; 0x25
    595c:	9e a1       	ldd	r25, Y+38	; 0x26
    595e:	20 e0       	ldi	r18, 0x00	; 0
    5960:	3f ef       	ldi	r19, 0xFF	; 255
    5962:	4f e7       	ldi	r20, 0x7F	; 127
    5964:	57 e4       	ldi	r21, 0x47	; 71
    5966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    596a:	18 16       	cp	r1, r24
    596c:	4c f5       	brge	.+82     	; 0x59c0 <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    596e:	6f a1       	ldd	r22, Y+39	; 0x27
    5970:	78 a5       	ldd	r23, Y+40	; 0x28
    5972:	89 a5       	ldd	r24, Y+41	; 0x29
    5974:	9a a5       	ldd	r25, Y+42	; 0x2a
    5976:	20 e0       	ldi	r18, 0x00	; 0
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	40 e2       	ldi	r20, 0x20	; 32
    597c:	51 e4       	ldi	r21, 0x41	; 65
    597e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5982:	dc 01       	movw	r26, r24
    5984:	cb 01       	movw	r24, r22
    5986:	bc 01       	movw	r22, r24
    5988:	cd 01       	movw	r24, r26
    598a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    598e:	dc 01       	movw	r26, r24
    5990:	cb 01       	movw	r24, r22
    5992:	9a a3       	std	Y+34, r25	; 0x22
    5994:	89 a3       	std	Y+33, r24	; 0x21
    5996:	0f c0       	rjmp	.+30     	; 0x59b6 <LCD_Init+0x2c6>
    5998:	88 ec       	ldi	r24, 0xC8	; 200
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	98 a3       	std	Y+32, r25	; 0x20
    599e:	8f 8f       	std	Y+31, r24	; 0x1f
    59a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59a2:	98 a1       	ldd	r25, Y+32	; 0x20
    59a4:	01 97       	sbiw	r24, 0x01	; 1
    59a6:	f1 f7       	brne	.-4      	; 0x59a4 <LCD_Init+0x2b4>
    59a8:	98 a3       	std	Y+32, r25	; 0x20
    59aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ac:	89 a1       	ldd	r24, Y+33	; 0x21
    59ae:	9a a1       	ldd	r25, Y+34	; 0x22
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	9a a3       	std	Y+34, r25	; 0x22
    59b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b6:	89 a1       	ldd	r24, Y+33	; 0x21
    59b8:	9a a1       	ldd	r25, Y+34	; 0x22
    59ba:	00 97       	sbiw	r24, 0x00	; 0
    59bc:	69 f7       	brne	.-38     	; 0x5998 <LCD_Init+0x2a8>
    59be:	14 c0       	rjmp	.+40     	; 0x59e8 <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c0:	6b a1       	ldd	r22, Y+35	; 0x23
    59c2:	7c a1       	ldd	r23, Y+36	; 0x24
    59c4:	8d a1       	ldd	r24, Y+37	; 0x25
    59c6:	9e a1       	ldd	r25, Y+38	; 0x26
    59c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	9a a3       	std	Y+34, r25	; 0x22
    59d2:	89 a3       	std	Y+33, r24	; 0x21
    59d4:	89 a1       	ldd	r24, Y+33	; 0x21
    59d6:	9a a1       	ldd	r25, Y+34	; 0x22
    59d8:	9e 8f       	std	Y+30, r25	; 0x1e
    59da:	8d 8f       	std	Y+29, r24	; 0x1d
    59dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e0:	01 97       	sbiw	r24, 0x01	; 1
    59e2:	f1 f7       	brne	.-4      	; 0x59e0 <LCD_Init+0x2f0>
    59e4:	9e 8f       	std	Y+30, r25	; 0x1e
    59e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_SendCommand(0b00000001);
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
    59ee:	80 e0       	ldi	r24, 0x00	; 0
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	a0 e0       	ldi	r26, 0x00	; 0
    59f4:	b0 e4       	ldi	r27, 0x40	; 64
    59f6:	89 8f       	std	Y+25, r24	; 0x19
    59f8:	9a 8f       	std	Y+26, r25	; 0x1a
    59fa:	ab 8f       	std	Y+27, r26	; 0x1b
    59fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59fe:	69 8d       	ldd	r22, Y+25	; 0x19
    5a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a06:	20 e0       	ldi	r18, 0x00	; 0
    5a08:	30 e0       	ldi	r19, 0x00	; 0
    5a0a:	4a ef       	ldi	r20, 0xFA	; 250
    5a0c:	54 e4       	ldi	r21, 0x44	; 68
    5a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a12:	dc 01       	movw	r26, r24
    5a14:	cb 01       	movw	r24, r22
    5a16:	8d 8b       	std	Y+21, r24	; 0x15
    5a18:	9e 8b       	std	Y+22, r25	; 0x16
    5a1a:	af 8b       	std	Y+23, r26	; 0x17
    5a1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a20:	7e 89       	ldd	r23, Y+22	; 0x16
    5a22:	8f 89       	ldd	r24, Y+23	; 0x17
    5a24:	98 8d       	ldd	r25, Y+24	; 0x18
    5a26:	20 e0       	ldi	r18, 0x00	; 0
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	40 e8       	ldi	r20, 0x80	; 128
    5a2c:	5f e3       	ldi	r21, 0x3F	; 63
    5a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a32:	88 23       	and	r24, r24
    5a34:	2c f4       	brge	.+10     	; 0x5a40 <LCD_Init+0x350>
		__ticks = 1;
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	9c 8b       	std	Y+20, r25	; 0x14
    5a3c:	8b 8b       	std	Y+19, r24	; 0x13
    5a3e:	3f c0       	rjmp	.+126    	; 0x5abe <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    5a40:	6d 89       	ldd	r22, Y+21	; 0x15
    5a42:	7e 89       	ldd	r23, Y+22	; 0x16
    5a44:	8f 89       	ldd	r24, Y+23	; 0x17
    5a46:	98 8d       	ldd	r25, Y+24	; 0x18
    5a48:	20 e0       	ldi	r18, 0x00	; 0
    5a4a:	3f ef       	ldi	r19, 0xFF	; 255
    5a4c:	4f e7       	ldi	r20, 0x7F	; 127
    5a4e:	57 e4       	ldi	r21, 0x47	; 71
    5a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a54:	18 16       	cp	r1, r24
    5a56:	4c f5       	brge	.+82     	; 0x5aaa <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a58:	69 8d       	ldd	r22, Y+25	; 0x19
    5a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a60:	20 e0       	ldi	r18, 0x00	; 0
    5a62:	30 e0       	ldi	r19, 0x00	; 0
    5a64:	40 e2       	ldi	r20, 0x20	; 32
    5a66:	51 e4       	ldi	r21, 0x41	; 65
    5a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6c:	dc 01       	movw	r26, r24
    5a6e:	cb 01       	movw	r24, r22
    5a70:	bc 01       	movw	r22, r24
    5a72:	cd 01       	movw	r24, r26
    5a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	9c 8b       	std	Y+20, r25	; 0x14
    5a7e:	8b 8b       	std	Y+19, r24	; 0x13
    5a80:	0f c0       	rjmp	.+30     	; 0x5aa0 <LCD_Init+0x3b0>
    5a82:	88 ec       	ldi	r24, 0xC8	; 200
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	9a 8b       	std	Y+18, r25	; 0x12
    5a88:	89 8b       	std	Y+17, r24	; 0x11
    5a8a:	89 89       	ldd	r24, Y+17	; 0x11
    5a8c:	9a 89       	ldd	r25, Y+18	; 0x12
    5a8e:	01 97       	sbiw	r24, 0x01	; 1
    5a90:	f1 f7       	brne	.-4      	; 0x5a8e <LCD_Init+0x39e>
    5a92:	9a 8b       	std	Y+18, r25	; 0x12
    5a94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a96:	8b 89       	ldd	r24, Y+19	; 0x13
    5a98:	9c 89       	ldd	r25, Y+20	; 0x14
    5a9a:	01 97       	sbiw	r24, 0x01	; 1
    5a9c:	9c 8b       	std	Y+20, r25	; 0x14
    5a9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    5aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    5aa4:	00 97       	sbiw	r24, 0x00	; 0
    5aa6:	69 f7       	brne	.-38     	; 0x5a82 <LCD_Init+0x392>
    5aa8:	14 c0       	rjmp	.+40     	; 0x5ad2 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    5aac:	7e 89       	ldd	r23, Y+22	; 0x16
    5aae:	8f 89       	ldd	r24, Y+23	; 0x17
    5ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab6:	dc 01       	movw	r26, r24
    5ab8:	cb 01       	movw	r24, r22
    5aba:	9c 8b       	std	Y+20, r25	; 0x14
    5abc:	8b 8b       	std	Y+19, r24	; 0x13
    5abe:	8b 89       	ldd	r24, Y+19	; 0x13
    5ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    5ac2:	98 8b       	std	Y+16, r25	; 0x10
    5ac4:	8f 87       	std	Y+15, r24	; 0x0f
    5ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ac8:	98 89       	ldd	r25, Y+16	; 0x10
    5aca:	01 97       	sbiw	r24, 0x01	; 1
    5acc:	f1 f7       	brne	.-4      	; 0x5aca <LCD_Init+0x3da>
    5ace:	98 8b       	std	Y+16, r25	; 0x10
    5ad0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_SendCommand(0b00000110);
    5ad2:	86 e0       	ldi	r24, 0x06	; 6
    5ad4:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
    5ad8:	80 e0       	ldi	r24, 0x00	; 0
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	a0 e8       	ldi	r26, 0x80	; 128
    5ade:	bf e3       	ldi	r27, 0x3F	; 63
    5ae0:	8b 87       	std	Y+11, r24	; 0x0b
    5ae2:	9c 87       	std	Y+12, r25	; 0x0c
    5ae4:	ad 87       	std	Y+13, r26	; 0x0d
    5ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	30 e0       	ldi	r19, 0x00	; 0
    5af4:	4a ef       	ldi	r20, 0xFA	; 250
    5af6:	54 e4       	ldi	r21, 0x44	; 68
    5af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5afc:	dc 01       	movw	r26, r24
    5afe:	cb 01       	movw	r24, r22
    5b00:	8f 83       	std	Y+7, r24	; 0x07
    5b02:	98 87       	std	Y+8, r25	; 0x08
    5b04:	a9 87       	std	Y+9, r26	; 0x09
    5b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b08:	6f 81       	ldd	r22, Y+7	; 0x07
    5b0a:	78 85       	ldd	r23, Y+8	; 0x08
    5b0c:	89 85       	ldd	r24, Y+9	; 0x09
    5b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	40 e8       	ldi	r20, 0x80	; 128
    5b16:	5f e3       	ldi	r21, 0x3F	; 63
    5b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b1c:	88 23       	and	r24, r24
    5b1e:	2c f4       	brge	.+10     	; 0x5b2a <LCD_Init+0x43a>
		__ticks = 1;
    5b20:	81 e0       	ldi	r24, 0x01	; 1
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	9e 83       	std	Y+6, r25	; 0x06
    5b26:	8d 83       	std	Y+5, r24	; 0x05
    5b28:	3f c0       	rjmp	.+126    	; 0x5ba8 <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    5b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    5b2c:	78 85       	ldd	r23, Y+8	; 0x08
    5b2e:	89 85       	ldd	r24, Y+9	; 0x09
    5b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	3f ef       	ldi	r19, 0xFF	; 255
    5b36:	4f e7       	ldi	r20, 0x7F	; 127
    5b38:	57 e4       	ldi	r21, 0x47	; 71
    5b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b3e:	18 16       	cp	r1, r24
    5b40:	4c f5       	brge	.+82     	; 0x5b94 <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	40 e2       	ldi	r20, 0x20	; 32
    5b50:	51 e4       	ldi	r21, 0x41	; 65
    5b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	bc 01       	movw	r22, r24
    5b5c:	cd 01       	movw	r24, r26
    5b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b62:	dc 01       	movw	r26, r24
    5b64:	cb 01       	movw	r24, r22
    5b66:	9e 83       	std	Y+6, r25	; 0x06
    5b68:	8d 83       	std	Y+5, r24	; 0x05
    5b6a:	0f c0       	rjmp	.+30     	; 0x5b8a <LCD_Init+0x49a>
    5b6c:	88 ec       	ldi	r24, 0xC8	; 200
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	9c 83       	std	Y+4, r25	; 0x04
    5b72:	8b 83       	std	Y+3, r24	; 0x03
    5b74:	8b 81       	ldd	r24, Y+3	; 0x03
    5b76:	9c 81       	ldd	r25, Y+4	; 0x04
    5b78:	01 97       	sbiw	r24, 0x01	; 1
    5b7a:	f1 f7       	brne	.-4      	; 0x5b78 <LCD_Init+0x488>
    5b7c:	9c 83       	std	Y+4, r25	; 0x04
    5b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b80:	8d 81       	ldd	r24, Y+5	; 0x05
    5b82:	9e 81       	ldd	r25, Y+6	; 0x06
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	9e 83       	std	Y+6, r25	; 0x06
    5b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b8e:	00 97       	sbiw	r24, 0x00	; 0
    5b90:	69 f7       	brne	.-38     	; 0x5b6c <LCD_Init+0x47c>
    5b92:	14 c0       	rjmp	.+40     	; 0x5bbc <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b94:	6f 81       	ldd	r22, Y+7	; 0x07
    5b96:	78 85       	ldd	r23, Y+8	; 0x08
    5b98:	89 85       	ldd	r24, Y+9	; 0x09
    5b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	cb 01       	movw	r24, r22
    5ba4:	9e 83       	std	Y+6, r25	; 0x06
    5ba6:	8d 83       	std	Y+5, r24	; 0x05
    5ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    5baa:	9e 81       	ldd	r25, Y+6	; 0x06
    5bac:	9a 83       	std	Y+2, r25	; 0x02
    5bae:	89 83       	std	Y+1, r24	; 0x01
    5bb0:	89 81       	ldd	r24, Y+1	; 0x01
    5bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb4:	01 97       	sbiw	r24, 0x01	; 1
    5bb6:	f1 f7       	brne	.-4      	; 0x5bb4 <LCD_Init+0x4c4>
    5bb8:	9a 83       	std	Y+2, r25	; 0x02
    5bba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    5bbc:	ca 5b       	subi	r28, 0xBA	; 186
    5bbe:	df 4f       	sbci	r29, 0xFF	; 255
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	f8 94       	cli
    5bc4:	de bf       	out	0x3e, r29	; 62
    5bc6:	0f be       	out	0x3f, r0	; 63
    5bc8:	cd bf       	out	0x3d, r28	; 61
    5bca:	cf 91       	pop	r28
    5bcc:	df 91       	pop	r29
    5bce:	1f 91       	pop	r17
    5bd0:	0f 91       	pop	r16
    5bd2:	08 95       	ret

00005bd4 <LCD_SendString>:

void LCD_SendString(const u8 *String)
{
    5bd4:	df 93       	push	r29
    5bd6:	cf 93       	push	r28
    5bd8:	00 d0       	rcall	.+0      	; 0x5bda <LCD_SendString+0x6>
    5bda:	0f 92       	push	r0
    5bdc:	cd b7       	in	r28, 0x3d	; 61
    5bde:	de b7       	in	r29, 0x3e	; 62
    5be0:	9b 83       	std	Y+3, r25	; 0x03
    5be2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    5be4:	19 82       	std	Y+1, r1	; 0x01
    5be6:	0e c0       	rjmp	.+28     	; 0x5c04 <LCD_SendString+0x30>
	while(String[Counter] != '\0')
	{
		LCD_SendData(String[Counter]);
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	28 2f       	mov	r18, r24
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	e2 0f       	add	r30, r18
    5bf6:	f3 1f       	adc	r31, r19
    5bf8:	80 81       	ld	r24, Z
    5bfa:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <LCD_SendData>
		Counter++;
    5bfe:	89 81       	ldd	r24, Y+1	; 0x01
    5c00:	8f 5f       	subi	r24, 0xFF	; 255
    5c02:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_SendString(const u8 *String)
{
	u8 Counter=0;
	while(String[Counter] != '\0')
    5c04:	89 81       	ldd	r24, Y+1	; 0x01
    5c06:	28 2f       	mov	r18, r24
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c0e:	fc 01       	movw	r30, r24
    5c10:	e2 0f       	add	r30, r18
    5c12:	f3 1f       	adc	r31, r19
    5c14:	80 81       	ld	r24, Z
    5c16:	88 23       	and	r24, r24
    5c18:	39 f7       	brne	.-50     	; 0x5be8 <LCD_SendString+0x14>
	{
		LCD_SendData(String[Counter]);
		Counter++;
	}
}
    5c1a:	0f 90       	pop	r0
    5c1c:	0f 90       	pop	r0
    5c1e:	0f 90       	pop	r0
    5c20:	cf 91       	pop	r28
    5c22:	df 91       	pop	r29
    5c24:	08 95       	ret

00005c26 <LCD_GoToXY>:

void LCD_GoToXY(u8 Row , u8 Col)
{
    5c26:	df 93       	push	r29
    5c28:	cf 93       	push	r28
    5c2a:	00 d0       	rcall	.+0      	; 0x5c2c <LCD_GoToXY+0x6>
    5c2c:	00 d0       	rcall	.+0      	; 0x5c2e <LCD_GoToXY+0x8>
    5c2e:	0f 92       	push	r0
    5c30:	cd b7       	in	r28, 0x3d	; 61
    5c32:	de b7       	in	r29, 0x3e	; 62
    5c34:	8a 83       	std	Y+2, r24	; 0x02
    5c36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Position;
	if(Row == 0 || Row == 1)
    5c38:	8a 81       	ldd	r24, Y+2	; 0x02
    5c3a:	88 23       	and	r24, r24
    5c3c:	19 f0       	breq	.+6      	; 0x5c44 <LCD_GoToXY+0x1e>
    5c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c40:	81 30       	cpi	r24, 0x01	; 1
    5c42:	e1 f4       	brne	.+56     	; 0x5c7c <LCD_GoToXY+0x56>
	{
		if(Col >= 0 && Col <= 15)
    5c44:	8b 81       	ldd	r24, Y+3	; 0x03
    5c46:	80 31       	cpi	r24, 0x10	; 16
    5c48:	a8 f4       	brcc	.+42     	; 0x5c74 <LCD_GoToXY+0x4e>
		{
			switch(Row)
    5c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4c:	28 2f       	mov	r18, r24
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	3d 83       	std	Y+5, r19	; 0x05
    5c52:	2c 83       	std	Y+4, r18	; 0x04
    5c54:	8c 81       	ldd	r24, Y+4	; 0x04
    5c56:	9d 81       	ldd	r25, Y+5	; 0x05
    5c58:	00 97       	sbiw	r24, 0x00	; 0
    5c5a:	31 f0       	breq	.+12     	; 0x5c68 <LCD_GoToXY+0x42>
    5c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    5c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    5c60:	21 30       	cpi	r18, 0x01	; 1
    5c62:	31 05       	cpc	r19, r1
    5c64:	21 f0       	breq	.+8      	; 0x5c6e <LCD_GoToXY+0x48>
    5c66:	06 c0       	rjmp	.+12     	; 0x5c74 <LCD_GoToXY+0x4e>
			{

			case 0:
				Position=0x00 + Col;
    5c68:	8b 81       	ldd	r24, Y+3	; 0x03
    5c6a:	89 83       	std	Y+1, r24	; 0x01
    5c6c:	03 c0       	rjmp	.+6      	; 0x5c74 <LCD_GoToXY+0x4e>
				break;
			case 1:
				Position=0x40 + Col;
    5c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c70:	80 5c       	subi	r24, 0xC0	; 192
    5c72:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		LCD_SendCommand(128+Position);
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	80 58       	subi	r24, 0x80	; 128
    5c78:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
	}
}
    5c7c:	0f 90       	pop	r0
    5c7e:	0f 90       	pop	r0
    5c80:	0f 90       	pop	r0
    5c82:	0f 90       	pop	r0
    5c84:	0f 90       	pop	r0
    5c86:	cf 91       	pop	r28
    5c88:	df 91       	pop	r29
    5c8a:	08 95       	ret

00005c8c <LCD_ClearDisplay>:

void LCD_ClearDisplay(void)
{
    5c8c:	df 93       	push	r29
    5c8e:	cf 93       	push	r28
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
    5c94:	2e 97       	sbiw	r28, 0x0e	; 14
    5c96:	0f b6       	in	r0, 0x3f	; 63
    5c98:	f8 94       	cli
    5c9a:	de bf       	out	0x3e, r29	; 62
    5c9c:	0f be       	out	0x3f, r0	; 63
    5c9e:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(1);
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	0e 94 3c 2a 	call	0x5478	; 0x5478 <LCD_SendCommand>
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	a0 e0       	ldi	r26, 0x00	; 0
    5cac:	b0 e4       	ldi	r27, 0x40	; 64
    5cae:	8b 87       	std	Y+11, r24	; 0x0b
    5cb0:	9c 87       	std	Y+12, r25	; 0x0c
    5cb2:	ad 87       	std	Y+13, r26	; 0x0d
    5cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	30 e0       	ldi	r19, 0x00	; 0
    5cc2:	4a ef       	ldi	r20, 0xFA	; 250
    5cc4:	54 e4       	ldi	r21, 0x44	; 68
    5cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	8f 83       	std	Y+7, r24	; 0x07
    5cd0:	98 87       	std	Y+8, r25	; 0x08
    5cd2:	a9 87       	std	Y+9, r26	; 0x09
    5cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    5cd8:	78 85       	ldd	r23, Y+8	; 0x08
    5cda:	89 85       	ldd	r24, Y+9	; 0x09
    5cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e8       	ldi	r20, 0x80	; 128
    5ce4:	5f e3       	ldi	r21, 0x3F	; 63
    5ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5cea:	88 23       	and	r24, r24
    5cec:	2c f4       	brge	.+10     	; 0x5cf8 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	9e 83       	std	Y+6, r25	; 0x06
    5cf4:	8d 83       	std	Y+5, r24	; 0x05
    5cf6:	3f c0       	rjmp	.+126    	; 0x5d76 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    5cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    5cfa:	78 85       	ldd	r23, Y+8	; 0x08
    5cfc:	89 85       	ldd	r24, Y+9	; 0x09
    5cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	3f ef       	ldi	r19, 0xFF	; 255
    5d04:	4f e7       	ldi	r20, 0x7F	; 127
    5d06:	57 e4       	ldi	r21, 0x47	; 71
    5d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d0c:	18 16       	cp	r1, r24
    5d0e:	4c f5       	brge	.+82     	; 0x5d62 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e2       	ldi	r20, 0x20	; 32
    5d1e:	51 e4       	ldi	r21, 0x41	; 65
    5d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	bc 01       	movw	r22, r24
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	9e 83       	std	Y+6, r25	; 0x06
    5d36:	8d 83       	std	Y+5, r24	; 0x05
    5d38:	0f c0       	rjmp	.+30     	; 0x5d58 <LCD_ClearDisplay+0xcc>
    5d3a:	88 ec       	ldi	r24, 0xC8	; 200
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	9c 83       	std	Y+4, r25	; 0x04
    5d40:	8b 83       	std	Y+3, r24	; 0x03
    5d42:	8b 81       	ldd	r24, Y+3	; 0x03
    5d44:	9c 81       	ldd	r25, Y+4	; 0x04
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	f1 f7       	brne	.-4      	; 0x5d46 <LCD_ClearDisplay+0xba>
    5d4a:	9c 83       	std	Y+4, r25	; 0x04
    5d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d50:	9e 81       	ldd	r25, Y+6	; 0x06
    5d52:	01 97       	sbiw	r24, 0x01	; 1
    5d54:	9e 83       	std	Y+6, r25	; 0x06
    5d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d58:	8d 81       	ldd	r24, Y+5	; 0x05
    5d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d5c:	00 97       	sbiw	r24, 0x00	; 0
    5d5e:	69 f7       	brne	.-38     	; 0x5d3a <LCD_ClearDisplay+0xae>
    5d60:	14 c0       	rjmp	.+40     	; 0x5d8a <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d62:	6f 81       	ldd	r22, Y+7	; 0x07
    5d64:	78 85       	ldd	r23, Y+8	; 0x08
    5d66:	89 85       	ldd	r24, Y+9	; 0x09
    5d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d6e:	dc 01       	movw	r26, r24
    5d70:	cb 01       	movw	r24, r22
    5d72:	9e 83       	std	Y+6, r25	; 0x06
    5d74:	8d 83       	std	Y+5, r24	; 0x05
    5d76:	8d 81       	ldd	r24, Y+5	; 0x05
    5d78:	9e 81       	ldd	r25, Y+6	; 0x06
    5d7a:	9a 83       	std	Y+2, r25	; 0x02
    5d7c:	89 83       	std	Y+1, r24	; 0x01
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	9a 81       	ldd	r25, Y+2	; 0x02
    5d82:	01 97       	sbiw	r24, 0x01	; 1
    5d84:	f1 f7       	brne	.-4      	; 0x5d82 <LCD_ClearDisplay+0xf6>
    5d86:	9a 83       	std	Y+2, r25	; 0x02
    5d88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5d8a:	2e 96       	adiw	r28, 0x0e	; 14
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	f8 94       	cli
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	cd bf       	out	0x3d, r28	; 61
    5d96:	cf 91       	pop	r28
    5d98:	df 91       	pop	r29
    5d9a:	08 95       	ret

00005d9c <LCD_DisplayNumber>:

void LCD_DisplayNumber(u32 Number)
{
    5d9c:	df 93       	push	r29
    5d9e:	cf 93       	push	r28
    5da0:	00 d0       	rcall	.+0      	; 0x5da2 <LCD_DisplayNumber+0x6>
    5da2:	00 d0       	rcall	.+0      	; 0x5da4 <LCD_DisplayNumber+0x8>
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	9c 83       	std	Y+4, r25	; 0x04
    5daa:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    5dac:	81 e0       	ldi	r24, 0x01	; 1
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	9a 83       	std	Y+2, r25	; 0x02
    5db2:	89 83       	std	Y+1, r24	; 0x01
	if(Number == 0)
    5db4:	8b 81       	ldd	r24, Y+3	; 0x03
    5db6:	9c 81       	ldd	r25, Y+4	; 0x04
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	31 f5       	brne	.+76     	; 0x5e08 <LCD_DisplayNumber+0x6c>
	{
		LCD_SendData('0');
    5dbc:	80 e3       	ldi	r24, 0x30	; 48
    5dbe:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <LCD_SendData>
    5dc2:	22 c0       	rjmp	.+68     	; 0x5e08 <LCD_DisplayNumber+0x6c>
	}

	while(Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
    5dc4:	89 81       	ldd	r24, Y+1	; 0x01
    5dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc8:	9c 01       	movw	r18, r24
    5dca:	22 0f       	add	r18, r18
    5dcc:	33 1f       	adc	r19, r19
    5dce:	c9 01       	movw	r24, r18
    5dd0:	88 0f       	add	r24, r24
    5dd2:	99 1f       	adc	r25, r25
    5dd4:	88 0f       	add	r24, r24
    5dd6:	99 1f       	adc	r25, r25
    5dd8:	f9 01       	movw	r30, r18
    5dda:	e8 0f       	add	r30, r24
    5ddc:	f9 1f       	adc	r31, r25
    5dde:	8b 81       	ldd	r24, Y+3	; 0x03
    5de0:	9c 81       	ldd	r25, Y+4	; 0x04
    5de2:	2a e0       	ldi	r18, 0x0A	; 10
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	b9 01       	movw	r22, r18
    5de8:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <__udivmodhi4>
    5dec:	8e 0f       	add	r24, r30
    5dee:	9f 1f       	adc	r25, r31
    5df0:	9a 83       	std	Y+2, r25	; 0x02
    5df2:	89 83       	std	Y+1, r24	; 0x01
		Number = Number /10;
    5df4:	8b 81       	ldd	r24, Y+3	; 0x03
    5df6:	9c 81       	ldd	r25, Y+4	; 0x04
    5df8:	2a e0       	ldi	r18, 0x0A	; 10
    5dfa:	30 e0       	ldi	r19, 0x00	; 0
    5dfc:	b9 01       	movw	r22, r18
    5dfe:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <__udivmodhi4>
    5e02:	cb 01       	movw	r24, r22
    5e04:	9c 83       	std	Y+4, r25	; 0x04
    5e06:	8b 83       	std	Y+3, r24	; 0x03
	if(Number == 0)
	{
		LCD_SendData('0');
	}

	while(Number != 0)
    5e08:	8b 81       	ldd	r24, Y+3	; 0x03
    5e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e0c:	00 97       	sbiw	r24, 0x00	; 0
    5e0e:	d1 f6       	brne	.-76     	; 0x5dc4 <LCD_DisplayNumber+0x28>
    5e10:	14 c0       	rjmp	.+40     	; 0x5e3a <LCD_DisplayNumber+0x9e>
		Number = Number /10;
	}

	while(ReversedNum != 1)
	{
		LCD_SendData( (ReversedNum%10) + 48);
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	9a 81       	ldd	r25, Y+2	; 0x02
    5e16:	2a e0       	ldi	r18, 0x0A	; 10
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	b9 01       	movw	r22, r18
    5e1c:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <__udivmodhi4>
    5e20:	80 5d       	subi	r24, 0xD0	; 208
    5e22:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <LCD_SendData>
		ReversedNum= ReversedNum/10;
    5e26:	89 81       	ldd	r24, Y+1	; 0x01
    5e28:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2a:	2a e0       	ldi	r18, 0x0A	; 10
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	b9 01       	movw	r22, r18
    5e30:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <__udivmodhi4>
    5e34:	cb 01       	movw	r24, r22
    5e36:	9a 83       	std	Y+2, r25	; 0x02
    5e38:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (Number %10);
		Number = Number /10;
	}

	while(ReversedNum != 1)
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3e:	81 30       	cpi	r24, 0x01	; 1
    5e40:	91 05       	cpc	r25, r1
    5e42:	39 f7       	brne	.-50     	; 0x5e12 <LCD_DisplayNumber+0x76>
	{
		LCD_SendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    5e44:	0f 90       	pop	r0
    5e46:	0f 90       	pop	r0
    5e48:	0f 90       	pop	r0
    5e4a:	0f 90       	pop	r0
    5e4c:	cf 91       	pop	r28
    5e4e:	df 91       	pop	r29
    5e50:	08 95       	ret

00005e52 <__udivmodhi4>:
    5e52:	aa 1b       	sub	r26, r26
    5e54:	bb 1b       	sub	r27, r27
    5e56:	51 e1       	ldi	r21, 0x11	; 17
    5e58:	07 c0       	rjmp	.+14     	; 0x5e68 <__udivmodhi4_ep>

00005e5a <__udivmodhi4_loop>:
    5e5a:	aa 1f       	adc	r26, r26
    5e5c:	bb 1f       	adc	r27, r27
    5e5e:	a6 17       	cp	r26, r22
    5e60:	b7 07       	cpc	r27, r23
    5e62:	10 f0       	brcs	.+4      	; 0x5e68 <__udivmodhi4_ep>
    5e64:	a6 1b       	sub	r26, r22
    5e66:	b7 0b       	sbc	r27, r23

00005e68 <__udivmodhi4_ep>:
    5e68:	88 1f       	adc	r24, r24
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	5a 95       	dec	r21
    5e6e:	a9 f7       	brne	.-22     	; 0x5e5a <__udivmodhi4_loop>
    5e70:	80 95       	com	r24
    5e72:	90 95       	com	r25
    5e74:	bc 01       	movw	r22, r24
    5e76:	cd 01       	movw	r24, r26
    5e78:	08 95       	ret

00005e7a <__prologue_saves__>:
    5e7a:	2f 92       	push	r2
    5e7c:	3f 92       	push	r3
    5e7e:	4f 92       	push	r4
    5e80:	5f 92       	push	r5
    5e82:	6f 92       	push	r6
    5e84:	7f 92       	push	r7
    5e86:	8f 92       	push	r8
    5e88:	9f 92       	push	r9
    5e8a:	af 92       	push	r10
    5e8c:	bf 92       	push	r11
    5e8e:	cf 92       	push	r12
    5e90:	df 92       	push	r13
    5e92:	ef 92       	push	r14
    5e94:	ff 92       	push	r15
    5e96:	0f 93       	push	r16
    5e98:	1f 93       	push	r17
    5e9a:	cf 93       	push	r28
    5e9c:	df 93       	push	r29
    5e9e:	cd b7       	in	r28, 0x3d	; 61
    5ea0:	de b7       	in	r29, 0x3e	; 62
    5ea2:	ca 1b       	sub	r28, r26
    5ea4:	db 0b       	sbc	r29, r27
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	f8 94       	cli
    5eaa:	de bf       	out	0x3e, r29	; 62
    5eac:	0f be       	out	0x3f, r0	; 63
    5eae:	cd bf       	out	0x3d, r28	; 61
    5eb0:	09 94       	ijmp

00005eb2 <__epilogue_restores__>:
    5eb2:	2a 88       	ldd	r2, Y+18	; 0x12
    5eb4:	39 88       	ldd	r3, Y+17	; 0x11
    5eb6:	48 88       	ldd	r4, Y+16	; 0x10
    5eb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    5eba:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ebc:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ebe:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ec2:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ec4:	b9 84       	ldd	r11, Y+9	; 0x09
    5ec6:	c8 84       	ldd	r12, Y+8	; 0x08
    5ec8:	df 80       	ldd	r13, Y+7	; 0x07
    5eca:	ee 80       	ldd	r14, Y+6	; 0x06
    5ecc:	fd 80       	ldd	r15, Y+5	; 0x05
    5ece:	0c 81       	ldd	r16, Y+4	; 0x04
    5ed0:	1b 81       	ldd	r17, Y+3	; 0x03
    5ed2:	aa 81       	ldd	r26, Y+2	; 0x02
    5ed4:	b9 81       	ldd	r27, Y+1	; 0x01
    5ed6:	ce 0f       	add	r28, r30
    5ed8:	d1 1d       	adc	r29, r1
    5eda:	0f b6       	in	r0, 0x3f	; 63
    5edc:	f8 94       	cli
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	cd bf       	out	0x3d, r28	; 61
    5ee4:	ed 01       	movw	r28, r26
    5ee6:	08 95       	ret

00005ee8 <memcpy>:
    5ee8:	fb 01       	movw	r30, r22
    5eea:	dc 01       	movw	r26, r24
    5eec:	02 c0       	rjmp	.+4      	; 0x5ef2 <memcpy+0xa>
    5eee:	01 90       	ld	r0, Z+
    5ef0:	0d 92       	st	X+, r0
    5ef2:	41 50       	subi	r20, 0x01	; 1
    5ef4:	50 40       	sbci	r21, 0x00	; 0
    5ef6:	d8 f7       	brcc	.-10     	; 0x5eee <memcpy+0x6>
    5ef8:	08 95       	ret

00005efa <_exit>:
    5efa:	f8 94       	cli

00005efc <__stop_program>:
    5efc:	ff cf       	rjmp	.-2      	; 0x5efc <__stop_program>
